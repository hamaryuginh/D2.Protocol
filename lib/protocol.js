var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p)) d[p] = b[p];

    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
const ByteArray = require('bytearray-node');
var Protocol;
(function(Protocol) {
    var Binary64 = (function() {
        function Binary64(low, high) {
            if (low === void 0) {
                low = 0;
            }
            if (high === void 0) {
                high = 0;
            }
            this.high = high;
            this.low = low;
        }
        Binary64.prototype.div = function(n) {
            var modHigh = 0;
            modHigh = (this.high % n);
            var mod = (((this.low % n) + (modHigh * 6)) % n);
            this.high = (this.high / n);
            var newLow = (((modHigh * 4294967296) + this.low) / n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = newLow;
            return mod;
        };
        Binary64.prototype.mul = function(n) {
            var newLow = (Number(this.low) * n);
            this.high = (this.high * n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = (this.low * n);
        };
        Binary64.prototype.add = function(n) {
            var newLow = (Number(this.low) + n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = newLow;
        };
        Binary64.prototype.bitwiseNot = function() {
            this.low = ~(this.low);
            this.high = ~(this.high);
        };
        Binary64.CHAR_CODE_0 = '0'.charCodeAt(0);
        Binary64.CHAR_CODE_9 = '9'.charCodeAt(0);
        Binary64.CHAR_CODE_A = 'a'.charCodeAt(0);
        Binary64.CHAR_CODE_Z = 'z'.charCodeAt(0);
        return Binary64;
    })();
    Protocol.Binary64 = Binary64;
    var BooleanByteWrapper = (function() {
        function BooleanByteWrapper() {}
        BooleanByteWrapper.setFlag = function(param1, param2, param3) {
            switch (param2) {
                case 0:
                    if (param3) {
                        param1 = param1 | 1;
                    } else {
                        param1 = param1 & 255 - 1;
                    }
                    break;
                case 1:
                    if (param3) {
                        param1 = param1 | 2;
                    } else {
                        param1 = param1 & 255 - 2;
                    }
                    break;
                case 2:
                    if (param3) {
                        param1 = param1 | 4;
                    } else {
                        param1 = param1 & 255 - 4;
                    }
                    break;
                case 3:
                    if (param3) {
                        param1 = param1 | 8;
                    } else {
                        param1 = param1 & 255 - 8;
                    }
                    break;
                case 4:
                    if (param3) {
                        param1 = param1 | 16;
                    } else {
                        param1 = param1 & 255 - 16;
                    }
                    break;
                case 5:
                    if (param3) {
                        param1 = param1 | 32;
                    } else {
                        param1 = param1 & 255 - 32;
                    }
                    break;
                case 6:
                    if (param3) {
                        param1 = param1 | 64;
                    } else {
                        param1 = param1 & 255 - 64;
                    }
                    break;
                case 7:
                    if (param3) {
                        param1 = param1 | 128;
                    } else {
                        param1 = param1 & 255 - 128;
                    }
                    break;
                default:
                    throw new Error('Bytebox overflow.');
            }
            return param1;
        };
        BooleanByteWrapper.getFlag = function(param1, param2) {
            switch (param2) {
                case 0:
                    return !((param1 & 1) === 0);
                case 1:
                    return !((param1 & 2) === 0);
                case 2:
                    return !((param1 & 4) === 0);
                case 3:
                    return !((param1 & 8) === 0);
                case 4:
                    return !((param1 & 16) === 0);
                case 5:
                    return !((param1 & 32) === 0);
                case 6:
                    return !((param1 & 64) === 0);
                case 7:
                    return !((param1 & 128) === 0);
                default:
                    throw new Error('Bytebox overflow.');
            }
        };
        return BooleanByteWrapper;
    })();
    Protocol.BooleanByteWrapper = BooleanByteWrapper;
    var CustomDataWrapper = (function() {
        function CustomDataWrapper(data) {
            if (data instanceof ByteArray) {
                this._data = data;
            } else {
                this._data = new ByteArray(data);
            }
        }
        Object.defineProperty(CustomDataWrapper.prototype, "position", {
            get: function() {
                return this._data.position;
            },
            set: function(param1) {
                this._data.position = param1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomDataWrapper.prototype, "data", {
            get: function() {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        CustomDataWrapper.prototype.readVarInt = function() {
            var _loc4_ = 0;
            var _loc1_ = 0;
            var _loc2_ = 0;
            var _loc3_ = false;
            while (_loc2_ < CustomDataWrapper.INT_SIZE) {
                _loc4_ = this._data.readByte();
                _loc3_ = (_loc4_ & CustomDataWrapper.MASK_10000000) === CustomDataWrapper.MASK_10000000;
                if (_loc2_ > 0) {
                    _loc1_ = _loc1_ + ((_loc4_ & CustomDataWrapper.MASK_01111111) << _loc2_);
                } else {
                    _loc1_ = _loc1_ + (_loc4_ & CustomDataWrapper.MASK_01111111);
                }
                _loc2_ = _loc2_ + CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (!_loc3_) {
                    return _loc1_;
                }
            }
            throw new Error('Too much data');
        };
        CustomDataWrapper.prototype.readVarUhInt = function() {
            return this.readVarInt();
        };
        CustomDataWrapper.prototype.readVarShort = function() {
            var _loc4_ = 0;
            var _loc1_ = 0;
            var _loc2_ = 0;
            var _loc3_ = false;
            while (_loc2_ < CustomDataWrapper.SHORT_SIZE) {
                _loc4_ = this._data.readByte();
                _loc3_ = (_loc4_ & CustomDataWrapper.MASK_10000000) === CustomDataWrapper.MASK_10000000;
                if (_loc2_ > 0) {
                    _loc1_ = _loc1_ + ((_loc4_ & CustomDataWrapper.MASK_01111111) << _loc2_);
                } else {
                    _loc1_ = _loc1_ + (_loc4_ & CustomDataWrapper.MASK_01111111);
                }
                _loc2_ = _loc2_ + CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (!_loc3_) {
                    if (_loc1_ > CustomDataWrapper.SHORT_MAX_VALUE) {
                        _loc1_ = _loc1_ - CustomDataWrapper.UNSIGNED_SHORT_MAX_VALUE;
                    }
                    return _loc1_;
                }
            }
            throw new Error('Too much data');
        };
        CustomDataWrapper.prototype.readVarUhShort = function() {
            return this.readVarShort();
        };
        CustomDataWrapper.prototype.readVarLong = function() {
            return this.readInt64(this._data).toNumber();
        };
        CustomDataWrapper.prototype.readVarUhLong = function() {
            return this.readUInt64(this._data).toNumber();
        };
        CustomDataWrapper.prototype.readBytes = function(param1, param2, param3) {
            if (param2 === void 0) {
                param2 = 0;
            }
            if (param3 === void 0) {
                param3 = 0;
            }
            this._data.readBytes(param1, param2, param3);
        };
        CustomDataWrapper.prototype.readBoolean = function() {
            return this._data.readBoolean();
        };
        CustomDataWrapper.prototype.readByte = function() {
            return this._data.readByte();
        };
        CustomDataWrapper.prototype.readUnsignedByte = function() {
            return this._data.readUnsignedByte();
        };
        CustomDataWrapper.prototype.readShort = function() {
            return this._data.readShort();
        };
        CustomDataWrapper.prototype.readUnsignedShort = function() {
            return this._data.readUnsignedShort();
        };
        CustomDataWrapper.prototype.readInt = function() {
            return this._data.readInt();
        };
        CustomDataWrapper.prototype.readUnsignedInt = function() {
            return this._data.readUnsignedInt();
        };
        CustomDataWrapper.prototype.readFloat = function() {
            return this._data.readFloat();
        };
        CustomDataWrapper.prototype.readDouble = function() {
            return this._data.readDouble();
        };
        CustomDataWrapper.prototype.readMultiByte = function(param1, param2) {
            return this._data.readMultiByte(param1, param2);
        };
        CustomDataWrapper.prototype.readUTF = function() {
            return this._data.readUTF();
        };
        CustomDataWrapper.prototype.readUTFBytes = function(param1) {
            return this._data.readUTFBytes(param1);
        };
        Object.defineProperty(CustomDataWrapper.prototype, "bytesAvailable", {
            get: function() {
                return this._data.bytesAvailable;
            },
            enumerable: true,
            configurable: true
        });
        CustomDataWrapper.prototype.readObject = function() {
            return this._data.readObject();
        };
        Object.defineProperty(CustomDataWrapper.prototype, "objectEncoding", {
            get: function() {
                return this._data.objectEncoding;
            },
            set: function(param1) {
                this._data.objectEncoding = param1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomDataWrapper.prototype, "endian", {
            get: function() {
                return this._data.endian;
            },
            set: function(param1) {
                this._data.endian = param1;
            },
            enumerable: true,
            configurable: true
        });
        CustomDataWrapper.prototype.writeVarInt = function(param1) {
            var _loc5_ = 0;
            var _loc2_ = new ByteArray();
            if (param1 >= 0 && param1 <= CustomDataWrapper.MASK_01111111) {
                _loc2_.writeByte(param1);
                this._data.writeBytes(_loc2_);
                return;
            }
            var _loc3_ = param1;
            var _loc4_ = new ByteArray();
            while (_loc3_ !== 0) {
                _loc4_.writeByte(_loc3_ & CustomDataWrapper.MASK_01111111);
                _loc4_.position = _loc4_.length - 1;
                _loc5_ = _loc4_.readByte();
                _loc3_ = _loc3_ >>> CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (_loc3_ > 0) {
                    _loc5_ = _loc5_ | CustomDataWrapper.MASK_10000000;
                }
                _loc2_.writeByte(_loc5_);
            }
            this._data.writeBytes(_loc2_);
        };
        CustomDataWrapper.prototype.writeVarShort = function(param1) {
            var _loc5_ = 0;
            if (param1 > CustomDataWrapper.SHORT_MAX_VALUE || param1 < CustomDataWrapper.SHORT_MIN_VALUE) {
                throw new Error('Forbidden value');
            }
            var _loc2_ = new ByteArray();
            if (param1 >= 0 && param1 <= CustomDataWrapper.MASK_01111111) {
                _loc2_.writeByte(param1);
                this._data.writeBytes(_loc2_);
                return;
            }
            var _loc3_ = param1 & 65535;
            var _loc4_ = new ByteArray();
            while (_loc3_ !== 0) {
                _loc4_.writeByte(_loc3_ & CustomDataWrapper.MASK_01111111);
                _loc4_.position = _loc4_.length - 1;
                _loc5_ = _loc4_.readByte();
                _loc3_ = _loc3_ >>> CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (_loc3_ > 0) {
                    _loc5_ = _loc5_ | CustomDataWrapper.MASK_10000000;
                }
                _loc2_.writeByte(_loc5_);
            }
            this._data.writeBytes(_loc2_);
        };
        CustomDataWrapper.prototype.writeVarLong = function(param1) {
            var _loc3_ = 0;
            var _loc2_ = Int64.fromNumber(param1);
            if (_loc2_.high === 0) {
                this.writeint32(this._data, _loc2_.low);
            } else {
                _loc3_ = 0;
                while (_loc3_ < 4) {
                    this._data.writeByte(_loc2_.low & 127 | 128);
                    _loc2_.low = _loc2_.low >>> 7;
                    _loc3_++;
                }
                if ((_loc2_.high & 268435455 << 3) === 0) {
                    this._data.writeByte(_loc2_.high << 4 | _loc2_.low);
                } else {
                    this._data.writeByte((_loc2_.high << 4 | _loc2_.low) & 127 | 128);
                    this.writeint32(this._data, _loc2_.high >>> 3);
                }
            }
        };
        CustomDataWrapper.prototype.writeBytes = function(param1, param2, param3) {
            if (param2 === void 0) {
                param2 = 0;
            }
            if (param3 === void 0) {
                param3 = 0;
            }
            this._data.writeBytes(param1, param2, param3);
        };
        CustomDataWrapper.prototype.writeBoolean = function(param1) {
            this._data.writeBoolean(param1);
        };
        CustomDataWrapper.prototype.writeByte = function(param1) {
            this._data.writeByte(param1);
        };
        CustomDataWrapper.prototype.writeShort = function(param1) {
            this._data.writeShort(param1);
        };
        CustomDataWrapper.prototype.writeInt = function(param1) {
            this._data.writeInt(param1);
        };
        CustomDataWrapper.prototype.writeUnsignedInt = function(param1) {
            this._data.writeUnsignedInt(param1);
        };
        CustomDataWrapper.prototype.writeFloat = function(param1) {
            this._data.writeFloat(param1);
        };
        CustomDataWrapper.prototype.writeDouble = function(param1) {
            this._data.writeDouble(param1);
        };
        CustomDataWrapper.prototype.writeMultiByte = function(param1, param2) {
            this._data.writeMultiByte(param1, param2);
        };
        CustomDataWrapper.prototype.writeUTF = function(param1) {
            this._data.writeUTF(param1);
        };
        CustomDataWrapper.prototype.writeUTFBytes = function(param1) {
            this._data.writeUTFBytes(param1);
        };
        CustomDataWrapper.prototype.writeObject = function(param1) {
            this._data.writeObject(param1);
        };
        CustomDataWrapper.prototype.readInt64 = function(param1) {
            var _loc3_ = 0;
            var _loc2_ = new Int64();
            var _loc4_ = 0;
            while (true) {
                _loc3_ = param1.readUnsignedByte();
                if (_loc4_ === 28) {
                    break;
                }
                if (_loc3_ >= 128) {
                    _loc2_.low = _loc2_.low | (_loc3_ & 127) << _loc4_;
                    _loc4_ = _loc4_ + 7;
                    continue;
                }
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                return _loc2_;
            }
            if (_loc3_ >= 128) {
                _loc3_ = _loc3_ & 127;
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                _loc2_.high = _loc3_ >>> 4;
                _loc4_ = 3;
                while (true) {
                    _loc3_ = param1.readUnsignedByte();
                    if (_loc4_ < 32) {
                        if (_loc3_ >= 128) {
                            _loc2_.high = _loc2_.high | (_loc3_ & 127) << _loc4_;
                        } else {
                            break;
                        }
                    }
                    _loc4_ = _loc4_ + 7;
                }
                _loc2_.high = _loc2_.high | _loc3_ << _loc4_;
                return _loc2_;
            }
            _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
            _loc2_.high = _loc3_ >>> 4;
            return _loc2_;
        };
        CustomDataWrapper.prototype.readUInt64 = function(param1) {
            var _loc3_ = 0;
            var _loc2_ = new UInt64();
            var _loc4_ = 0;
            while (true) {
                _loc3_ = param1.readUnsignedByte();
                if (_loc4_ === 28) {
                    break;
                }
                if (_loc3_ >= 128) {
                    _loc2_.low = _loc2_.low | (_loc3_ & 127) << _loc4_;
                    _loc4_ = _loc4_ + 7;
                    continue;
                }
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                return _loc2_;
            }
            if (_loc3_ >= 128) {
                _loc3_ = _loc3_ & 127;
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                _loc2_.high = _loc3_ >>> 4;
                _loc4_ = 3;
                while (true) {
                    _loc3_ = param1.readUnsignedByte();
                    if (_loc4_ < 32) {
                        if (_loc3_ >= 128) {
                            _loc2_.high = _loc2_.high | (_loc3_ & 127) << _loc4_;
                        } else {
                            break;
                        }
                    }
                    _loc4_ = _loc4_ + 7;
                }
                _loc2_.high = _loc2_.high | _loc3_ << _loc4_;
                return _loc2_;
            }
            _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
            _loc2_.high = _loc3_ >>> 4;
            return _loc2_;
        };
        CustomDataWrapper.prototype.writeint32 = function(param1, param2) {
            while (param2 >= 128) {
                param1.writeByte(param2 & 127 | 128);
                param2 = param2 >>> 7;
            }
            param1.writeByte(param2);
        };
        CustomDataWrapper.INT_SIZE = 32;
        CustomDataWrapper.SHORT_SIZE = 16;
        CustomDataWrapper.SHORT_MIN_VALUE = -32768;
        CustomDataWrapper.SHORT_MAX_VALUE = 32767;
        CustomDataWrapper.UNSIGNED_SHORT_MAX_VALUE = 65536;
        CustomDataWrapper.CHUNCK_BIT_SIZE = 7;
        CustomDataWrapper.MAX_ENCODING_LENGTH = Math.ceil(CustomDataWrapper.INT_SIZE / CustomDataWrapper.CHUNCK_BIT_SIZE);
        CustomDataWrapper.MASK_10000000 = 128;
        CustomDataWrapper.MASK_01111111 = 127;
        return CustomDataWrapper;
    })();
    Protocol.CustomDataWrapper = CustomDataWrapper;
    var Int64 = (function(_super) {
        __extends(Int64, _super);

        function Int64(low, high) {
            if (low === void 0) {
                low = 0;
            }
            if (high === void 0) {
                high = 0;
            }
            _super.call(this, low, high);
        }
        Int64.fromNumber = function(n) {
            return new Int64(n, Math.floor((n / 4294967296)));
        };
        Int64.prototype.parseInt64 = function(str, radix) {
            radix = radix || 0;
            var digit = 0;
            var negative = (str.search(/^\-/) === 0);
            var i = ((negative) ? 1 : 0);
            if (radix === 0) {
                if (str.search(/^\-?0x/) === 0) {
                    radix = 16;
                    i = (i + 2);
                } else {
                    radix = 10;
                };
            };
            if ((((radix < 2)) || ((radix > 36)))) {
                throw new Error('ArgumentError');
            };
            str = str.toLowerCase();
            var result = new Int64();
            while (i < str.length) {
                digit = str.charCodeAt(i);
                if ((((digit >= Binary64.CHAR_CODE_0)) && ((digit <= Binary64.CHAR_CODE_9)))) {
                    digit = (digit - Binary64.CHAR_CODE_0);
                } else {
                    if ((((digit >= Binary64.CHAR_CODE_A)) && ((digit <= Binary64.CHAR_CODE_Z)))) {
                        digit = (digit - Binary64.CHAR_CODE_A);
                        digit = (digit + 10);
                    } else {
                        throw new Error('ArgumentError');
                    };
                };
                if (digit >= radix) {
                    throw new Error('ArgumentError');
                };
                result.mul(radix);
                result.add(digit);
                i++;
            };
            if (negative) {
                result.bitwiseNot();
                result.add(1);
            };
            return (result);
        };;
        Int64.prototype.toNumber = function() {
            return (((this.high * 4294967296) + this.low));
        };;
        Int64.prototype.toString = function(radix) {
            radix = radix || 10;
            var _local_4 = 0;
            if ((((radix < 2)) || ((radix > 36)))) {
                throw new Error('ArgumentError');
            };
            switch (this.high) {
                case 0:
                    return (this.low.toString(radix));
                case -1:
                    if ((this.low & 0x80000000) === 0) {
                        return ((Number((this.low | 0x80000000)) - 0x80000000).toString(radix));
                    };
                    return (Number(this.low).toString(radix));
            };
            if ((((this.low === 0)) && ((this.high === 0)))) {
                return ('0');
            };
            var digitChars = [];
            var copyOfThis = new Int64(this.low, this.high);
            if (this.high < 0) {
                copyOfThis.bitwiseNot();
                copyOfThis.add(1);
            };
            do {
                _local_4 = copyOfThis.div(radix);
                if (_local_4 < 10) {
                    digitChars.push((_local_4 + Binary64.CHAR_CODE_0));
                } else {
                    digitChars.push(((_local_4 - 10) + Binary64.CHAR_CODE_A));
                }
            } while (copyOfThis.high !== 0);
            if (this.high < 0) {
                return ((('-' + copyOfThis.low.toString(radix)) + String.fromCharCode.apply(String, digitChars.reverse())));
            };
            return ((copyOfThis.low.toString(radix) + String.fromCharCode.apply(String, digitChars.reverse())));
        };;
        return Int64;
    })(Binary64);
    Protocol.Int64 = Int64;
    var MessageReceiver = (function() {
        function MessageReceiver() {

        }
        MessageReceiver.parse = function(input, messageId, messageLength) {
            if (!messageId) {
                return this.parseHeader(input);
            }
            var _loc4_ = MessageReceiver._list[messageId];
            if (!_loc4_) {
                console.log('Unknown packet received (ID ' + messageId + ', length ' + messageLength + ')');
                return null;
            }
            var _loc5_ = _loc4_();
            _loc5_.unpack(input, messageLength);
            return _loc5_;
        };
        MessageReceiver.parseHeader = function(src, splitted, id, length, staticHeader) {
            if (splitted) {
                return this.parse(src, id, length);
            }
            if (src.bytesAvailable < 2) {
                throw new Error('Not enought data to read the header, byte available : ' + src.bytesAvailable + ' (needed : 2)');
            }
            staticHeader = staticHeader || src.readUnsignedShort();
            id = id || this.getMessageId(staticHeader);
            if (src.bytesAvailable < (staticHeader & NetworkMessage.BIT_MASK)) {
                throw new Error('Not enought data to read the message length, byte available : ' + src.bytesAvailable + ' (needed : ' + (staticHeader & NetworkMessage.BIT_MASK) + ')');
            }
            length = this.readMessageLength(staticHeader, src);
            return this.parseHeader(src, true, id, length);
        };
        MessageReceiver.getMessageId = function(firstOctet) {
            return ((firstOctet >> NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID));
        };
        MessageReceiver.readMessageLength = function(staticHeader, src) {
            var byteLenDynamicHeader = (staticHeader & NetworkMessage.BIT_MASK);
            var messageLength;

            switch (byteLenDynamicHeader) {
                case 0:
                    break;
                case 1:
                    messageLength = src.readUnsignedByte();
                    break;
                case 2:
                    messageLength = src.readUnsignedShort();
                    break;
                case 3:
                    messageLength = ((((src.readByte() & 0xFF) << 16) + ((src.readByte() & 0xFF) << 8)) + (src.readByte() & 0xFF));
                    break;
            }

            return (messageLength);
        };
        MessageReceiver._list = {
            3305: function() {
                return new AdminCommandMessage();
            },
            3781: function() {
                return new AdminQuietCommandMessage();
            },
            5709: function() {
                return new ConsoleCommandsListMessage();
            },
            7083: function() {
                return new ConsoleEndMessage();
            },
            5631: function() {
                return new ConsoleMessage();
            },
            4681: function() {
                return new BasicPingMessage();
            },
            5180: function() {
                return new BasicPongMessage();
            },
            6463: function() {
                return new BasicStatMessage();
            },
            2819: function() {
                return new BasicStatWithDataMessage();
            },
            2: function() {
                return new NetworkDataContainerMessage();
            },
            8100: function() {
                return new CredentialsAcknowledgementMessage();
            },
            8978: function() {
                return new ForceAccountErrorMessage();
            },
            78: function() {
                return new ForceAccountMessage();
            },
            7528: function() {
                return new ForceAccountStatusMessage();
            },
            2909: function() {
                return new HelloConnectMessage();
            },
            6412: function() {
                return new IdentificationFailedBannedMessage();
            },
            5123: function() {
                return new IdentificationFailedForBadVersionMessage();
            },
            7388: function() {
                return new IdentificationFailedMessage();
            },
            7755: function() {
                return new IdentificationMessage();
            },
            3876: function() {
                return new IdentificationSuccessMessage();
            },
            6554: function() {
                return new IdentificationSuccessWithLoginTokenMessage();
            },
            2940: function() {
                return new MigratedServerListMessage();
            },
            8119: function() {
                return new AccountLinkRequiredMessage();
            },
            8621: function() {
                return new NicknameAcceptedMessage();
            },
            1518: function() {
                return new NicknameChoiceRequestMessage();
            },
            1363: function() {
                return new NicknameRefusedMessage();
            },
            8723: function() {
                return new NicknameRegistrationMessage();
            },
            9736: function() {
                return new ReleaseAccountMessage();
            },
            4300: function() {
                return new AcquaintanceSearchErrorMessage();
            },
            9545: function() {
                return new AcquaintanceSearchMessage();
            },
            4979: function() {
                return new AcquaintanceServerListMessage();
            },
            4551: function() {
                return new SelectedServerDataExtendedMessage();
            },
            5981: function() {
                return new SelectedServerDataMessage();
            },
            5669: function() {
                return new SelectedServerRefusedMessage();
            },
            1712: function() {
                return new ServerSelectionMessage();
            },
            6791: function() {
                return new ServersListMessage();
            },
            2374: function() {
                return new ServerStatusUpdateMessage();
            },
            3788: function() {
                return new DebugClearHighlightCellsMessage();
            },
            3220: function() {
                return new DebugHighlightCellsMessage();
            },
            968: function() {
                return new DebugInClientMessage();
            },
            8612: function() {
                return new DumpedEntityStatsMessage();
            },
            8401: function() {
                return new AchievementAlmostFinishedDetailedListMessage();
            },
            8667: function() {
                return new AchievementAlmostFinishedDetailedListRequestMessage();
            },
            8773: function() {
                return new AchievementDetailedListMessage();
            },
            8893: function() {
                return new AchievementDetailedListRequestMessage();
            },
            8366: function() {
                return new AchievementDetailsMessage();
            },
            838: function() {
                return new AchievementDetailsRequestMessage();
            },
            2610: function() {
                return new AchievementFinishedInformationMessage();
            },
            1323: function() {
                return new AchievementFinishedMessage();
            },
            4298: function() {
                return new AchievementListMessage();
            },
            9506: function() {
                return new AchievementRewardErrorMessage();
            },
            1218: function() {
                return new AchievementRewardRequestMessage();
            },
            1941: function() {
                return new AchievementRewardSuccessMessage();
            },
            8910: function() {
                return new FriendGuildSetWarnOnAchievementCompleteMessage();
            },
            188: function() {
                return new FriendGuildWarnOnAchievementCompleteStateMessage();
            },
            409: function() {
                return new AbstractGameActionMessage();
            },
            7499: function() {
                return new AbstractGameActionWithAckMessage();
            },
            836: function() {
                return new AbstractGameActionFightTargetedAbilityMessage();
            },
            9295: function() {
                return new GameActionFightActivateGlyphTrapMessage();
            },
            9711: function() {
                return new GameActionFightCarryCharacterMessage();
            },
            5894: function() {
                return new GameActionFightCastOnTargetRequestMessage();
            },
            6441: function() {
                return new GameActionFightCastRequestMessage();
            },
            6798: function() {
                return new GameActionFightChangeLookMessage();
            },
            1826: function() {
                return new GameActionFightCloseCombatMessage();
            },
            2437: function() {
                return new GameActionFightDeathMessage();
            },
            869: function() {
                return new GameActionFightDispellableEffectMessage();
            },
            339: function() {
                return new GameActionFightDispellEffectMessage();
            },
            4004: function() {
                return new GameActionFightDispellMessage();
            },
            1974: function() {
                return new GameActionFightDispellSpellMessage();
            },
            8102: function() {
                return new GameActionFightDodgePointLossMessage();
            },
            1472: function() {
                return new GameActionFightDropCharacterMessage();
            },
            2330: function() {
                return new GameActionFightExchangePositionsMessage();
            },
            4958: function() {
                return new GameActionFightInvisibilityMessage();
            },
            3642: function() {
                return new GameActionFightInvisibleDetectedMessage();
            },
            7364: function() {
                return new GameActionFightKillMessage();
            },
            2753: function() {
                return new GameActionFightLifeAndShieldPointsLostMessage();
            },
            5968: function() {
                return new GameActionFightLifePointsGainMessage();
            },
            8706: function() {
                return new GameActionFightLifePointsLostMessage();
            },
            7789: function() {
                return new GameActionFightMarkCellsMessage();
            },
            3924: function() {
                return new GameActionFightModifyEffectsDurationMessage();
            },
            1078: function() {
                return new GameActionFightMultipleSummonMessage();
            },
            1241: function() {
                return new GameActionFightNoSpellCastMessage();
            },
            2600: function() {
                return new GameActionFightPointsVariationMessage();
            },
            6000: function() {
                return new GameActionFightReduceDamagesMessage();
            },
            2532: function() {
                return new GameActionFightReflectDamagesMessage();
            },
            9227: function() {
                return new GameActionFightReflectSpellMessage();
            },
            9026: function() {
                return new GameActionFightSlideMessage();
            },
            1220: function() {
                return new GameActionFightSpellCastMessage();
            },
            4289: function() {
                return new GameActionFightSpellCooldownVariationMessage();
            },
            4010: function() {
                return new GameActionFightSpellImmunityMessage();
            },
            270: function() {
                return new GameActionFightStealKamaMessage();
            },
            7574: function() {
                return new GameActionFightSummonMessage();
            },
            5588: function() {
                return new GameActionFightTackledMessage();
            },
            6155: function() {
                return new GameActionFightTeleportOnSameMapMessage();
            },
            2852: function() {
                return new GameActionFightThrowCharacterMessage();
            },
            8781: function() {
                return new GameActionFightTriggerEffectMessage();
            },
            6805: function() {
                return new GameActionFightTriggerGlyphTrapMessage();
            },
            2192: function() {
                return new GameActionFightUnmarkCellsMessage();
            },
            607: function() {
                return new GameActionFightVanishMessage();
            },
            7800: function() {
                return new GameActionUpdateEffectTriggerCountMessage();
            },
            5824: function() {
                return new GameActionAcknowledgementMessage();
            },
            5512: function() {
                return new GameActionNoopMessage();
            },
            5126: function() {
                return new GameActionSpamMessage();
            },
            6647: function() {
                return new SequenceEndMessage();
            },
            7930: function() {
                return new SequenceStartMessage();
            },
            1136: function() {
                return new AllianceAllRanksUpdateRequestMessage();
            },
            8980: function() {
                return new AllianceBulletinMessage();
            },
            6084: function() {
                return new AllianceBulletinSetErrorMessage();
            },
            7394: function() {
                return new AllianceBulletinSetRequestMessage();
            },
            1021: function() {
                return new AllianceChangeMemberRankMessage();
            },
            8740: function() {
                return new AllianceCreationResultMessage();
            },
            6593: function() {
                return new AllianceCreationStartedMessage();
            },
            1538: function() {
                return new AllianceCreationValidMessage();
            },
            7286: function() {
                return new AllianceFactsErrorMessage();
            },
            3798: function() {
                return new AllianceFactsMessage();
            },
            6034: function() {
                return new AllianceFactsRequestMessage();
            },
            8929: function() {
                return new AllianceInsiderInfoMessage();
            },
            3738: function() {
                return new AllianceInsiderInfoRequestMessage();
            },
            841: function() {
                return new AllianceInvitationAnswerMessage();
            },
            8696: function() {
                return new AllianceInvitationMessage();
            },
            2728: function() {
                return new AllianceInvitationStateRecrutedMessage();
            },
            6001: function() {
                return new AllianceInvitationStateRecruterMessage();
            },
            1579: function() {
                return new AllianceInvitedMessage();
            },
            8203: function() {
                return new AllianceJoinAutomaticallyRequestMessage();
            },
            6952: function() {
                return new AllianceJoinedMessage();
            },
            3588: function() {
                return new AllianceKickRequestMessage();
            },
            8384: function() {
                return new AllianceLeftMessage();
            },
            1245: function() {
                return new AllianceListMessage();
            },
            2538: function() {
                return new AllianceMemberInformationUpdateMessage();
            },
            945: function() {
                return new AllianceMemberLeavingMessage();
            },
            5744: function() {
                return new AllianceMemberOnlineStatusMessage();
            },
            549: function() {
                return new AllianceMembershipMessage();
            },
            7557: function() {
                return new AllianceMemberStartWarningOnConnectionMessage();
            },
            9966: function() {
                return new AllianceMemberStopWarningOnConnectionMessage();
            },
            2792: function() {
                return new AllianceModificationEmblemValidMessage();
            },
            637: function() {
                return new AllianceModificationNameAndTagValidMessage();
            },
            5648: function() {
                return new AllianceModificationResultMessage();
            },
            447: function() {
                return new AllianceModificationStartedMessage();
            },
            7593: function() {
                return new AllianceModificationValidMessage();
            },
            8500: function() {
                return new AllianceMotdMessage();
            },
            2581: function() {
                return new AllianceMotdSetErrorMessage();
            },
            4660: function() {
                return new AllianceMotdSetRequestMessage();
            },
            7536: function() {
                return new AlliancePartialListMessage();
            },
            9206: function() {
                return new AllianceRankCreateRequestMessage();
            },
            8022: function() {
                return new AllianceRankRemoveRequestMessage();
            },
            9275: function() {
                return new AllianceRanksMessage();
            },
            8832: function() {
                return new AllianceRanksRequestMessage();
            },
            4114: function() {
                return new AllianceRankUpdateRequestMessage();
            },
            7383: function() {
                return new AllianceRightsUpdateMessage();
            },
            8759: function() {
                return new AllianceApplicationAnswerMessage();
            },
            5178: function() {
                return new AllianceApplicationDeletedMessage();
            },
            5111: function() {
                return new AllianceApplicationIsAnsweredMessage();
            },
            121: function() {
                return new AllianceApplicationListenMessage();
            },
            6378: function() {
                return new AllianceApplicationPresenceMessage();
            },
            8915: function() {
                return new AllianceApplicationReceivedMessage();
            },
            4504: function() {
                return new AllianceDeleteApplicationRequestMessage();
            },
            6329: function() {
                return new AllianceGetPlayerApplicationMessage();
            },
            6004: function() {
                return new AllianceIsThereAnyApplicationMessage();
            },
            9160: function() {
                return new AllianceListApplicationAnswerMessage();
            },
            8362: function() {
                return new AllianceListApplicationModifiedMessage();
            },
            2579: function() {
                return new AllianceListApplicationRequestMessage();
            },
            4220: function() {
                return new AlliancePlayerApplicationAbstractMessage();
            },
            96: function() {
                return new AlliancePlayerApplicationInformationMessage();
            },
            971: function() {
                return new AlliancePlayerNoApplicationInformationMessage();
            },
            961: function() {
                return new AllianceSubmitApplicationMessage();
            },
            6742: function() {
                return new AllianceUpdateApplicationMessage();
            },
            5166: function() {
                return new AllianceFightFighterAddedMessage();
            },
            5651: function() {
                return new AllianceFightFighterRemovedMessage();
            },
            3017: function() {
                return new AllianceFightFinishedMessage();
            },
            1055: function() {
                return new AllianceFightInfoMessage();
            },
            460: function() {
                return new AllianceFightPhaseUpdateMessage();
            },
            6373: function() {
                return new AllianceFightStartedMessage();
            },
            4134: function() {
                return new StartListenAllianceFightMessage();
            },
            6645: function() {
                return new StopListenAllianceFightMessage();
            },
            8374: function() {
                return new KohUpdateMessage();
            },
            4175: function() {
                return new KothEndMessage();
            },
            5947: function() {
                return new AllianceGetRecruitmentInformationMessage();
            },
            9279: function() {
                return new AllianceRecruitmentInformationMessage();
            },
            3670: function() {
                return new AllianceRecruitmentInvalidateMessage();
            },
            9974: function() {
                return new AllianceUpdateRecruitmentInformationMessage();
            },
            2178: function() {
                return new AllianceSummaryMessage();
            },
            8794: function() {
                return new AllianceSummaryRequestMessage();
            },
            271: function() {
                return new AlmanachCalendarDateMessage();
            },
            1358: function() {
                return new AccountCapabilitiesMessage();
            },
            3538: function() {
                return new AccountLoggingKickedMessage();
            },
            2660: function() {
                return new AlreadyConnectedMessage();
            },
            170: function() {
                return new AuthenticationTicketAcceptedMessage();
            },
            1775: function() {
                return new AuthenticationTicketMessage();
            },
            1235: function() {
                return new AuthenticationTicketRefusedMessage();
            },
            858: function() {
                return new HelloGameMessage();
            },
            8049: function() {
                return new ReloginTokenRequestMessage();
            },
            8771: function() {
                return new ReloginTokenStatusMessage();
            },
            9400: function() {
                return new ServerOptionalFeaturesMessage();
            },
            9531: function() {
                return new ServerSessionConstantsMessage();
            },
            8787: function() {
                return new ServerSettingsMessage();
            },
            2443: function() {
                return new AtlasPointInformationsMessage();
            },
            8704: function() {
                return new CompassResetMessage();
            },
            110: function() {
                return new CompassUpdateMessage();
            },
            2901: function() {
                return new CompassUpdatePartyMemberMessage();
            },
            210: function() {
                return new CompassUpdatePvpSeekMessage();
            },
            8309: function() {
                return new BasicAckMessage();
            },
            7835: function() {
                return new BasicDateMessage();
            },
            4022: function() {
                return new BasicLatencyStatsMessage();
            },
            1102: function() {
                return new BasicLatencyStatsRequestMessage();
            },
            2629: function() {
                return new BasicNoOperationMessage();
            },
            489: function() {
                return new BasicTimeMessage();
            },
            9342: function() {
                return new BasicWhoAmIRequestMessage();
            },
            7264: function() {
                return new BasicWhoIsMessage();
            },
            821: function() {
                return new BasicWhoIsNoMatchMessage();
            },
            2823: function() {
                return new BasicWhoIsRequestMessage();
            },
            1871: function() {
                return new CurrentServerStatusUpdateMessage();
            },
            9630: function() {
                return new NumericWhoIsMessage();
            },
            4981: function() {
                return new NumericWhoIsRequestMessage();
            },
            2099: function() {
                return new SequenceNumberMessage();
            },
            5241: function() {
                return new SequenceNumberRequestMessage();
            },
            1819: function() {
                return new TextInformationMessage();
            },
            8313: function() {
                return new AlignmentWarEffortDonatePreviewMessage();
            },
            1453: function() {
                return new AlignmentWarEffortDonateRequestMessage();
            },
            7579: function() {
                return new AlignmentWarEffortDonationResultMessage();
            },
            1920: function() {
                return new CharacterAlignmentWarEffortProgressionMessage();
            },
            1350: function() {
                return new CharacterAlignmentWarEffortProgressionRequestMessage();
            },
            2990: function() {
                return new AlterationAddedMessage();
            },
            660: function() {
                return new AlterationRemovedMessage();
            },
            3851: function() {
                return new AlterationsMessage();
            },
            2645: function() {
                return new AlterationsUpdatedMessage();
            },
            567: function() {
                return new CharacterFirstSelectionMessage();
            },
            2258: function() {
                return new CharacterReplayWithRemodelRequestMessage();
            },
            6440: function() {
                return new CharacterSelectedErrorMessage();
            },
            9995: function() {
                return new CharacterSelectedForceMessage();
            },
            9079: function() {
                return new CharacterSelectedForceReadyMessage();
            },
            2543: function() {
                return new CharacterSelectedSuccessMessage();
            },
            7194: function() {
                return new CharacterSelectionMessage();
            },
            772: function() {
                return new CharacterSelectionWithRemodelMessage();
            },
            5340: function() {
                return new CharactersListErrorMessage();
            },
            3720: function() {
                return new CharactersListMessage();
            },
            3965: function() {
                return new CharactersListRequestMessage();
            },
            2612: function() {
                return new CharactersListWithRemodelingMessage();
            },
            7257: function() {
                return new CharacterCanBeCreatedRequestMessage();
            },
            6725: function() {
                return new CharacterCanBeCreatedResultMessage();
            },
            7608: function() {
                return new CharacterCreationRequestMessage();
            },
            5976: function() {
                return new CharacterCreationResultMessage();
            },
            3968: function() {
                return new CharacterNameSuggestionFailureMessage();
            },
            3929: function() {
                return new CharacterNameSuggestionRequestMessage();
            },
            4972: function() {
                return new CharacterNameSuggestionSuccessMessage();
            },
            5718: function() {
                return new DebtsDeleteMessage();
            },
            2498: function() {
                return new DebtsUpdateMessage();
            },
            8975: function() {
                return new CharacterDeletionErrorMessage();
            },
            6242: function() {
                return new CharacterDeletionPrepareMessage();
            },
            5833: function() {
                return new CharacterDeletionPrepareRequestMessage();
            },
            2985: function() {
                return new CharacterDeletionRequestMessage();
            },
            3908: function() {
                return new CharacterReplayRequestMessage();
            },
            3179: function() {
                return new ForgettableSpellClientActionMessage();
            },
            6931: function() {
                return new ForgettableSpellDeleteMessage();
            },
            9647: function() {
                return new ForgettableSpellEquipmentSlotsMessage();
            },
            8558: function() {
                return new ForgettableSpellListUpdateMessage();
            },
            9665: function() {
                return new ApplySpellModifierMessage();
            },
            4699: function() {
                return new RemoveSpellModifierMessage();
            },
            3140: function() {
                return new CharacterExperienceGainMessage();
            },
            5417: function() {
                return new CharacterLevelUpInformationMessage();
            },
            2370: function() {
                return new CharacterLevelUpMessage();
            },
            4427: function() {
                return new CharacterStatsListMessage();
            },
            867: function() {
                return new FighterStatsListMessage();
            },
            6745: function() {
                return new LifePointsRegenBeginMessage();
            },
            7099: function() {
                return new LifePointsRegenEndMessage();
            },
            4287: function() {
                return new ResetCharacterStatsRequestMessage();
            },
            939: function() {
                return new UpdateLifePointsMessage();
            },
            4470: function() {
                return new PlayerStatusUpdateErrorMessage();
            },
            712: function() {
                return new PlayerStatusUpdateMessage();
            },
            1929: function() {
                return new PlayerStatusUpdateRequestMessage();
            },
            5330: function() {
                return new ChannelEnablingChangeMessage();
            },
            3241: function() {
                return new ChannelEnablingMessage();
            },
            3860: function() {
                return new EnabledChannelsMessage();
            },
            9384: function() {
                return new ChatAbstractClientMessage();
            },
            2850: function() {
                return new ChatAbstractServerMessage();
            },
            4140: function() {
                return new ChatAdminServerMessage();
            },
            7429: function() {
                return new ChatClientMultiMessage();
            },
            5939: function() {
                return new ChatClientMultiWithObjectMessage();
            },
            9553: function() {
                return new ChatClientPrivateMessage();
            },
            7469: function() {
                return new ChatClientPrivateWithObjectMessage();
            },
            5864: function() {
                return new ChatErrorMessage();
            },
            4372: function() {
                return new ChatKolizeumServerMessage();
            },
            7495: function() {
                return new ChatServerCopyMessage();
            },
            2602: function() {
                return new ChatServerCopyWithObjectMessage();
            },
            2565: function() {
                return new ChatServerMessage();
            },
            8618: function() {
                return new ChatServerWithObjectMessage();
            },
            1093: function() {
                return new ChatCommunityChannelCommunityMessage();
            },
            2195: function() {
                return new ChatCommunityChannelSetCommunityRequestMessage();
            },
            6914: function() {
                return new ChatSmileyExtraPackListMessage();
            },
            9440: function() {
                return new ChatSmileyMessage();
            },
            7880: function() {
                return new ChatSmileyRequestMessage();
            },
            5044: function() {
                return new LocalizedChatSmileyMessage();
            },
            5865: function() {
                return new MoodSmileyRequestMessage();
            },
            6617: function() {
                return new MoodSmileyResultMessage();
            },
            2327: function() {
                return new MoodSmileyUpdateMessage();
            },
            61: function() {
                return new AddTaxCollectorOrderedSpellMessage();
            },
            2643: function() {
                return new AddTaxCollectorPresetSpellMessage();
            },
            7568: function() {
                return new ConfirmationOfListeningTaxCollectorUpdatesMessage();
            },
            5322: function() {
                return new GameRolePlayTaxCollectorFightRequestMessage();
            },
            234: function() {
                return new MoveTaxCollectorOrderedSpellMessage();
            },
            1282: function() {
                return new MoveTaxCollectorPresetSpellMessage();
            },
            1024: function() {
                return new RemoveTaxCollectorOrderedSpellMessage();
            },
            2130: function() {
                return new RemoveTaxCollectorPresetSpellMessage();
            },
            276: function() {
                return new StartListenTaxCollectorPresetsUpdatesMessage();
            },
            8165: function() {
                return new StartListenTaxCollectorUpdatesMessage();
            },
            7995: function() {
                return new StopListenTaxCollectorPresetsUpdatesMessage();
            },
            9396: function() {
                return new StopListenTaxCollectorUpdatesMessage();
            },
            832: function() {
                return new TaxCollectorAddedMessage();
            },
            1504: function() {
                return new TaxCollectorAttackedMessage();
            },
            7440: function() {
                return new TaxCollectorAttackedResultMessage();
            },
            7539: function() {
                return new TaxCollectorErrorMessage();
            },
            9412: function() {
                return new TaxCollectorHarvestedMessage();
            },
            7893: function() {
                return new TaxCollectorMovementsOfflineMessage();
            },
            7681: function() {
                return new TaxCollectorOrderedSpellUpdatedMessage();
            },
            8015: function() {
                return new TaxCollectorPresetsMessage();
            },
            5819: function() {
                return new TaxCollectorPresetSpellUpdatedMessage();
            },
            3362: function() {
                return new TaxCollectorRemovedMessage();
            },
            9183: function() {
                return new TaxCollectorStateUpdateMessage();
            },
            2349: function() {
                return new TopTaxCollectorListMessage();
            },
            4937: function() {
                return new DisplayNumericalValuePaddockMessage();
            },
            1665: function() {
                return new DungeonKeyRingMessage();
            },
            3419: function() {
                return new DungeonKeyRingUpdateMessage();
            },
            9203: function() {
                return new ArenaFighterIdleMessage();
            },
            8380: function() {
                return new ArenaFighterLeaveMessage();
            },
            3085: function() {
                return new BreachGameFightEndMessage();
            },
            1910: function() {
                return new ChallengeAddMessage();
            },
            588: function() {
                return new ChallengeBonusChoiceMessage();
            },
            3796: function() {
                return new ChallengeBonusChoiceSelectedMessage();
            },
            6466: function() {
                return new ChallengeListMessage();
            },
            2631: function() {
                return new ChallengeModSelectedMessage();
            },
            3759: function() {
                return new ChallengeModSelectMessage();
            },
            2139: function() {
                return new ChallengeNumberMessage();
            },
            1008: function() {
                return new ChallengeProposalMessage();
            },
            9312: function() {
                return new ChallengeReadyMessage();
            },
            6302: function() {
                return new ChallengeResultMessage();
            },
            7816: function() {
                return new ChallengeSelectedMessage();
            },
            7424: function() {
                return new ChallengeSelectionMessage();
            },
            3251: function() {
                return new ChallengeTargetsMessage();
            },
            4777: function() {
                return new ChallengeTargetsRequestMessage();
            },
            248: function() {
                return new ChallengeValidateMessage();
            },
            9672: function() {
                return new GameFightRefreshFighterMessage();
            },
            3886: function() {
                return new GameFightShowFighterMessage();
            },
            2392: function() {
                return new GameFightShowFighterRandomStaticPoseMessage();
            },
            1070: function() {
                return new GameFightEndMessage();
            },
            8894: function() {
                return new GameFightHumanReadyStateMessage();
            },
            1680: function() {
                return new GameFightJoinMessage();
            },
            2009: function() {
                return new GameFightJoinRequestMessage();
            },
            3124: function() {
                return new GameFightLeaveMessage();
            },
            1322: function() {
                return new GameFightNewRoundMessage();
            },
            2439: function() {
                return new GameFightNewWaveMessage();
            },
            448: function() {
                return new GameFightOptionStateUpdateMessage();
            },
            4020: function() {
                return new GameFightOptionToggleMessage();
            },
            5505: function() {
                return new GameFightPauseMessage();
            },
            8071: function() {
                return new GameFightPlacementPositionRequestMessage();
            },
            8544: function() {
                return new GameFightPlacementPossiblePositionsMessage();
            },
            9664: function() {
                return new GameFightPlacementSwapPositionsAcceptMessage();
            },
            7121: function() {
                return new GameFightPlacementSwapPositionsCancelledMessage();
            },
            1439: function() {
                return new GameFightPlacementSwapPositionsCancelMessage();
            },
            9969: function() {
                return new GameFightPlacementSwapPositionsErrorMessage();
            },
            4084: function() {
                return new GameFightPlacementSwapPositionsMessage();
            },
            4399: function() {
                return new GameFightPlacementSwapPositionsOfferMessage();
            },
            5094: function() {
                return new GameFightPlacementSwapPositionsRequestMessage();
            },
            5577: function() {
                return new GameFightReadyMessage();
            },
            2527: function() {
                return new GameFightRemoveTeamMemberMessage();
            },
            1829: function() {
                return new GameFightResumeMessage();
            },
            7814: function() {
                return new GameFightResumeWithSlavesMessage();
            },
            3448: function() {
                return new GameFightSpectateMessage();
            },
            5901: function() {
                return new GameFightSpectatePlayerRequestMessage();
            },
            5315: function() {
                return new GameFightSpectatorJoinMessage();
            },
            1962: function() {
                return new GameFightStartingMessage();
            },
            1844: function() {
                return new GameFightStartMessage();
            },
            4483: function() {
                return new GameFightSynchronizeMessage();
            },
            6718: function() {
                return new GameFightTurnEndMessage();
            },
            7870: function() {
                return new GameFightTurnFinishMessage();
            },
            102: function() {
                return new GameFightTurnListMessage();
            },
            6559: function() {
                return new GameFightTurnReadyMessage();
            },
            2866: function() {
                return new GameFightTurnReadyRequestMessage();
            },
            55: function() {
                return new GameFightTurnResumeMessage();
            },
            1987: function() {
                return new GameFightTurnStartMessage();
            },
            2368: function() {
                return new GameFightTurnStartPlayingMessage();
            },
            9852: function() {
                return new GameFightUpdateTeamMessage();
            },
            7193: function() {
                return new RefreshCharacterStatsMessage();
            },
            156: function() {
                return new SlaveNoLongerControledMessage();
            },
            6145: function() {
                return new SlaveSwitchContextMessage();
            },
            4129: function() {
                return new GameCautiousMapMovementMessage();
            },
            7296: function() {
                return new GameCautiousMapMovementRequestMessage();
            },
            5580: function() {
                return new GameContextCreateErrorMessage();
            },
            6478: function() {
                return new GameContextCreateMessage();
            },
            1530: function() {
                return new GameContextCreateRequestMessage();
            },
            3704: function() {
                return new GameContextDestroyMessage();
            },
            7588: function() {
                return new GameContextKickMessage();
            },
            4094: function() {
                return new GameContextMoveElementMessage();
            },
            4072: function() {
                return new GameContextMoveMultipleElementsMessage();
            },
            5896: function() {
                return new GameContextQuitMessage();
            },
            4992: function() {
                return new GameContextReadyMessage();
            },
            7571: function() {
                return new GameContextRefreshEntityLookMessage();
            },
            738: function() {
                return new GameContextRemoveElementMessage();
            },
            1879: function() {
                return new GameContextRemoveElementWithEventMessage();
            },
            5186: function() {
                return new GameContextRemoveMultipleElementsMessage();
            },
            9693: function() {
                return new GameContextRemoveMultipleElementsWithEventsMessage();
            },
            1704: function() {
                return new GameEntitiesDispositionMessage();
            },
            4091: function() {
                return new GameEntityDispositionErrorMessage();
            },
            2138: function() {
                return new GameEntityDispositionMessage();
            },
            4931: function() {
                return new GameMapChangeOrientationMessage();
            },
            7489: function() {
                return new GameMapChangeOrientationRequestMessage();
            },
            6158: function() {
                return new GameMapChangeOrientationsMessage();
            },
            8311: function() {
                return new GameMapMovementCancelMessage();
            },
            302: function() {
                return new GameMapMovementConfirmMessage();
            },
            6174: function() {
                return new GameMapMovementMessage();
            },
            6639: function() {
                return new GameMapMovementRequestMessage();
            },
            9225: function() {
                return new GameMapNoMovementMessage();
            },
            385: function() {
                return new GameRefreshMonsterBoostsMessage();
            },
            996: function() {
                return new GameDataPaddockObjectAddMessage();
            },
            2735: function() {
                return new GameDataPaddockObjectListAddMessage();
            },
            2233: function() {
                return new GameDataPaddockObjectRemoveMessage();
            },
            7915: function() {
                return new MountDataErrorMessage();
            },
            7683: function() {
                return new MountDataMessage();
            },
            4678: function() {
                return new MountEmoteIconUsedOkMessage();
            },
            3799: function() {
                return new MountEquipedErrorMessage();
            },
            9146: function() {
                return new MountFeedRequestMessage();
            },
            9721: function() {
                return new MountHarnessColorsUpdateRequestMessage();
            },
            7514: function() {
                return new MountHarnessDissociateRequestMessage();
            },
            8244: function() {
                return new MountInformationInPaddockRequestMessage();
            },
            1017: function() {
                return new MountInformationRequestMessage();
            },
            6651: function() {
                return new MountReleasedMessage();
            },
            4873: function() {
                return new MountReleaseRequestMessage();
            },
            2577: function() {
                return new MountRenamedMessage();
            },
            5809: function() {
                return new MountRenameRequestMessage();
            },
            328: function() {
                return new MountRidingMessage();
            },
            7145: function() {
                return new MountSetMessage();
            },
            3546: function() {
                return new MountSetXpRatioRequestMessage();
            },
            5176: function() {
                return new MountSterilizedMessage();
            },
            3111: function() {
                return new MountSterilizeRequestMessage();
            },
            5154: function() {
                return new MountToggleRidingRequestMessage();
            },
            6291: function() {
                return new MountUnSetMessage();
            },
            2899: function() {
                return new MountXpRatioMessage();
            },
            6206: function() {
                return new PaddockBuyRequestMessage();
            },
            765: function() {
                return new PaddockBuyResultMessage();
            },
            2761: function() {
                return new PaddockMoveItemRequestMessage();
            },
            639: function() {
                return new PaddockRemoveItemRequestMessage();
            },
            1043: function() {
                return new PaddockSellRequestMessage();
            },
            8221: function() {
                return new NotificationByServerMessage();
            },
            6597: function() {
                return new NotificationListMessage();
            },
            9791: function() {
                return new NotificationResetMessage();
            },
            6869: function() {
                return new NotificationUpdateFlagMessage();
            },
            8197: function() {
                return new AlignmentWarEffortProgressionMessage();
            },
            9210: function() {
                return new AlignmentWarEffortProgressionRequestMessage();
            },
            3377: function() {
                return new AnomalyOpenedMessage();
            },
            7651: function() {
                return new AnomalyStateMessage();
            },
            52: function() {
                return new MapComplementaryInformationsAnomalyMessage();
            },
            5036: function() {
                return new AnomalySubareaInformationRequestMessage();
            },
            9094: function() {
                return new AnomalySubareaInformationResponseMessage();
            },
            8724: function() {
                return new BreachBranchesMessage();
            },
            4966: function() {
                return new BreachBonusMessage();
            },
            7779: function() {
                return new BreachBudgetMessage();
            },
            2322: function() {
                return new BreachCharactersMessage();
            },
            2338: function() {
                return new BreachEnterMessage();
            },
            7787: function() {
                return new BreachExitRequestMessage();
            },
            8365: function() {
                return new BreachExitResponseMessage();
            },
            3579: function() {
                return new BreachRoomLockedMessage();
            },
            7363: function() {
                return new BreachRoomUnlockRequestMessage();
            },
            8037: function() {
                return new BreachRoomUnlockResultMessage();
            },
            5933: function() {
                return new BreachSavedMessage();
            },
            7262: function() {
                return new BreachStateMessage();
            },
            7242: function() {
                return new BreachTeleportRequestMessage();
            },
            4007: function() {
                return new BreachTeleportResponseMessage();
            },
            9740: function() {
                return new MapComplementaryInformationsBreachMessage();
            },
            40: function() {
                return new BreachInvitationAnswerMessage();
            },
            5347: function() {
                return new BreachInvitationCloseMessage();
            },
            9853: function() {
                return new BreachInvitationOfferMessage();
            },
            1657: function() {
                return new BreachInvitationRequestMessage();
            },
            9038: function() {
                return new BreachInvitationResponseMessage();
            },
            7729: function() {
                return new BreachKickRequestMessage();
            },
            8683: function() {
                return new BreachKickResponseMessage();
            },
            384: function() {
                return new BreachRewardBoughtMessage();
            },
            9930: function() {
                return new BreachRewardBuyMessage();
            },
            9196: function() {
                return new BreachRewardsMessage();
            },
            7054: function() {
                return new ChangeMapMessage();
            },
            2503: function() {
                return new CurrentMapInstanceMessage();
            },
            3145: function() {
                return new CurrentMapMessage();
            },
            8141: function() {
                return new GameRolePlayFreeSoulRequestMessage();
            },
            6207: function() {
                return new GameRolePlayGameOverMessage();
            },
            9074: function() {
                return new GameRolePlayPlayerLifeStatusMessage();
            },
            7659: function() {
                return new WarnOnPermaDeathMessage();
            },
            4342: function() {
                return new GameRolePlayDelayedActionFinishedMessage();
            },
            4763: function() {
                return new GameRolePlayDelayedActionMessage();
            },
            7965: function() {
                return new GameRolePlayDelayedObjectUseMessage();
            },
            526: function() {
                return new DiceRollRequestMessage();
            },
            556: function() {
                return new DocumentReadingBeginMessage();
            },
            3895: function() {
                return new OpenGuideBookMessage();
            },
            9586: function() {
                return new EmoteAddMessage();
            },
            507: function() {
                return new EmoteListMessage();
            },
            8348: function() {
                return new EmotePlayAbstractMessage();
            },
            8572: function() {
                return new EmotePlayErrorMessage();
            },
            5777: function() {
                return new EmotePlayMassiveMessage();
            },
            3603: function() {
                return new EmotePlayMessage();
            },
            4677: function() {
                return new EmotePlayRequestMessage();
            },
            3592: function() {
                return new EmoteRemoveMessage();
            },
            9984: function() {
                return new ErrorMapNotFoundMessage();
            },
            9421: function() {
                return new GameRolePlayArenaFightAnswerMessage();
            },
            9985: function() {
                return new GameRolePlayArenaFighterStatusMessage();
            },
            3409: function() {
                return new GameRolePlayArenaFightPropositionMessage();
            },
            6700: function() {
                return new GameRolePlayArenaInvitationCandidatesAnswerMessage();
            },
            8806: function() {
                return new GameRolePlayArenaLeagueRewardsMessage();
            },
            7468: function() {
                return new GameRolePlayArenaPlayerBehavioursMessage();
            },
            888: function() {
                return new GameRolePlayArenaRegisterMessage();
            },
            6193: function() {
                return new GameRolePlayArenaRegistrationStatusMessage();
            },
            4858: function() {
                return new GameRolePlayArenaRegistrationWarningMessage();
            },
            1936: function() {
                return new GameRolePlayArenaSwitchToFightServerMessage();
            },
            9037: function() {
                return new GameRolePlayArenaSwitchToGameServerMessage();
            },
            2239: function() {
                return new GameRolePlayArenaUnregisterMessage();
            },
            8232: function() {
                return new GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage();
            },
            5977: function() {
                return new GameRolePlayArenaUpdatePlayerInfosMessage();
            },
            4453: function() {
                return new GameRolePlayAggressionMessage();
            },
            1998: function() {
                return new GameRolePlayAttackMonsterRequestMessage();
            },
            2752: function() {
                return new GameRolePlayFightRequestCanceledMessage();
            },
            8414: function() {
                return new GameRolePlayMonsterAngryAtPlayerMessage();
            },
            6627: function() {
                return new GameRolePlayMonsterNotAngryAtPlayerMessage();
            },
            1584: function() {
                return new GameRolePlayPlayerFightFriendlyAnsweredMessage();
            },
            5426: function() {
                return new GameRolePlayPlayerFightFriendlyAnswerMessage();
            },
            3018: function() {
                return new GameRolePlayPlayerFightFriendlyRequestedMessage();
            },
            1697: function() {
                return new GameRolePlayPlayerFightRequestMessage();
            },
            2463: function() {
                return new GameRolePlayRemoveChallengeMessage();
            },
            1759: function() {
                return new GameRolePlayShowChallengeMessage();
            },
            3456: function() {
                return new GameRolePlayShowActorMessage();
            },
            3225: function() {
                return new GameRolePlayShowActorWithEventMessage();
            },
            959: function() {
                return new GameRolePlayShowMultipleActorsMessage();
            },
            2766: function() {
                return new ChangeHavenBagRoomRequestMessage();
            },
            1629: function() {
                return new ChangeThemeRequestMessage();
            },
            9998: function() {
                return new CloseHavenBagFurnitureSequenceRequestMessage();
            },
            4669: function() {
                return new EditHavenBagCancelRequestMessage();
            },
            2552: function() {
                return new EditHavenBagFinishedMessage();
            },
            474: function() {
                return new EditHavenBagRequestMessage();
            },
            7016: function() {
                return new EditHavenBagStartMessage();
            },
            4590: function() {
                return new EnterHavenBagRequestMessage();
            },
            4256: function() {
                return new ExitHavenBagRequestMessage();
            },
            4338: function() {
                return new HavenBagDailyLoteryMessage();
            },
            4362: function() {
                return new HavenBagFurnituresMessage();
            },
            1830: function() {
                return new HavenBagFurnituresRequestMessage();
            },
            4278: function() {
                return new HavenBagPackListMessage();
            },
            9458: function() {
                return new HavenBagRoomUpdateMessage();
            },
            5696: function() {
                return new KickHavenBagRequestMessage();
            },
            1314: function() {
                return new HavenBagPermissionsUpdateMessage();
            },
            1368: function() {
                return new HavenBagPermissionsUpdateRequestMessage();
            },
            6322: function() {
                return new InviteInHavenBagClosedMessage();
            },
            1881: function() {
                return new InviteInHavenBagMessage();
            },
            4145: function() {
                return new InviteInHavenBagOfferMessage();
            },
            4689: function() {
                return new TeleportHavenBagAnswerMessage();
            },
            3182: function() {
                return new TeleportHavenBagRequestMessage();
            },
            9397: function() {
                return new OpenHavenBagFurnitureSequenceRequestMessage();
            },
            2128: function() {
                return new AccountHouseMessage();
            },
            223: function() {
                return new HouseGuildNoneMessage();
            },
            3919: function() {
                return new HouseGuildRightsMessage();
            },
            8381: function() {
                return new HouseGuildRightsViewMessage();
            },
            8987: function() {
                return new HouseGuildShareRequestMessage();
            },
            597: function() {
                return new HouseBuyRequestMessage();
            },
            4144: function() {
                return new HouseBuyResultMessage();
            },
            6944: function() {
                return new HouseKickRequestMessage();
            },
            2788: function() {
                return new HouseLockFromInsideRequestMessage();
            },
            8296: function() {
                return new HousePropertiesMessage();
            },
            5826: function() {
                return new HouseSellFromInsideRequestMessage();
            },
            27: function() {
                return new HouseSellingUpdateMessage();
            },
            722: function() {
                return new HouseSellRequestMessage();
            },
            4073: function() {
                return new HouseToSellFilterMessage();
            },
            9263: function() {
                return new HouseToSellListMessage();
            },
            5271: function() {
                return new HouseToSellListRequestMessage();
            },
            2314: function() {
                return new JobAllowMultiCraftRequestMessage();
            },
            5452: function() {
                return new JobBookSubscriptionMessage();
            },
            2994: function() {
                return new JobCrafterDirectoryAddMessage();
            },
            8024: function() {
                return new JobCrafterDirectoryDefineSettingsMessage();
            },
            389: function() {
                return new JobCrafterDirectoryEntryMessage();
            },
            2490: function() {
                return new JobCrafterDirectoryEntryRequestMessage();
            },
            3390: function() {
                return new JobCrafterDirectoryListMessage();
            },
            5761: function() {
                return new JobCrafterDirectoryListRequestMessage();
            },
            8338: function() {
                return new JobCrafterDirectoryRemoveMessage();
            },
            6629: function() {
                return new JobCrafterDirectorySettingsMessage();
            },
            7435: function() {
                return new JobDescriptionMessage();
            },
            7739: function() {
                return new JobExperienceMultiUpdateMessage();
            },
            1202: function() {
                return new JobExperienceOtherPlayerUpdateMessage();
            },
            1215: function() {
                return new JobExperienceUpdateMessage();
            },
            2811: function() {
                return new JobLevelUpMessage();
            },
            5141: function() {
                return new JobMultiCraftAvailableSkillsMessage();
            },
            4181: function() {
                return new LockableChangeCodeMessage();
            },
            756: function() {
                return new LockableCodeResultMessage();
            },
            8686: function() {
                return new LockableShowCodeDialogMessage();
            },
            6940: function() {
                return new LockableStateUpdateAbstractMessage();
            },
            2441: function() {
                return new LockableStateUpdateHouseDoorMessage();
            },
            491: function() {
                return new LockableStateUpdateStorageMessage();
            },
            2014: function() {
                return new LockableUseCodeMessage();
            },
            5660: function() {
                return new MapComplementaryInformationsDataInHavenBagMessage();
            },
            2902: function() {
                return new MapComplementaryInformationsDataInHouseMessage();
            },
            695: function() {
                return new MapComplementaryInformationsDataMessage();
            },
            3302: function() {
                return new MapComplementaryInformationsWithCoordsMessage();
            },
            14: function() {
                return new MapFightCountMessage();
            },
            3445: function() {
                return new MapFightStartPositionsUpdateMessage();
            },
            9293: function() {
                return new MapInformationsRequestMessage();
            },
            5033: function() {
                return new MapObstacleUpdateMessage();
            },
            8625: function() {
                return new MapRunningFightDetailsExtendedMessage();
            },
            2947: function() {
                return new MapRunningFightDetailsMessage();
            },
            3294: function() {
                return new MapRunningFightDetailsRequestMessage();
            },
            6504: function() {
                return new MapRunningFightListMessage();
            },
            2782: function() {
                return new MapRunningFightListRequestMessage();
            },
            8353: function() {
                return new AlliancePrismDialogQuestionMessage();
            },
            9057: function() {
                return new EntityTalkMessage();
            },
            6306: function() {
                return new ListMapNpcsQuestStatusUpdateMessage();
            },
            1724: function() {
                return new NpcDialogCreationMessage();
            },
            524: function() {
                return new NpcDialogQuestionMessage();
            },
            7517: function() {
                return new NpcDialogReplyMessage();
            },
            2908: function() {
                return new NpcGenericActionFailureMessage();
            },
            4675: function() {
                return new NpcGenericActionRequestMessage();
            },
            6077: function() {
                return new PortalDialogCreationMessage();
            },
            8033: function() {
                return new TaxCollectorDialogQuestionBasicMessage();
            },
            6709: function() {
                return new TaxCollectorDialogQuestionExtendedMessage();
            },
            595: function() {
                return new ObjectGroundAddedMessage();
            },
            2845: function() {
                return new ObjectGroundListAddedMessage();
            },
            3534: function() {
                return new ObjectGroundRemovedMessage();
            },
            823: function() {
                return new ObjectGroundRemovedMultipleMessage();
            },
            9266: function() {
                return new GameDataPlayFarmObjectAnimationMessage();
            },
            5635: function() {
                return new PaddockPropertiesMessage();
            },
            7797: function() {
                return new PaddockSellBuyDialogMessage();
            },
            1854: function() {
                return new PaddockToSellFilterMessage();
            },
            9204: function() {
                return new PaddockToSellListMessage();
            },
            9694: function() {
                return new PaddockToSellListRequestMessage();
            },
            9359: function() {
                return new AbstractPartyEventMessage();
            },
            9489: function() {
                return new AbstractPartyMemberInFightMessage();
            },
            6775: function() {
                return new AbstractPartyMessage();
            },
            101: function() {
                return new PartyMemberInBreachFightMessage();
            },
            1652: function() {
                return new DungeonPartyFinderAvailableDungeonsMessage();
            },
            4464: function() {
                return new DungeonPartyFinderAvailableDungeonsRequestMessage();
            },
            8513: function() {
                return new DungeonPartyFinderListenErrorMessage();
            },
            9733: function() {
                return new DungeonPartyFinderListenRequestMessage();
            },
            8873: function() {
                return new DungeonPartyFinderRegisterErrorMessage();
            },
            9338: function() {
                return new DungeonPartyFinderRegisterRequestMessage();
            },
            4458: function() {
                return new DungeonPartyFinderRegisterSuccessMessage();
            },
            6025: function() {
                return new DungeonPartyFinderRoomContentMessage();
            },
            4695: function() {
                return new DungeonPartyFinderRoomContentUpdateMessage();
            },
            3775: function() {
                return new PartyEntityUpdateLightMessage();
            },
            1919: function() {
                return new PartyAbdicateThroneMessage();
            },
            38: function() {
                return new PartyAcceptInvitationMessage();
            },
            5476: function() {
                return new PartyCancelInvitationMessage();
            },
            5196: function() {
                return new PartyCancelInvitationNotificationMessage();
            },
            3160: function() {
                return new PartyCannotJoinErrorMessage();
            },
            8798: function() {
                return new PartyDeletedMessage();
            },
            9807: function() {
                return new PartyFollowMemberRequestMessage();
            },
            4903: function() {
                return new PartyFollowStatusUpdateMessage();
            },
            5237: function() {
                return new PartyFollowThisMemberRequestMessage();
            },
            5724: function() {
                return new PartyInvitationArenaRequestMessage();
            },
            6577: function() {
                return new PartyInvitationCancelledForGuestMessage();
            },
            7671: function() {
                return new PartyInvitationDetailsMessage();
            },
            4130: function() {
                return new PartyInvitationDetailsRequestMessage();
            },
            8279: function() {
                return new PartyInvitationDungeonDetailsMessage();
            },
            8319: function() {
                return new PartyInvitationDungeonMessage();
            },
            4625: function() {
                return new PartyInvitationDungeonRequestMessage();
            },
            5425: function() {
                return new PartyInvitationMessage();
            },
            7376: function() {
                return new PartyInvitationRequestMessage();
            },
            8785: function() {
                return new PartyJoinMessage();
            },
            6033: function() {
                return new PartyKickedByMessage();
            },
            6111: function() {
                return new PartyKickRequestMessage();
            },
            860: function() {
                return new PartyLeaderUpdateMessage();
            },
            1026: function() {
                return new PartyLeaveMessage();
            },
            5980: function() {
                return new PartyLeaveRequestMessage();
            },
            263: function() {
                return new PartyLocateMembersMessage();
            },
            1037: function() {
                return new PartyLocateMembersRequestMessage();
            },
            1222: function() {
                return new PartyLoyaltyStatusMessage();
            },
            6052: function() {
                return new PartyMemberEjectedMessage();
            },
            3094: function() {
                return new PartyMemberInStandardFightMessage();
            },
            6692: function() {
                return new PartyMemberRemoveMessage();
            },
            9490: function() {
                return new PartyModifiableStatusMessage();
            },
            7694: function() {
                return new PartyNameSetErrorMessage();
            },
            9077: function() {
                return new PartyNameSetRequestMessage();
            },
            7353: function() {
                return new PartyNameUpdateMessage();
            },
            6462: function() {
                return new PartyNewGuestMessage();
            },
            9480: function() {
                return new PartyNewMemberMessage();
            },
            550: function() {
                return new PartyPledgeLoyaltyRequestMessage();
            },
            3324: function() {
                return new PartyRefuseInvitationMessage();
            },
            9374: function() {
                return new PartyRefuseInvitationNotificationMessage();
            },
            1488: function() {
                return new PartyRestrictedMessage();
            },
            4673: function() {
                return new PartyStopFollowRequestMessage();
            },
            4567: function() {
                return new PartyUpdateLightMessage();
            },
            4960: function() {
                return new PartyUpdateMessage();
            },
            1096: function() {
                return new PurchasableDialogMessage();
            },
            758: function() {
                return new FollowedQuestsMessage();
            },
            1546: function() {
                return new FollowQuestObjectiveRequestMessage();
            },
            7391: function() {
                return new GuidedModeQuitRequestMessage();
            },
            4746: function() {
                return new GuidedModeReturnRequestMessage();
            },
            6218: function() {
                return new QuestListMessage();
            },
            804: function() {
                return new QuestListRequestMessage();
            },
            8772: function() {
                return new QuestObjectiveValidatedMessage();
            },
            5927: function() {
                return new QuestObjectiveValidationMessage();
            },
            1764: function() {
                return new QuestStartedMessage();
            },
            8923: function() {
                return new QuestStartRequestMessage();
            },
            1723: function() {
                return new QuestStepInfoMessage();
            },
            896: function() {
                return new QuestStepInfoRequestMessage();
            },
            9861: function() {
                return new QuestStepStartedMessage();
            },
            9356: function() {
                return new QuestStepValidatedMessage();
            },
            1190: function() {
                return new QuestValidatedMessage();
            },
            2132: function() {
                return new RefreshFollowedQuestsOrderRequestMessage();
            },
            1306: function() {
                return new UnfollowQuestObjectiveRequestMessage();
            },
            1403: function() {
                return new WatchQuestListMessage();
            },
            5627: function() {
                return new WatchQuestStepInfoMessage();
            },
            2567: function() {
                return new WatchQuestStepInfoRequestMessage();
            },
            2329: function() {
                return new SpellVariantActivationMessage();
            },
            9578: function() {
                return new SpellVariantActivationRequestMessage();
            },
            6170: function() {
                return new StatsUpgradeRequestMessage();
            },
            7979: function() {
                return new StatsUpgradeResultMessage();
            },
            445: function() {
                return new StopToListenRunningFightRequestMessage();
            },
            5569: function() {
                return new SubareaRewardRateMessage();
            },
            7355: function() {
                return new TeleportOnSameMapMessage();
            },
            1836: function() {
                return new PortalUseRequestMessage();
            },
            8373: function() {
                return new TreasureHuntAvailableRetryCountUpdateMessage();
            },
            3228: function() {
                return new TreasureHuntDigRequestAnswerFailedMessage();
            },
            617: function() {
                return new TreasureHuntDigRequestAnswerMessage();
            },
            1139: function() {
                return new TreasureHuntDigRequestMessage();
            },
            6113: function() {
                return new TreasureHuntFinishedMessage();
            },
            6564: function() {
                return new TreasureHuntFlagRemoveRequestMessage();
            },
            3593: function() {
                return new TreasureHuntFlagRequestAnswerMessage();
            },
            7554: function() {
                return new TreasureHuntFlagRequestMessage();
            },
            1081: function() {
                return new TreasureHuntGiveUpRequestMessage();
            },
            9834: function() {
                return new TreasureHuntLegendaryRequestMessage();
            },
            2986: function() {
                return new TreasureHuntMessage();
            },
            6903: function() {
                return new TreasureHuntRequestAnswerMessage();
            },
            8078: function() {
                return new TreasureHuntShowLegendaryUIMessage();
            },
            8624: function() {
                return new GameRolePlaySpellAnimMessage();
            },
            9767: function() {
                return new ShowCellMessage();
            },
            2880: function() {
                return new ShowCellRequestMessage();
            },
            7844: function() {
                return new ShowCellSpectatorMessage();
            },
            3110: function() {
                return new LeaveDialogMessage();
            },
            9511: function() {
                return new LeaveDialogRequestMessage();
            },
            1886: function() {
                return new PauseDialogMessage();
            },
            6656: function() {
                return new EntitiesInformationMessage();
            },
            7132: function() {
                return new EntityInformationMessage();
            },
            5075: function() {
                return new ObjectFeedMessage();
            },
            6002: function() {
                return new FinishMoveListMessage();
            },
            935: function() {
                return new FinishMoveListRequestMessage();
            },
            3539: function() {
                return new FinishMoveSetRequestMessage();
            },
            7829: function() {
                return new AcquaintanceAddedMessage();
            },
            8067: function() {
                return new AcquaintancesGetListMessage();
            },
            6451: function() {
                return new AcquaintancesListMessage();
            },
            792: function() {
                return new ContactAddFailureMessage();
            },
            1551: function() {
                return new FriendAddedMessage();
            },
            8282: function() {
                return new FriendAddFailureMessage();
            },
            6143: function() {
                return new FriendAddRequestMessage();
            },
            7180: function() {
                return new FriendDeleteRequestMessage();
            },
            5708: function() {
                return new FriendDeleteResultMessage();
            },
            7472: function() {
                return new FriendJoinRequestMessage();
            },
            4131: function() {
                return new FriendSetStatusShareMessage();
            },
            1511: function() {
                return new FriendSetWarnOnConnectionMessage();
            },
            7677: function() {
                return new FriendSetWarnOnLevelGainMessage();
            },
            3554: function() {
                return new FriendsGetListMessage();
            },
            1452: function() {
                return new FriendsListMessage();
            },
            199: function() {
                return new FriendSpouseFollowWithCompassRequestMessage();
            },
            8233: function() {
                return new FriendSpouseJoinRequestMessage();
            },
            7408: function() {
                return new FriendStatusShareStateMessage();
            },
            3423: function() {
                return new FriendUpdateMessage();
            },
            4506: function() {
                return new FriendWarnOnConnectionStateMessage();
            },
            7621: function() {
                return new FriendWarnOnLevelGainStateMessage();
            },
            3429: function() {
                return new IgnoredAddedMessage();
            },
            6611: function() {
                return new IgnoredAddFailureMessage();
            },
            1284: function() {
                return new IgnoredAddRequestMessage();
            },
            9406: function() {
                return new IgnoredDeleteRequestMessage();
            },
            5106: function() {
                return new IgnoredDeleteResultMessage();
            },
            9176: function() {
                return new IgnoredGetListMessage();
            },
            6361: function() {
                return new IgnoredListMessage();
            },
            7971: function() {
                return new SpouseGetInformationsMessage();
            },
            9828: function() {
                return new SpouseInformationsMessage();
            },
            6714: function() {
                return new SpouseStatusMessage();
            },
            2751: function() {
                return new WarnOnPermaDeathStateMessage();
            },
            7497: function() {
                return new GuestLimitationMessage();
            },
            9281: function() {
                return new GuestModeMessage();
            },
            5583: function() {
                return new GuildApplicationAnswerMessage();
            },
            6357: function() {
                return new GuildApplicationDeletedMessage();
            },
            6248: function() {
                return new GuildApplicationIsAnsweredMessage();
            },
            1821: function() {
                return new GuildApplicationListenMessage();
            },
            3123: function() {
                return new GuildApplicationPresenceMessage();
            },
            8112: function() {
                return new GuildApplicationReceivedMessage();
            },
            9302: function() {
                return new GuildDeleteApplicationRequestMessage();
            },
            6087: function() {
                return new GuildGetPlayerApplicationMessage();
            },
            1379: function() {
                return new GuildIsThereAnyApplicationMessage();
            },
            1049: function() {
                return new GuildListApplicationAnswerMessage();
            },
            2316: function() {
                return new GuildListApplicationModifiedMessage();
            },
            2510: function() {
                return new GuildListApplicationRequestMessage();
            },
            2453: function() {
                return new GuildPlayerApplicationAbstractMessage();
            },
            5318: function() {
                return new GuildPlayerApplicationInformationMessage();
            },
            933: function() {
                return new GuildPlayerNoApplicationInformationMessage();
            },
            8897: function() {
                return new GuildSubmitApplicationMessage();
            },
            3891: function() {
                return new GuildUpdateApplicationMessage();
            },
            15: function() {
                return new GuildUpdateNoteMessage();
            },
            9017: function() {
                return new ChallengeFightJoinRefusedMessage();
            },
            8748: function() {
                return new AddListenerOnSynchronizedStorageMessage();
            },
            4233: function() {
                return new ListenersOfSynchronizedStorageMessage();
            },
            8548: function() {
                return new RemoveListenerOnSynchronizedStorageMessage();
            },
            4614: function() {
                return new CreateGuildRankRequestMessage();
            },
            7460: function() {
                return new GuildBulletinMessage();
            },
            4667: function() {
                return new GuildBulletinSetErrorMessage();
            },
            9739: function() {
                return new GuildBulletinSetRequestMessage();
            },
            1999: function() {
                return new GuildChangeMemberParametersMessage();
            },
            3299: function() {
                return new GuildCharacsUpgradeRequestMessage();
            },
            7525: function() {
                return new GuildChestTabContributionMessage();
            },
            4026: function() {
                return new GuildChestTabContributionsMessage();
            },
            9676: function() {
                return new GuildChestTabLastContributionMessage();
            },
            7399: function() {
                return new GuildCreationResultMessage();
            },
            3789: function() {
                return new GuildCreationStartedMessage();
            },
            7219: function() {
                return new GuildCreationValidMessage();
            },
            205: function() {
                return new GuildFactsErrorMessage();
            },
            9389: function() {
                return new GuildFactsMessage();
            },
            531: function() {
                return new GuildFactsRequestMessage();
            },
            9107: function() {
                return new GuildGetChestTabContributionsRequestMessage();
            },
            5890: function() {
                return new GuildGetInformationsMessage();
            },
            6841: function() {
                return new GuildHouseRemoveMessage();
            },
            1134: function() {
                return new GuildHousesInformationMessage();
            },
            3816: function() {
                return new GuildHouseUpdateInformationMessage();
            },
            4169: function() {
                return new GuildInformationsGeneralMessage();
            },
            6600: function() {
                return new GuildInformationsMembersMessage();
            },
            2937: function() {
                return new GuildInformationsMemberUpdateMessage();
            },
            7863: function() {
                return new GuildInformationsPaddocksMessage();
            },
            3470: function() {
                return new GuildInvitationAnswerMessage();
            },
            8131: function() {
                return new GuildInvitationMessage();
            },
            3782: function() {
                return new GuildInvitationStateRecrutedMessage();
            },
            3652: function() {
                return new GuildInvitationStateRecruterMessage();
            },
            296: function() {
                return new GuildInvitedMessage();
            },
            1067: function() {
                return new GuildJoinAutomaticallyRequestMessage();
            },
            984: function() {
                return new GuildJoinedMessage();
            },
            4360: function() {
                return new GuildKickRequestMessage();
            },
            5908: function() {
                return new GuildLeftMessage();
            },
            1713: function() {
                return new GuildLevelUpMessage();
            },
            5122: function() {
                return new GuildListMessage();
            },
            1501: function() {
                return new GuildMemberLeavingMessage();
            },
            214: function() {
                return new GuildMemberOnlineStatusMessage();
            },
            189: function() {
                return new GuildMembershipMessage();
            },
            239: function() {
                return new GuildMemberStartWarnOnConnectionMessage();
            },
            2325: function() {
                return new GuildMemberStopWarnOnConnectionMessage();
            },
            6290: function() {
                return new GuildModificationEmblemValidMessage();
            },
            4859: function() {
                return new GuildModificationNameValidMessage();
            },
            295: function() {
                return new GuildModificationResultMessage();
            },
            2410: function() {
                return new GuildModificationStartedMessage();
            },
            1705: function() {
                return new GuildModificationValidMessage();
            },
            5087: function() {
                return new GuildMotdMessage();
            },
            3887: function() {
                return new GuildMotdSetErrorMessage();
            },
            7776: function() {
                return new GuildMotdSetRequestMessage();
            },
            5692: function() {
                return new GuildPaddockBoughtMessage();
            },
            48: function() {
                return new GuildPaddockRemovedMessage();
            },
            7426: function() {
                return new GuildPaddockTeleportRequestMessage();
            },
            8184: function() {
                return new GuildRanksMessage();
            },
            1149: function() {
                return new GuildRanksRequestMessage();
            },
            6176: function() {
                return new GuildSelectChestTabRequestMessage();
            },
            4409: function() {
                return new GuildSpellUpgradeRequestMessage();
            },
            7331: function() {
                return new GuildSummaryMessage();
            },
            8581: function() {
                return new GuildSummaryRequestMessage();
            },
            9795: function() {
                return new GuildUpdateChestTabRequestMessage();
            },
            9456: function() {
                return new GuildLogbookInformationMessage();
            },
            7560: function() {
                return new GuildLogbookInformationRequestMessage();
            },
            1620: function() {
                return new GuildRecruitmentInvalidateMessage();
            },
            5839: function() {
                return new RecruitmentInformationMessage();
            },
            7658: function() {
                return new UpdateRecruitmentInformationMessage();
            },
            6527: function() {
                return new RemoveGuildRankRequestMessage();
            },
            3909: function() {
                return new StartGuildChestContributionMessage();
            },
            3185: function() {
                return new StartListenGuildChestStructureMessage();
            },
            9562: function() {
                return new StopGuildChestContributionMessage();
            },
            4831: function() {
                return new StopListenGuildChestStructureMessage();
            },
            5895: function() {
                return new TaxCollectorEquipmentUpdateMessage();
            },
            8535: function() {
                return new UpdateAllGuildRankRequestMessage();
            },
            9794: function() {
                return new UpdateGuildRankRequestMessage();
            },
            2656: function() {
                return new UpdateGuildRightsMessage();
            },
            8613: function() {
                return new HouseTeleportRequestMessage();
            },
            1333: function() {
                return new CharacterCapabilitiesMessage();
            },
            5077: function() {
                return new CharacterLoadingCompleteMessage();
            },
            6178: function() {
                return new OnConnectionEventMessage();
            },
            4584: function() {
                return new ServerExperienceModificatorMessage();
            },
            8088: function() {
                return new SetCharacterRestrictionsMessage();
            },
            8718: function() {
                return new InteractiveElementUpdatedMessage();
            },
            2157: function() {
                return new InteractiveMapUpdateMessage();
            },
            8940: function() {
                return new InteractiveUsedMessage();
            },
            5459: function() {
                return new InteractiveUseEndedMessage();
            },
            5734: function() {
                return new InteractiveUseErrorMessage();
            },
            6295: function() {
                return new InteractiveUseRequestMessage();
            },
            5764: function() {
                return new GroupTeleportPlayerAnswerMessage();
            },
            8093: function() {
                return new GroupTeleportPlayerCloseMessage();
            },
            9570: function() {
                return new GroupTeleportPlayerOfferMessage();
            },
            9243: function() {
                return new TeleportBuddiesAnswerMessage();
            },
            5207: function() {
                return new TeleportBuddiesMessage();
            },
            9327: function() {
                return new TeleportBuddiesRequestedMessage();
            },
            8212: function() {
                return new TeleportPlayerAnswerMessage();
            },
            6790: function() {
                return new TeleportPlayerCloseMessage();
            },
            1064: function() {
                return new TeleportPlayerOfferMessage();
            },
            5795: function() {
                return new TeleportToBuddyAnswerMessage();
            },
            5873: function() {
                return new TeleportToBuddyCloseMessage();
            },
            8992: function() {
                return new TeleportToBuddyOfferMessage();
            },
            7125: function() {
                return new InteractiveUseWithParamRequestMessage();
            },
            5787: function() {
                return new StatedElementUpdatedMessage();
            },
            8533: function() {
                return new StatedMapUpdateMessage();
            },
            7664: function() {
                return new KnownZaapListMessage();
            },
            1074: function() {
                return new TeleportDestinationsMessage();
            },
            7168: function() {
                return new TeleportRequestMessage();
            },
            6758: function() {
                return new ZaapDestinationsMessage();
            },
            153: function() {
                return new ZaapRespawnSaveRequestMessage();
            },
            9309: function() {
                return new ZaapRespawnUpdatedMessage();
            },
            951: function() {
                return new DecraftResultMessage();
            },
            9860: function() {
                return new EvolutiveObjectRecycleResultMessage();
            },
            5828: function() {
                return new ExchangeAcceptMessage();
            },
            7228: function() {
                return new ExchangeBidHouseBuyMessage();
            },
            7405: function() {
                return new ExchangeBidHouseBuyResultMessage();
            },
            4014: function() {
                return new ExchangeBidHouseGenericItemAddedMessage();
            },
            1069: function() {
                return new ExchangeBidHouseGenericItemRemovedMessage();
            },
            1990: function() {
                return new ExchangeBidHouseInListAddedMessage();
            },
            3590: function() {
                return new ExchangeBidHouseInListRemovedMessage();
            },
            6092: function() {
                return new ExchangeBidHouseInListUpdatedMessage();
            },
            6413: function() {
                return new ExchangeBidHouseItemAddOkMessage();
            },
            7081: function() {
                return new ExchangeBidHouseItemRemoveOkMessage();
            },
            8418: function() {
                return new ExchangeBidHouseListMessage();
            },
            8009: function() {
                return new ExchangeBidHousePriceMessage();
            },
            1214: function() {
                return new ExchangeBidHouseSearchMessage();
            },
            7879: function() {
                return new ExchangeBidHouseTypeMessage();
            },
            6665: function() {
                return new ExchangeBidHouseUnsoldItemsMessage();
            },
            7196: function() {
                return new ExchangeBidPriceForSellerMessage();
            },
            9764: function() {
                return new ExchangeBidPriceMessage();
            },
            5585: function() {
                return new ExchangeBidSearchOkMessage();
            },
            4160: function() {
                return new ExchangeBuyMessage();
            },
            1649: function() {
                return new ExchangeBuyOkMessage();
            },
            6783: function() {
                return new ExchangeCraftCountModifiedMessage();
            },
            4941: function() {
                return new ExchangeCraftCountRequestMessage();
            },
            4924: function() {
                return new ExchangeCrafterJobLevelupMessage();
            },
            4312: function() {
                return new ExchangeCraftPaymentModificationRequestMessage();
            },
            2288: function() {
                return new ExchangeCraftPaymentModifiedMessage();
            },
            1948: function() {
                return new ExchangeCraftResultMagicWithObjectDescMessage();
            },
            67: function() {
                return new ExchangeCraftResultMessage();
            },
            3999: function() {
                return new ExchangeCraftResultWithObjectDescMessage();
            },
            280: function() {
                return new ExchangeCraftResultWithObjectIdMessage();
            },
            8310: function() {
                return new ExchangeErrorMessage();
            },
            3813: function() {
                return new ExchangeHandleMountsMessage();
            },
            5230: function() {
                return new ExchangeIsReadyMessage();
            },
            3953: function() {
                return new ExchangeItemAutoCraftStopedMessage();
            },
            9150: function() {
                return new ExchangeLeaveMessage();
            },
            2513: function() {
                return new ExchangeMoneyMovementInformationMessage();
            },
            5574: function() {
                return new ExchangeMountFreeFromPaddockMessage();
            },
            2097: function() {
                return new ExchangeMountsPaddockAddMessage();
            },
            8227: function() {
                return new ExchangeMountsPaddockRemoveMessage();
            },
            5703: function() {
                return new ExchangeMountsStableAddMessage();
            },
            2979: function() {
                return new ExchangeMountsStableBornAddMessage();
            },
            1534: function() {
                return new ExchangeMountsStableRemoveMessage();
            },
            4915: function() {
                return new ExchangeMountStableErrorMessage();
            },
            4122: function() {
                return new ExchangeMountsTakenFromPaddockMessage();
            },
            5529: function() {
                return new ExchangeMountSterilizeFromPaddockMessage();
            },
            3343: function() {
                return new ExchangeObjectAddedMessage();
            },
            8438: function() {
                return new ExchangeObjectMessage();
            },
            5202: function() {
                return new ExchangeObjectModifyPricedMessage();
            },
            9588: function() {
                return new ExchangeObjectMoveKamaMessage();
            },
            1343: function() {
                return new ExchangeObjectMoveMessage();
            },
            1233: function() {
                return new ExchangeObjectMovePricedMessage();
            },
            5263: function() {
                return new ExchangeObjectMoveToTabMessage();
            },
            7120: function() {
                return new ExchangeObjectsAddedMessage();
            },
            5560: function() {
                return new ExchangeObjectTransfertAllFromInvMessage();
            },
            4489: function() {
                return new ExchangeObjectTransfertAllToInvMessage();
            },
            4358: function() {
                return new ExchangeObjectTransfertExistingFromInvMessage();
            },
            2383: function() {
                return new ExchangeObjectTransfertExistingToInvMessage();
            },
            8586: function() {
                return new ExchangeObjectTransfertListFromInvMessage();
            },
            4345: function() {
                return new ExchangeObjectTransfertListToInvMessage();
            },
            7368: function() {
                return new ExchangeObjectTransfertListWithQuantityToInvMessage();
            },
            1523: function() {
                return new ExchangeObjectUseInWorkshopMessage();
            },
            4016: function() {
                return new ExchangeOfflineSoldItemsMessage();
            },
            6648: function() {
                return new ExchangeOkMultiCraftMessage();
            },
            7760: function() {
                return new ExchangePlayerMultiCraftRequestMessage();
            },
            1592: function() {
                return new ExchangePlayerRequestMessage();
            },
            4758: function() {
                return new ExchangeReadyMessage();
            },
            8738: function() {
                return new ExchangeReplayStopMessage();
            },
            6601: function() {
                return new ExchangeRequestedMessage();
            },
            88: function() {
                return new ExchangeRequestedTradeMessage();
            },
            2858: function() {
                return new ExchangeRequestMessage();
            },
            9758: function() {
                return new ExchangeRequestOnMountStockMessage();
            },
            4495: function() {
                return new ExchangeRequestOnTaxCollectorMessage();
            },
            9007: function() {
                return new ExchangeSellMessage();
            },
            8812: function() {
                return new ExchangeSellOkMessage();
            },
            6900: function() {
                return new ExchangeSetCraftRecipeMessage();
            },
            2202: function() {
                return new ExchangeStartedBidBuyerMessage();
            },
            6402: function() {
                return new ExchangeStartedBidSellerMessage();
            },
            3414: function() {
                return new ExchangeStartedMessage();
            },
            3292: function() {
                return new ExchangeStartedMountStockMessage();
            },
            4235: function() {
                return new ExchangeStartedTaxCollectorEquipmentMessage();
            },
            9349: function() {
                return new ExchangeStartedTaxCollectorShopMessage();
            },
            5725: function() {
                return new ExchangeStartedWithMultiTabStorageMessage();
            },
            7482: function() {
                return new ExchangeStartedWithPodsMessage();
            },
            8705: function() {
                return new ExchangeStartedWithStorageMessage();
            },
            1786: function() {
                return new ExchangeStartOkCraftMessage();
            },
            9316: function() {
                return new ExchangeStartOkCraftWithInformationMessage();
            },
            5801: function() {
                return new ExchangeStartOkEvolutiveObjectRecycleTradeMessage();
            },
            2386: function() {
                return new ExchangeStartOkJobIndexMessage();
            },
            8655: function() {
                return new ExchangeStartOkMountMessage();
            },
            501: function() {
                return new ExchangeStartOkMountWithOutPaddockMessage();
            },
            5320: function() {
                return new ExchangeStartOkMulticraftCrafterMessage();
            },
            128: function() {
                return new ExchangeStartOkMulticraftCustomerMessage();
            },
            8657: function() {
                return new ExchangeStartOkNpcShopMessage();
            },
            1537: function() {
                return new ExchangeStartOkNpcTradeMessage();
            },
            8048: function() {
                return new ExchangeStartOkRecycleTradeMessage();
            },
            9289: function() {
                return new ExchangeStartOkRunesTradeMessage();
            },
            6256: function() {
                return new ExchangeStoppedMessage();
            },
            5477: function() {
                return new ExchangeTaxCollectorGetMessage();
            },
            706: function() {
                return new ExchangeTypesExchangerDescriptionForUserMessage();
            },
            177: function() {
                return new ExchangeTypesItemsExchangerDescriptionForUserMessage();
            },
            2296: function() {
                return new ExchangeWaitingResultMessage();
            },
            944: function() {
                return new ExchangeWeightMessage();
            },
            9025: function() {
                return new FocusedExchangeReadyMessage();
            },
            2274: function() {
                return new ItemNoMoreAvailableMessage();
            },
            5373: function() {
                return new JobBookSubscribeRequestMessage();
            },
            913: function() {
                return new RecycleResultMessage();
            },
            3719: function() {
                return new StartExchangeTaxCollectorEquipmentMessage();
            },
            255: function() {
                return new UpdateMountCharacteristicsMessage();
            },
            1116: function() {
                return new ExchangeKamaModifiedMessage();
            },
            3260: function() {
                return new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage();
            },
            7719: function() {
                return new ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage();
            },
            2026: function() {
                return new ExchangeObjectModifiedInBagMessage();
            },
            8162: function() {
                return new ExchangeObjectModifiedMessage();
            },
            2491: function() {
                return new ExchangeObjectPutInBagMessage();
            },
            5167: function() {
                return new ExchangeObjectRemovedFromBagMessage();
            },
            5115: function() {
                return new ExchangeObjectRemovedMessage();
            },
            4538: function() {
                return new ExchangeObjectsModifiedMessage();
            },
            4956: function() {
                return new ExchangeObjectsRemovedMessage();
            },
            9468: function() {
                return new ExchangePodsModifiedMessage();
            },
            7533: function() {
                return new GoldAddedMessage();
            },
            2012: function() {
                return new InventoryContentMessage();
            },
            1907: function() {
                return new InventoryWeightMessage();
            },
            3485: function() {
                return new LivingObjectChangeSkinRequestMessage();
            },
            7311: function() {
                return new LivingObjectDissociateMessage();
            },
            6766: function() {
                return new LivingObjectMessageMessage();
            },
            3879: function() {
                return new LivingObjectMessageRequestMessage();
            },
            3202: function() {
                return new MimicryObjectAssociatedMessage();
            },
            2104: function() {
                return new MimicryObjectEraseRequestMessage();
            },
            5728: function() {
                return new MimicryObjectErrorMessage();
            },
            6060: function() {
                return new MimicryObjectFeedAndAssociateRequestMessage();
            },
            6951: function() {
                return new MimicryObjectPreviewMessage();
            },
            9325: function() {
                return new ObjectAddedMessage();
            },
            8182: function() {
                return new ObjectDeletedMessage();
            },
            2859: function() {
                return new ObjectDeleteMessage();
            },
            430: function() {
                return new ObjectDropMessage();
            },
            7056: function() {
                return new ObjectErrorMessage();
            },
            6036: function() {
                return new ObjectJobAddedMessage();
            },
            2227: function() {
                return new ObjectModifiedMessage();
            },
            6536: function() {
                return new ObjectMovementMessage();
            },
            2962: function() {
                return new ObjectQuantityMessage();
            },
            365: function() {
                return new ObjectsAddedMessage();
            },
            6633: function() {
                return new ObjectsDeletedMessage();
            },
            5462: function() {
                return new ObjectSetPositionMessage();
            },
            6590: function() {
                return new ObjectsQuantityMessage();
            },
            167: function() {
                return new ObjectUseMessage();
            },
            8520: function() {
                return new ObjectUseMultipleMessage();
            },
            4749: function() {
                return new ObjectUseOnCellMessage();
            },
            5850: function() {
                return new ObjectUseOnCharacterMessage();
            },
            5780: function() {
                return new ObtainedItemMessage();
            },
            3479: function() {
                return new ObtainedItemWithBonusMessage();
            },
            3055: function() {
                return new SetUpdateMessage();
            },
            8896: function() {
                return new SymbioticObjectAssociatedMessage();
            },
            2115: function() {
                return new SymbioticObjectAssociateRequestMessage();
            },
            7722: function() {
                return new SymbioticObjectErrorMessage();
            },
            4015: function() {
                return new WatchInventoryContentMessage();
            },
            7212: function() {
                return new WrapperObjectAssociatedMessage();
            },
            1058: function() {
                return new WrapperObjectDissociateRequestMessage();
            },
            148: function() {
                return new WrapperObjectErrorMessage();
            },
            5667: function() {
                return new KamasUpdateMessage();
            },
            3442: function() {
                return new MultiTabStorageMessage();
            },
            3885: function() {
                return new ObjectAveragePricesErrorMessage();
            },
            8285: function() {
                return new ObjectAveragePricesGetMessage();
            },
            9290: function() {
                return new ObjectAveragePricesMessage();
            },
            8002: function() {
                return new SpellListMessage();
            },
            899: function() {
                return new StorageInventoryContentMessage();
            },
            212: function() {
                return new StorageKamasUpdateMessage();
            },
            8692: function() {
                return new StorageObjectRemoveMessage();
            },
            1932: function() {
                return new StorageObjectsRemoveMessage();
            },
            4497: function() {
                return new StorageObjectsUpdateMessage();
            },
            44: function() {
                return new StorageObjectUpdateMessage();
            },
            5836: function() {
                return new AccessoryPreviewErrorMessage();
            },
            8720: function() {
                return new AccessoryPreviewMessage();
            },
            1079: function() {
                return new AccessoryPreviewRequestMessage();
            },
            7639: function() {
                return new PopupWarningClosedMessage();
            },
            2188: function() {
                return new PopupWarningCloseRequestMessage();
            },
            5970: function() {
                return new PopupWarningMessage();
            },
            3916: function() {
                return new AreaFightModificatorUpdateMessage();
            },
            3737: function() {
                return new NuggetsDistributionMessage();
            },
            7361: function() {
                return new NuggetsInformationMessage();
            },
            2836: function() {
                return new StartListenNuggetsMessage();
            },
            1489: function() {
                return new StopListenNuggetsMessage();
            },
            2081: function() {
                return new PaginationAnswerAbstractMessage();
            },
            5210: function() {
                return new PaginationRequestAbstractMessage();
            },
            1750: function() {
                return new IconNamedPresetSaveRequestMessage();
            },
            6582: function() {
                return new IconPresetSaveRequestMessage();
            },
            1460: function() {
                return new InvalidPresetsMessage();
            },
            6865: function() {
                return new ItemForPresetUpdateMessage();
            },
            5847: function() {
                return new PresetDeleteRequestMessage();
            },
            537: function() {
                return new PresetDeleteResultMessage();
            },
            3815: function() {
                return new PresetSavedMessage();
            },
            9161: function() {
                return new PresetSaveErrorMessage();
            },
            9259: function() {
                return new PresetsMessage();
            },
            1536: function() {
                return new PresetUseRequestMessage();
            },
            1648: function() {
                return new PresetUseResultMessage();
            },
            4950: function() {
                return new PresetUseResultWithMissingIdsMessage();
            },
            3378: function() {
                return new PrismAddOrUpdateMessage();
            },
            2689: function() {
                return new PrismAttackedMessage();
            },
            2774: function() {
                return new PrismAttackRequestMessage();
            },
            4128: function() {
                return new PrismAttackResultMessage();
            },
            4630: function() {
                return new PrismExchangeRequestMessage();
            },
            8103: function() {
                return new PrismRecycleTradeRequestMessage();
            },
            1921: function() {
                return new PrismRemoveMessage();
            },
            3610: function() {
                return new PrismsListMessage();
            },
            4692: function() {
                return new PrismTeleportationRequestMessage();
            },
            5559: function() {
                return new ActivityHideRequestMessage();
            },
            5899: function() {
                return new ActivityLockRequestMessage();
            },
            6457: function() {
                return new ActivitySuggestionsMessage();
            },
            1972: function() {
                return new ActivitySuggestionsRequestMessage();
            },
            2232: function() {
                return new AlignmentRankUpdateMessage();
            },
            4428: function() {
                return new SetEnableAVARequestMessage();
            },
            9540: function() {
                return new SetEnablePVPRequestMessage();
            },
            9727: function() {
                return new UpdateMapPlayersAgressableStatusMessage();
            },
            8145: function() {
                return new UpdateSelfAgressableStatusMessage();
            },
            5911: function() {
                return new CinematicMessage();
            },
            1938: function() {
                return new ShortcutBarAddErrorMessage();
            },
            1120: function() {
                return new ShortcutBarAddRequestMessage();
            },
            1608: function() {
                return new ShortcutBarContentMessage();
            },
            8442: function() {
                return new ShortcutBarRefreshMessage();
            },
            2881: function() {
                return new ShortcutBarRemovedMessage();
            },
            2825: function() {
                return new ShortcutBarRemoveErrorMessage();
            },
            665: function() {
                return new ShortcutBarRemoveRequestMessage();
            },
            2423: function() {
                return new ShortcutBarReplacedMessage();
            },
            4659: function() {
                return new ShortcutBarSwapErrorMessage();
            },
            9543: function() {
                return new ShortcutBarSwapRequestMessage();
            },
            881: function() {
                return new BulletinMessage();
            },
            4487: function() {
                return new ContactLookErrorMessage();
            },
            782: function() {
                return new ContactLookMessage();
            },
            3941: function() {
                return new ContactLookRequestByIdMessage();
            },
            7171: function() {
                return new ContactLookRequestByNameMessage();
            },
            8699: function() {
                return new ContactLookRequestMessage();
            },
            5289: function() {
                return new SocialFightJoinRequestMessage();
            },
            5697: function() {
                return new SocialFightLeaveRequestMessage();
            },
            6499: function() {
                return new SocialFightTakePlaceRequestMessage();
            },
            3103: function() {
                return new SocialNoticeMessage();
            },
            8254: function() {
                return new SocialNoticeSetErrorMessage();
            },
            4424: function() {
                return new SocialNoticeSetRequestMessage();
            },
            1273: function() {
                return new ConsumeAllGameActionItemMessage();
            },
            2860: function() {
                return new ConsumeGameActionItemMessage();
            },
            8600: function() {
                return new GameActionItemAddMessage();
            },
            1257: function() {
                return new GameActionItemConsumedMessage();
            },
            1976: function() {
                return new GameActionItemListMessage();
            },
            7943: function() {
                return new SubscriptionLimitationMessage();
            },
            7990: function() {
                return new SubscriptionZoneMessage();
            },
            2340: function() {
                return new OrnamentGainedMessage();
            },
            9671: function() {
                return new OrnamentLostMessage();
            },
            439: function() {
                return new OrnamentSelectedMessage();
            },
            5458: function() {
                return new OrnamentSelectErrorMessage();
            },
            3742: function() {
                return new OrnamentSelectRequestMessage();
            },
            478: function() {
                return new TitleGainedMessage();
            },
            541: function() {
                return new TitleLostMessage();
            },
            7011: function() {
                return new TitlesAndOrnamentsListMessage();
            },
            7199: function() {
                return new TitlesAndOrnamentsListRequestMessage();
            },
            5032: function() {
                return new TitleSelectedMessage();
            },
            7277: function() {
                return new TitleSelectErrorMessage();
            },
            6172: function() {
                return new TitleSelectRequestMessage();
            },
            5305: function() {
                return new ClientUIOpenedByObjectMessage();
            },
            2372: function() {
                return new ClientUIOpenedMessage();
            },
            610: function() {
                return new ProtocolRequired();
            },
            5436: function() {
                return new LoginQueueStatusMessage();
            },
            5491: function() {
                return new QueueStatusMessage();
            },
            9399: function() {
                return new TrustStatusMessage();
            },
            1300: function() {
                return new CheckFileMessage();
            },
            2483: function() {
                return new CheckFileRequestMessage();
            },
            7074: function() {
                return new CheckIntegrityMessage();
            },
            3370: function() {
                return new ClientKeyMessage();
            },
            6253: function() {
                return new RawDataMessage();
            },
            3970: function() {
                return new SystemMessageDisplayMessage();
            },
            9970: function() {
                return new AccountInformationsUpdateMessage();
            },
            667: function() {
                return new AccountSubscriptionElapsedDurationMessage();
            },
            4529: function() {
                return new HaapiApiKeyMessage();
            },
            1598: function() {
                return new HaapiApiKeyRequestMessage();
            },
            8765: function() {
                return new HaapiAuthErrorMessage();
            },
            7406: function() {
                return new HaapiBufferListMessage();
            },
            4050: function() {
                return new HaapiBufferListRequestMessage();
            },
            4967: function() {
                return new HaapiBuyValidationMessage();
            },
            3692: function() {
                return new HaapiCancelBidRequestMessage();
            },
            7136: function() {
                return new HaapiConfirmationMessage();
            },
            4525: function() {
                return new HaapiConfirmationRequestMessage();
            },
            4843: function() {
                return new HaapiConsumeBufferRequestMessage();
            },
            4839: function() {
                return new HaapiSessionMessage();
            },
            7531: function() {
                return new HaapiShopApiKeyMessage();
            },
            9680: function() {
                return new HaapiShopApiKeyRequestMessage();
            },
            4755: function() {
                return new HaapiTokenMessage();
            },
            6608: function() {
                return new HaapiTokenRequestMessage();
            },
            487: function() {
                return new HaapiValidationMessage();
            },
            4480: function() {
                return new HaapiValidationRequestMessage();
            },
            2273: function() {
                return new ClientYouAreDrunkMessage();
            }
        }
        return MessageReceiver;
    })();
    Protocol.MessageReceiver = MessageReceiver;
    var Metadata = (function() {
        function Metadata() {}
        Metadata.PROTOCOL_BUILD = "1.0.3+17104e6";
        Metadata.PROTOCOL_DATE = "Thu, 29 Jun 2023 14:10:22 +0000";
        return Metadata;
    })
    Protocol.Metadata = Metadata;
    var NetworkMessage = (function() {

        function NetworkMessage() {
            ++NetworkMessage.GLOBAL_INSTANCE_ID;
        }
        NetworkMessage.writePacket = function(param1, param2, param3) {
            var _loc5_ = 0;
            var _loc6_ = 0;

            var _loc4_ = this.computeTypeLen(param3.length);
            param1.writeShort(this.subComputeStaticHeader(param2, _loc4_));
            param1.writeUnsignedInt(this.GLOBAL_INSTANCE_ID)

            switch (_loc4_) {
                case 0:
                    return;
                case 1:
                    param1.writeByte(param3.length);
                    break;
                case 2:
                    param1.writeShort(param3.length);
                    break;
                case 3:
                    _loc5_ = param3.length >> 16 & 255;
                    _loc6_ = param3.length & 65535;
                    param1.writeByte(_loc5_);
                    param1.writeShort(_loc6_);
                    break;
            }

            param1.writeBytes(param3, 0, param3.buffer.length);

        };
        NetworkMessage.computeTypeLen = function(param1) {
            if (param1 > 65535) {
                return 3;
            }
            if (param1 > 255) {
                return 2;
            }
            if (param1 > 0) {
                return 1;
            }
            return 0;
        };
        NetworkMessage.subComputeStaticHeader = function(param1, param2) {
            return param1 << NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID | param2;
        };
        NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID = 2;
        NetworkMessage.BIT_MASK = 3;
        NetworkMessage.GLOBAL_INSTANCE_ID = 0;
        return NetworkMessage;
    })();
    Protocol.NetworkMessage = NetworkMessage;
    var ProtocolConstantsEnum = (function() {
        function ProtocolConstantsEnum() {}
        ProtocolConstantsEnum.DEFAULT_TOOLTIP_DURATION = 2500;
        ProtocolConstantsEnum.MAP_CELL_COUNT = 560;
        ProtocolConstantsEnum.MAX_LEVEL = 200;
        ProtocolConstantsEnum.MAX_GUILD_LEVEL = 200;
        ProtocolConstantsEnum.MAX_MOUNT_LEVEL = 100;
        ProtocolConstantsEnum.MAX_CMD_LEN = 768;
        ProtocolConstantsEnum.MAX_CHAT_LEN = 512;
        ProtocolConstantsEnum.USER_MAX_CHAT_LEN = 256;
        ProtocolConstantsEnum.MAX_MOTD_LEN = 512;
        ProtocolConstantsEnum.USER_MAX_MOTD_LEN = 256;
        ProtocolConstantsEnum.MAX_BULLETIN_LEN = 5120;
        ProtocolConstantsEnum.USER_MAX_BULLETIN_LEN = 2560;
        ProtocolConstantsEnum.MAX_STAT_LEN = 512;
        ProtocolConstantsEnum.MAX_STAT_BY_MSG = 20;
        ProtocolConstantsEnum.MIN_LOGIN_LEN = 3;
        ProtocolConstantsEnum.MAX_LOGIN_LEN = 50;
        ProtocolConstantsEnum.MIN_PLAYER_NAME_LEN = 2;
        ProtocolConstantsEnum.MAX_PLAYER_NAME_LEN = 26;
        ProtocolConstantsEnum.PLAYER_SERVER_TAG_LEN = 6;
        ProtocolConstantsEnum.MIN_NICK_LEN = 2;
        ProtocolConstantsEnum.MAX_NICK_LEN = 30;
        ProtocolConstantsEnum.MIN_ACCOUNT_NAME_LEN = 3;
        ProtocolConstantsEnum.MAX_ACCOUNT_NAME_LEN = 31;
        ProtocolConstantsEnum.ACCOUNT_TAG_LEN = 4;
        ProtocolConstantsEnum.MIN_GUILDNAME_LEN = 3;
        ProtocolConstantsEnum.MAX_GUILDNAME_LEN = 30;
        ProtocolConstantsEnum.MIN_ALLIANCENAME_LEN = 3;
        ProtocolConstantsEnum.MAX_ALLIANCENAME_LEN = 30;
        ProtocolConstantsEnum.MIN_ALLIANCETAG_LEN = 3;
        ProtocolConstantsEnum.MAX_ALLIANCETAG_LEN = 7;
        ProtocolConstantsEnum.ALLIANCETAG_NUMBER_LEN = 2;
        ProtocolConstantsEnum.MIN_PARTY_NAME_LEN = 0;
        ProtocolConstantsEnum.MAX_PARTY_NAME_LEN = 25;
        ProtocolConstantsEnum.MAX_PLAYER_COLOR = 5;
        ProtocolConstantsEnum.MAX_ENTITY_COLOR = 10;
        ProtocolConstantsEnum.MAX_PLAYERS_PER_TEAM = 8;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_PARTY = 8;
        ProtocolConstantsEnum.MAX_GUESTS_PER_PARTY = 7;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_ARENA_PARTY = 5;
        ProtocolConstantsEnum.MAX_MONSTERS_IN_GROUP_ON_MAP = 16;
        ProtocolConstantsEnum.MAX_CHAT_OBJECT_REF = 16;
        ProtocolConstantsEnum.NOT_EQUIPED = 63;
        ProtocolConstantsEnum.MAX_EQUIPED = 255;
        ProtocolConstantsEnum.SLOTS_EQUIPABLE_BY_USER = 16;
        ProtocolConstantsEnum.MAX_CRAFT_SLOT = 9;
        ProtocolConstantsEnum.MAX_JOB_LEVEL = 200;
        ProtocolConstantsEnum.MAX_JOB_LEVEL_NONSUBSCRIBER = 60;
        ProtocolConstantsEnum.MAX_HONOR = 20000;
        ProtocolConstantsEnum.MAX_SHORTCUT = 99;
        ProtocolConstantsEnum.MAX_ARENA_RANK = 20000;
        ProtocolConstantsEnum.CHAR_MIN_LEVEL_ARENA = 20;
        ProtocolConstantsEnum.CHAR_MIN_LEVEL_RIDE = 60;
        ProtocolConstantsEnum.MAX_DUNGEON_REGISTER = 10;
        ProtocolConstantsEnum.MIN_RIDE_NAME_LEN = 0;
        ProtocolConstantsEnum.MAX_RIDE_NAME_LEN = 16;
        ProtocolConstantsEnum.MAX_EFFECTS_COUNT = 150;
        ProtocolConstantsEnum.MAX_LOCKABLE_CODE_LEN = 8;
        ProtocolConstantsEnum.MAX_PRESET_COUNT = 60;
        ProtocolConstantsEnum.MAX_FORGETTABLE_SPELLS_PRESET_COUNT = 50;
        ProtocolConstantsEnum.MIN_OBJ_COUNT_BY_XFERT = 1;
        ProtocolConstantsEnum.MAX_OBJ_COUNT_BY_XFERT = 800;
        ProtocolConstantsEnum.MAX_FARMS_INSTANCES_PER_MAP = 60;
        ProtocolConstantsEnum.MAX_STABLED_RIDES = 250;
        ProtocolConstantsEnum.MAX_OBJ_COUNT_BY_DECRAFT = 50;
        ProtocolConstantsEnum.MAX_WAVE = 100;
        ProtocolConstantsEnum.MAX_OBJECT_EFFECT_STRING_LEN = 30;
        ProtocolConstantsEnum.MAX_GUILD_PER_PAGE = 50;
        ProtocolConstantsEnum.MAX_GUILD_APPLICATION_PER_PAGE = 50;
        ProtocolConstantsEnum.MAX_GUILD_LOGBOOK_ENTRY_PER_TAB = 50;
        ProtocolConstantsEnum.MAX_MEMBERS_PER_ALLIANCE = 250;
        ProtocolConstantsEnum.MAX_ALLIANCE_PER_PAGE = 50;
        ProtocolConstantsEnum.MAX_ALLIANCE_APPLICATION_PER_PAGE = 50;
        ProtocolConstantsEnum.MAX_ADDITIONNAL_PER_CARAC = 100;
        ProtocolConstantsEnum.MAX_RECONNECTION_ATTEMPTS = 5;
        ProtocolConstantsEnum.MAX_FURNITURES_PER_PACKET = 40;
        ProtocolConstantsEnum.MIN_LEVEL_HAVENBAG = 10;
        ProtocolConstantsEnum.MAX_KAMA = 1000000000000;
        ProtocolConstantsEnum.MAX_FOLLOWED_QUESTS = 10;
        ProtocolConstantsEnum.MIN_LEVEL_BREACH = 50;
        ProtocolConstantsEnum.MIN_EMAIL_LENGTH = 3;
        ProtocolConstantsEnum.MAX_EMAIL_LENGTH = 254;
        ProtocolConstantsEnum.UUID5_LENGTH = 36;
        ProtocolConstantsEnum.MAX_SHORT_VALUE = 32767;
        ProtocolConstantsEnum.MAX_RIGHTS = 40;
        ProtocolConstantsEnum.MIN_RANK_NAME_LENGTH = 1;
        ProtocolConstantsEnum.MAX_RANK_NAME_LENGTH = 24;
        ProtocolConstantsEnum.MIN_RANKS = 2;
        ProtocolConstantsEnum.MAX_RANKS = 30;
        ProtocolConstantsEnum.MAX_GUILD_CHEST_TAB_NAME_LEN = 12;
        ProtocolConstantsEnum.MAX_TAX_COLLECTOR_ACTIVE_SPELLS = 5;
        ProtocolConstantsEnum.MAX_PRISM_CRISTAL_USED = 4;
        return ProtocolConstantsEnum;
    })
    Protocol.ProtocolConstantsEnum = ProtocolConstantsEnum;
    var ProtocolTypeManager = (function() {
        function ProtocolTypeManager() {}
        ProtocolTypeManager.getInstance = function(networkType, typeId) {
            var _loc3_ = ProtocolTypeManager._list[typeId];
            if (!_loc3_) {
                throw new Error('Type with id ' + typeId + ' is unknown.');
            }
            return _loc3_();
        };

        ProtocolTypeManager._list = {
            2301: function() {
                return new AbstractPlayerSearchInformation();
            },
            1732: function() {
                return new AccountTagInformation();
            },
            5268: function() {
                return new StatisticData();
            },
            5862: function() {
                return new StatisticDataBoolean();
            },
            8107: function() {
                return new StatisticDataByte();
            },
            854: function() {
                return new StatisticDataInt();
            },
            6834: function() {
                return new StatisticDataShort();
            },
            2561: function() {
                return new StatisticDataString();
            },
            2980: function() {
                return new PlayerSearchCharacterNameInformation();
            },
            500: function() {
                return new PlayerSearchTagInformation();
            },
            3901: function() {
                return new GameServerInformations();
            },
            5129: function() {
                return new Achievement();
            },
            3852: function() {
                return new AchievementAchieved();
            },
            5566: function() {
                return new AchievementAchievedRewardable();
            },
            4442: function() {
                return new AchievementObjective();
            },
            6953: function() {
                return new AchievementStartedObjective();
            },
            9608: function() {
                return new FightDispellableEffectExtendedInformations();
            },
            3432: function() {
                return new AbstractFightDispellableEffect();
            },
            5112: function() {
                return new FightTemporaryBoostEffect();
            },
            1864: function() {
                return new FightTemporaryBoostStateEffect();
            },
            7303: function() {
                return new FightTemporaryBoostWeaponDamagesEffect();
            },
            4329: function() {
                return new FightTemporarySpellBoostEffect();
            },
            7629: function() {
                return new FightTemporarySpellImmunityEffect();
            },
            1020: function() {
                return new FightTriggeredEffect();
            },
            8954: function() {
                return new GameActionMark();
            },
            3766: function() {
                return new GameActionMarkedCell();
            },
            3155: function() {
                return new AllianceMemberInfo();
            },
            4416: function() {
                return new KohAllianceInfo();
            },
            4698: function() {
                return new KohAllianceRoleMembers();
            },
            5867: function() {
                return new KohScore();
            },
            629: function() {
                return new KothWinner();
            },
            1631: function() {
                return new AllianceRecruitmentInformation();
            },
            6427: function() {
                return new ServerSessionConstant();
            },
            4796: function() {
                return new ServerSessionConstantInteger();
            },
            5351: function() {
                return new ServerSessionConstantLong();
            },
            1669: function() {
                return new ServerSessionConstantString();
            },
            846: function() {
                return new AbstractCharacterInformation();
            },
            9391: function() {
                return new ActorAlignmentInformations();
            },
            4199: function() {
                return new ActorExtendedAlignmentInformations();
            },
            980: function() {
                return new AlterationInfo();
            },
            9516: function() {
                return new CharacterBasicMinimalInformations();
            },
            763: function() {
                return new CharacterCharacteristic();
            },
            4380: function() {
                return new CharacterCharacteristicDetailed();
            },
            3075: function() {
                return new CharacterCharacteristics();
            },
            6352: function() {
                return new CharacterCharacteristicsInformations();
            },
            5953: function() {
                return new CharacterCharacteristicValue();
            },
            1123: function() {
                return new CharacterUsableCharacteristicDetailed();
            },
            4721: function() {
                return new CharacterMinimalAllianceInformations();
            },
            2569: function() {
                return new CharacterMinimalGuildInformations();
            },
            6989: function() {
                return new CharacterMinimalInformations();
            },
            1373: function() {
                return new CharacterMinimalPlusLookInformations();
            },
            4700: function() {
                return new CharacterMinimalSocialPublicInformations();
            },
            9071: function() {
                return new CharacterBaseInformations();
            },
            5693: function() {
                return new CharacterHardcoreOrEpicInformations();
            },
            7974: function() {
                return new CharacterRemodelingInformation();
            },
            3191: function() {
                return new CharacterToRemodelInformations();
            },
            1077: function() {
                return new RemodelingInformation();
            },
            6622: function() {
                return new DebtInformation();
            },
            3945: function() {
                return new KamaDebtInformation();
            },
            8498: function() {
                return new PlayerNote();
            },
            9939: function() {
                return new ActorRestrictionsInformations();
            },
            9395: function() {
                return new SpellModifierMessage();
            },
            5664: function() {
                return new PlayerStatus();
            },
            1512: function() {
                return new PlayerStatusExtended();
            },
            7712: function() {
                return new AdditionalTaxCollectorInformation();
            },
            5921: function() {
                return new TaxCollectorBasicInformations();
            },
            875: function() {
                return new TaxCollectorComplementaryInformations();
            },
            3218: function() {
                return new TaxCollectorInformations();
            },
            5296: function() {
                return new TaxCollectorLootInformations();
            },
            1327: function() {
                return new TaxCollectorMovement();
            },
            382: function() {
                return new TaxCollectorOrderedSpell();
            },
            5480: function() {
                return new TaxCollectorPreset();
            },
            7073: function() {
                return new TaxCollectorWaitingForHelpInformations();
            },
            9830: function() {
                return new ActorOrientation();
            },
            5813: function() {
                return new EntityDispositionInformations();
            },
            9481: function() {
                return new EntityMovementInformations();
            },
            7595: function() {
                return new AbstractFightTeamInformations();
            },
            1758: function() {
                return new BaseSpawnMonsterInformation();
            },
            5736: function() {
                return new ChallengeInformation();
            },
            3951: function() {
                return new ChallengeTargetInformation();
            },
            9326: function() {
                return new ChallengeTargetWithAttackerInformation();
            },
            6801: function() {
                return new FightAllianceTeamInformations();
            },
            9208: function() {
                return new FightCommonInformations();
            },
            6224: function() {
                return new FightExternalInformations();
            },
            5092: function() {
                return new FightLoot();
            },
            4940: function() {
                return new FightLootObject();
            },
            1641: function() {
                return new FightOptionsInformations();
            },
            5435: function() {
                return new FightPhase();
            },
            6226: function() {
                return new FightResultAdditionalData();
            },
            3328: function() {
                return new FightResultExperienceData();
            },
            4005: function() {
                return new FightResultFighterListEntry();
            },
            1699: function() {
                return new FightResultListEntry();
            },
            1132: function() {
                return new FightResultMutantListEntry();
            },
            1467: function() {
                return new FightResultPlayerListEntry();
            },
            3270: function() {
                return new FightResultPvpData();
            },
            1075: function() {
                return new FightResultTaxCollectorListEntry();
            },
            2219: function() {
                return new FightStartingPositions();
            },
            8922: function() {
                return new FightTeamInformations();
            },
            2652: function() {
                return new FightTeamLightInformations();
            },
            3236: function() {
                return new FightTeamMemberCharacterInformations();
            },
            4058: function() {
                return new FightTeamMemberEntityInformation();
            },
            1196: function() {
                return new FightTeamMemberInformations();
            },
            3080: function() {
                return new FightTeamMemberMonsterInformations();
            },
            9811: function() {
                return new FightTeamMemberTaxCollectorInformations();
            },
            4930: function() {
                return new FightTeamMemberWithAllianceCharacterInformations();
            },
            8501: function() {
                return new GameContextBasicSpawnInformation();
            },
            3745: function() {
                return new GameContextSummonsInformation();
            },
            4653: function() {
                return new GameFightAIInformations();
            },
            1332: function() {
                return new GameFightCharacterInformations();
            },
            2892: function() {
                return new GameFightCharacteristics();
            },
            4051: function() {
                return new GameFightEffectTriggerCount();
            },
            7538: function() {
                return new GameFightEntityInformation();
            },
            8775: function() {
                return new GameFightFighterEntityLightInformation();
            },
            486: function() {
                return new GameFightFighterInformations();
            },
            7874: function() {
                return new GameFightFighterLightInformations();
            },
            9343: function() {
                return new GameFightFighterMonsterLightInformations();
            },
            5498: function() {
                return new GameFightFighterNamedInformations();
            },
            4905: function() {
                return new GameFightFighterNamedLightInformations();
            },
            9215: function() {
                return new GameFightFighterTaxCollectorLightInformations();
            },
            6284: function() {
                return new GameFightMonsterInformations();
            },
            7765: function() {
                return new GameFightMonsterWithAlignmentInformations();
            },
            2950: function() {
                return new GameFightMutantInformations();
            },
            6321: function() {
                return new GameFightResumeSlaveInfo();
            },
            8809: function() {
                return new GameFightSpellCooldown();
            },
            5929: function() {
                return new GameFightTaxCollectorInformations();
            },
            6545: function() {
                return new SpawnCharacterInformation();
            },
            7699: function() {
                return new SpawnCompanionInformation();
            },
            5624: function() {
                return new SpawnInformation();
            },
            3481: function() {
                return new SpawnMonsterInformation();
            },
            606: function() {
                return new SpawnScaledMonsterInformation();
            },
            8497: function() {
                return new FightEntityDispositionInformations();
            },
            7738: function() {
                return new GameContextActorInformations();
            },
            4277: function() {
                return new GameContextActorPositionInformations();
            },
            7225: function() {
                return new GameRolePlayTaxCollectorInformations();
            },
            3464: function() {
                return new IdentifiedEntityDispositionInformations();
            },
            5969: function() {
                return new MapCoordinates();
            },
            3053: function() {
                return new MapCoordinatesAndId();
            },
            7628: function() {
                return new MapCoordinatesExtended();
            },
            6153: function() {
                return new AlignmentWarEffortInformation();
            },
            3263: function() {
                return new AllianceInformation();
            },
            539: function() {
                return new AlternativeMonstersInGroupLightInformations();
            },
            3659: function() {
                return new AnomalySubareaInformation();
            },
            3823: function() {
                return new AtlasPointsInformations();
            },
            1958: function() {
                return new BasicAllianceInformations();
            },
            8444: function() {
                return new BasicGuildInformations();
            },
            6986: function() {
                return new BasicNamedAllianceInformations();
            },
            5116: function() {
                return new BreachBranch();
            },
            3634: function() {
                return new BreachReward();
            },
            1449: function() {
                return new ExtendedBreachBranch();
            },
            5343: function() {
                return new ExtendedLockedBreachBranch();
            },
            561: function() {
                return new ArenaLeagueRanking();
            },
            8800: function() {
                return new ArenaRankInfos();
            },
            3529: function() {
                return new ArenaRanking();
            },
            6716: function() {
                return new LeagueFriendInformations();
            },
            9162: function() {
                return new GameRolePlayActorInformations();
            },
            9497: function() {
                return new GameRolePlayCharacterInformations();
            },
            7008: function() {
                return new GameRolePlayGroupMonsterInformations();
            },
            8988: function() {
                return new GameRolePlayGroupMonsterWaveInformations();
            },
            8790: function() {
                return new GameRolePlayHumanoidInformations();
            },
            3340: function() {
                return new GameRolePlayMountInformations();
            },
            6556: function() {
                return new GameRolePlayMutantInformations();
            },
            594: function() {
                return new GameRolePlayNamedActorInformations();
            },
            2951: function() {
                return new GameRolePlayNpcInformations();
            },
            2889: function() {
                return new GameRolePlayNpcWithQuestInformations();
            },
            4429: function() {
                return new GameRolePlayPortalInformations();
            },
            9294: function() {
                return new GameRolePlayPrismInformations();
            },
            8092: function() {
                return new GameRolePlayTreasureHintInformations();
            },
            2255: function() {
                return new GroupMonsterStaticInformations();
            },
            1872: function() {
                return new GroupMonsterStaticInformationsWithAlternatives();
            },
            2358: function() {
                return new GuildInformations();
            },
            6568: function() {
                return new HumanInformations();
            },
            2920: function() {
                return new HumanOption();
            },
            5811: function() {
                return new HumanOptionAlliance();
            },
            3316: function() {
                return new HumanOptionEmote();
            },
            8012: function() {
                return new HumanOptionFollowers();
            },
            8515: function() {
                return new HumanOptionGuild();
            },
            4513: function() {
                return new HumanOptionObjectUse();
            },
            355: function() {
                return new HumanOptionOrnament();
            },
            8721: function() {
                return new HumanOptionSkillUse();
            },
            3522: function() {
                return new HumanOptionSpeedMultiplier();
            },
            7437: function() {
                return new HumanOptionTitle();
            },
            216: function() {
                return new DecraftedItemStackInfo();
            },
            2960: function() {
                return new JobBookSubscription();
            },
            2424: function() {
                return new JobCrafterDirectoryEntryJobInfo();
            },
            642: function() {
                return new JobCrafterDirectoryEntryPlayerInfo();
            },
            8615: function() {
                return new JobCrafterDirectoryListEntry();
            },
            3438: function() {
                return new JobCrafterDirectorySettings();
            },
            4847: function() {
                return new JobDescription();
            },
            4237: function() {
                return new JobExperience();
            },
            876: function() {
                return new MonsterBoosts();
            },
            902: function() {
                return new MonsterInGroupInformations();
            },
            5721: function() {
                return new MonsterInGroupLightInformations();
            },
            8369: function() {
                return new MapNpcQuestInfo();
            },
            2267: function() {
                return new ObjectItemInRolePlay();
            },
            9241: function() {
                return new DungeonPartyFinderPlayer();
            },
            9722: function() {
                return new PartyEntityBaseInformation();
            },
            9590: function() {
                return new PartyEntityMemberInformation();
            },
            6881: function() {
                return new NamedPartyTeam();
            },
            6201: function() {
                return new NamedPartyTeamWithOutcome();
            },
            7304: function() {
                return new PartyGuestInformations();
            },
            5638: function() {
                return new PartyInvitationMemberInformations();
            },
            6541: function() {
                return new PartyMemberArenaInformations();
            },
            7799: function() {
                return new PartyMemberGeoPosition();
            },
            7992: function() {
                return new PartyMemberInformations();
            },
            252: function() {
                return new GameRolePlayNpcQuestFlag();
            },
            2347: function() {
                return new QuestActiveDetailedInformations();
            },
            4012: function() {
                return new QuestActiveInformations();
            },
            3099: function() {
                return new QuestObjectiveInformations();
            },
            2377: function() {
                return new QuestObjectiveInformationsWithCompletion();
            },
            2687: function() {
                return new PortalInformation();
            },
            4127: function() {
                return new TreasureHuntFlag();
            },
            4064: function() {
                return new TreasureHuntStep();
            },
            6844: function() {
                return new TreasureHuntStepDig();
            },
            3707: function() {
                return new TreasureHuntStepFight();
            },
            7523: function() {
                return new TreasureHuntStepFollowDirection();
            },
            2292: function() {
                return new TreasureHuntStepFollowDirectionToHint();
            },
            9055: function() {
                return new TreasureHuntStepFollowDirectionToPOI();
            },
            7297: function() {
                return new TaxCollectorStaticInformations();
            },
            3317: function() {
                return new BidExchangerObjectInfo();
            },
            2700: function() {
                return new ObjectEffect();
            },
            6756: function() {
                return new ObjectEffectCreature();
            },
            396: function() {
                return new ObjectEffectDate();
            },
            1988: function() {
                return new ObjectEffectDice();
            },
            7910: function() {
                return new ObjectEffectDuration();
            },
            9292: function() {
                return new ObjectEffectInteger();
            },
            9404: function() {
                return new ObjectEffectLadder();
            },
            6229: function() {
                return new ObjectEffectMinMax();
            },
            5138: function() {
                return new ObjectEffectMount();
            },
            6359: function() {
                return new ObjectEffectString();
            },
            4285: function() {
                return new ForgettableSpellItem();
            },
            6097: function() {
                return new GoldItem();
            },
            2946: function() {
                return new Item();
            },
            1985: function() {
                return new ObjectEffects();
            },
            9429: function() {
                return new ObjectItem();
            },
            2187: function() {
                return new ObjectItemGenericQuantity();
            },
            4410: function() {
                return new ObjectItemInformationWithQuantity();
            },
            1626: function() {
                return new ObjectItemMinimalInformation();
            },
            7047: function() {
                return new ObjectItemNotInContainer();
            },
            4778: function() {
                return new ObjectItemQuantity();
            },
            7856: function() {
                return new ObjectItemQuantityPriceDateEffects();
            },
            4245: function() {
                return new ObjectItemToSell();
            },
            6: function() {
                return new ObjectItemToSellInBid();
            },
            5192: function() {
                return new ObjectItemToSellInNpcShop();
            },
            1317: function() {
                return new SellerBuyerDescriptor();
            },
            6177: function() {
                return new SpellItem();
            },
            6144: function() {
                return new EntityInformation();
            },
            8921: function() {
                return new ProtectedEntityWaitingForHelpInfo();
            },
            9504: function() {
                return new FinishMoveInformations();
            },
            2944: function() {
                return new AbstractContactInformations();
            },
            1170: function() {
                return new AcquaintanceInformation();
            },
            7696: function() {
                return new AcquaintanceOnlineInformation();
            },
            9: function() {
                return new FriendInformations();
            },
            6761: function() {
                return new FriendOnlineInformations();
            },
            2963: function() {
                return new FriendSpouseInformations();
            },
            24: function() {
                return new FriendSpouseOnlineInformations();
            },
            4916: function() {
                return new IgnoredInformations();
            },
            9704: function() {
                return new IgnoredOnlineInformations();
            },
            1331: function() {
                return new Contribution();
            },
            5050: function() {
                return new GuildMemberInfo();
            },
            2261: function() {
                return new HavenBagFurnitureInformation();
            },
            6005: function() {
                return new GuildLogbookChestActivity();
            },
            3144: function() {
                return new GuildLevelUpActivity();
            },
            9496: function() {
                return new GuildPaddockActivity();
            },
            418: function() {
                return new GuildPlayerFlowActivity();
            },
            2109: function() {
                return new GuildPlayerRankUpdateActivity();
            },
            7599: function() {
                return new GuildRankActivity();
            },
            2924: function() {
                return new GuildUnlockNewTabActivity();
            },
            9523: function() {
                return new GuildLogbookEntryBasicInformation();
            },
            8064: function() {
                return new RankPublicInformation();
            },
            8160: function() {
                return new GuildRecruitmentInformation();
            },
            5153: function() {
                return new HavenBagRoomPreviewInformation();
            },
            7977: function() {
                return new AccountHouseInformations();
            },
            4880: function() {
                return new HouseGuildedInformations();
            },
            5854: function() {
                return new HouseInformations();
            },
            5625: function() {
                return new HouseInformationsForGuild();
            },
            4035: function() {
                return new HouseInformationsForSell();
            },
            9507: function() {
                return new HouseInformationsInside();
            },
            4306: function() {
                return new HouseInstanceInformations();
            },
            9048: function() {
                return new HouseOnMapInformations();
            },
            8946: function() {
                return new InteractiveElement();
            },
            6946: function() {
                return new InteractiveElementNamedSkill();
            },
            7959: function() {
                return new InteractiveElementSkill();
            },
            312: function() {
                return new InteractiveElementWithAgeBonus();
            },
            4786: function() {
                return new MapObstacle();
            },
            3991: function() {
                return new SkillActionDescription();
            },
            8841: function() {
                return new SkillActionDescriptionCollect();
            },
            4921: function() {
                return new SkillActionDescriptionCraft();
            },
            9881: function() {
                return new SkillActionDescriptionTimed();
            },
            8253: function() {
                return new StatedElement();
            },
            7820: function() {
                return new TeleportDestination();
            },
            4734: function() {
                return new RecycledItem();
            },
            2494: function() {
                return new StorageTabInformation();
            },
            1038: function() {
                return new UpdatedStorageTabInformation();
            },
            9813: function() {
                return new EntityLook();
            },
            6734: function() {
                return new IndexedEntityLook();
            },
            6465: function() {
                return new SubEntity();
            },
            8768: function() {
                return new ItemDurability();
            },
            7903: function() {
                return new MountClientData();
            },
            7365: function() {
                return new UpdateMountBooleanCharacteristic();
            },
            8000: function() {
                return new UpdateMountCharacteristic();
            },
            9850: function() {
                return new UpdateMountIntegerCharacteristic();
            },
            1639: function() {
                return new NuggetsBeneficiary();
            },
            149: function() {
                return new MountInformationsForPaddock();
            },
            6219: function() {
                return new PaddockBuyableInformations();
            },
            1296: function() {
                return new PaddockContentInformations();
            },
            4482: function() {
                return new PaddockGuildedInformations();
            },
            7442: function() {
                return new PaddockInformations();
            },
            6595: function() {
                return new PaddockInformationsForSell();
            },
            4732: function() {
                return new PaddockInstancesInformations();
            },
            5892: function() {
                return new PaddockItem();
            },
            8956: function() {
                return new CharacterCharacteristicForPreset();
            },
            2574: function() {
                return new EntitiesPreset();
            },
            4852: function() {
                return new ForgettableSpellsPreset();
            },
            563: function() {
                return new FullStatsPreset();
            },
            4926: function() {
                return new IconNamedPreset();
            },
            5762: function() {
                return new ItemForPreset();
            },
            1179: function() {
                return new ItemsPreset();
            },
            1447: function() {
                return new Preset();
            },
            5239: function() {
                return new PresetsContainerPreset();
            },
            4462: function() {
                return new SimpleCharacterCharacteristicForPreset();
            },
            6238: function() {
                return new SpellForPreset();
            },
            8478: function() {
                return new SpellsPreset();
            },
            2518: function() {
                return new StatsPreset();
            },
            1593: function() {
                return new AllianceInsiderPrismInformation();
            },
            5492: function() {
                return new AlliancePrismInformation();
            },
            4198: function() {
                return new PrismGeolocalizedInformation();
            },
            85: function() {
                return new PrismInformation();
            },
            8496: function() {
                return new AgressableStatusMessage();
            },
            2084: function() {
                return new RankInformation();
            },
            2095: function() {
                return new RankMinimalInformation();
            },
            5535: function() {
                return new Shortcut();
            },
            144: function() {
                return new ShortcutEmote();
            },
            8453: function() {
                return new ShortcutEntitiesPreset();
            },
            7459: function() {
                return new ShortcutObject();
            },
            1056: function() {
                return new ShortcutObjectItem();
            },
            4682: function() {
                return new ShortcutObjectPreset();
            },
            9448: function() {
                return new ShortcutSmiley();
            },
            7947: function() {
                return new ShortcutSpell();
            },
            9344: function() {
                return new AbstractSocialGroupInfos();
            },
            7646: function() {
                return new AllianceFactSheetInformation();
            },
            8601: function() {
                return new ApplicationPlayerInformation();
            },
            9221: function() {
                return new SocialApplicationInformation();
            },
            700: function() {
                return new SocialFight();
            },
            5620: function() {
                return new SocialFightInfo();
            },
            7323: function() {
                return new GuildFactSheetInformations();
            },
            1142: function() {
                return new GuildInsiderFactSheetInformations();
            },
            6503: function() {
                return new SocialRecruitmentInformation();
            },
            6497: function() {
                return new SocialEmblem();
            },
            7641: function() {
                return new SocialMember();
            },
            6799: function() {
                return new GameActionItem();
            },
            8529: function() {
                return new Uuid();
            },
            1528: function() {
                return new TrustCertificate();
            },
            2100: function() {
                return new Version();
            },
            7931: function() {
                return new BufferInformation();
            }
        }
        return ProtocolTypeManager;
    })();
    Protocol.ProtocolTypeManager = ProtocolTypeManager;
    var UInt64 = (function(_super) {
        __extends(UInt64, _super);

        function UInt64(low, high) {
            if (low === void 0) {
                low = 0;
            }
            if (high === void 0) {
                high = 0;
            }
            _super.call(this, low, high);
            this.parseInt64 = function(str, radix) {
                radix = radix || 0;
                var digit = 0;
                var i = 0;
                if (radix === 0) {
                    if (str.search(/^0x/) === 0) {
                        radix = 16;
                        i = 2;
                    } else {
                        radix = 10;
                    };
                };
                if ((((radix < 2)) || ((radix > 36)))) {
                    throw new Error('ArgumentError');
                };
                str = str.toLowerCase();
                var result = new UInt64();
                while (i < str.length) {
                    digit = str.charCodeAt(i);
                    if ((((digit >= Binary64.CHAR_CODE_0)) && ((digit <= Binary64.CHAR_CODE_9)))) {
                        digit = (digit - Binary64.CHAR_CODE_0);
                    } else {
                        if ((((digit >= Binary64.CHAR_CODE_A)) && ((digit <= Binary64.CHAR_CODE_Z)))) {
                            digit = (digit - Binary64.CHAR_CODE_A);
                            digit = (digit + 10);
                        } else {
                            throw new Error('ArgumentError');
                        };
                    };
                    if (digit >= radix) {
                        throw new Error('ArgumentError');
                    };
                    result.mul(radix);
                    result.add(digit);
                    i++;
                };
                return (result);
            };
        }
        UInt64.fromNumber = function(n) {
            return new UInt64(n, Math.floor((n / 4294967296)));
        };
        UInt64.prototype.toNumber = function() {
            return (((this.high * 4294967296) + this.low));
        };
        UInt64.prototype.toString = function(radix) {
            radix = radix || 10;
            var _local_4 = 0;
            if ((((radix < 2)) || ((radix > 36)))) {
                throw new Error('ArgumentError');
            };
            if (this.high === 0) {
                return (this.low.toString(radix));
            };
            var digitChars = [];
            var copyOfThis = new UInt64(this.low, this.high);
            do {
                _local_4 = copyOfThis.div(radix);
                if (_local_4 < 10) {
                    digitChars.push((_local_4 + Binary64.CHAR_CODE_0));
                } else {
                    digitChars.push(((_local_4 - 10) + Binary64.CHAR_CODE_A));
                };
            } while (copyOfThis.high !== 0);
            return ((copyOfThis.low.toString(radix) + String.fromCharCode.apply(String, digitChars.reverse())));
        };
        return UInt64;
    })(Binary64);
    Protocol.UInt64 = UInt64;
    var AccessoryPreviewErrorEnum = (function() {
        function AccessoryPreviewErrorEnum() {}
        AccessoryPreviewErrorEnum.PREVIEW_ERROR = 0;
        AccessoryPreviewErrorEnum.PREVIEW_COOLDOWN = 1;
        AccessoryPreviewErrorEnum.PREVIEW_BAD_ITEM = 2;
        return AccessoryPreviewErrorEnum;
    })
    Protocol.AccessoryPreviewErrorEnum = AccessoryPreviewErrorEnum;
    var AggressableStatusEnum = (function() {
        function AggressableStatusEnum() {}
        AggressableStatusEnum.NON_AGGRESSABLE = 0;
        AggressableStatusEnum.PvP_ENABLED_AGGRESSABLE = 10;
        AggressableStatusEnum.PvP_ENABLED_NON_AGGRESSABLE = 11;
        AggressableStatusEnum.AvA_ENABLED_AGGRESSABLE = 20;
        AggressableStatusEnum.AvA_ENABLED_NON_AGGRESSABLE = 21;
        AggressableStatusEnum.AvA_DISQUALIFIED = 22;
        AggressableStatusEnum.AvA_PREQUALIFIED_AGGRESSABLE = 23;
        return AggressableStatusEnum;
    })
    Protocol.AggressableStatusEnum = AggressableStatusEnum;
    var AlignmentSideEnum = (function() {
        function AlignmentSideEnum() {}
        AlignmentSideEnum.ALIGNMENT_UNKNOWN = -2;
        AlignmentSideEnum.ALIGNMENT_WITHOUT = -1;
        AlignmentSideEnum.ALIGNMENT_NEUTRAL = 0;
        AlignmentSideEnum.ALIGNMENT_ANGEL = 1;
        AlignmentSideEnum.ALIGNMENT_EVIL = 2;
        return AlignmentSideEnum;
    })
    Protocol.AlignmentSideEnum = AlignmentSideEnum;
    var AlignmentWarEffortDonationResultEnum = (function() {
        function AlignmentWarEffortDonationResultEnum() {}
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_SUCCESS = 0;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_NOT_ENOUGH_KAMAS = 1;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_INVALID_ALIGNMENT = 2;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_KAMAS_LIMIT_REACH = 3;
        AlignmentWarEffortDonationResultEnum.WAR_EFFORT_DONATION_ERROR_UNKNOWN = 4;
        return AlignmentWarEffortDonationResultEnum;
    })
    Protocol.AlignmentWarEffortDonationResultEnum = AlignmentWarEffortDonationResultEnum;
    var AllianceDirectoryTextFilterEnum = (function() {
        function AllianceDirectoryTextFilterEnum() {}
        AllianceDirectoryTextFilterEnum.ALLIANCE_SEARCH_DEFAULT_FILTER = 0;
        AllianceDirectoryTextFilterEnum.ALLIANCE_SEARCH_NAME_FILTER = 1;
        AllianceDirectoryTextFilterEnum.ALLIANCE_SEARCH_TAG_FILTER = 2;
        return AllianceDirectoryTextFilterEnum;
    })
    Protocol.AllianceDirectoryTextFilterEnum = AllianceDirectoryTextFilterEnum;
    var AlliancePrismCristalTypeEnum = (function() {
        function AlliancePrismCristalTypeEnum() {}
        AlliancePrismCristalTypeEnum.NO_CRISTAL = -1;
        AlliancePrismCristalTypeEnum.PROTECTIVE = 0;
        AlliancePrismCristalTypeEnum.INHIBITOR = 1;
        return AlliancePrismCristalTypeEnum;
    })
    Protocol.AlliancePrismCristalTypeEnum = AlliancePrismCristalTypeEnum;
    var AlliancePrismModuleTypeEnum = (function() {
        function AlliancePrismModuleTypeEnum() {}
        AlliancePrismModuleTypeEnum.NO_MODULE = -1;
        AlliancePrismModuleTypeEnum.TELEPORTER = 0;
        AlliancePrismModuleTypeEnum.RECYCLER = 1;
        return AlliancePrismModuleTypeEnum;
    })
    Protocol.AlliancePrismModuleTypeEnum = AlliancePrismModuleTypeEnum;
    var AllianceRightsEnum = (function() {
        function AllianceRightsEnum() {}
        AllianceRightsEnum.RIGHT_MANAGE_ALLIANCE_RANKS_AND_RIGHTS = 1;
        AllianceRightsEnum.RIGHT_ASSIGN_ALLIANCE_RANKS = 2;
        AllianceRightsEnum.RIGHT_UPDATE_ALLIANCE_MOTD = 3;
        AllianceRightsEnum.RIGHT_SET_ALLIANCE_PRISM = 4;
        AllianceRightsEnum.RIGHT_SET_ALLIANCE_ROLE_MYSELF = 5;
        AllianceRightsEnum.RIGHT_WATCH_NUGGETS_COUNT = 6;
        AllianceRightsEnum.RIGHT_MANAGE_NUGGETS = 7;
        AllianceRightsEnum.RIGHT_PARAMETER_DEFAULT_TAX_COLLECTOR = 8;
        AllianceRightsEnum.RIGHT_PRIORITY_DEFENSE_TAX_COLLECTOR = 9;
        AllianceRightsEnum.RIGHT_SET_TAX_COLLECTOR = 10;
        AllianceRightsEnum.RIGHT_MANAGE_ALL_TAX_COLLECTOR = 11;
        AllianceRightsEnum.RIGHT_MANAGE_OWN_TAX_COLLECTOR = 12;
        AllianceRightsEnum.RIGHT_UPDATE_ALLIANCE_BULLETIN = 13;
        AllianceRightsEnum.RIGHT_MANAGE_ALLIANCE_APPLY_AND_INVITATION = 15;
        AllianceRightsEnum.RIGHT_ALLIANCE_KICK_MEMBER = 16;
        AllianceRightsEnum.RIGHT_PRIORITY_CONTROL_TAX_COLLECTOR = 17;
        AllianceRightsEnum.RIGHT_TAX_COLLECTOR_COLLECT_OWN = 18;
        AllianceRightsEnum.RIGHT_TAX_COLLECTOR_COLLECT_ALL = 19;
        AllianceRightsEnum.RIGHT_MANAGE_ALLIANCE_RECRUITMENT = 21;
        return AllianceRightsEnum;
    })
    Protocol.AllianceRightsEnum = AllianceRightsEnum;
    var AllianceSummarySortEnum = (function() {
        function AllianceSummarySortEnum() {}
        AllianceSummarySortEnum.SORT_BY_ALLIANCE_NAME = 0;
        AllianceSummarySortEnum.SORT_BY_ALLIANCE_TAG = 1;
        AllianceSummarySortEnum.SORT_BY_NB_TERRITORIES = 2;
        AllianceSummarySortEnum.SORT_BY_ALLIANCE_NB_MEMBERS = 3;
        return AllianceSummarySortEnum;
    })
    Protocol.AllianceSummarySortEnum = AllianceSummarySortEnum;
    var AlterationExpirationTypeEnum = (function() {
        function AlterationExpirationTypeEnum() {}
        AlterationExpirationTypeEnum.ALTERATION_UNKNOWN = 0;
        AlterationExpirationTypeEnum.ALTERATION_INFINITE = 1;
        AlterationExpirationTypeEnum.ALTERATION_DATE = 2;
        AlterationExpirationTypeEnum.ALTERATION_FIGHT_COUNT = 4;
        AlterationExpirationTypeEnum.ALTERATION_FIGHTS_WON_COUNT = 5;
        AlterationExpirationTypeEnum.ALTERATION_FIGHTS_LOST_COUNT = 6;
        return AlterationExpirationTypeEnum;
    })
    Protocol.AlterationExpirationTypeEnum = AlterationExpirationTypeEnum;
    var AvaScoreTypeEnum = (function() {
        function AvaScoreTypeEnum() {}
        AvaScoreTypeEnum.AVA_FIGHT = 0;
        AvaScoreTypeEnum.AVA_DOMINATION = 1;
        AvaScoreTypeEnum.AVA_PRISM = 2;
        return AvaScoreTypeEnum;
    })
    Protocol.AvaScoreTypeEnum = AvaScoreTypeEnum;
    var BidActionEnum = (function() {
        function BidActionEnum() {}
        BidActionEnum.INVALID_ACTION = 0;
        BidActionEnum.CONSUME_BUFF = 1;
        BidActionEnum.CANCEL = 2;
        BidActionEnum.CREATE_KAMA = 3;
        BidActionEnum.CREATE_OGRINE = 4;
        BidActionEnum.BUY_KAMA = 5;
        BidActionEnum.BUY_OGRINE = 6;
        return BidActionEnum;
    })
    Protocol.BidActionEnum = BidActionEnum;
    var BidCancellationEnum = (function() {
        function BidCancellationEnum() {}
        BidCancellationEnum.UNKNOWN_TYPE = 0;
        BidCancellationEnum.CLASSIC = 1;
        BidCancellationEnum.FRAUD = 2;
        return BidCancellationEnum;
    })
    Protocol.BidCancellationEnum = BidCancellationEnum;
    var BidValidationEnum = (function() {
        function BidValidationEnum() {}
        BidValidationEnum.GENERIC_ERROR = 0;
        BidValidationEnum.BUFFER_OVERLOAD = 1;
        BidValidationEnum.OFFER_DOESNT_EXIST = 2;
        BidValidationEnum.OFFER_ALREADY_EXISTS = 3;
        BidValidationEnum.NOT_ENOUGH_KAMAS = 4;
        BidValidationEnum.NOT_ENOUGH_OGRINES = 5;
        BidValidationEnum.SERVER_MAINTENANCE = 6;
        BidValidationEnum.PLAYER_IN_DEBT = 7;
        BidValidationEnum.OFFER_IS_YOURS = 8;
        BidValidationEnum.VALIDATION_SUCCESS = 100;
        return BidValidationEnum;
    })
    Protocol.BidValidationEnum = BidValidationEnum;
    var BoostableCharacteristicEnum = (function() {
        function BoostableCharacteristicEnum() {}
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_STRENGTH = 10;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_VITALITY = 11;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_WISDOM = 12;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_CHANCE = 13;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_AGILITY = 14;
        BoostableCharacteristicEnum.BOOSTABLE_CHARAC_INTELLIGENCE = 15;
        return BoostableCharacteristicEnum;
    })
    Protocol.BoostableCharacteristicEnum = BoostableCharacteristicEnum;
    var BreachRewardLockEnum = (function() {
        function BreachRewardLockEnum() {}
        BreachRewardLockEnum.BREACH_REWARD_LOCK_OWNER = 0;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_FIGHTER = 1;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_RESOURCES = 2;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_CRITERION = 3;
        BreachRewardLockEnum.BREACH_REWARD_LOCK_USELESS = 4;
        BreachRewardLockEnum.BREACH_REWARD_MAX_PURCHASE_REACHED = 5;
        return BreachRewardLockEnum;
    })
    Protocol.BreachRewardLockEnum = BreachRewardLockEnum;
    var BreachRoomUnlockEnum = (function() {
        function BreachRoomUnlockEnum() {}
        BreachRoomUnlockEnum.BREACH_UNLOCK_SUCCESS = 0;
        BreachRoomUnlockEnum.BREACH_UNLOCK_FAIL_NOT_ENOUGH_BUDGET = 1;
        return BreachRoomUnlockEnum;
    })
    Protocol.BreachRoomUnlockEnum = BreachRoomUnlockEnum;
    var BreedEnum = (function() {
        function BreedEnum() {}
        BreedEnum.UNDEFINED = 0;
        BreedEnum.Feca = 1;
        BreedEnum.Osamodas = 2;
        BreedEnum.Enutrof = 3;
        BreedEnum.Sram = 4;
        BreedEnum.Xelor = 5;
        BreedEnum.Ecaflip = 6;
        BreedEnum.Eniripsa = 7;
        BreedEnum.Iop = 8;
        BreedEnum.Cra = 9;
        BreedEnum.Sadida = 10;
        BreedEnum.Sacrieur = 11;
        BreedEnum.Pandawa = 12;
        BreedEnum.Roublard = 13;
        BreedEnum.Zobal = 14;
        BreedEnum.Steamer = 15;
        BreedEnum.Eliotrope = 16;
        BreedEnum.Huppermage = 17;
        BreedEnum.Ouginak = 18;
        BreedEnum.Forgelance = 20;
        BreedEnum.SUMMONED = -1;
        BreedEnum.MONSTER = -2;
        BreedEnum.MONSTER_GROUP = -3;
        BreedEnum.NPC = -4;
        BreedEnum.TAX_COLLECTOR = -5;
        BreedEnum.MUTANT = -6;
        BreedEnum.MUTANT_IN_DUNGEON = -7;
        BreedEnum.MOUNT_OUTSIDE = -8;
        BreedEnum.PRISM = -9;
        BreedEnum.INCARNATION = -10;
        return BreedEnum;
    })
    Protocol.BreedEnum = BreedEnum;
    var BuildTypeEnum = (function() {
        function BuildTypeEnum() {}
        BuildTypeEnum.RELEASE = 0;
        BuildTypeEnum.BETA = 1;
        BuildTypeEnum.ALPHA = 2;
        BuildTypeEnum.TESTING = 3;
        BuildTypeEnum.INTERNAL = 4;
        BuildTypeEnum.DEBUG = 5;
        BuildTypeEnum.DRAFT = 6;
        return BuildTypeEnum;
    })
    Protocol.BuildTypeEnum = BuildTypeEnum;
    var ChallengeBonusEnum = (function() {
        function ChallengeBonusEnum() {}
        ChallengeBonusEnum.CHALLENGE_EXPERIENCE_BONUS = 0;
        ChallengeBonusEnum.CHALLENGE_DROP_BONUS = 1;
        return ChallengeBonusEnum;
    })
    Protocol.ChallengeBonusEnum = ChallengeBonusEnum;
    var ChallengeModEnum = (function() {
        function ChallengeModEnum() {}
        ChallengeModEnum.CHALLENGE_CHOICE = 0;
        ChallengeModEnum.CHALLENGE_RANDOM = 1;
        return ChallengeModEnum;
    })
    Protocol.ChallengeModEnum = ChallengeModEnum;
    var ChallengeStateEnum = (function() {
        function ChallengeStateEnum() {}
        ChallengeStateEnum.CHALLENGE_COMPLETED = 0;
        ChallengeStateEnum.CHALLENGE_FAILED = 1;
        ChallengeStateEnum.CHALLENGE_RUNNING = 2;
        return ChallengeStateEnum;
    })
    Protocol.ChallengeStateEnum = ChallengeStateEnum;
    var CharacterCreationResultEnum = (function() {
        function CharacterCreationResultEnum() {}
        CharacterCreationResultEnum.OK = 0;
        CharacterCreationResultEnum.ERR_NO_REASON = 1;
        CharacterCreationResultEnum.ERR_INVALID_NAME = 2;
        CharacterCreationResultEnum.ERR_TOO_MANY_CHARACTERS = 3;
        CharacterCreationResultEnum.ERR_NOT_ALLOWED = 4;
        CharacterCreationResultEnum.ERR_NEW_PLAYER_NOT_ALLOWED = 5;
        return CharacterCreationResultEnum;
    })
    Protocol.CharacterCreationResultEnum = CharacterCreationResultEnum;
    var CharacterDeletionErrorEnum = (function() {
        function CharacterDeletionErrorEnum() {}
        CharacterDeletionErrorEnum.DEL_ERR_NO_REASON = 1;
        CharacterDeletionErrorEnum.DEL_ERR_TOO_MANY_CHAR_DELETION = 2;
        CharacterDeletionErrorEnum.DEL_ERR_BAD_SECRET_ANSWER = 3;
        return CharacterDeletionErrorEnum;
    })
    Protocol.CharacterDeletionErrorEnum = CharacterDeletionErrorEnum;
    var CharacterInventoryPositionEnum = (function() {
        function CharacterInventoryPositionEnum() {}
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_HAT = 6;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_CAPE = 7;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_BELT = 3;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_BOOTS = 5;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_AMULET = 0;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_SHIELD = 15;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_WEAPON = 1;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_PETS = 8;
        CharacterInventoryPositionEnum.ACCESSORY_POSITION_RIDE_HARNESS = 29;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_RING_LEFT = 2;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_RING_RIGHT = 4;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_1 = 9;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_2 = 10;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_3 = 11;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_4 = 12;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_5 = 13;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_DOFUS_6 = 14;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_MOUNT = 16;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_MUTATION = 20;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_BOOST_FOOD = 21;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_FIRST_BONUS = 22;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_SECOND_BONUS = 23;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_FIRST_MALUS = 24;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_SECOND_MALUS = 25;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_ROLEPLAY_BUFFER = 26;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_FOLLOWER = 27;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_ENTITY = 28;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_COSTUME = 30;
        CharacterInventoryPositionEnum.INVENTORY_POSITION_NOT_EQUIPED = 63;
        return CharacterInventoryPositionEnum;
    })
    Protocol.CharacterInventoryPositionEnum = CharacterInventoryPositionEnum;
    var CharacterRemodelingEnum = (function() {
        function CharacterRemodelingEnum() {}
        CharacterRemodelingEnum.CHARACTER_REMODELING_NOT_APPLICABLE = 0;
        CharacterRemodelingEnum.CHARACTER_REMODELING_NAME = 1;
        CharacterRemodelingEnum.CHARACTER_REMODELING_COLORS = 2;
        CharacterRemodelingEnum.CHARACTER_REMODELING_COSMETIC = 4;
        CharacterRemodelingEnum.CHARACTER_REMODELING_BREED = 8;
        CharacterRemodelingEnum.CHARACTER_REMODELING_GENDER = 16;
        CharacterRemodelingEnum.CHARACTER_OPT_REMODELING_NAME = 32;
        CharacterRemodelingEnum.CHARACTER_OPT_REMODELING_ALL = 64;
        return CharacterRemodelingEnum;
    })
    Protocol.CharacterRemodelingEnum = CharacterRemodelingEnum;
    var ChatActivableChannelsEnum = (function() {
        function ChatActivableChannelsEnum() {}
        ChatActivableChannelsEnum.CHANNEL_GLOBAL = 0;
        ChatActivableChannelsEnum.CHANNEL_TEAM = 1;
        ChatActivableChannelsEnum.CHANNEL_GUILD = 2;
        ChatActivableChannelsEnum.CHANNEL_ALLIANCE = 3;
        ChatActivableChannelsEnum.CHANNEL_PARTY = 4;
        ChatActivableChannelsEnum.CHANNEL_SALES = 5;
        ChatActivableChannelsEnum.CHANNEL_SEEK = 6;
        ChatActivableChannelsEnum.CHANNEL_NOOB = 7;
        ChatActivableChannelsEnum.CHANNEL_ADMIN = 8;
        ChatActivableChannelsEnum.CHANNEL_ADS = 12;
        ChatActivableChannelsEnum.CHANNEL_ARENA = 13;
        ChatActivableChannelsEnum.CHANNEL_COMMUNITY = 14;
        ChatActivableChannelsEnum.PSEUDO_CHANNEL_PRIVATE = 9;
        ChatActivableChannelsEnum.PSEUDO_CHANNEL_INFO = 10;
        ChatActivableChannelsEnum.PSEUDO_CHANNEL_FIGHT_LOG = 11;
        return ChatActivableChannelsEnum;
    })
    Protocol.ChatActivableChannelsEnum = ChatActivableChannelsEnum;
    var ChatChannelsMultiEnum = (function() {
        function ChatChannelsMultiEnum() {}
        ChatChannelsMultiEnum.CHANNEL_GLOBAL = 0;
        ChatChannelsMultiEnum.CHANNEL_TEAM = 1;
        ChatChannelsMultiEnum.CHANNEL_GUILD = 2;
        ChatChannelsMultiEnum.CHANNEL_ALLIANCE = 3;
        ChatChannelsMultiEnum.CHANNEL_PARTY = 4;
        ChatChannelsMultiEnum.CHANNEL_SALES = 5;
        ChatChannelsMultiEnum.CHANNEL_SEEK = 6;
        ChatChannelsMultiEnum.CHANNEL_NOOB = 7;
        ChatChannelsMultiEnum.CHANNEL_ADMIN = 8;
        ChatChannelsMultiEnum.CHANNEL_ADS = 12;
        ChatChannelsMultiEnum.CHANNEL_ARENA = 13;
        ChatChannelsMultiEnum.CHANNEL_COMMUNITY = 14;
        return ChatChannelsMultiEnum;
    })
    Protocol.ChatChannelsMultiEnum = ChatChannelsMultiEnum;
    var ChatErrorEnum = (function() {
        function ChatErrorEnum() {}
        ChatErrorEnum.CHAT_ERROR_UNKNOWN = 0;
        ChatErrorEnum.CHAT_ERROR_RECEIVER_NOT_FOUND = 1;
        ChatErrorEnum.CHAT_ERROR_INTERIOR_MONOLOGUE = 2;
        ChatErrorEnum.CHAT_ERROR_NO_GUILD = 3;
        ChatErrorEnum.CHAT_ERROR_NO_PARTY = 4;
        ChatErrorEnum.CHAT_ERROR_ALLIANCE = 5;
        ChatErrorEnum.CHAT_ERROR_INVALID_MAP = 6;
        ChatErrorEnum.CHAT_ERROR_NO_PARTY_ARENA = 7;
        ChatErrorEnum.CHAT_ERROR_NO_TEAM = 8;
        ChatErrorEnum.CHAT_ERROR_MALFORMED_CONTENT = 9;
        ChatErrorEnum.CHAT_ERROR_NO_CHANNEL_COMMUNITY = 10;
        return ChatErrorEnum;
    })
    Protocol.ChatErrorEnum = ChatErrorEnum;
    var ChestEventTypeEnum = (function() {
        function ChestEventTypeEnum() {}
        ChestEventTypeEnum.DEPOSIT = 0;
        ChestEventTypeEnum.WITHDRAW = 1;
        ChestEventTypeEnum.TRANSFER = 2;
        return ChestEventTypeEnum;
    })
    Protocol.ChestEventTypeEnum = ChestEventTypeEnum;
    var ClientUITypeEnum = (function() {
        function ClientUITypeEnum() {}
        ClientUITypeEnum.CLIENT_UI_UNDEFINED = 0;
        ClientUITypeEnum.CLIENT_UI_TELEPORT_GUILD_HOUSE = 1;
        ClientUITypeEnum.CLIENT_UI_TELEPORT_GUILD_PADDOCK = 2;
        ClientUITypeEnum.CLIENT_UI_OBJECT_MIMICRY = 3;
        ClientUITypeEnum.CLIENT_UI_LEGENDARY_TREASURE_QUEST = 4;
        ClientUITypeEnum.CLIENT_UI_TELEPORT_HOUSE = 5;
        return ClientUITypeEnum;
    })
    Protocol.ClientUITypeEnum = ClientUITypeEnum;
    var CompassTypeEnum = (function() {
        function CompassTypeEnum() {}
        CompassTypeEnum.COMPASS_TYPE_SIMPLE = 0;
        CompassTypeEnum.COMPASS_TYPE_SPOUSE = 1;
        CompassTypeEnum.COMPASS_TYPE_PARTY = 2;
        CompassTypeEnum.COMPASS_TYPE_PVP_SEEK = 3;
        CompassTypeEnum.COMPASS_TYPE_QUEST = 4;
        return CompassTypeEnum;
    })
    Protocol.CompassTypeEnum = CompassTypeEnum;
    var ConsoleMessageTypeEnum = (function() {
        function ConsoleMessageTypeEnum() {}
        ConsoleMessageTypeEnum.CONSOLE_TEXT_MESSAGE = 0;
        ConsoleMessageTypeEnum.CONSOLE_INFO_MESSAGE = 1;
        ConsoleMessageTypeEnum.CONSOLE_ERR_MESSAGE = 2;
        return ConsoleMessageTypeEnum;
    })
    Protocol.ConsoleMessageTypeEnum = ConsoleMessageTypeEnum;
    var CraftResultEnum = (function() {
        function CraftResultEnum() {}
        CraftResultEnum.CRAFT_IMPOSSIBLE = 0;
        CraftResultEnum.CRAFT_FAILED = 1;
        CraftResultEnum.CRAFT_SUCCESS = 2;
        CraftResultEnum.CRAFT_NEUTRAL = 3;
        CraftResultEnum.CRAFT_FORBIDDEN = 4;
        return CraftResultEnum;
    })
    Protocol.CraftResultEnum = CraftResultEnum;
    var DebugLevelEnum = (function() {
        function DebugLevelEnum() {}
        DebugLevelEnum.LEVEL_TRACE = 0;
        DebugLevelEnum.LEVEL_DEBUG = 1;
        DebugLevelEnum.LEVEL_INFO = 2;
        DebugLevelEnum.LEVEL_WARN = 3;
        DebugLevelEnum.LEVEL_ERROR = 4;
        DebugLevelEnum.LEVEL_FATAL = 5;
        return DebugLevelEnum;
    })
    Protocol.DebugLevelEnum = DebugLevelEnum;
    var DelayedActionTypeEnum = (function() {
        function DelayedActionTypeEnum() {}
        DelayedActionTypeEnum.DELAYED_ACTION_DISCONNECT = 0;
        DelayedActionTypeEnum.DELAYED_ACTION_OBJECT_USE = 1;
        DelayedActionTypeEnum.DELAYED_ACTION_JOIN_CHARACTER = 2;
        DelayedActionTypeEnum.DELAYED_ACTION_AGGRESSION_IMMUNE = 3;
        return DelayedActionTypeEnum;
    })
    Protocol.DelayedActionTypeEnum = DelayedActionTypeEnum;
    var DialogTypeEnum = (function() {
        function DialogTypeEnum() {}
        DialogTypeEnum.DIALOG_BOOK = 0;
        DialogTypeEnum.DIALOG_DIALOG = 1;
        DialogTypeEnum.DIALOG_LOCKABLE = 2;
        DialogTypeEnum.DIALOG_PURCHASABLE = 3;
        DialogTypeEnum.DIALOG_GUILD_INVITATION = 4;
        DialogTypeEnum.DIALOG_GUILD_CREATE = 5;
        DialogTypeEnum.DIALOG_GUILD_RENAME = 6;
        DialogTypeEnum.DIALOG_MARRIAGE = 7;
        DialogTypeEnum.DIALOG_DUNGEON_MEETING = 8;
        DialogTypeEnum.DIALOG_SPELL_FORGET = 9;
        DialogTypeEnum.DIALOG_TELEPORTER = 10;
        DialogTypeEnum.DIALOG_EXCHANGE = 11;
        DialogTypeEnum.DIALOG_ALLIANCE_INVITATION = 12;
        DialogTypeEnum.DIALOG_ALLIANCE_CREATE = 13;
        DialogTypeEnum.DIALOG_ALLIANCE_RENAME = 14;
        DialogTypeEnum.DIALOG_HAVENBAG_MEETING = 15;
        return DialogTypeEnum;
    })
    Protocol.DialogTypeEnum = DialogTypeEnum;
    var ExchangeErrorEnum = (function() {
        function ExchangeErrorEnum() {}
        ExchangeErrorEnum.REQUEST_IMPOSSIBLE = 1;
        ExchangeErrorEnum.REQUEST_CHARACTER_OCCUPIED = 2;
        ExchangeErrorEnum.REQUEST_CHARACTER_JOB_NOT_EQUIPED = 3;
        ExchangeErrorEnum.REQUEST_CHARACTER_TOOL_TOO_FAR = 4;
        ExchangeErrorEnum.REQUEST_CHARACTER_OVERLOADED = 5;
        ExchangeErrorEnum.REQUEST_CHARACTER_NOT_SUSCRIBER = 6;
        ExchangeErrorEnum.REQUEST_CHARACTER_GUEST = 8;
        ExchangeErrorEnum.SELL_ERROR = 63;
        ExchangeErrorEnum.BUY_ERROR = 64;
        ExchangeErrorEnum.MOUNT_PADDOCK_ERROR = 10;
        ExchangeErrorEnum.BID_SEARCH_ERROR = 11;
        return ExchangeErrorEnum;
    })
    Protocol.ExchangeErrorEnum = ExchangeErrorEnum;
    var ExchangeHandleMountStableTypeEnum = (function() {
        function ExchangeHandleMountStableTypeEnum() {}
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_PUT = 1;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_GET = 2;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_FREE = 3;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_CERTIF = 4;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_UNCERTIF = 5;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_PUT = 6;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_GET = 7;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_FREE = 8;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_MOUNTPADDOCK_PUT = 9;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_MOUNTPADDOCK_GET = 10;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_FREE = 11;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_CERTIFICAT_FREE = 12;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_CERTIF = 13;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_CERTIF = 14;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_UNCERTIF_TO_EQUIPED = 15;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_UNCERTIF_TO_PADDOCK = 16;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTSTABLES_STERILIZE = 17;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_EQUIPED_STERILIZE = 18;
        ExchangeHandleMountStableTypeEnum.EXCHANGE_MOUNTPADDOCK_STERILIZE = 19;
        return ExchangeHandleMountStableTypeEnum;
    })
    Protocol.ExchangeHandleMountStableTypeEnum = ExchangeHandleMountStableTypeEnum;
    var ExchangeReplayStopReasonEnum = (function() {
        function ExchangeReplayStopReasonEnum() {}
        ExchangeReplayStopReasonEnum.STOPPED_REASON_OK = 1;
        ExchangeReplayStopReasonEnum.STOPPED_REASON_USER = 2;
        ExchangeReplayStopReasonEnum.STOPPED_REASON_MISSING_RESSOURCE = 3;
        ExchangeReplayStopReasonEnum.STOPPED_REASON_IMPOSSIBLE_MODIFICATION = 4;
        return ExchangeReplayStopReasonEnum;
    })
    Protocol.ExchangeReplayStopReasonEnum = ExchangeReplayStopReasonEnum;
    var ExchangeTypeEnum = (function() {
        function ExchangeTypeEnum() {}
        ExchangeTypeEnum.UNKNOWN_TRADE_TYPE = -1;
        ExchangeTypeEnum.NPC_SHOP = 0;
        ExchangeTypeEnum.PLAYER_TRADE = 1;
        ExchangeTypeEnum.NPC_TRADE = 2;
        ExchangeTypeEnum.CRAFT = 3;
        ExchangeTypeEnum.STORAGE = 4;
        ExchangeTypeEnum.SHOP_STOCK = 5;
        ExchangeTypeEnum.TAXCOLLECTOR = 6;
        ExchangeTypeEnum.NPC_MODIFY_TRADE = 7;
        ExchangeTypeEnum.BIDHOUSE_SELL = 8;
        ExchangeTypeEnum.BIDHOUSE_BUY = 9;
        ExchangeTypeEnum.MULTICRAFT_CRAFTER = 10;
        ExchangeTypeEnum.MULTICRAFT_CUSTOMER = 11;
        ExchangeTypeEnum.JOB_INDEX = 12;
        ExchangeTypeEnum.MOUNT = 13;
        ExchangeTypeEnum.MOUNT_STABLE = 14;
        ExchangeTypeEnum.NPC_RESURECT_PET = 15;
        ExchangeTypeEnum.NPC_TRADE_DRAGOTURKEY = 16;
        ExchangeTypeEnum.REALESTATE_HOUSE = 17;
        ExchangeTypeEnum.REALESTATE_FARM = 18;
        ExchangeTypeEnum.RUNES_TRADE = 19;
        ExchangeTypeEnum.RECYCLE_TRADE = 20;
        ExchangeTypeEnum.BANK = 21;
        ExchangeTypeEnum.TRASHBIN = 22;
        ExchangeTypeEnum.ALLIANCE_PRISM = 23;
        ExchangeTypeEnum.HAVENBAG = 24;
        ExchangeTypeEnum.NPC_TRADE_SEEMYOOL = 25;
        ExchangeTypeEnum.NPC_TRADE_RHINEETLE = 26;
        ExchangeTypeEnum.EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE = 27;
        ExchangeTypeEnum.NPC_RIDE_CAPABILITY_TRADE = 28;
        ExchangeTypeEnum.GUILD_CHEST = 29;
        return ExchangeTypeEnum;
    })
    Protocol.ExchangeTypeEnum = ExchangeTypeEnum;
    var FightDispellableEnum = (function() {
        function FightDispellableEnum() {}
        FightDispellableEnum.DISPELLABLE = 1;
        FightDispellableEnum.DISPELLABLE_BY_DEATH = 2;
        FightDispellableEnum.DISPELLABLE_BY_STRONG_DISPEL = 3;
        FightDispellableEnum.REALLY_NOT_DISPELLABLE = 4;
        return FightDispellableEnum;
    })
    Protocol.FightDispellableEnum = FightDispellableEnum;
    var FighterRefusedReasonEnum = (function() {
        function FighterRefusedReasonEnum() {}
        FighterRefusedReasonEnum.FIGHTER_REFUSED = -1;
        FighterRefusedReasonEnum.FIGHTER_ACCEPTED = 0;
        FighterRefusedReasonEnum.CHALLENGE_FULL = 1;
        FighterRefusedReasonEnum.TEAM_FULL = 2;
        FighterRefusedReasonEnum.WRONG_ALIGNMENT = 3;
        FighterRefusedReasonEnum.WRONG_GUILD = 4;
        FighterRefusedReasonEnum.TOO_LATE = 5;
        FighterRefusedReasonEnum.MUTANT_REFUSED = 6;
        FighterRefusedReasonEnum.WRONG_MAP = 7;
        FighterRefusedReasonEnum.JUST_RESPAWNED = 8;
        FighterRefusedReasonEnum.IM_OCCUPIED = 9;
        FighterRefusedReasonEnum.OPPONENT_OCCUPIED = 10;
        FighterRefusedReasonEnum.FIGHT_MYSELF = 11;
        FighterRefusedReasonEnum.INSUFFICIENT_RIGHTS = 12;
        FighterRefusedReasonEnum.MEMBER_ACCOUNT_NEEDED = 13;
        FighterRefusedReasonEnum.OPPONENT_NOT_MEMBER = 14;
        FighterRefusedReasonEnum.TEAM_LIMITED_BY_MAINCHARACTER = 15;
        FighterRefusedReasonEnum.MULTIACCOUNT_NOT_ALLOWED = 16;
        FighterRefusedReasonEnum.GHOST_REFUSED = 17;
        FighterRefusedReasonEnum.WRONG_ALLIANCE = 20;
        FighterRefusedReasonEnum.AVA_ZONE = 21;
        FighterRefusedReasonEnum.ENTITY_REFUSED = 22;
        FighterRefusedReasonEnum.NOT_ENOUGH_ROOM = 23;
        FighterRefusedReasonEnum.GUEST_ACCOUNT = 24;
        return FighterRefusedReasonEnum;
    })
    Protocol.FighterRefusedReasonEnum = FighterRefusedReasonEnum;
    var FightOptionsEnum = (function() {
        function FightOptionsEnum() {}
        FightOptionsEnum.FIGHT_OPTION_SET_SECRET = 0;
        FightOptionsEnum.FIGHT_OPTION_SET_TO_PARTY_ONLY = 1;
        FightOptionsEnum.FIGHT_OPTION_SET_CLOSED = 2;
        FightOptionsEnum.FIGHT_OPTION_ASK_FOR_HELP = 3;
        return FightOptionsEnum;
    })
    Protocol.FightOptionsEnum = FightOptionsEnum;
    var FightOutcomeEnum = (function() {
        function FightOutcomeEnum() {}
        FightOutcomeEnum.RESULT_LOST = 0;
        FightOutcomeEnum.RESULT_DRAW = 1;
        FightOutcomeEnum.RESULT_VICTORY = 2;
        FightOutcomeEnum.RESULT_TAX = 5;
        FightOutcomeEnum.RESULT_DEFENDER_GROUP = 6;
        return FightOutcomeEnum;
    })
    Protocol.FightOutcomeEnum = FightOutcomeEnum;
    var FightPhaseEnum = (function() {
        function FightPhaseEnum() {}
        FightPhaseEnum.STARTED = 0;
        FightPhaseEnum.JOINING_PHASE = 1;
        FightPhaseEnum.POSITIONING_PHASE = 2;
        return FightPhaseEnum;
    })
    Protocol.FightPhaseEnum = FightPhaseEnum;
    var FightSpellCastCriticalEnum = (function() {
        function FightSpellCastCriticalEnum() {}
        FightSpellCastCriticalEnum.NORMAL = 1;
        FightSpellCastCriticalEnum.CRITICAL_HIT = 2;
        FightSpellCastCriticalEnum.CRITICAL_FAIL = 3;
        return FightSpellCastCriticalEnum;
    })
    Protocol.FightSpellCastCriticalEnum = FightSpellCastCriticalEnum;
    var FightTypeEnum = (function() {
        function FightTypeEnum() {}
        FightTypeEnum.FIGHT_TYPE_CHALLENGE = 0;
        FightTypeEnum.FIGHT_TYPE_AGRESSION = 1;
        FightTypeEnum.FIGHT_TYPE_PvMA = 2;
        FightTypeEnum.FIGHT_TYPE_MXvM = 3;
        FightTypeEnum.FIGHT_TYPE_PvM = 4;
        FightTypeEnum.FIGHT_TYPE_PvT = 5;
        FightTypeEnum.FIGHT_TYPE_PvMU = 6;
        FightTypeEnum.FIGHT_TYPE_PVP_ARENA = 7;
        FightTypeEnum.FIGHT_TYPE_Koh = 8;
        FightTypeEnum.FIGHT_TYPE_PvPr = 9;
        FightTypeEnum.FIGHT_TYPE_BREACH = 10;
        return FightTypeEnum;
    })
    Protocol.FightTypeEnum = FightTypeEnum;
    var ForgettableSpellClientActionEnum = (function() {
        function ForgettableSpellClientActionEnum() {}
        ForgettableSpellClientActionEnum.FORGETTABLE_SPELL_FORGET = 0;
        ForgettableSpellClientActionEnum.FORGETTABLE_SPELL_EQUIP = 1;
        ForgettableSpellClientActionEnum.FORGETTABLE_SPELL_UNEQUIP = 2;
        return ForgettableSpellClientActionEnum;
    })
    Protocol.ForgettableSpellClientActionEnum = ForgettableSpellClientActionEnum;
    var ForgettableSpellListActionEnum = (function() {
        function ForgettableSpellListActionEnum() {}
        ForgettableSpellListActionEnum.FORGETTABLE_SPELL_LIST_DISPATCH = 0;
        ForgettableSpellListActionEnum.FORGETTABLE_SPELL_LIST_UPDATE = 1;
        return ForgettableSpellListActionEnum;
    })
    Protocol.ForgettableSpellListActionEnum = ForgettableSpellListActionEnum;
    var GameActionFightInvisibilityStateEnum = (function() {
        function GameActionFightInvisibilityStateEnum() {}
        GameActionFightInvisibilityStateEnum.INVISIBLE = 1;
        GameActionFightInvisibilityStateEnum.DETECTED = 2;
        GameActionFightInvisibilityStateEnum.VISIBLE = 3;
        return GameActionFightInvisibilityStateEnum;
    })
    Protocol.GameActionFightInvisibilityStateEnum = GameActionFightInvisibilityStateEnum;
    var GameActionMarkCellsTypeEnum = (function() {
        function GameActionMarkCellsTypeEnum() {}
        GameActionMarkCellsTypeEnum.CELLS_CIRCLE = 0;
        GameActionMarkCellsTypeEnum.CELLS_CROSS = 1;
        GameActionMarkCellsTypeEnum.CELLS_SQUARE = 2;
        return GameActionMarkCellsTypeEnum;
    })
    Protocol.GameActionMarkCellsTypeEnum = GameActionMarkCellsTypeEnum;
    var GameContextEnum = (function() {
        function GameContextEnum() {}
        GameContextEnum.ROLE_PLAY = 1;
        GameContextEnum.FIGHT = 2;
        return GameContextEnum;
    })
    Protocol.GameContextEnum = GameContextEnum;
    var GameHierarchyEnum = (function() {
        function GameHierarchyEnum() {}
        GameHierarchyEnum.UNAVAILABLE = -1;
        GameHierarchyEnum.PLAYER = 0;
        GameHierarchyEnum.MODERATOR = 10;
        GameHierarchyEnum.GAMEMASTER_PADAWAN = 20;
        GameHierarchyEnum.GAMEMASTER = 30;
        GameHierarchyEnum.ADMIN = 40;
        GameHierarchyEnum.UNKNOWN_SPECIAL_USER = 50;
        return GameHierarchyEnum;
    })
    Protocol.GameHierarchyEnum = GameHierarchyEnum;
    var GameServerTypeEnum = (function() {
        function GameServerTypeEnum() {}
        GameServerTypeEnum.SERVER_TYPE_UNDEFINED = -1;
        GameServerTypeEnum.SERVER_TYPE_CLASSICAL = 0;
        GameServerTypeEnum.SERVER_TYPE_HARDCORE = 1;
        GameServerTypeEnum.SERVER_TYPE_KOLIZEUM = 2;
        GameServerTypeEnum.SERVER_TYPE_TOURNAMENT = 3;
        GameServerTypeEnum.SERVER_TYPE_EPIC = 4;
        GameServerTypeEnum.SERVER_TYPE_TEMPORIS = 5;
        return GameServerTypeEnum;
    })
    Protocol.GameServerTypeEnum = GameServerTypeEnum;
    var GuildInformationsTypeEnum = (function() {
        function GuildInformationsTypeEnum() {}
        GuildInformationsTypeEnum.INFO_GENERAL = 1;
        GuildInformationsTypeEnum.INFO_MEMBERS = 2;
        GuildInformationsTypeEnum.INFO_BOOSTS = 3;
        GuildInformationsTypeEnum.INFO_PADDOCKS = 4;
        GuildInformationsTypeEnum.INFO_HOUSES = 5;
        GuildInformationsTypeEnum.INFO_RECRUITMENT = 9;
        GuildInformationsTypeEnum.INFO_LOGBOOK = 10;
        return GuildInformationsTypeEnum;
    })
    Protocol.GuildInformationsTypeEnum = GuildInformationsTypeEnum;
    var GuildRankActivityTypeEnum = (function() {
        function GuildRankActivityTypeEnum() {}
        GuildRankActivityTypeEnum.CREATION = 0;
        GuildRankActivityTypeEnum.UPDATE = 1;
        GuildRankActivityTypeEnum.DELETE = 2;
        return GuildRankActivityTypeEnum;
    })
    Protocol.GuildRankActivityTypeEnum = GuildRankActivityTypeEnum;
    var GuildRightsEnum = (function() {
        function GuildRightsEnum() {}
        GuildRightsEnum.RIGHT_MANAGE_RANKS_AND_RIGHTS = 1;
        GuildRightsEnum.RIGHT_MANAGE_CHEST_RIGHTS = 2;
        GuildRightsEnum.RIGHT_MANAGE_SELF_XP_CONTRIBUTION = 3;
        GuildRightsEnum.RIGHT_MANAGE_ALL_XP_CONTRIBUTION = 4;
        GuildRightsEnum.RIGHT_MANAGE_RECRUITMENT = 5;
        GuildRightsEnum.RIGHT_MANAGE_APPLY_AND_INVITATION = 6;
        GuildRightsEnum.RIGHT_UPDATE_MOTD = 7;
        GuildRightsEnum.RIGHT_OPEN_GUILD_CHEST = 8;
        GuildRightsEnum.RIGHT_USE_PADDOCKS = 10;
        GuildRightsEnum.RIGHT_KICK_MEMBER = 13;
        GuildRightsEnum.RIGHT_MANAGE_MEMBERS_NOTE = 14;
        GuildRightsEnum.RIGHT_UPDATE_BULLETIN = 15;
        GuildRightsEnum.RIGHT_MANAGE_PADDOCKS = 20;
        GuildRightsEnum.RIGHT_MANAGE_OTHER_MOUNTS = 21;
        GuildRightsEnum.RIGHT_TAKE_FROM_GUILD_CHEST = 23;
        GuildRightsEnum.RIGHT_DROP_ON_GUILD_CHEST = 24;
        GuildRightsEnum.RIGHT_SHOW_TRANSACTION_PLAYER = 25;
        GuildRightsEnum.RIGHT_ASSIGN_RANKS = 26;
        GuildRightsEnum.RIGHT_BUY_FARM = 27;
        return GuildRightsEnum;
    })
    Protocol.GuildRightsEnum = GuildRightsEnum;
    var GuildSummarySortEnum = (function() {
        function GuildSummarySortEnum() {}
        GuildSummarySortEnum.SORT_BY_NAME = 0;
        GuildSummarySortEnum.SORT_BY_LEVEL = 1;
        GuildSummarySortEnum.SORT_BY_NB_MEMBERS = 2;
        GuildSummarySortEnum.SORT_BY_LAST_ACTIVITY = 3;
        return GuildSummarySortEnum;
    })
    Protocol.GuildSummarySortEnum = GuildSummarySortEnum;
    var HaapiAuthTypeEnum = (function() {
        function HaapiAuthTypeEnum() {}
        HaapiAuthTypeEnum.HAAPI_API_KEY = 0;
        HaapiAuthTypeEnum.HAAPI_TOKEN = 1;
        return HaapiAuthTypeEnum;
    })
    Protocol.HaapiAuthTypeEnum = HaapiAuthTypeEnum;
    var HaapiSessionTypeEnum = (function() {
        function HaapiSessionTypeEnum() {}
        HaapiSessionTypeEnum.HAAPI_ACCOUNT_SESSION = 0;
        HaapiSessionTypeEnum.HAAPI_GAME_SESSION = 1;
        return HaapiSessionTypeEnum;
    })
    Protocol.HaapiSessionTypeEnum = HaapiSessionTypeEnum;
    var HavenBagDailyLoteryErrorEnum = (function() {
        function HavenBagDailyLoteryErrorEnum() {}
        HavenBagDailyLoteryErrorEnum.HAVENBAG_DAILY_LOTERY_OK = 0;
        HavenBagDailyLoteryErrorEnum.HAVENBAG_DAILY_LOTERY_ALREADYUSED = 1;
        HavenBagDailyLoteryErrorEnum.HAVENBAG_DAILY_LOTERY_ERROR = 2;
        return HavenBagDailyLoteryErrorEnum;
    })
    Protocol.HavenBagDailyLoteryErrorEnum = HavenBagDailyLoteryErrorEnum;
    var HavenBagRoomActionEnum = (function() {
        function HavenBagRoomActionEnum() {}
        HavenBagRoomActionEnum.HAVEN_BAG_ROOM_DISPATCH = 0;
        HavenBagRoomActionEnum.HAVEN_BAG_ROOM_UPDATE = 1;
        return HavenBagRoomActionEnum;
    })
    Protocol.HavenBagRoomActionEnum = HavenBagRoomActionEnum;
    var HavenBagShareBitEnum = (function() {
        function HavenBagShareBitEnum() {}
        HavenBagShareBitEnum.HAVEN_BAG_NONE = 0;
        HavenBagShareBitEnum.HAVEN_BAG_FRIENDS = 1;
        HavenBagShareBitEnum.HAVEN_BAG_GUILD = 2;
        return HavenBagShareBitEnum;
    })
    Protocol.HavenBagShareBitEnum = HavenBagShareBitEnum;
    var IdentificationFailureReasonEnum = (function() {
        function IdentificationFailureReasonEnum() {}
        IdentificationFailureReasonEnum.BAD_VERSION = 1;
        IdentificationFailureReasonEnum.WRONG_CREDENTIALS = 2;
        IdentificationFailureReasonEnum.BANNED = 3;
        IdentificationFailureReasonEnum.KICKED = 4;
        IdentificationFailureReasonEnum.IN_MAINTENANCE = 5;
        IdentificationFailureReasonEnum.TOO_MANY_ON_IP = 6;
        IdentificationFailureReasonEnum.TIME_OUT = 7;
        IdentificationFailureReasonEnum.BAD_IPRANGE = 8;
        IdentificationFailureReasonEnum.CREDENTIALS_RESET = 9;
        IdentificationFailureReasonEnum.EMAIL_UNVALIDATED = 10;
        IdentificationFailureReasonEnum.OTP_TIMEOUT = 11;
        IdentificationFailureReasonEnum.LOCKED = 12;
        IdentificationFailureReasonEnum.ANONYMOUS_IP_FORBIDDEN = 13;
        IdentificationFailureReasonEnum.INVALID_SHIELD_CERTIFICATE = 14;
        IdentificationFailureReasonEnum.ALREADY_CONNECTED = 15;
        IdentificationFailureReasonEnum.SERVICE_UNAVAILABLE = 53;
        IdentificationFailureReasonEnum.EXTERNAL_ACCOUNT_LINK_REFUSED = 61;
        IdentificationFailureReasonEnum.EXTERNAL_ACCOUNT_ALREADY_LINKED = 62;
        IdentificationFailureReasonEnum.UNKNOWN_AUTH_ERROR = 99;
        IdentificationFailureReasonEnum.SPARE = 100;
        return IdentificationFailureReasonEnum;
    })
    Protocol.IdentificationFailureReasonEnum = IdentificationFailureReasonEnum;
    var ListAddFailureEnum = (function() {
        function ListAddFailureEnum() {}
        ListAddFailureEnum.LIST_ADD_FAILURE_UNKNOWN = 0;
        ListAddFailureEnum.LIST_ADD_FAILURE_OVER_QUOTA = 1;
        ListAddFailureEnum.LIST_ADD_FAILURE_NOT_FOUND = 2;
        ListAddFailureEnum.LIST_ADD_FAILURE_EGOCENTRIC = 3;
        ListAddFailureEnum.LIST_ADD_FAILURE_IS_DOUBLE = 4;
        ListAddFailureEnum.LIST_ADD_FAILURE_IS_CONFLICTING_DOUBLE = 5;
        return ListAddFailureEnum;
    })
    Protocol.ListAddFailureEnum = ListAddFailureEnum;
    var LockableResultEnum = (function() {
        function LockableResultEnum() {}
        LockableResultEnum.LOCKABLE_UNLOCKED = 0;
        LockableResultEnum.LOCKABLE_CODE_ERROR = 1;
        LockableResultEnum.LOCKABLE_UNLOCK_FORBIDDEN = 2;
        return LockableResultEnum;
    })
    Protocol.LockableResultEnum = LockableResultEnum;
    var MapObstacleStateEnum = (function() {
        function MapObstacleStateEnum() {}
        MapObstacleStateEnum.OBSTACLE_OPENED = 1;
        MapObstacleStateEnum.OBSTACLE_CLOSED = 2;
        return MapObstacleStateEnum;
    })
    Protocol.MapObstacleStateEnum = MapObstacleStateEnum;
    var MountCharacteristicEnum = (function() {
        function MountCharacteristicEnum() {}
        MountCharacteristicEnum.ENERGY = 1;
        MountCharacteristicEnum.SERENITY = 2;
        MountCharacteristicEnum.STAMINA = 3;
        MountCharacteristicEnum.LOVE = 4;
        MountCharacteristicEnum.MATURITY = 5;
        MountCharacteristicEnum.TIREDNESS = 6;
        MountCharacteristicEnum.CARRIER = 7;
        MountCharacteristicEnum.FERTILE = 8;
        MountCharacteristicEnum.PREGNANT = 9;
        return MountCharacteristicEnum;
    })
    Protocol.MountCharacteristicEnum = MountCharacteristicEnum;
    var MountEquipedErrorEnum = (function() {
        function MountEquipedErrorEnum() {}
        MountEquipedErrorEnum.UNSET = 0;
        MountEquipedErrorEnum.SET = 1;
        MountEquipedErrorEnum.RIDING = 2;
        return MountEquipedErrorEnum;
    })
    Protocol.MountEquipedErrorEnum = MountEquipedErrorEnum;
    var NameComplianceResultEnum = (function() {
        function NameComplianceResultEnum() {}
        NameComplianceResultEnum.NAME_OK = 0;
        NameComplianceResultEnum.ERROR_SERVICE_UNAVAILABLE = 1;
        NameComplianceResultEnum.ERROR_NAME_ALREADY_EXISTS = 2;
        NameComplianceResultEnum.ERROR_NAME_BAD_ALPHABET = 3;
        NameComplianceResultEnum.ERROR_NAME_BAD_LENGTH = 4;
        NameComplianceResultEnum.ERROR_BAD_CHAR = 5;
        NameComplianceResultEnum.ERROR_INVALID_DASH_POSITION = 6;
        NameComplianceResultEnum.ERROR_NAME_WITH_BAD_CASE = 7;
        NameComplianceResultEnum.ERROR_TOO_MANY_CONSECUTIVE_IDENTICAL = 8;
        NameComplianceResultEnum.ERROR_TOO_MANY_SPECIAL = 9;
        NameComplianceResultEnum.ERROR_FORBIDDEN_NAME = 10;
        NameComplianceResultEnum.ERROR_RESERVED_NAME = 11;
        return NameComplianceResultEnum;
    })
    Protocol.NameComplianceResultEnum = NameComplianceResultEnum;
    var NicknameErrorEnum = (function() {
        function NicknameErrorEnum() {}
        NicknameErrorEnum.ALREADY_USED = 1;
        NicknameErrorEnum.SAME_AS_LOGIN = 2;
        NicknameErrorEnum.TOO_SIMILAR_TO_LOGIN = 3;
        NicknameErrorEnum.INVALID_NICK = 4;
        NicknameErrorEnum.UNKNOWN_NICK_ERROR = 99;
        return NicknameErrorEnum;
    })
    Protocol.NicknameErrorEnum = NicknameErrorEnum;
    var ObjectErrorEnum = (function() {
        function ObjectErrorEnum() {}
        ObjectErrorEnum.INVENTORY_FULL = 1;
        ObjectErrorEnum.CANNOT_EQUIP_TWICE = 2;
        ObjectErrorEnum.NOT_TRADABLE = 3;
        ObjectErrorEnum.CANNOT_DROP = 4;
        ObjectErrorEnum.CANNOT_DROP_NO_PLACE = 5;
        ObjectErrorEnum.CANNOT_DESTROY = 6;
        ObjectErrorEnum.LEVEL_TOO_LOW = 7;
        ObjectErrorEnum.LIVING_OBJECT_REFUSED_FOOD = 8;
        ObjectErrorEnum.CANNOT_UNEQUIP = 9;
        ObjectErrorEnum.CANNOT_EQUIP_HERE = 10;
        ObjectErrorEnum.CRITERIONS = 11;
        ObjectErrorEnum.SYMBIOTIC_OBJECT_ERROR = 12;
        ObjectErrorEnum.EVOLUTIVE_OBJECT_REFUSED_FOOD = 13;
        return ObjectErrorEnum;
    })
    Protocol.ObjectErrorEnum = ObjectErrorEnum;
    var PaddockCommercialEventTypeEnum = (function() {
        function PaddockCommercialEventTypeEnum() {}
        PaddockCommercialEventTypeEnum.BUY = 0;
        PaddockCommercialEventTypeEnum.PUT_ON_SELL = 1;
        PaddockCommercialEventTypeEnum.SOLD = 2;
        return PaddockCommercialEventTypeEnum;
    })
    Protocol.PaddockCommercialEventTypeEnum = PaddockCommercialEventTypeEnum;
    var PartyJoinErrorEnum = (function() {
        function PartyJoinErrorEnum() {}
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_UNKNOWN = 0;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_NOT_FOUND = 1;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PARTY_NOT_FOUND = 2;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PARTY_FULL = 3;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_BUSY = 4;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED = 6;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED = 7;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_LOYAL = 8;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_UNMODIFIABLE = 9;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_UNMET_CRITERION = 10;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM = 11;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_COMPOSITION_CHANGED = 12;
        PartyJoinErrorEnum.PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL = 13;
        return PartyJoinErrorEnum;
    })
    Protocol.PartyJoinErrorEnum = PartyJoinErrorEnum;
    var PartyNameErrorEnum = (function() {
        function PartyNameErrorEnum() {}
        PartyNameErrorEnum.PARTY_NAME_UNDEFINED_ERROR = 0;
        PartyNameErrorEnum.PARTY_NAME_INVALID = 1;
        PartyNameErrorEnum.PARTY_NAME_ALREADY_USED = 2;
        PartyNameErrorEnum.PARTY_NAME_UNALLOWED_RIGHTS = 3;
        PartyNameErrorEnum.PARTY_NAME_UNALLOWED_NOW = 4;
        return PartyNameErrorEnum;
    })
    Protocol.PartyNameErrorEnum = PartyNameErrorEnum;
    var PartyTypeEnum = (function() {
        function PartyTypeEnum() {}
        PartyTypeEnum.PARTY_TYPE_UNDEFINED = 0;
        PartyTypeEnum.PARTY_TYPE_CLASSICAL = 1;
        PartyTypeEnum.PARTY_TYPE_DUNGEON = 2;
        PartyTypeEnum.PARTY_TYPE_ARENA = 3;
        return PartyTypeEnum;
    })
    Protocol.PartyTypeEnum = PartyTypeEnum;
    var PlayableBreedEnum = (function() {
        function PlayableBreedEnum() {}
        PlayableBreedEnum.UNDEFINED = 0;
        PlayableBreedEnum.Feca = 1;
        PlayableBreedEnum.Osamodas = 2;
        PlayableBreedEnum.Enutrof = 3;
        PlayableBreedEnum.Sram = 4;
        PlayableBreedEnum.Xelor = 5;
        PlayableBreedEnum.Ecaflip = 6;
        PlayableBreedEnum.Eniripsa = 7;
        PlayableBreedEnum.Iop = 8;
        PlayableBreedEnum.Cra = 9;
        PlayableBreedEnum.Sadida = 10;
        PlayableBreedEnum.Sacrieur = 11;
        PlayableBreedEnum.Pandawa = 12;
        PlayableBreedEnum.Roublard = 13;
        PlayableBreedEnum.Zobal = 14;
        PlayableBreedEnum.Steamer = 15;
        PlayableBreedEnum.Eliotrope = 16;
        PlayableBreedEnum.Huppermage = 17;
        PlayableBreedEnum.Ouginak = 18;
        PlayableBreedEnum.Forgelance = 20;
        return PlayableBreedEnum;
    })
    Protocol.PlayableBreedEnum = PlayableBreedEnum;
    var PlayerFlowEventTypeEnum = (function() {
        function PlayerFlowEventTypeEnum() {}
        PlayerFlowEventTypeEnum.JOIN = 0;
        PlayerFlowEventTypeEnum.LEAVE = 1;
        PlayerFlowEventTypeEnum.APPLY_REFUSED = 2;
        return PlayerFlowEventTypeEnum;
    })
    Protocol.PlayerFlowEventTypeEnum = PlayerFlowEventTypeEnum;
    var PlayerLifeStatusEnum = (function() {
        function PlayerLifeStatusEnum() {}
        PlayerLifeStatusEnum.STATUS_ALIVE_AND_KICKING = 0;
        PlayerLifeStatusEnum.STATUS_TOMBSTONE = 1;
        PlayerLifeStatusEnum.STATUS_PHANTOM = 2;
        return PlayerLifeStatusEnum;
    })
    Protocol.PlayerLifeStatusEnum = PlayerLifeStatusEnum;
    var PlayerStateEnum = (function() {
        function PlayerStateEnum() {}
        PlayerStateEnum.NOT_CONNECTED = 0;
        PlayerStateEnum.GAME_TYPE_ROLEPLAY = 1;
        PlayerStateEnum.GAME_TYPE_FIGHT = 2;
        PlayerStateEnum.UNKNOWN_STATE = 99;
        return PlayerStateEnum;
    })
    Protocol.PlayerStateEnum = PlayerStateEnum;
    var PlayerStatusEnum = (function() {
        function PlayerStatusEnum() {}
        PlayerStatusEnum.PLAYER_STATUS_OFFLINE = 0;
        PlayerStatusEnum.PLAYER_STATUS_UNKNOWN = 1;
        PlayerStatusEnum.PLAYER_STATUS_AVAILABLE = 10;
        PlayerStatusEnum.PLAYER_STATUS_IDLE = 20;
        PlayerStatusEnum.PLAYER_STATUS_AFK = 21;
        PlayerStatusEnum.PLAYER_STATUS_PRIVATE = 30;
        PlayerStatusEnum.PLAYER_STATUS_SOLO = 40;
        return PlayerStatusEnum;
    })
    Protocol.PlayerStatusEnum = PlayerStatusEnum;
    var PresetDeleteResultEnum = (function() {
        function PresetDeleteResultEnum() {}
        PresetDeleteResultEnum.PRESET_DEL_OK = 1;
        PresetDeleteResultEnum.PRESET_DEL_ERR_UNKNOWN = 2;
        PresetDeleteResultEnum.PRESET_DEL_ERR_BAD_PRESET_ID = 3;
        PresetDeleteResultEnum.PRESET_DEL_ERR_SYSTEM_INACTIVE = 4;
        return PresetDeleteResultEnum;
    })
    Protocol.PresetDeleteResultEnum = PresetDeleteResultEnum;
    var PresetSaveResultEnum = (function() {
        function PresetSaveResultEnum() {}
        PresetSaveResultEnum.PRESET_SAVE_OK = 1;
        PresetSaveResultEnum.PRESET_SAVE_ERR_UNKNOWN = 2;
        PresetSaveResultEnum.PRESET_SAVE_ERR_TOO_MANY = 3;
        PresetSaveResultEnum.PRESET_SAVE_ERR_INVALID_PLAYER_STATE = 4;
        PresetSaveResultEnum.PRESET_SAVE_ERR_SYSTEM_INACTIVE = 5;
        PresetSaveResultEnum.PRESET_SAVE_ERR_INVALID_ID = 6;
        return PresetSaveResultEnum;
    })
    Protocol.PresetSaveResultEnum = PresetSaveResultEnum;
    var PresetUseResultEnum = (function() {
        function PresetUseResultEnum() {}
        PresetUseResultEnum.PRESET_USE_OK = 1;
        PresetUseResultEnum.PRESET_USE_OK_PARTIAL = 2;
        PresetUseResultEnum.PRESET_USE_ERR_STATS_FIGHT_PREPARATION = 3;
        PresetUseResultEnum.PRESET_USE_ERR_COOLDOWN = 4;
        PresetUseResultEnum.PRESET_USE_ERR_BAD_PRESET_ID = 5;
        PresetUseResultEnum.PRESET_USE_ERR_INVALID_STATE = 6;
        PresetUseResultEnum.PRESET_USE_ERR_STATS = 7;
        PresetUseResultEnum.PRESET_USE_ERR_CRITERION = 8;
        PresetUseResultEnum.PRESET_USE_ERR_UNKNOWN = 9;
        PresetUseResultEnum.PRESET_USE_ERR_INVALID_DATA = 10;
        return PresetUseResultEnum;
    })
    Protocol.PresetUseResultEnum = PresetUseResultEnum;
    var PrismAttackResultEnum = (function() {
        function PrismAttackResultEnum() {}
        PrismAttackResultEnum.DEFENDERS_WIN = 0;
        PrismAttackResultEnum.ATTACKERS_WIN = 1;
        return PrismAttackResultEnum;
    })
    Protocol.PrismAttackResultEnum = PrismAttackResultEnum;
    var PrismStateEnum = (function() {
        function PrismStateEnum() {}
        PrismStateEnum.PRISM_STATE_NORMAL = 0;
        PrismStateEnum.PRISM_STATE_WEAKENED = 1;
        PrismStateEnum.PRISM_STATE_VULNERABLE = 2;
        PrismStateEnum.PRISM_STATE_PROTECTED = 3;
        PrismStateEnum.PRISM_STATE_INHIBITED = 4;
        return PrismStateEnum;
    })
    Protocol.PrismStateEnum = PrismStateEnum;
    var PvpArenaStepEnum = (function() {
        function PvpArenaStepEnum() {}
        PvpArenaStepEnum.ARENA_STEP_REGISTRED = 0;
        PvpArenaStepEnum.ARENA_STEP_WAITING_FIGHT = 1;
        PvpArenaStepEnum.ARENA_STEP_STARTING_FIGHT = 2;
        PvpArenaStepEnum.ARENA_STEP_UNREGISTER = 3;
        return PvpArenaStepEnum;
    })
    Protocol.PvpArenaStepEnum = PvpArenaStepEnum;
    var PvpArenaTypeEnum = (function() {
        function PvpArenaTypeEnum() {}
        PvpArenaTypeEnum.ARENA_TYPE_1VS1 = 1;
        PvpArenaTypeEnum.ARENA_TYPE_3VS3_SOLO = 2;
        PvpArenaTypeEnum.ARENA_TYPE_3VS3_TEAM = 3;
        return PvpArenaTypeEnum;
    })
    Protocol.PvpArenaTypeEnum = PvpArenaTypeEnum;
    var SavablePresetTypeEnum = (function() {
        function SavablePresetTypeEnum() {}
        SavablePresetTypeEnum.CHARACTER_BUILD = 0;
        SavablePresetTypeEnum.SPELL_PRESET = 1;
        return SavablePresetTypeEnum;
    })
    Protocol.SavablePresetTypeEnum = SavablePresetTypeEnum;
    var ServerCompletionEnum = (function() {
        function ServerCompletionEnum() {}
        ServerCompletionEnum.COMPLETION_RECOMANDATED = 0;
        ServerCompletionEnum.COMPLETION_AVERAGE = 1;
        ServerCompletionEnum.COMPLETION_HIGH = 2;
        ServerCompletionEnum.COMPLETION_COMING_SOON = 3;
        ServerCompletionEnum.COMPLETION_FULL = 4;
        return ServerCompletionEnum;
    })
    Protocol.ServerCompletionEnum = ServerCompletionEnum;
    var ServerConnectionErrorEnum = (function() {
        function ServerConnectionErrorEnum() {}
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_DUE_TO_STATUS = 0;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_NO_REASON = 1;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY = 3;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY = 4;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_MONOACCOUNT_CANNOT_VERIFY = 5;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_MONOACCOUNT_ONLY = 6;
        ServerConnectionErrorEnum.SERVER_CONNECTION_ERROR_SERVER_OVERLOAD = 7;
        return ServerConnectionErrorEnum;
    })
    Protocol.ServerConnectionErrorEnum = ServerConnectionErrorEnum;
    var ServerStatusEnum = (function() {
        function ServerStatusEnum() {}
        ServerStatusEnum.STATUS_UNKNOWN = 0;
        ServerStatusEnum.OFFLINE = 1;
        ServerStatusEnum.STARTING = 2;
        ServerStatusEnum.ONLINE = 3;
        ServerStatusEnum.NOJOIN = 4;
        ServerStatusEnum.SAVING = 5;
        ServerStatusEnum.STOPING = 6;
        ServerStatusEnum.FULL = 7;
        return ServerStatusEnum;
    })
    Protocol.ServerStatusEnum = ServerStatusEnum;
    var ShortcutBarEnum = (function() {
        function ShortcutBarEnum() {}
        ShortcutBarEnum.GENERAL_SHORTCUT_BAR = 0;
        ShortcutBarEnum.SPELL_SHORTCUT_BAR = 1;
        return ShortcutBarEnum;
    })
    Protocol.ShortcutBarEnum = ShortcutBarEnum;
    var SocialApplicationStateEnum = (function() {
        function SocialApplicationStateEnum() {}
        SocialApplicationStateEnum.ADDED = 0;
        SocialApplicationStateEnum.DELETED = 1;
        SocialApplicationStateEnum.UPDATED = 2;
        return SocialApplicationStateEnum;
    })
    Protocol.SocialApplicationStateEnum = SocialApplicationStateEnum;
    var SocialContactCategoryEnum = (function() {
        function SocialContactCategoryEnum() {}
        SocialContactCategoryEnum.SOCIAL_CONTACT_FRIEND = 0;
        SocialContactCategoryEnum.SOCIAL_CONTACT_SPOUSE = 1;
        SocialContactCategoryEnum.SOCIAL_CONTACT_PARTY = 2;
        SocialContactCategoryEnum.SOCIAL_CONTACT_GUILD = 3;
        SocialContactCategoryEnum.SOCIAL_CONTACT_ALLIANCE = 4;
        SocialContactCategoryEnum.SOCIAL_CONTACT_CRAFTER = 5;
        SocialContactCategoryEnum.SOCIAL_CONTACT_INTERLOCUTOR = 6;
        SocialContactCategoryEnum.SOCIAL_CONTACT_FIGHT = 7;
        return SocialContactCategoryEnum;
    })
    Protocol.SocialContactCategoryEnum = SocialContactCategoryEnum;
    var SocialFightTypeEnum = (function() {
        function SocialFightTypeEnum() {}
        SocialFightTypeEnum.TaxCollectorFight = 0;
        SocialFightTypeEnum.PrismFight = 1;
        return SocialFightTypeEnum;
    })
    Protocol.SocialFightTypeEnum = SocialFightTypeEnum;
    var SocialGroupInvitationStateEnum = (function() {
        function SocialGroupInvitationStateEnum() {}
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_FAILED = 0;
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_SENT = 1;
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_CANCELED = 2;
        SocialGroupInvitationStateEnum.SOCIAL_GROUP_INVITATION_OK = 3;
        return SocialGroupInvitationStateEnum;
    })
    Protocol.SocialGroupInvitationStateEnum = SocialGroupInvitationStateEnum;
    var SocialGroupOperationResultEnum = (function() {
        function SocialGroupOperationResultEnum() {}
        SocialGroupOperationResultEnum.SOCIAL_GROUP_OPERATION_OK = 1;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_NAME_INVALID = 2;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_ALREADY_IN_GROUP = 3;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_NAME_ALREADY_EXISTS = 4;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_LEAVE = 5;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_CANCEL = 6;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_REQUIREMENT_UNMET = 7;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_EMBLEM_INVALID = 8;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_TAG_INVALID = 9;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_TAG_ALREADY_EXISTS = 10;
        SocialGroupOperationResultEnum.SOCIAL_GROUP_ERROR_UNKNOWN = 99;
        return SocialGroupOperationResultEnum;
    })
    Protocol.SocialGroupOperationResultEnum = SocialGroupOperationResultEnum;
    var SocialNoticeErrorEnum = (function() {
        function SocialNoticeErrorEnum() {}
        SocialNoticeErrorEnum.SOCIAL_NOTICE_UNKNOWN_ERROR = 0;
        SocialNoticeErrorEnum.SOCIAL_NOTICE_INVALID_RIGHTS = 1;
        SocialNoticeErrorEnum.SOCIAL_NOTICE_COOLDOWN = 2;
        return SocialNoticeErrorEnum;
    })
    Protocol.SocialNoticeErrorEnum = SocialNoticeErrorEnum;
    var SocialRecruitmentTypeEnum = (function() {
        function SocialRecruitmentTypeEnum() {}
        SocialRecruitmentTypeEnum.DISABLED = 0;
        SocialRecruitmentTypeEnum.AUTOMATIC = 1;
        SocialRecruitmentTypeEnum.MANUAL = 2;
        return SocialRecruitmentTypeEnum;
    })
    Protocol.SocialRecruitmentTypeEnum = SocialRecruitmentTypeEnum;
    var SpellModifierActionTypeEnum = (function() {
        function SpellModifierActionTypeEnum() {}
        SpellModifierActionTypeEnum.ACTION_INVALID = 0;
        SpellModifierActionTypeEnum.ACTION_BOOST = 1;
        SpellModifierActionTypeEnum.ACTION_DEBOOST = 2;
        SpellModifierActionTypeEnum.ACTION_SET = 3;
        return SpellModifierActionTypeEnum;
    })
    Protocol.SpellModifierActionTypeEnum = SpellModifierActionTypeEnum;
    var SpellModifierTypeEnum = (function() {
        function SpellModifierTypeEnum() {}
        SpellModifierTypeEnum.INVALID_MODIFICATION = 0;
        SpellModifierTypeEnum.RANGEABLE = 1;
        SpellModifierTypeEnum.DAMAGE = 2;
        SpellModifierTypeEnum.BASE_DAMAGE = 3;
        SpellModifierTypeEnum.HEAL_BONUS = 4;
        SpellModifierTypeEnum.AP_COST = 5;
        SpellModifierTypeEnum.CAST_INTERVAL = 6;
        SpellModifierTypeEnum.CRITICAL_HIT_BONUS = 7;
        SpellModifierTypeEnum.CAST_LINE = 8;
        SpellModifierTypeEnum.LOS = 9;
        SpellModifierTypeEnum.MAX_CAST_PER_TURN = 10;
        SpellModifierTypeEnum.MAX_CAST_PER_TARGET = 11;
        SpellModifierTypeEnum.RANGE_MAX = 12;
        SpellModifierTypeEnum.RANGE_MIN = 13;
        SpellModifierTypeEnum.OCCUPIED_CELL = 14;
        SpellModifierTypeEnum.FREE_CELL = 15;
        SpellModifierTypeEnum.VISIBLE_TARGET = 16;
        SpellModifierTypeEnum.PORTAL_FREE_CELL = 17;
        SpellModifierTypeEnum.PORTAL_PROJECTION = 18;
        return SpellModifierTypeEnum;
    })
    Protocol.SpellModifierTypeEnum = SpellModifierTypeEnum;
    var StatsUpgradeResultEnum = (function() {
        function StatsUpgradeResultEnum() {}
        StatsUpgradeResultEnum.NONE = -1;
        StatsUpgradeResultEnum.SUCCESS = 0;
        StatsUpgradeResultEnum.GUEST = 2;
        StatsUpgradeResultEnum.IN_FIGHT = 3;
        StatsUpgradeResultEnum.NOT_ENOUGH_POINT = 4;
        return StatsUpgradeResultEnum;
    })
    Protocol.StatsUpgradeResultEnum = StatsUpgradeResultEnum;
    var SubEntityBindingPointCategoryEnum = (function() {
        function SubEntityBindingPointCategoryEnum() {}
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_UNUSED = 0;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_PET = 1;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_MOUNT_DRIVER = 2;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_LIFTED_ENTITY = 3;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_BASE_BACKGROUND = 4;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_BASE_FOREGROUND = 6;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_PET_FOLLOWER = 7;
        SubEntityBindingPointCategoryEnum.HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES = 8;
        return SubEntityBindingPointCategoryEnum;
    })
    Protocol.SubEntityBindingPointCategoryEnum = SubEntityBindingPointCategoryEnum;
    var SubscriptionRequiredEnum = (function() {
        function SubscriptionRequiredEnum() {}
        SubscriptionRequiredEnum.LIMITED_TO_SUBSCRIBER = 0;
        SubscriptionRequiredEnum.LIMIT_ON_JOB_XP = 1;
        SubscriptionRequiredEnum.LIMIT_ON_JOB_USE = 2;
        SubscriptionRequiredEnum.LIMIT_ON_MAP = 3;
        SubscriptionRequiredEnum.LIMIT_ON_ITEM = 4;
        SubscriptionRequiredEnum.LIMIT_ON_HAVENBAG = 5;
        return SubscriptionRequiredEnum;
    })
    Protocol.SubscriptionRequiredEnum = SubscriptionRequiredEnum;
    var TaxCollectorErrorReasonEnum = (function() {
        function TaxCollectorErrorReasonEnum() {}
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_ERROR_UNKNOWN = 0;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NOT_FOUND = 1;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NOT_OWNED = 2;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NO_RIGHTS = 3;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_MAX_REACHED = 4;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_ALREADY_ONE = 5;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_CANT_HIRE_YET = 6;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_CANT_HIRE_HERE = 7;
        TaxCollectorErrorReasonEnum.TAX_COLLECTOR_NOT_ENOUGH_KAMAS = 8;
        return TaxCollectorErrorReasonEnum;
    })
    Protocol.TaxCollectorErrorReasonEnum = TaxCollectorErrorReasonEnum;
    var TaxCollectorMovementTypeEnum = (function() {
        function TaxCollectorMovementTypeEnum() {}
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_UNKNOWN_ACTION = 0;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_HIRED = 1;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_HARVESTED = 2;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_DEFEATED = 3;
        TaxCollectorMovementTypeEnum.TAX_COLLECTOR_DESTROYED = 4;
        return TaxCollectorMovementTypeEnum;
    })
    Protocol.TaxCollectorMovementTypeEnum = TaxCollectorMovementTypeEnum;
    var TaxCollectorStateEnum = (function() {
        function TaxCollectorStateEnum() {}
        TaxCollectorStateEnum.STATE_COLLECTING = 0;
        TaxCollectorStateEnum.STATE_WAITING_FOR_HELP = 1;
        TaxCollectorStateEnum.STATE_FIGHTING = 2;
        return TaxCollectorStateEnum;
    })
    Protocol.TaxCollectorStateEnum = TaxCollectorStateEnum;
    var TeamEnum = (function() {
        function TeamEnum() {}
        TeamEnum.TEAM_CHALLENGER = 0;
        TeamEnum.TEAM_DEFENDER = 1;
        TeamEnum.TEAM_SPECTATOR = 2;
        return TeamEnum;
    })
    Protocol.TeamEnum = TeamEnum;
    var TeamTypeEnum = (function() {
        function TeamTypeEnum() {}
        TeamTypeEnum.TEAM_TYPE_PLAYER = 0;
        TeamTypeEnum.TEAM_TYPE_MONSTER = 1;
        TeamTypeEnum.TEAM_TYPE_MUTANT = 2;
        TeamTypeEnum.TEAM_TYPE_TAXCOLLECTOR = 3;
        TeamTypeEnum.TEAM_TYPE_BAD_PLAYER = 4;
        TeamTypeEnum.TEAM_TYPE_PRISM = 5;
        return TeamTypeEnum;
    })
    Protocol.TeamTypeEnum = TeamTypeEnum;
    var TeleporterTypeEnum = (function() {
        function TeleporterTypeEnum() {}
        TeleporterTypeEnum.TELEPORTER_ZAAP = 0;
        TeleporterTypeEnum.TELEPORTER_SUBWAY = 1;
        TeleporterTypeEnum.TELEPORTER_PRISM = 2;
        TeleporterTypeEnum.TELEPORTER_HAVENBAG = 3;
        TeleporterTypeEnum.TELEPORTER_ANOMALY = 4;
        return TeleporterTypeEnum;
    })
    Protocol.TeleporterTypeEnum = TeleporterTypeEnum;
    var TextInformationTypeEnum = (function() {
        function TextInformationTypeEnum() {}
        TextInformationTypeEnum.TEXT_INFORMATION_MESSAGE = 0;
        TextInformationTypeEnum.TEXT_INFORMATION_ERROR = 1;
        TextInformationTypeEnum.TEXT_INFORMATION_PVP = 2;
        TextInformationTypeEnum.TEXT_INFORMATION_FIGHT_LOG = 3;
        TextInformationTypeEnum.TEXT_INFORMATION_POPUP = 4;
        TextInformationTypeEnum.TEXT_LIVING_OBJECT = 5;
        TextInformationTypeEnum.TEXT_ENTITY_TALK = 6;
        TextInformationTypeEnum.TEXT_INFORMATION_FIGHT = 7;
        return TextInformationTypeEnum;
    })
    Protocol.TextInformationTypeEnum = TextInformationTypeEnum;
    var TreasureHuntDigRequestEnum = (function() {
        function TreasureHuntDigRequestEnum() {}
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_ERROR_UNDEFINED = 0;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_NEW_HINT = 1;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_FINISHED = 2;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_WRONG = 3;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_LOST = 4;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE = 5;
        TreasureHuntDigRequestEnum.TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT = 6;
        return TreasureHuntDigRequestEnum;
    })
    Protocol.TreasureHuntDigRequestEnum = TreasureHuntDigRequestEnum;
    var TreasureHuntFlagRequestEnum = (function() {
        function TreasureHuntFlagRequestEnum() {}
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_ERROR_UNDEFINED = 0;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_OK = 1;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_WRONG = 2;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_TOO_MANY = 3;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE = 4;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_WRONG_INDEX = 5;
        TreasureHuntFlagRequestEnum.TREASURE_HUNT_FLAG_SAME_MAP = 6;
        return TreasureHuntFlagRequestEnum;
    })
    Protocol.TreasureHuntFlagRequestEnum = TreasureHuntFlagRequestEnum;
    var TreasureHuntFlagStateEnum = (function() {
        function TreasureHuntFlagStateEnum() {}
        TreasureHuntFlagStateEnum.TREASURE_HUNT_FLAG_STATE_UNKNOWN = 0;
        TreasureHuntFlagStateEnum.TREASURE_HUNT_FLAG_STATE_OK = 1;
        TreasureHuntFlagStateEnum.TREASURE_HUNT_FLAG_STATE_WRONG = 2;
        return TreasureHuntFlagStateEnum;
    })
    Protocol.TreasureHuntFlagStateEnum = TreasureHuntFlagStateEnum;
    var TreasureHuntRequestEnum = (function() {
        function TreasureHuntRequestEnum() {}
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_UNDEFINED = 0;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_NO_QUEST_FOUND = 2;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST = 3;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_NOT_AVAILABLE = 4;
        TreasureHuntRequestEnum.TREASURE_HUNT_ERROR_DAILY_LIMIT_EXCEEDED = 5;
        TreasureHuntRequestEnum.TREASURE_HUNT_OK = 1;
        return TreasureHuntRequestEnum;
    })
    Protocol.TreasureHuntRequestEnum = TreasureHuntRequestEnum;
    var TreasureHuntTypeEnum = (function() {
        function TreasureHuntTypeEnum() {}
        TreasureHuntTypeEnum.TREASURE_HUNT_CLASSIC = 0;
        TreasureHuntTypeEnum.TREASURE_HUNT_PORTAL = 1;
        TreasureHuntTypeEnum.TREASURE_HUNT_LEGENDARY = 2;
        return TreasureHuntTypeEnum;
    })
    Protocol.TreasureHuntTypeEnum = TreasureHuntTypeEnum;
    class AbstractPlayerSearchInformation {
        constructor() {


            this.ID = 2301;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_AbstractPlayerSearchInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractPlayerSearchInformation(input);
        }

        serializeAs_AbstractPlayerSearchInformation(ouput) {

        }

        deserializeAs_AbstractPlayerSearchInformation(input) {

        }
    }
    class AccountTagInformation {
        constructor() {

            this.nickname = "";
            this.tagNumber = "";
            this.ID = 1732;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nickname = "";
            this.tagNumber = "";
        }

        serialize(output) {
            this.serializeAs_AccountTagInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountTagInformation(input);
        }

        serializeAs_AccountTagInformation(ouput) {
            output.writeUTF(this.nickname);
            output.writeUTF(this.tagNumber);
        }

        deserializeAs_AccountTagInformation(input) {
            this.nickname = input.readUTF();
            this.tagNumber = input.readUTF();
        }
    }
    class StatisticData {
        constructor() {


            this.ID = 5268;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_StatisticData(output);
        }

        deserialize(input) {
            this.deserializeAs_StatisticData(input);
        }

        serializeAs_StatisticData(ouput) {

        }

        deserializeAs_StatisticData(input) {

        }
    }
    class StatisticDataBoolean extends StatisticData {
        constructor(_super) {
            super()
            this.value = false;
            this.ID = 5862;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = false;
        }

        serialize(output) {
            this.serializeAs_StatisticDataBoolean(output);
        }

        deserialize(input) {
            this.deserializeAs_StatisticDataBoolean(input);
        }

        serializeAs_StatisticDataBoolean(ouput) {
            this.serializeAs_StatisticData(this, output);
            output.writeBoolean(this.value);
        }

        deserializeAs_StatisticDataBoolean(input) {
            super.deserialize(input);
            this.value = input.readBoolean();
        }
    }
    class StatisticDataByte extends StatisticData {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 8107;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_StatisticDataByte(output);
        }

        deserialize(input) {
            this.deserializeAs_StatisticDataByte(input);
        }

        serializeAs_StatisticDataByte(ouput) {
            this.serializeAs_StatisticData(this, output);
            output.writeByte(this.value);
        }

        deserializeAs_StatisticDataByte(input) {
            super.deserialize(input);
            this.value = input.readByte();
        }
    }
    class StatisticDataInt extends StatisticData {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 854;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_StatisticDataInt(output);
        }

        deserialize(input) {
            this.deserializeAs_StatisticDataInt(input);
        }

        serializeAs_StatisticDataInt(ouput) {
            this.serializeAs_StatisticData(this, output);
            output.writeInt(this.value);
        }

        deserializeAs_StatisticDataInt(input) {
            super.deserialize(input);
            this.value = input.readInt();
        }
    }
    class StatisticDataShort extends StatisticData {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 6834;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_StatisticDataShort(output);
        }

        deserialize(input) {
            this.deserializeAs_StatisticDataShort(input);
        }

        serializeAs_StatisticDataShort(ouput) {
            this.serializeAs_StatisticData(this, output);
            output.writeShort(this.value);
        }

        deserializeAs_StatisticDataShort(input) {
            super.deserialize(input);
            this.value = input.readShort();
        }
    }
    class StatisticDataString extends StatisticData {
        constructor(_super) {
            super()
            this.value = "";
            this.ID = 2561;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = "";
        }

        serialize(output) {
            this.serializeAs_StatisticDataString(output);
        }

        deserialize(input) {
            this.deserializeAs_StatisticDataString(input);
        }

        serializeAs_StatisticDataString(ouput) {
            this.serializeAs_StatisticData(this, output);
            output.writeUTF(this.value);
        }

        deserializeAs_StatisticDataString(input) {
            super.deserialize(input);
            this.value = input.readUTF();
        }
    }
    class PlayerSearchCharacterNameInformation extends AbstractPlayerSearchInformation {
        constructor(_super) {
            super()
            this.name = "";
            this.ID = 2980;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
        }

        serialize(output) {
            this.serializeAs_PlayerSearchCharacterNameInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerSearchCharacterNameInformation(input);
        }

        serializeAs_PlayerSearchCharacterNameInformation(ouput) {
            this.serializeAs_AbstractPlayerSearchInformation(this, output);
            output.writeUTF(this.name);
        }

        deserializeAs_PlayerSearchCharacterNameInformation(input) {
            super.deserialize(input);
            this.name = input.readUTF();
        }
    }
    class PlayerSearchTagInformation extends AbstractPlayerSearchInformation {
        constructor(_super) {
            super()
            this.tag = new AccountTagInformation();
            this.ID = 500;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tag = new AccountTagInformation();
        }

        serialize(output) {
            this.serializeAs_PlayerSearchTagInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerSearchTagInformation(input);
        }

        serializeAs_PlayerSearchTagInformation(ouput) {
            this.serializeAs_AbstractPlayerSearchInformation(this, output);
            this.tag.serializeAs_AccountTagInformation(output);
        }

        deserializeAs_PlayerSearchTagInformation(input) {
            super.deserialize(input);
            this.tag = new AccountTagInformation();
            this.tag.deserialize(input);
        }
    }
    class GameServerInformations {
        constructor() {

            this.id = 0;
            this.type = -1;
            this.isMonoAccount = false;
            this.status = 1;
            this.completion = 0;
            this.isSelectable = false;
            this.charactersCount = 0;
            this.charactersSlots = 0;
            this.date = 0;
            this.ID = 3901;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.type = -1;
            this.isMonoAccount = false;
            this.status = 1;
            this.completion = 0;
            this.isSelectable = false;
            this.charactersCount = 0;
            this.charactersSlots = 0;
            this.date = 0;
        }

        serialize(output) {
            this.serializeAs_GameServerInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameServerInformations(input);
        }

        serializeAs_GameServerInformations(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isMonoAccount);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isSelectable);
            output.writeByte(_box0);
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeByte(this.type);
            output.writeByte(this.status);
            output.writeByte(this.completion);
            if (this.charactersCount < 0) {
                throw new Error("Forbidden value (" + this.charactersCount + ") on element charactersCount.");
            }
            output.writeByte(this.charactersCount);
            if (this.charactersSlots < 0) {
                throw new Error("Forbidden value (" + this.charactersSlots + ") on element charactersSlots.");
            }
            output.writeByte(this.charactersSlots);
            if (this.date < -9007199254740992 || this.date > 9007199254740992) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeDouble(this.date);
        }

        deserializeAs_GameServerInformations(input) {
            var _box0 = input.readByte();
            this.isMonoAccount = BooleanByteWrapper.getFlag(_box0, 0);
            this.isSelectable = BooleanByteWrapper.getFlag(_box0, 1);
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameServerInformations.id.");
            }
            this.type = input.readByte();
            this.status = input.readByte();
            if (this.status < 0) {
                throw new Error("Forbidden value (" + this.status + ") on element of GameServerInformations.status.");
            }
            this.completion = input.readByte();
            if (this.completion < 0) {
                throw new Error("Forbidden value (" + this.completion + ") on element of GameServerInformations.completion.");
            }
            this.charactersCount = input.readByte();
            if (this.charactersCount < 0) {
                throw new Error("Forbidden value (" + this.charactersCount + ") on element of GameServerInformations.charactersCount.");
            }
            this.charactersSlots = input.readByte();
            if (this.charactersSlots < 0) {
                throw new Error("Forbidden value (" + this.charactersSlots + ") on element of GameServerInformations.charactersSlots.");
            }
            this.date = input.readDouble();
            if (this.date < -9007199254740992 || this.date > 9007199254740992) {
                throw new Error("Forbidden value (" + this.date + ") on element of GameServerInformations.date.");
            }
        }
    }
    class Achievement {
        constructor() {

            this.id = 0;
            this.finishedObjective = [];
            this.startedObjectives = [];
            this.ID = 5129;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.finishedObjective = [];
            this.startedObjectives = [];
        }

        serialize(output) {
            this.serializeAs_Achievement(output);
        }

        deserialize(input) {
            this.deserializeAs_Achievement(input);
        }

        serializeAs_Achievement(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeShort(this.finishedObjective.length);
            for (var _i2 = 0; _i2 < this.finishedObjective.length; _i2++) {
                (this.finishedObjective[_i2]).serializeAs_AchievementObjective(output);
            }
            output.writeShort(this.startedObjectives.length);
            for (var _i3 = 0; _i3 < this.startedObjectives.length; _i3++) {
                (this.startedObjectives[_i3]).serializeAs_AchievementStartedObjective(output);
            }
        }

        deserializeAs_Achievement(input) {
            var _item2 = null;
            var _item3 = null;
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of Achievement.id.");
            }
            var _finishedObjectiveLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _finishedObjectiveLen; _i2++) {
                _item2 = new AchievementObjective();
                _item2.deserialize(input);
                this.finishedObjective.push(_item2);
            }
            var _startedObjectivesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _startedObjectivesLen; _i3++) {
                _item3 = new AchievementStartedObjective();
                _item3.deserialize(input);
                this.startedObjectives.push(_item3);
            }
        }
    }
    class AchievementAchieved {
        constructor() {

            this.id = 0;
            this.achievedBy = 0;
            this.ID = 3852;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.achievedBy = 0;
        }

        serialize(output) {
            this.serializeAs_AchievementAchieved(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementAchieved(input);
        }

        serializeAs_AchievementAchieved(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            if (this.achievedBy < 0 || this.achievedBy > 9007199254740992) {
                throw new Error("Forbidden value (" + this.achievedBy + ") on element achievedBy.");
            }
            output.writeVarLong(this.achievedBy);
        }

        deserializeAs_AchievementAchieved(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of AchievementAchieved.id.");
            }
            this.achievedBy = input.readVarUhLong();
            if (this.achievedBy < 0 || this.achievedBy > 9007199254740992) {
                throw new Error("Forbidden value (" + this.achievedBy + ") on element of AchievementAchieved.achievedBy.");
            }
        }
    }
    class AchievementAchievedRewardable extends AchievementAchieved {
        constructor(_super) {
            super()
            this.finishedlevel = 0;
            this.ID = 5566;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.finishedlevel = 0;
        }

        serialize(output) {
            this.serializeAs_AchievementAchievedRewardable(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementAchievedRewardable(input);
        }

        serializeAs_AchievementAchievedRewardable(ouput) {
            this.serializeAs_AchievementAchieved(this, output);
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error("Forbidden value (" + this.finishedlevel + ") on element finishedlevel.");
            }
            output.writeVarShort(this.finishedlevel);
        }

        deserializeAs_AchievementAchievedRewardable(input) {
            super.deserialize(input);
            this.finishedlevel = input.readVarUhShort();
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error("Forbidden value (" + this.finishedlevel + ") on element of AchievementAchievedRewardable.finishedlevel.");
            }
        }
    }
    class AchievementObjective {
        constructor() {

            this.id = 0;
            this.maxValue = 0;
            this.ID = 4442;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.maxValue = 0;
        }

        serialize(output) {
            this.serializeAs_AchievementObjective(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementObjective(input);
        }

        serializeAs_AchievementObjective(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            if (this.maxValue < 0) {
                throw new Error("Forbidden value (" + this.maxValue + ") on element maxValue.");
            }
            output.writeVarShort(this.maxValue);
        }

        deserializeAs_AchievementObjective(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of AchievementObjective.id.");
            }
            this.maxValue = input.readVarUhShort();
            if (this.maxValue < 0) {
                throw new Error("Forbidden value (" + this.maxValue + ") on element of AchievementObjective.maxValue.");
            }
        }
    }
    class AchievementStartedObjective extends AchievementObjective {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 6953;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_AchievementStartedObjective(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementStartedObjective(input);
        }

        serializeAs_AchievementStartedObjective(ouput) {
            this.serializeAs_AchievementObjective(this, output);
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element value.");
            }
            output.writeVarShort(this.value);
        }

        deserializeAs_AchievementStartedObjective(input) {
            super.deserialize(input);
            this.value = input.readVarUhShort();
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element of AchievementStartedObjective.value.");
            }
        }
    }
    class FightDispellableEffectExtendedInformations {
        constructor() {

            this.actionId = 0;
            this.sourceId = 0;
            this.effect = new AbstractFightDispellableEffect();
            this.ID = 9608;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actionId = 0;
            this.sourceId = 0;
            this.effect = new AbstractFightDispellableEffect();
        }

        serialize(output) {
            this.serializeAs_FightDispellableEffectExtendedInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightDispellableEffectExtendedInformations(input);
        }

        serializeAs_FightDispellableEffectExtendedInformations(ouput) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
            output.writeShort(this.effect.getTypeId());
            this.effect.serialize(output);
        }

        deserializeAs_FightDispellableEffectExtendedInformations(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of FightDispellableEffectExtendedInformations.actionId.");
            }
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of FightDispellableEffectExtendedInformations.sourceId.");
            }
            var _id3 = input.readUnsignedShort();
            this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _id3);
            this.effect.deserialize(input);
        }
    }
    class AbstractFightDispellableEffect {
        constructor() {

            this.uid = 0;
            this.targetId = 0;
            this.turnDuration = 0;
            this.dispelable = 1;
            this.spellId = 0;
            this.effectId = 0;
            this.parentBoostUid = 0;
            this.ID = 3432;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uid = 0;
            this.targetId = 0;
            this.turnDuration = 0;
            this.dispelable = 1;
            this.spellId = 0;
            this.effectId = 0;
            this.parentBoostUid = 0;
        }

        serialize(output) {
            this.serializeAs_AbstractFightDispellableEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractFightDispellableEffect(input);
        }

        serializeAs_AbstractFightDispellableEffect(ouput) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeShort(this.turnDuration);
            output.writeByte(this.dispelable);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element effectId.");
            }
            output.writeVarInt(this.effectId);
            if (this.parentBoostUid < 0) {
                throw new Error("Forbidden value (" + this.parentBoostUid + ") on element parentBoostUid.");
            }
            output.writeVarInt(this.parentBoostUid);
        }

        deserializeAs_AbstractFightDispellableEffect(input) {
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of AbstractFightDispellableEffect.uid.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of AbstractFightDispellableEffect.targetId.");
            }
            this.turnDuration = input.readShort();
            this.dispelable = input.readByte();
            if (this.dispelable < 0) {
                throw new Error("Forbidden value (" + this.dispelable + ") on element of AbstractFightDispellableEffect.dispelable.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of AbstractFightDispellableEffect.spellId.");
            }
            this.effectId = input.readVarUhInt();
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element of AbstractFightDispellableEffect.effectId.");
            }
            this.parentBoostUid = input.readVarUhInt();
            if (this.parentBoostUid < 0) {
                throw new Error("Forbidden value (" + this.parentBoostUid + ") on element of AbstractFightDispellableEffect.parentBoostUid.");
            }
        }
    }
    class FightTemporaryBoostEffect extends AbstractFightDispellableEffect {
        constructor(_super) {
            super()
            this.delta = 0;
            this.ID = 5112;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.delta = 0;
        }

        serialize(output) {
            this.serializeAs_FightTemporaryBoostEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTemporaryBoostEffect(input);
        }

        serializeAs_FightTemporaryBoostEffect(ouput) {
            this.serializeAs_AbstractFightDispellableEffect(this, output);
            output.writeInt(this.delta);
        }

        deserializeAs_FightTemporaryBoostEffect(input) {
            super.deserialize(input);
            this.delta = input.readInt();
        }
    }
    class FightTemporaryBoostStateEffect extends FightTemporaryBoostEffect {
        constructor(_super) {
            super()
            this.stateId = 0;
            this.ID = 1864;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stateId = 0;
        }

        serialize(output) {
            this.serializeAs_FightTemporaryBoostStateEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTemporaryBoostStateEffect(input);
        }

        serializeAs_FightTemporaryBoostStateEffect(ouput) {
            this.serializeAs_FightTemporaryBoostEffect(this, output);
            output.writeShort(this.stateId);
        }

        deserializeAs_FightTemporaryBoostStateEffect(input) {
            super.deserialize(input);
            this.stateId = input.readShort();
        }
    }
    class FightTemporaryBoostWeaponDamagesEffect extends FightTemporaryBoostEffect {
        constructor(_super) {
            super()
            this.weaponTypeId = 0;
            this.ID = 7303;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.weaponTypeId = 0;
        }

        serialize(output) {
            this.serializeAs_FightTemporaryBoostWeaponDamagesEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTemporaryBoostWeaponDamagesEffect(input);
        }

        serializeAs_FightTemporaryBoostWeaponDamagesEffect(ouput) {
            this.serializeAs_FightTemporaryBoostEffect(this, output);
            output.writeShort(this.weaponTypeId);
        }

        deserializeAs_FightTemporaryBoostWeaponDamagesEffect(input) {
            super.deserialize(input);
            this.weaponTypeId = input.readShort();
        }
    }
    class FightTemporarySpellBoostEffect extends FightTemporaryBoostEffect {
        constructor(_super) {
            super()
            this.boostedSpellId = 0;
            this.ID = 4329;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.boostedSpellId = 0;
        }

        serialize(output) {
            this.serializeAs_FightTemporarySpellBoostEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTemporarySpellBoostEffect(input);
        }

        serializeAs_FightTemporarySpellBoostEffect(ouput) {
            this.serializeAs_FightTemporaryBoostEffect(this, output);
            if (this.boostedSpellId < 0) {
                throw new Error("Forbidden value (" + this.boostedSpellId + ") on element boostedSpellId.");
            }
            output.writeVarShort(this.boostedSpellId);
        }

        deserializeAs_FightTemporarySpellBoostEffect(input) {
            super.deserialize(input);
            this.boostedSpellId = input.readVarUhShort();
            if (this.boostedSpellId < 0) {
                throw new Error("Forbidden value (" + this.boostedSpellId + ") on element of FightTemporarySpellBoostEffect.boostedSpellId.");
            }
        }
    }
    class FightTemporarySpellImmunityEffect extends AbstractFightDispellableEffect {
        constructor(_super) {
            super()
            this.immuneSpellId = 0;
            this.ID = 7629;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.immuneSpellId = 0;
        }

        serialize(output) {
            this.serializeAs_FightTemporarySpellImmunityEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTemporarySpellImmunityEffect(input);
        }

        serializeAs_FightTemporarySpellImmunityEffect(ouput) {
            this.serializeAs_AbstractFightDispellableEffect(this, output);
            output.writeInt(this.immuneSpellId);
        }

        deserializeAs_FightTemporarySpellImmunityEffect(input) {
            super.deserialize(input);
            this.immuneSpellId = input.readInt();
        }
    }
    class FightTriggeredEffect extends AbstractFightDispellableEffect {
        constructor(_super) {
            super()
            this.param1 = 0;
            this.param2 = 0;
            this.param3 = 0;
            this.delay = 0;
            this.ID = 1020;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.param1 = 0;
            this.param2 = 0;
            this.param3 = 0;
            this.delay = 0;
        }

        serialize(output) {
            this.serializeAs_FightTriggeredEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTriggeredEffect(input);
        }

        serializeAs_FightTriggeredEffect(ouput) {
            this.serializeAs_AbstractFightDispellableEffect(this, output);
            output.writeInt(this.param1);
            output.writeInt(this.param2);
            output.writeInt(this.param3);
            output.writeShort(this.delay);
        }

        deserializeAs_FightTriggeredEffect(input) {
            super.deserialize(input);
            this.param1 = input.readInt();
            this.param2 = input.readInt();
            this.param3 = input.readInt();
            this.delay = input.readShort();
        }
    }
    class GameActionMark {
        constructor() {

            this.markAuthorId = 0;
            this.markTeamId = 2;
            this.markSpellId = 0;
            this.markSpellLevel = 0;
            this.markId = 0;
            this.markType = 0;
            this.markimpactCell = 0;
            this.cells = [];
            this.active = false;
            this.ID = 8954;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.markAuthorId = 0;
            this.markTeamId = 2;
            this.markSpellId = 0;
            this.markSpellLevel = 0;
            this.markId = 0;
            this.markType = 0;
            this.markimpactCell = 0;
            this.cells = [];
            this.active = false;
        }

        serialize(output) {
            this.serializeAs_GameActionMark(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionMark(input);
        }

        serializeAs_GameActionMark(ouput) {
            if (this.markAuthorId < -9007199254740992 || this.markAuthorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.markAuthorId + ") on element markAuthorId.");
            }
            output.writeDouble(this.markAuthorId);
            output.writeByte(this.markTeamId);
            if (this.markSpellId < 0) {
                throw new Error("Forbidden value (" + this.markSpellId + ") on element markSpellId.");
            }
            output.writeInt(this.markSpellId);
            if (this.markSpellLevel < 1 || this.markSpellLevel > 32767) {
                throw new Error("Forbidden value (" + this.markSpellLevel + ") on element markSpellLevel.");
            }
            output.writeShort(this.markSpellLevel);
            output.writeShort(this.markId);
            output.writeByte(this.markType);
            if (this.markimpactCell < -1 || this.markimpactCell > 559) {
                throw new Error("Forbidden value (" + this.markimpactCell + ") on element markimpactCell.");
            }
            output.writeShort(this.markimpactCell);
            output.writeShort(this.cells.length);
            for (var _i8 = 0; _i8 < this.cells.length; _i8++) {
                (this.cells[_i8]).serializeAs_GameActionMarkedCell(output);
            }
            output.writeBoolean(this.active);
        }

        deserializeAs_GameActionMark(input) {
            var _item8 = null;
            this.markAuthorId = input.readDouble();
            if (this.markAuthorId < -9007199254740992 || this.markAuthorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.markAuthorId + ") on element of GameActionMark.markAuthorId.");
            }
            this.markTeamId = input.readByte();
            if (this.markTeamId < 0) {
                throw new Error("Forbidden value (" + this.markTeamId + ") on element of GameActionMark.markTeamId.");
            }
            this.markSpellId = input.readInt();
            if (this.markSpellId < 0) {
                throw new Error("Forbidden value (" + this.markSpellId + ") on element of GameActionMark.markSpellId.");
            }
            this.markSpellLevel = input.readShort();
            if (this.markSpellLevel < 1 || this.markSpellLevel > 32767) {
                throw new Error("Forbidden value (" + this.markSpellLevel + ") on element of GameActionMark.markSpellLevel.");
            }
            this.markId = input.readShort();
            this.markType = input.readByte();
            this.markimpactCell = input.readShort();
            if (this.markimpactCell < -1 || this.markimpactCell > 559) {
                throw new Error("Forbidden value (" + this.markimpactCell + ") on element of GameActionMark.markimpactCell.");
            }
            var _cellsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _cellsLen; _i8++) {
                _item8 = new GameActionMarkedCell();
                _item8.deserialize(input);
                this.cells.push(_item8);
            }
            this.active = input.readBoolean();
        }
    }
    class GameActionMarkedCell {
        constructor() {

            this.cellId = 0;
            this.zoneSize = 0;
            this.cellColor = 0;
            this.cellsType = 0;
            this.ID = 3766;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
            this.zoneSize = 0;
            this.cellColor = 0;
            this.cellsType = 0;
        }

        serialize(output) {
            this.serializeAs_GameActionMarkedCell(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionMarkedCell(input);
        }

        serializeAs_GameActionMarkedCell(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            output.writeByte(this.zoneSize);
            output.writeInt(this.cellColor);
            output.writeByte(this.cellsType);
        }

        deserializeAs_GameActionMarkedCell(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionMarkedCell.cellId.");
            }
            this.zoneSize = input.readByte();
            this.cellColor = input.readInt();
            this.cellsType = input.readByte();
        }
    }
    class AbstractCharacterInformation {
        constructor() {

            this.id = 0;
            this.ID = 846;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        serialize(output) {
            this.serializeAs_AbstractCharacterInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractCharacterInformation(input);
        }

        serializeAs_AbstractCharacterInformation(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        }

        deserializeAs_AbstractCharacterInformation(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of AbstractCharacterInformation.id.");
            }
        }
    }
    class CharacterBasicMinimalInformations extends AbstractCharacterInformation {
        constructor(_super) {
            super()
            this.name = "";
            this.ID = 9516;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
        }

        serialize(output) {
            this.serializeAs_CharacterBasicMinimalInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterBasicMinimalInformations(input);
        }

        serializeAs_CharacterBasicMinimalInformations(ouput) {
            this.serializeAs_AbstractCharacterInformation(this, output);
            output.writeUTF(this.name);
        }

        deserializeAs_CharacterBasicMinimalInformations(input) {
            super.deserialize(input);
            this.name = input.readUTF();
        }
    }
    class CharacterMinimalInformations extends CharacterBasicMinimalInformations {
        constructor(_super) {
            super()
            this.level = 0;
            this.ID = 6989;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterMinimalInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterMinimalInformations(input);
        }

        serializeAs_CharacterMinimalInformations(ouput) {
            this.serializeAs_CharacterBasicMinimalInformations(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        }

        deserializeAs_CharacterMinimalInformations(input) {
            super.deserialize(input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of CharacterMinimalInformations.level.");
            }
        }
    }
    class SocialMember extends CharacterMinimalInformations {
        constructor(_super) {
            super()
            this.breed = 0;
            this.sex = false;
            this.connected = 99;
            this.hoursSinceLastConnection = 0;
            this.accountId = 0;
            this.status = new PlayerStatus();
            this.rankId = 0;
            this.enrollmentDate = 0;
            this.ID = 7641;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.breed = 0;
            this.sex = false;
            this.connected = 99;
            this.hoursSinceLastConnection = 0;
            this.accountId = 0;
            this.status = new PlayerStatus();
            this.rankId = 0;
            this.enrollmentDate = 0;
        }

        serialize(output) {
            this.serializeAs_SocialMember(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialMember(input);
        }

        serializeAs_SocialMember(ouput) {
            this.serializeAs_CharacterMinimalInformations(this, output);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            output.writeByte(this.connected);
            if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
                throw new Error("Forbidden value (" + this.hoursSinceLastConnection + ") on element hoursSinceLastConnection.");
            }
            output.writeShort(this.hoursSinceLastConnection);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
            output.writeInt(this.rankId);
            if (this.enrollmentDate < -9007199254740992 || this.enrollmentDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.enrollmentDate + ") on element enrollmentDate.");
            }
            output.writeDouble(this.enrollmentDate);
        }

        deserializeAs_SocialMember(input) {
            super.deserialize(input);
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            this.connected = input.readByte();
            if (this.connected < 0) {
                throw new Error("Forbidden value (" + this.connected + ") on element of SocialMember.connected.");
            }
            this.hoursSinceLastConnection = input.readUnsignedShort();
            if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
                throw new Error("Forbidden value (" + this.hoursSinceLastConnection + ") on element of SocialMember.hoursSinceLastConnection.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of SocialMember.accountId.");
            }
            var _id6 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id6);
            this.status.deserialize(input);
            this.rankId = input.readInt();
            this.enrollmentDate = input.readDouble();
            if (this.enrollmentDate < -9007199254740992 || this.enrollmentDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.enrollmentDate + ") on element of SocialMember.enrollmentDate.");
            }
        }
    }
    class AllianceMemberInfo extends SocialMember {
        constructor(_super) {
            super()
            this.avaRoleId = 0;
            this.ID = 3155;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.avaRoleId = 0;
        }

        serialize(output) {
            this.serializeAs_AllianceMemberInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMemberInfo(input);
        }

        serializeAs_AllianceMemberInfo(ouput) {
            this.serializeAs_SocialMember(this, output);
            output.writeInt(this.avaRoleId);
        }

        deserializeAs_AllianceMemberInfo(input) {
            super.deserialize(input);
            this.avaRoleId = input.readInt();
        }
    }
    class KohAllianceInfo {
        constructor() {

            this.alliance = new AllianceInformation();
            this.memberCount = 0;
            this.kohAllianceRoleMembers = [];
            this.scores = [];
            this.matchDominationScores = 0;
            this.ID = 4416;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alliance = new AllianceInformation();
            this.memberCount = 0;
            this.kohAllianceRoleMembers = [];
            this.scores = [];
            this.matchDominationScores = 0;
        }

        serialize(output) {
            this.serializeAs_KohAllianceInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_KohAllianceInfo(input);
        }

        serializeAs_KohAllianceInfo(ouput) {
            this.alliance.serializeAs_AllianceInformation(output);
            if (this.memberCount < 0 || this.memberCount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberCount + ") on element memberCount.");
            }
            output.writeVarLong(this.memberCount);
            output.writeShort(this.kohAllianceRoleMembers.length);
            for (var _i3 = 0; _i3 < this.kohAllianceRoleMembers.length; _i3++) {
                (this.kohAllianceRoleMembers[_i3]).serializeAs_KohAllianceRoleMembers(output);
            }
            output.writeShort(this.scores.length);
            for (var _i4 = 0; _i4 < this.scores.length; _i4++) {
                (this.scores[_i4]).serializeAs_KohScore(output);
            }
            if (this.matchDominationScores < 0) {
                throw new Error("Forbidden value (" + this.matchDominationScores + ") on element matchDominationScores.");
            }
            output.writeVarInt(this.matchDominationScores);
        }

        deserializeAs_KohAllianceInfo(input) {
            var _item3 = null;
            var _item4 = null;
            this.alliance = new AllianceInformation();
            this.alliance.deserialize(input);
            this.memberCount = input.readVarUhLong();
            if (this.memberCount < 0 || this.memberCount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberCount + ") on element of KohAllianceInfo.memberCount.");
            }
            var _kohAllianceRoleMembersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _kohAllianceRoleMembersLen; _i3++) {
                _item3 = new KohAllianceRoleMembers();
                _item3.deserialize(input);
                this.kohAllianceRoleMembers.push(_item3);
            }
            var _scoresLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _scoresLen; _i4++) {
                _item4 = new KohScore();
                _item4.deserialize(input);
                this.scores.push(_item4);
            }
            this.matchDominationScores = input.readVarUhInt();
            if (this.matchDominationScores < 0) {
                throw new Error("Forbidden value (" + this.matchDominationScores + ") on element of KohAllianceInfo.matchDominationScores.");
            }
        }
    }
    class KohAllianceRoleMembers {
        constructor() {

            this.memberCount = 0;
            this.roleAvAId = 0;
            this.ID = 4698;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberCount = 0;
            this.roleAvAId = 0;
        }

        serialize(output) {
            this.serializeAs_KohAllianceRoleMembers(output);
        }

        deserialize(input) {
            this.deserializeAs_KohAllianceRoleMembers(input);
        }

        serializeAs_KohAllianceRoleMembers(ouput) {
            if (this.memberCount < 0 || this.memberCount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberCount + ") on element memberCount.");
            }
            output.writeVarLong(this.memberCount);
            output.writeInt(this.roleAvAId);
        }

        deserializeAs_KohAllianceRoleMembers(input) {
            this.memberCount = input.readVarUhLong();
            if (this.memberCount < 0 || this.memberCount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberCount + ") on element of KohAllianceRoleMembers.memberCount.");
            }
            this.roleAvAId = input.readInt();
        }
    }
    class KohScore {
        constructor() {

            this.avaScoreTypeEnum = 1;
            this.roundScores = 0;
            this.cumulScores = 0;
            this.ID = 5867;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.avaScoreTypeEnum = 1;
            this.roundScores = 0;
            this.cumulScores = 0;
        }

        serialize(output) {
            this.serializeAs_KohScore(output);
        }

        deserialize(input) {
            this.deserializeAs_KohScore(input);
        }

        serializeAs_KohScore(ouput) {
            output.writeByte(this.avaScoreTypeEnum);
            output.writeInt(this.roundScores);
            output.writeInt(this.cumulScores);
        }

        deserializeAs_KohScore(input) {
            this.avaScoreTypeEnum = input.readByte();
            if (this.avaScoreTypeEnum < 0) {
                throw new Error("Forbidden value (" + this.avaScoreTypeEnum + ") on element of KohScore.avaScoreTypeEnum.");
            }
            this.roundScores = input.readInt();
            this.cumulScores = input.readInt();
        }
    }
    class KothWinner {
        constructor() {


            this.ID = 629;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_KothWinner(output);
        }

        deserialize(input) {
            this.deserializeAs_KothWinner(input);
        }

        serializeAs_KothWinner(ouput) {

        }

        deserializeAs_KothWinner(input) {

        }
    }
    class SocialRecruitmentInformation {
        constructor() {

            this.socialId = 0;
            this.recruitmentType = 0;
            this.recruitmentTitle = "";
            this.recruitmentText = "";
            this.selectedLanguages = [];
            this.selectedCriterion = [];
            this.minLevel = 0;
            this.minLevelFacultative = false;
            this.invalidatedByModeration = false;
            this.lastEditPlayerName = "";
            this.lastEditDate = 0;
            this.recruitmentAutoLocked = false;
            this.ID = 6503;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.socialId = 0;
            this.recruitmentType = 0;
            this.recruitmentTitle = "";
            this.recruitmentText = "";
            this.selectedLanguages = [];
            this.selectedCriterion = [];
            this.minLevel = 0;
            this.minLevelFacultative = false;
            this.invalidatedByModeration = false;
            this.lastEditPlayerName = "";
            this.lastEditDate = 0;
            this.recruitmentAutoLocked = false;
        }

        serialize(output) {
            this.serializeAs_SocialRecruitmentInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialRecruitmentInformation(input);
        }

        serializeAs_SocialRecruitmentInformation(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.minLevelFacultative);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.invalidatedByModeration);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.recruitmentAutoLocked);
            output.writeByte(_box0);
            if (this.socialId < 0) {
                throw new Error("Forbidden value (" + this.socialId + ") on element socialId.");
            }
            output.writeVarInt(this.socialId);
            output.writeByte(this.recruitmentType);
            output.writeUTF(this.recruitmentTitle);
            output.writeUTF(this.recruitmentText);
            output.writeShort(this.selectedLanguages.length);
            for (var _i5 = 0; _i5 < this.selectedLanguages.length; _i5++) {
                if (this.selectedLanguages[_i5] < 0) {
                    throw new Error("Forbidden value (" + this.selectedLanguages[_i5] + ") on element 5 (starting at 1) of selectedLanguages.");
                }
                output.writeVarInt(this.selectedLanguages[_i5]);
            }
            output.writeShort(this.selectedCriterion.length);
            for (var _i6 = 0; _i6 < this.selectedCriterion.length; _i6++) {
                if (this.selectedCriterion[_i6] < 0) {
                    throw new Error("Forbidden value (" + this.selectedCriterion[_i6] + ") on element 6 (starting at 1) of selectedCriterion.");
                }
                output.writeVarInt(this.selectedCriterion[_i6]);
            }
            if (this.minLevel < 0) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
            }
            output.writeShort(this.minLevel);
            output.writeUTF(this.lastEditPlayerName);
            if (this.lastEditDate < -9007199254740992 || this.lastEditDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.lastEditDate + ") on element lastEditDate.");
            }
            output.writeDouble(this.lastEditDate);
        }

        deserializeAs_SocialRecruitmentInformation(input) {
            var _val5 = 0;
            var _val6 = 0;
            var _box0 = input.readByte();
            this.minLevelFacultative = BooleanByteWrapper.getFlag(_box0, 0);
            this.invalidatedByModeration = BooleanByteWrapper.getFlag(_box0, 1);
            this.recruitmentAutoLocked = BooleanByteWrapper.getFlag(_box0, 2);
            this.socialId = input.readVarUhInt();
            if (this.socialId < 0) {
                throw new Error("Forbidden value (" + this.socialId + ") on element of SocialRecruitmentInformation.socialId.");
            }
            this.recruitmentType = input.readByte();
            if (this.recruitmentType < 0) {
                throw new Error("Forbidden value (" + this.recruitmentType + ") on element of SocialRecruitmentInformation.recruitmentType.");
            }
            this.recruitmentTitle = input.readUTF();
            this.recruitmentText = input.readUTF();
            var _selectedLanguagesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _selectedLanguagesLen; _i5++) {
                _val5 = input.readVarUhInt();
                if (_val5 < 0) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of selectedLanguages.");
                }
                this.selectedLanguages.push(_val5);
            }
            var _selectedCriterionLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _selectedCriterionLen; _i6++) {
                _val6 = input.readVarUhInt();
                if (_val6 < 0) {
                    throw new Error("Forbidden value (" + _val6 + ") on elements of selectedCriterion.");
                }
                this.selectedCriterion.push(_val6);
            }
            this.minLevel = input.readShort();
            if (this.minLevel < 0) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element of SocialRecruitmentInformation.minLevel.");
            }
            this.lastEditPlayerName = input.readUTF();
            this.lastEditDate = input.readDouble();
            if (this.lastEditDate < -9007199254740992 || this.lastEditDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.lastEditDate + ") on element of SocialRecruitmentInformation.lastEditDate.");
            }
        }
    }
    class AllianceRecruitmentInformation extends SocialRecruitmentInformation {
        constructor(_super) {
            super()

            this.ID = 1631;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_AllianceRecruitmentInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRecruitmentInformation(input);
        }

        serializeAs_AllianceRecruitmentInformation(ouput) {
            this.serializeAs_SocialRecruitmentInformation(this, output);
        }

        deserializeAs_AllianceRecruitmentInformation(input) {
            super.deserialize(input);
        }
    }
    class ServerSessionConstant {
        constructor() {

            this.id = 0;
            this.ID = 6427;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        serialize(output) {
            this.serializeAs_ServerSessionConstant(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSessionConstant(input);
        }

        serializeAs_ServerSessionConstant(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
        }

        deserializeAs_ServerSessionConstant(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of ServerSessionConstant.id.");
            }
        }
    }
    class ServerSessionConstantInteger extends ServerSessionConstant {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 4796;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_ServerSessionConstantInteger(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSessionConstantInteger(input);
        }

        serializeAs_ServerSessionConstantInteger(ouput) {
            this.serializeAs_ServerSessionConstant(this, output);
            output.writeInt(this.value);
        }

        deserializeAs_ServerSessionConstantInteger(input) {
            super.deserialize(input);
            this.value = input.readInt();
        }
    }
    class ServerSessionConstantLong extends ServerSessionConstant {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 5351;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_ServerSessionConstantLong(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSessionConstantLong(input);
        }

        serializeAs_ServerSessionConstantLong(ouput) {
            this.serializeAs_ServerSessionConstant(this, output);
            if (this.value < -9007199254740992 || this.value > 9007199254740992) {
                throw new Error("Forbidden value (" + this.value + ") on element value.");
            }
            output.writeDouble(this.value);
        }

        deserializeAs_ServerSessionConstantLong(input) {
            super.deserialize(input);
            this.value = input.readDouble();
            if (this.value < -9007199254740992 || this.value > 9007199254740992) {
                throw new Error("Forbidden value (" + this.value + ") on element of ServerSessionConstantLong.value.");
            }
        }
    }
    class ServerSessionConstantString extends ServerSessionConstant {
        constructor(_super) {
            super()
            this.value = "";
            this.ID = 1669;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = "";
        }

        serialize(output) {
            this.serializeAs_ServerSessionConstantString(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSessionConstantString(input);
        }

        serializeAs_ServerSessionConstantString(ouput) {
            this.serializeAs_ServerSessionConstant(this, output);
            output.writeUTF(this.value);
        }

        deserializeAs_ServerSessionConstantString(input) {
            super.deserialize(input);
            this.value = input.readUTF();
        }
    }
    class ActorAlignmentInformations {
        constructor() {

            this.alignmentSide = 0;
            this.alignmentValue = 0;
            this.alignmentGrade = 0;
            this.characterPower = 0;
            this.ID = 9391;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alignmentSide = 0;
            this.alignmentValue = 0;
            this.alignmentGrade = 0;
            this.characterPower = 0;
        }

        serialize(output) {
            this.serializeAs_ActorAlignmentInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_ActorAlignmentInformations(input);
        }

        serializeAs_ActorAlignmentInformations(ouput) {
            output.writeByte(this.alignmentSide);
            if (this.alignmentValue < 0) {
                throw new Error("Forbidden value (" + this.alignmentValue + ") on element alignmentValue.");
            }
            output.writeByte(this.alignmentValue);
            if (this.alignmentGrade < 0) {
                throw new Error("Forbidden value (" + this.alignmentGrade + ") on element alignmentGrade.");
            }
            output.writeByte(this.alignmentGrade);
            if (this.characterPower < -9007199254740992 || this.characterPower > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterPower + ") on element characterPower.");
            }
            output.writeDouble(this.characterPower);
        }

        deserializeAs_ActorAlignmentInformations(input) {
            this.alignmentSide = input.readByte();
            this.alignmentValue = input.readByte();
            if (this.alignmentValue < 0) {
                throw new Error("Forbidden value (" + this.alignmentValue + ") on element of ActorAlignmentInformations.alignmentValue.");
            }
            this.alignmentGrade = input.readByte();
            if (this.alignmentGrade < 0) {
                throw new Error("Forbidden value (" + this.alignmentGrade + ") on element of ActorAlignmentInformations.alignmentGrade.");
            }
            this.characterPower = input.readDouble();
            if (this.characterPower < -9007199254740992 || this.characterPower > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterPower + ") on element of ActorAlignmentInformations.characterPower.");
            }
        }
    }
    class ActorExtendedAlignmentInformations extends ActorAlignmentInformations {
        constructor(_super) {
            super()
            this.honor = 0;
            this.honorGradeFloor = 0;
            this.honorNextGradeFloor = 0;
            this.aggressable = 0;
            this.ID = 4199;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.honor = 0;
            this.honorGradeFloor = 0;
            this.honorNextGradeFloor = 0;
            this.aggressable = 0;
        }

        serialize(output) {
            this.serializeAs_ActorExtendedAlignmentInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_ActorExtendedAlignmentInformations(input);
        }

        serializeAs_ActorExtendedAlignmentInformations(ouput) {
            this.serializeAs_ActorAlignmentInformations(this, output);
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element honor.");
            }
            output.writeVarShort(this.honor);
            if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorGradeFloor + ") on element honorGradeFloor.");
            }
            output.writeVarShort(this.honorGradeFloor);
            if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorNextGradeFloor + ") on element honorNextGradeFloor.");
            }
            output.writeVarShort(this.honorNextGradeFloor);
            output.writeByte(this.aggressable);
        }

        deserializeAs_ActorExtendedAlignmentInformations(input) {
            super.deserialize(input);
            this.honor = input.readVarUhShort();
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element of ActorExtendedAlignmentInformations.honor.");
            }
            this.honorGradeFloor = input.readVarUhShort();
            if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorGradeFloor.");
            }
            this.honorNextGradeFloor = input.readVarUhShort();
            if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
                throw new Error("Forbidden value (" + this.honorNextGradeFloor + ") on element of ActorExtendedAlignmentInformations.honorNextGradeFloor.");
            }
            this.aggressable = input.readByte();
            if (this.aggressable < 0) {
                throw new Error("Forbidden value (" + this.aggressable + ") on element of ActorExtendedAlignmentInformations.aggressable.");
            }
        }
    }
    class AlterationInfo {
        constructor() {

            this.alterationId = 0;
            this.creationTime = 0;
            this.expirationType = 1;
            this.expirationValue = 0;
            this.effects = [];
            this.ID = 980;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alterationId = 0;
            this.creationTime = 0;
            this.expirationType = 1;
            this.expirationValue = 0;
            this.effects = [];
        }

        serialize(output) {
            this.serializeAs_AlterationInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_AlterationInfo(input);
        }

        serializeAs_AlterationInfo(ouput) {
            if (this.alterationId < 0 || this.alterationId > 4294967295) {
                throw new Error("Forbidden value (" + this.alterationId + ") on element alterationId.");
            }
            output.writeUnsignedInt(this.alterationId);
            if (this.creationTime < -9007199254740992 || this.creationTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.creationTime + ") on element creationTime.");
            }
            output.writeDouble(this.creationTime);
            output.writeByte(this.expirationType);
            if (this.expirationValue < -9007199254740992 || this.expirationValue > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expirationValue + ") on element expirationValue.");
            }
            output.writeDouble(this.expirationValue);
            output.writeShort(this.effects.length);
            for (var _i5 = 0; _i5 < this.effects.length; _i5++) {
                output.writeShort((this.effects[_i5]).getTypeId());
                (this.effects[_i5]).serialize(output);
            }
        }

        deserializeAs_AlterationInfo(input) {
            var _id5 = 0;
            var _item5 = null;
            this.alterationId = input.readUnsignedInt();
            if (this.alterationId < 0 || this.alterationId > 4294967295) {
                throw new Error("Forbidden value (" + this.alterationId + ") on element of AlterationInfo.alterationId.");
            }
            this.creationTime = input.readDouble();
            if (this.creationTime < -9007199254740992 || this.creationTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.creationTime + ") on element of AlterationInfo.creationTime.");
            }
            this.expirationType = input.readByte();
            if (this.expirationType < 0) {
                throw new Error("Forbidden value (" + this.expirationType + ") on element of AlterationInfo.expirationType.");
            }
            this.expirationValue = input.readDouble();
            if (this.expirationValue < -9007199254740992 || this.expirationValue > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expirationValue + ") on element of AlterationInfo.expirationValue.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _effectsLen; _i5++) {
                _id5 = input.readUnsignedShort();
                _item5 = ProtocolTypeManager.getInstance(ObjectEffect, _id5);
                _item5.deserialize(input);
                this.effects.push(_item5);
            }
        }
    }
    class CharacterCharacteristic {
        constructor() {

            this.characteristicId = 0;
            this.ID = 763;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characteristicId = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterCharacteristic(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCharacteristic(input);
        }

        serializeAs_CharacterCharacteristic(ouput) {
            output.writeShort(this.characteristicId);
        }

        deserializeAs_CharacterCharacteristic(input) {
            this.characteristicId = input.readShort();
        }
    }
    class CharacterCharacteristicDetailed extends CharacterCharacteristic {
        constructor(_super) {
            super()
            this.base = 0;
            this.additional = 0;
            this.objectsAndMountBonus = 0;
            this.alignGiftBonus = 0;
            this.contextModif = 0;
            this.ID = 4380;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.base = 0;
            this.additional = 0;
            this.objectsAndMountBonus = 0;
            this.alignGiftBonus = 0;
            this.contextModif = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterCharacteristicDetailed(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCharacteristicDetailed(input);
        }

        serializeAs_CharacterCharacteristicDetailed(ouput) {
            this.serializeAs_CharacterCharacteristic(this, output);
            output.writeVarInt(this.base);
            output.writeVarInt(this.additional);
            output.writeVarInt(this.objectsAndMountBonus);
            output.writeVarInt(this.alignGiftBonus);
            output.writeVarInt(this.contextModif);
        }

        deserializeAs_CharacterCharacteristicDetailed(input) {
            super.deserialize(input);
            this.base = input.readVarInt();
            this.additional = input.readVarInt();
            this.objectsAndMountBonus = input.readVarInt();
            this.alignGiftBonus = input.readVarInt();
            this.contextModif = input.readVarInt();
        }
    }
    class CharacterCharacteristics {
        constructor() {

            this.characteristics = [];
            this.ID = 3075;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characteristics = [];
        }

        serialize(output) {
            this.serializeAs_CharacterCharacteristics(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCharacteristics(input);
        }

        serializeAs_CharacterCharacteristics(ouput) {
            output.writeShort(this.characteristics.length);
            for (var _i1 = 0; _i1 < this.characteristics.length; _i1++) {
                output.writeShort((this.characteristics[_i1]).getTypeId());
                (this.characteristics[_i1]).serialize(output);
            }
        }

        deserializeAs_CharacterCharacteristics(input) {
            var _id1 = 0;
            var _item1 = null;
            var _characteristicsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _characteristicsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(CharacterCharacteristic, _id1);
                _item1.deserialize(input);
                this.characteristics.push(_item1);
            }
        }
    }
    class CharacterCharacteristicsInformations {
        constructor() {

            this.experience = 0;
            this.experienceLevelFloor = 0;
            this.experienceNextLevelFloor = 0;
            this.experienceBonusLimit = 0;
            this.kamas = 0;
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.criticalHitWeapon = 0;
            this.characteristics = [];
            this.spellModifiers = [];
            this.probationTime = 0;
            this.ID = 6352;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.experience = 0;
            this.experienceLevelFloor = 0;
            this.experienceNextLevelFloor = 0;
            this.experienceBonusLimit = 0;
            this.kamas = 0;
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.criticalHitWeapon = 0;
            this.characteristics = [];
            this.spellModifiers = [];
            this.probationTime = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterCharacteristicsInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCharacteristicsInformations(input);
        }

        serializeAs_CharacterCharacteristicsInformations(ouput) {
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
            }
            output.writeVarLong(this.experienceLevelFloor);
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
            }
            output.writeVarLong(this.experienceNextLevelFloor);
            if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceBonusLimit + ") on element experienceBonusLimit.");
            }
            output.writeVarLong(this.experienceBonusLimit);
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            this.alignmentInfos.serializeAs_ActorExtendedAlignmentInformations(output);
            if (this.criticalHitWeapon < 0) {
                throw new Error("Forbidden value (" + this.criticalHitWeapon + ") on element criticalHitWeapon.");
            }
            output.writeVarShort(this.criticalHitWeapon);
            output.writeShort(this.characteristics.length);
            for (var _i8 = 0; _i8 < this.characteristics.length; _i8++) {
                output.writeShort((this.characteristics[_i8]).getTypeId());
                (this.characteristics[_i8]).serialize(output);
            }
            output.writeShort(this.spellModifiers.length);
            for (var _i9 = 0; _i9 < this.spellModifiers.length; _i9++) {
                (this.spellModifiers[_i9]).serializeAs_SpellModifierMessage(output);
            }
            if (this.probationTime < 0 || this.probationTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element probationTime.");
            }
            output.writeDouble(this.probationTime);
        }

        deserializeAs_CharacterCharacteristicsInformations(input) {
            var _id8 = 0;
            var _item8 = null;
            var _item9 = null;
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element of CharacterCharacteristicsInformations.experience.");
            }
            this.experienceLevelFloor = input.readVarUhLong();
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceLevelFloor.");
            }
            this.experienceNextLevelFloor = input.readVarUhLong();
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of CharacterCharacteristicsInformations.experienceNextLevelFloor.");
            }
            this.experienceBonusLimit = input.readVarUhLong();
            if (this.experienceBonusLimit < 0 || this.experienceBonusLimit > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceBonusLimit + ") on element of CharacterCharacteristicsInformations.experienceBonusLimit.");
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of CharacterCharacteristicsInformations.kamas.");
            }
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.alignmentInfos.deserialize(input);
            this.criticalHitWeapon = input.readVarUhShort();
            if (this.criticalHitWeapon < 0) {
                throw new Error("Forbidden value (" + this.criticalHitWeapon + ") on element of CharacterCharacteristicsInformations.criticalHitWeapon.");
            }
            var _characteristicsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _characteristicsLen; _i8++) {
                _id8 = input.readUnsignedShort();
                _item8 = ProtocolTypeManager.getInstance(CharacterCharacteristic, _id8);
                _item8.deserialize(input);
                this.characteristics.push(_item8);
            }
            var _spellModifiersLen = input.readUnsignedShort();
            for (var _i9 = 0; _i9 < _spellModifiersLen; _i9++) {
                _item9 = new SpellModifierMessage();
                _item9.deserialize(input);
                this.spellModifiers.push(_item9);
            }
            this.probationTime = input.readDouble();
            if (this.probationTime < 0 || this.probationTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element of CharacterCharacteristicsInformations.probationTime.");
            }
        }
    }
    class CharacterCharacteristicValue extends CharacterCharacteristic {
        constructor(_super) {
            super()
            this.total = 0;
            this.ID = 5953;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.total = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterCharacteristicValue(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCharacteristicValue(input);
        }

        serializeAs_CharacterCharacteristicValue(ouput) {
            this.serializeAs_CharacterCharacteristic(this, output);
            output.writeInt(this.total);
        }

        deserializeAs_CharacterCharacteristicValue(input) {
            super.deserialize(input);
            this.total = input.readInt();
        }
    }
    class CharacterUsableCharacteristicDetailed extends CharacterCharacteristicDetailed {
        constructor(_super) {
            super()
            this.used = 0;
            this.ID = 1123;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.used = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterUsableCharacteristicDetailed(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterUsableCharacteristicDetailed(input);
        }

        serializeAs_CharacterUsableCharacteristicDetailed(ouput) {
            this.serializeAs_CharacterCharacteristicDetailed(this, output);
            if (this.used < 0) {
                throw new Error("Forbidden value (" + this.used + ") on element used.");
            }
            output.writeVarInt(this.used);
        }

        deserializeAs_CharacterUsableCharacteristicDetailed(input) {
            super.deserialize(input);
            this.used = input.readVarUhInt();
            if (this.used < 0) {
                throw new Error("Forbidden value (" + this.used + ") on element of CharacterUsableCharacteristicDetailed.used.");
            }
        }
    }
    class CharacterMinimalPlusLookInformations extends CharacterMinimalInformations {
        constructor(_super) {
            super()
            this.entityLook = new EntityLook();
            this.breed = 0;
            this.ID = 1373;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityLook = new EntityLook();
            this.breed = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterMinimalPlusLookInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterMinimalPlusLookInformations(input);
        }

        serializeAs_CharacterMinimalPlusLookInformations(ouput) {
            this.serializeAs_CharacterMinimalInformations(this, output);
            this.entityLook.serializeAs_EntityLook(output);
            output.writeByte(this.breed);
        }

        deserializeAs_CharacterMinimalPlusLookInformations(input) {
            super.deserialize(input);
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(input);
            this.breed = input.readByte();
        }
    }
    class CharacterMinimalAllianceInformations extends CharacterMinimalPlusLookInformations {
        constructor(_super) {
            super()
            this.alliance = new BasicNamedAllianceInformations();
            this.ID = 4721;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alliance = new BasicNamedAllianceInformations();
        }

        serialize(output) {
            this.serializeAs_CharacterMinimalAllianceInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterMinimalAllianceInformations(input);
        }

        serializeAs_CharacterMinimalAllianceInformations(ouput) {
            this.serializeAs_CharacterMinimalPlusLookInformations(this, output);
            this.alliance.serializeAs_BasicNamedAllianceInformations(output);
        }

        deserializeAs_CharacterMinimalAllianceInformations(input) {
            super.deserialize(input);
            this.alliance = new BasicNamedAllianceInformations();
            this.alliance.deserialize(input);
        }
    }
    class CharacterMinimalGuildInformations extends CharacterMinimalPlusLookInformations {
        constructor(_super) {
            super()
            this.guild = new BasicGuildInformations();
            this.ID = 2569;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guild = new BasicGuildInformations();
        }

        serialize(output) {
            this.serializeAs_CharacterMinimalGuildInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterMinimalGuildInformations(input);
        }

        serializeAs_CharacterMinimalGuildInformations(ouput) {
            this.serializeAs_CharacterMinimalPlusLookInformations(this, output);
            this.guild.serializeAs_BasicGuildInformations(output);
        }

        deserializeAs_CharacterMinimalGuildInformations(input) {
            super.deserialize(input);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(input);
        }
    }
    class CharacterMinimalSocialPublicInformations extends CharacterMinimalInformations {
        constructor(_super) {
            super()
            this.rank = new RankPublicInformation();
            this.ID = 4700;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rank = new RankPublicInformation();
        }

        serialize(output) {
            this.serializeAs_CharacterMinimalSocialPublicInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterMinimalSocialPublicInformations(input);
        }

        serializeAs_CharacterMinimalSocialPublicInformations(ouput) {
            this.serializeAs_CharacterMinimalInformations(this, output);
            this.rank.serializeAs_RankPublicInformation(output);
        }

        deserializeAs_CharacterMinimalSocialPublicInformations(input) {
            super.deserialize(input);
            this.rank = new RankPublicInformation();
            this.rank.deserialize(input);
        }
    }
    class CharacterBaseInformations extends CharacterMinimalPlusLookInformations {
        constructor(_super) {
            super()
            this.sex = false;
            this.ID = 9071;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sex = false;
        }

        serialize(output) {
            this.serializeAs_CharacterBaseInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterBaseInformations(input);
        }

        serializeAs_CharacterBaseInformations(ouput) {
            this.serializeAs_CharacterMinimalPlusLookInformations(this, output);
            output.writeBoolean(this.sex);
        }

        deserializeAs_CharacterBaseInformations(input) {
            super.deserialize(input);
            this.sex = input.readBoolean();
        }
    }
    class CharacterHardcoreOrEpicInformations extends CharacterBaseInformations {
        constructor(_super) {
            super()
            this.deathState = 0;
            this.deathCount = 0;
            this.deathMaxLevel = 0;
            this.ID = 5693;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.deathState = 0;
            this.deathCount = 0;
            this.deathMaxLevel = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterHardcoreOrEpicInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterHardcoreOrEpicInformations(input);
        }

        serializeAs_CharacterHardcoreOrEpicInformations(ouput) {
            this.serializeAs_CharacterBaseInformations(this, output);
            output.writeByte(this.deathState);
            if (this.deathCount < 0) {
                throw new Error("Forbidden value (" + this.deathCount + ") on element deathCount.");
            }
            output.writeVarShort(this.deathCount);
            if (this.deathMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.deathMaxLevel + ") on element deathMaxLevel.");
            }
            output.writeVarShort(this.deathMaxLevel);
        }

        deserializeAs_CharacterHardcoreOrEpicInformations(input) {
            super.deserialize(input);
            this.deathState = input.readByte();
            if (this.deathState < 0) {
                throw new Error("Forbidden value (" + this.deathState + ") on element of CharacterHardcoreOrEpicInformations.deathState.");
            }
            this.deathCount = input.readVarUhShort();
            if (this.deathCount < 0) {
                throw new Error("Forbidden value (" + this.deathCount + ") on element of CharacterHardcoreOrEpicInformations.deathCount.");
            }
            this.deathMaxLevel = input.readVarUhShort();
            if (this.deathMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.deathMaxLevel + ") on element of CharacterHardcoreOrEpicInformations.deathMaxLevel.");
            }
        }
    }
    class CharacterRemodelingInformation extends AbstractCharacterInformation {
        constructor(_super) {
            super()
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
            this.ID = 7974;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        }

        serialize(output) {
            this.serializeAs_CharacterRemodelingInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterRemodelingInformation(input);
        }

        serializeAs_CharacterRemodelingInformation(ouput) {
            this.serializeAs_AbstractCharacterInformation(this, output);
            output.writeUTF(this.name);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
            }
            output.writeVarShort(this.cosmeticId);
            output.writeShort(this.colors.length);
            for (var _i5 = 0; _i5 < this.colors.length; _i5++) {
                output.writeInt(this.colors[_i5]);
            }
        }

        deserializeAs_CharacterRemodelingInformation(input) {
            var _val5 = 0;
            super.deserialize(input);
            this.name = input.readUTF();
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            this.cosmeticId = input.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element of CharacterRemodelingInformation.cosmeticId.");
            }
            var _colorsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _colorsLen; _i5++) {
                _val5 = input.readInt();
                this.colors.push(_val5);
            }
        }
    }
    class CharacterToRemodelInformations extends CharacterRemodelingInformation {
        constructor(_super) {
            super()
            this.possibleChangeMask = 0;
            this.mandatoryChangeMask = 0;
            this.ID = 3191;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.possibleChangeMask = 0;
            this.mandatoryChangeMask = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterToRemodelInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterToRemodelInformations(input);
        }

        serializeAs_CharacterToRemodelInformations(ouput) {
            this.serializeAs_CharacterRemodelingInformation(this, output);
            if (this.possibleChangeMask < 0) {
                throw new Error("Forbidden value (" + this.possibleChangeMask + ") on element possibleChangeMask.");
            }
            output.writeByte(this.possibleChangeMask);
            if (this.mandatoryChangeMask < 0) {
                throw new Error("Forbidden value (" + this.mandatoryChangeMask + ") on element mandatoryChangeMask.");
            }
            output.writeByte(this.mandatoryChangeMask);
        }

        deserializeAs_CharacterToRemodelInformations(input) {
            super.deserialize(input);
            this.possibleChangeMask = input.readByte();
            if (this.possibleChangeMask < 0) {
                throw new Error("Forbidden value (" + this.possibleChangeMask + ") on element of CharacterToRemodelInformations.possibleChangeMask.");
            }
            this.mandatoryChangeMask = input.readByte();
            if (this.mandatoryChangeMask < 0) {
                throw new Error("Forbidden value (" + this.mandatoryChangeMask + ") on element of CharacterToRemodelInformations.mandatoryChangeMask.");
            }
        }
    }
    class RemodelingInformation {
        constructor() {

            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
            this.ID = 1077;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        }

        serialize(output) {
            this.serializeAs_RemodelingInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_RemodelingInformation(input);
        }

        serializeAs_RemodelingInformation(ouput) {
            output.writeUTF(this.name);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
            }
            output.writeVarShort(this.cosmeticId);
            output.writeShort(this.colors.length);
            for (var _i5 = 0; _i5 < this.colors.length; _i5++) {
                output.writeInt(this.colors[_i5]);
            }
        }

        deserializeAs_RemodelingInformation(input) {
            var _val5 = 0;
            this.name = input.readUTF();
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            this.cosmeticId = input.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element of RemodelingInformation.cosmeticId.");
            }
            var _colorsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _colorsLen; _i5++) {
                _val5 = input.readInt();
                this.colors.push(_val5);
            }
        }
    }
    class DebtInformation {
        constructor() {

            this.id = 0;
            this.timestamp = 0;
            this.ID = 6622;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.timestamp = 0;
        }

        serialize(output) {
            this.serializeAs_DebtInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_DebtInformation(input);
        }

        serializeAs_DebtInformation(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.timestamp < 0 || this.timestamp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeDouble(this.timestamp);
        }

        deserializeAs_DebtInformation(input) {
            this.id = input.readDouble();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of DebtInformation.id.");
            }
            this.timestamp = input.readDouble();
            if (this.timestamp < 0 || this.timestamp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of DebtInformation.timestamp.");
            }
        }
    }
    class KamaDebtInformation extends DebtInformation {
        constructor(_super) {
            super()
            this.kamas = 0;
            this.ID = 3945;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kamas = 0;
        }

        serialize(output) {
            this.serializeAs_KamaDebtInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_KamaDebtInformation(input);
        }

        serializeAs_KamaDebtInformation(ouput) {
            this.serializeAs_DebtInformation(this, output);
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        }

        deserializeAs_KamaDebtInformation(input) {
            super.deserialize(input);
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of KamaDebtInformation.kamas.");
            }
        }
    }
    class PlayerNote {
        constructor() {

            this.content = "";
            this.lastEditDate = 0;
            this.ID = 8498;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
            this.lastEditDate = 0;
        }

        serialize(output) {
            this.serializeAs_PlayerNote(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerNote(input);
        }

        serializeAs_PlayerNote(ouput) {
            output.writeUTF(this.content);
            if (this.lastEditDate < -9007199254740992 || this.lastEditDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.lastEditDate + ") on element lastEditDate.");
            }
            output.writeDouble(this.lastEditDate);
        }

        deserializeAs_PlayerNote(input) {
            this.content = input.readUTF();
            this.lastEditDate = input.readDouble();
            if (this.lastEditDate < -9007199254740992 || this.lastEditDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.lastEditDate + ") on element of PlayerNote.lastEditDate.");
            }
        }
    }
    class ActorRestrictionsInformations {
        constructor() {

            this.cantBeAggressed = false;
            this.cantBeChallenged = false;
            this.cantTrade = false;
            this.cantBeAttackedByMutant = false;
            this.cantRun = false;
            this.forceSlowWalk = false;
            this.cantMinimize = false;
            this.cantMove = false;
            this.cantAggress = false;
            this.cantChallenge = false;
            this.cantExchange = false;
            this.cantAttack = false;
            this.cantChat = false;
            this.cantUseObject = false;
            this.cantUseTaxCollector = false;
            this.cantUseInteractive = false;
            this.cantSpeakToNPC = false;
            this.cantChangeZone = false;
            this.cantAttackMonster = false;
            this.ID = 9939;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cantBeAggressed = false;
            this.cantBeChallenged = false;
            this.cantTrade = false;
            this.cantBeAttackedByMutant = false;
            this.cantRun = false;
            this.forceSlowWalk = false;
            this.cantMinimize = false;
            this.cantMove = false;
            this.cantAggress = false;
            this.cantChallenge = false;
            this.cantExchange = false;
            this.cantAttack = false;
            this.cantChat = false;
            this.cantUseObject = false;
            this.cantUseTaxCollector = false;
            this.cantUseInteractive = false;
            this.cantSpeakToNPC = false;
            this.cantChangeZone = false;
            this.cantAttackMonster = false;
        }

        serialize(output) {
            this.serializeAs_ActorRestrictionsInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_ActorRestrictionsInformations(input);
        }

        serializeAs_ActorRestrictionsInformations(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.cantBeAggressed);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.cantBeChallenged);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.cantTrade);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.cantBeAttackedByMutant);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.cantRun);
            _box0 = BooleanByteWrapper.setFlag(_box0, 5, this.forceSlowWalk);
            _box0 = BooleanByteWrapper.setFlag(_box0, 6, this.cantMinimize);
            _box0 = BooleanByteWrapper.setFlag(_box0, 7, this.cantMove);
            output.writeByte(_box0);
            var _box1 = 0;
            _box1 = BooleanByteWrapper.setFlag(_box1, 0, this.cantAggress);
            _box1 = BooleanByteWrapper.setFlag(_box1, 1, this.cantChallenge);
            _box1 = BooleanByteWrapper.setFlag(_box1, 2, this.cantExchange);
            _box1 = BooleanByteWrapper.setFlag(_box1, 3, this.cantAttack);
            _box1 = BooleanByteWrapper.setFlag(_box1, 4, this.cantChat);
            _box1 = BooleanByteWrapper.setFlag(_box1, 5, this.cantUseObject);
            _box1 = BooleanByteWrapper.setFlag(_box1, 6, this.cantUseTaxCollector);
            _box1 = BooleanByteWrapper.setFlag(_box1, 7, this.cantUseInteractive);
            output.writeByte(_box1);
            var _box2 = 0;
            _box2 = BooleanByteWrapper.setFlag(_box2, 0, this.cantSpeakToNPC);
            _box2 = BooleanByteWrapper.setFlag(_box2, 1, this.cantChangeZone);
            _box2 = BooleanByteWrapper.setFlag(_box2, 2, this.cantAttackMonster);
            output.writeByte(_box2);
        }

        deserializeAs_ActorRestrictionsInformations(input) {
            var _box0 = input.readByte();
            this.cantBeAggressed = BooleanByteWrapper.getFlag(_box0, 0);
            this.cantBeChallenged = BooleanByteWrapper.getFlag(_box0, 1);
            this.cantTrade = BooleanByteWrapper.getFlag(_box0, 2);
            this.cantBeAttackedByMutant = BooleanByteWrapper.getFlag(_box0, 3);
            this.cantRun = BooleanByteWrapper.getFlag(_box0, 4);
            this.forceSlowWalk = BooleanByteWrapper.getFlag(_box0, 5);
            this.cantMinimize = BooleanByteWrapper.getFlag(_box0, 6);
            this.cantMove = BooleanByteWrapper.getFlag(_box0, 7);
            var _box1 = input.readByte();
            this.cantAggress = BooleanByteWrapper.getFlag(_box1, 0);
            this.cantChallenge = BooleanByteWrapper.getFlag(_box1, 1);
            this.cantExchange = BooleanByteWrapper.getFlag(_box1, 2);
            this.cantAttack = BooleanByteWrapper.getFlag(_box1, 3);
            this.cantChat = BooleanByteWrapper.getFlag(_box1, 4);
            this.cantUseObject = BooleanByteWrapper.getFlag(_box1, 5);
            this.cantUseTaxCollector = BooleanByteWrapper.getFlag(_box1, 6);
            this.cantUseInteractive = BooleanByteWrapper.getFlag(_box1, 7);
            var _box2 = input.readByte();
            this.cantSpeakToNPC = BooleanByteWrapper.getFlag(_box2, 0);
            this.cantChangeZone = BooleanByteWrapper.getFlag(_box2, 1);
            this.cantAttackMonster = BooleanByteWrapper.getFlag(_box2, 2);
        }
    }
    class SpellModifierMessage {
        constructor() {

            this.spellId = 0;
            this.actionType = 0;
            this.modifierType = 0;
            this.context = 0;
            this.equipment = 0;
            this.ID = 9395;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.actionType = 0;
            this.modifierType = 0;
            this.context = 0;
            this.equipment = 0;
        }

        serialize(output) {
            this.serializeAs_SpellModifierMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellModifierMessage(input);
        }

        serializeAs_SpellModifierMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeByte(this.actionType);
            output.writeByte(this.modifierType);
            output.writeInt(this.context);
            output.writeInt(this.equipment);
        }

        deserializeAs_SpellModifierMessage(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellModifierMessage.spellId.");
            }
            this.actionType = input.readByte();
            if (this.actionType < 0) {
                throw new Error("Forbidden value (" + this.actionType + ") on element of SpellModifierMessage.actionType.");
            }
            this.modifierType = input.readByte();
            if (this.modifierType < 0) {
                throw new Error("Forbidden value (" + this.modifierType + ") on element of SpellModifierMessage.modifierType.");
            }
            this.context = input.readInt();
            this.equipment = input.readInt();
        }
    }
    class PlayerStatus {
        constructor() {

            this.statusId = 1;
            this.ID = 5664;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.statusId = 1;
        }

        serialize(output) {
            this.serializeAs_PlayerStatus(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerStatus(input);
        }

        serializeAs_PlayerStatus(ouput) {
            output.writeByte(this.statusId);
        }

        deserializeAs_PlayerStatus(input) {
            this.statusId = input.readByte();
            if (this.statusId < 0) {
                throw new Error("Forbidden value (" + this.statusId + ") on element of PlayerStatus.statusId.");
            }
        }
    }
    class PlayerStatusExtended extends PlayerStatus {
        constructor(_super) {
            super()
            this.message = "";
            this.ID = 1512;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.message = "";
        }

        serialize(output) {
            this.serializeAs_PlayerStatusExtended(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerStatusExtended(input);
        }

        serializeAs_PlayerStatusExtended(ouput) {
            this.serializeAs_PlayerStatus(this, output);
            output.writeUTF(this.message);
        }

        deserializeAs_PlayerStatusExtended(input) {
            super.deserialize(input);
            this.message = input.readUTF();
        }
    }
    class AdditionalTaxCollectorInformation {
        constructor() {

            this.collectorCallerId = 0;
            this.collectorCallerName = "";
            this.date = 0;
            this.ID = 7712;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.collectorCallerId = 0;
            this.collectorCallerName = "";
            this.date = 0;
        }

        serialize(output) {
            this.serializeAs_AdditionalTaxCollectorInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AdditionalTaxCollectorInformation(input);
        }

        serializeAs_AdditionalTaxCollectorInformation(ouput) {
            if (this.collectorCallerId < 0 || this.collectorCallerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.collectorCallerId + ") on element collectorCallerId.");
            }
            output.writeVarLong(this.collectorCallerId);
            output.writeUTF(this.collectorCallerName);
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeInt(this.date);
        }

        deserializeAs_AdditionalTaxCollectorInformation(input) {
            this.collectorCallerId = input.readVarUhLong();
            if (this.collectorCallerId < 0 || this.collectorCallerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.collectorCallerId + ") on element of AdditionalTaxCollectorInformation.collectorCallerId.");
            }
            this.collectorCallerName = input.readUTF();
            this.date = input.readInt();
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element of AdditionalTaxCollectorInformation.date.");
            }
        }
    }
    class TaxCollectorBasicInformations {
        constructor() {

            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.ID = 5921;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        serialize(output) {
            this.serializeAs_TaxCollectorBasicInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorBasicInformations(input);
        }

        serializeAs_TaxCollectorBasicInformations(ouput) {
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        }

        deserializeAs_TaxCollectorBasicInformations(input) {
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorBasicInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorBasicInformations.lastNameId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorBasicInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorBasicInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TaxCollectorBasicInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorBasicInformations.subAreaId.");
            }
        }
    }
    class TaxCollectorComplementaryInformations {
        constructor() {


            this.ID = 875;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_TaxCollectorComplementaryInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorComplementaryInformations(input);
        }

        serializeAs_TaxCollectorComplementaryInformations(ouput) {

        }

        deserializeAs_TaxCollectorComplementaryInformations(input) {

        }
    }
    class TaxCollectorInformations {
        constructor() {

            this.uniqueId = 0;
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.allianceIdentity = new AllianceInformation();
            this.additionalInfos = new AdditionalTaxCollectorInformation();
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.state = 0;
            this.look = new EntityLook();
            this.complements = [];
            this.characteristics = new CharacterCharacteristics();
            this.equipments = [];
            this.spells = [];
            this.ID = 3218;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uniqueId = 0;
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.allianceIdentity = new AllianceInformation();
            this.additionalInfos = new AdditionalTaxCollectorInformation();
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.state = 0;
            this.look = new EntityLook();
            this.complements = [];
            this.characteristics = new CharacterCharacteristics();
            this.equipments = [];
            this.spells = [];
        }

        serialize(output) {
            this.serializeAs_TaxCollectorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorInformations(input);
        }

        serializeAs_TaxCollectorInformations(ouput) {
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element uniqueId.");
            }
            output.writeDouble(this.uniqueId);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            this.allianceIdentity.serializeAs_AllianceInformation(output);
            this.additionalInfos.serializeAs_AdditionalTaxCollectorInformation(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.state);
            this.look.serializeAs_EntityLook(output);
            output.writeShort(this.complements.length);
            for (var _i11 = 0; _i11 < this.complements.length; _i11++) {
                output.writeShort((this.complements[_i11]).getTypeId());
                (this.complements[_i11]).serialize(output);
            }
            this.characteristics.serializeAs_CharacterCharacteristics(output);
            output.writeShort(this.equipments.length);
            for (var _i13 = 0; _i13 < this.equipments.length; _i13++) {
                (this.equipments[_i13]).serializeAs_ObjectItem(output);
            }
            output.writeShort(this.spells.length);
            for (var _i14 = 0; _i14 < this.spells.length; _i14++) {
                (this.spells[_i14]).serializeAs_TaxCollectorOrderedSpell(output);
            }
        }

        deserializeAs_TaxCollectorInformations(input) {
            var _id11 = 0;
            var _item11 = null;
            var _item13 = null;
            var _item14 = null;
            this.uniqueId = input.readDouble();
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element of TaxCollectorInformations.uniqueId.");
            }
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorInformations.lastNameId.");
            }
            this.allianceIdentity = new AllianceInformation();
            this.allianceIdentity.deserialize(input);
            this.additionalInfos = new AdditionalTaxCollectorInformation();
            this.additionalInfos.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorInformations.worldY.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorInformations.subAreaId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of TaxCollectorInformations.state.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
            var _complementsLen = input.readUnsignedShort();
            for (var _i11 = 0; _i11 < _complementsLen; _i11++) {
                _id11 = input.readUnsignedShort();
                _item11 = ProtocolTypeManager.getInstance(TaxCollectorComplementaryInformations, _id11);
                _item11.deserialize(input);
                this.complements.push(_item11);
            }
            this.characteristics = new CharacterCharacteristics();
            this.characteristics.deserialize(input);
            var _equipmentsLen = input.readUnsignedShort();
            for (var _i13 = 0; _i13 < _equipmentsLen; _i13++) {
                _item13 = new ObjectItem();
                _item13.deserialize(input);
                this.equipments.push(_item13);
            }
            var _spellsLen = input.readUnsignedShort();
            for (var _i14 = 0; _i14 < _spellsLen; _i14++) {
                _item14 = new TaxCollectorOrderedSpell();
                _item14.deserialize(input);
                this.spells.push(_item14);
            }
        }
    }
    class TaxCollectorLootInformations extends TaxCollectorComplementaryInformations {
        constructor(_super) {
            super()
            this.pods = 0;
            this.itemsValue = 0;
            this.ID = 5296;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.pods = 0;
            this.itemsValue = 0;
        }

        serialize(output) {
            this.serializeAs_TaxCollectorLootInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorLootInformations(input);
        }

        serializeAs_TaxCollectorLootInformations(ouput) {
            this.serializeAs_TaxCollectorComplementaryInformations(this, output);
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element pods.");
            }
            output.writeVarInt(this.pods);
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740992) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
            }
            output.writeVarLong(this.itemsValue);
        }

        deserializeAs_TaxCollectorLootInformations(input) {
            super.deserialize(input);
            this.pods = input.readVarUhInt();
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element of TaxCollectorLootInformations.pods.");
            }
            this.itemsValue = input.readVarUhLong();
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740992) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorLootInformations.itemsValue.");
            }
        }
    }
    class TaxCollectorMovement {
        constructor() {

            this.movementType = 0;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = "";
            this.ID = 1327;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.movementType = 0;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = "";
        }

        serialize(output) {
            this.serializeAs_TaxCollectorMovement(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorMovement(input);
        }

        serializeAs_TaxCollectorMovement(ouput) {
            output.writeByte(this.movementType);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
        }

        deserializeAs_TaxCollectorMovement(input) {
            this.movementType = input.readByte();
            if (this.movementType < 0) {
                throw new Error("Forbidden value (" + this.movementType + ") on element of TaxCollectorMovement.movementType.");
            }
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of TaxCollectorMovement.playerId.");
            }
            this.playerName = input.readUTF();
        }
    }
    class TaxCollectorOrderedSpell {
        constructor() {

            this.spellId = 0;
            this.slot = 0;
            this.ID = 382;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.slot = 0;
        }

        serialize(output) {
            this.serializeAs_TaxCollectorOrderedSpell(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorOrderedSpell(input);
        }

        serializeAs_TaxCollectorOrderedSpell(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarInt(this.spellId);
            if (this.slot < 0 || this.slot > 5) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        }

        deserializeAs_TaxCollectorOrderedSpell(input) {
            this.spellId = input.readVarUhInt();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of TaxCollectorOrderedSpell.spellId.");
            }
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 5) {
                throw new Error("Forbidden value (" + this.slot + ") on element of TaxCollectorOrderedSpell.slot.");
            }
        }
    }
    class TaxCollectorPreset {
        constructor() {

            this.presetId = new Uuid();
            this.spells = [];
            this.characteristics = new CharacterCharacteristics();
            this.ID = 5480;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = new Uuid();
            this.spells = [];
            this.characteristics = new CharacterCharacteristics();
        }

        serialize(output) {
            this.serializeAs_TaxCollectorPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorPreset(input);
        }

        serializeAs_TaxCollectorPreset(ouput) {
            this.presetId.serializeAs_Uuid(output);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                (this.spells[_i2]).serializeAs_TaxCollectorOrderedSpell(output);
            }
            this.characteristics.serializeAs_CharacterCharacteristics(output);
        }

        deserializeAs_TaxCollectorPreset(input) {
            var _item2 = null;
            this.presetId = new Uuid();
            this.presetId.deserialize(input);
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _item2 = new TaxCollectorOrderedSpell();
                _item2.deserialize(input);
                this.spells.push(_item2);
            }
            this.characteristics = new CharacterCharacteristics();
            this.characteristics.deserialize(input);
        }
    }
    class TaxCollectorWaitingForHelpInformations extends TaxCollectorComplementaryInformations {
        constructor(_super) {
            super()
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.ID = 7073;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        }

        serialize(output) {
            this.serializeAs_TaxCollectorWaitingForHelpInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorWaitingForHelpInformations(input);
        }

        serializeAs_TaxCollectorWaitingForHelpInformations(ouput) {
            this.serializeAs_TaxCollectorComplementaryInformations(this, output);
            this.waitingForHelpInfo.serializeAs_ProtectedEntityWaitingForHelpInfo(output);
        }

        deserializeAs_TaxCollectorWaitingForHelpInformations(input) {
            super.deserialize(input);
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.waitingForHelpInfo.deserialize(input);
        }
    }
    class ActorOrientation {
        constructor() {

            this.id = 0;
            this.direction = 1;
            this.ID = 9830;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.direction = 1;
        }

        serialize(output) {
            this.serializeAs_ActorOrientation(output);
        }

        deserialize(input) {
            this.deserializeAs_ActorOrientation(input);
        }

        serializeAs_ActorOrientation(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            output.writeByte(this.direction);
        }

        deserializeAs_ActorOrientation(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of ActorOrientation.id.");
            }
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of ActorOrientation.direction.");
            }
        }
    }
    class EntityDispositionInformations {
        constructor() {

            this.cellId = 0;
            this.direction = 1;
            this.ID = 5813;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
            this.direction = 1;
        }

        serialize(output) {
            this.serializeAs_EntityDispositionInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_EntityDispositionInformations(input);
        }

        serializeAs_EntityDispositionInformations(ouput) {
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
            output.writeByte(this.direction);
        }

        deserializeAs_EntityDispositionInformations(input) {
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of EntityDispositionInformations.cellId.");
            }
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of EntityDispositionInformations.direction.");
            }
        }
    }
    class EntityMovementInformations {
        constructor() {

            this.id = 0;
            this.steps = [];
            this.ID = 9481;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.steps = [];
        }

        serialize(output) {
            this.serializeAs_EntityMovementInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_EntityMovementInformations(input);
        }

        serializeAs_EntityMovementInformations(ouput) {
            output.writeInt(this.id);
            output.writeShort(this.steps.length);
            for (var _i2 = 0; _i2 < this.steps.length; _i2++) {
                output.writeByte(this.steps[_i2]);
            }
        }

        deserializeAs_EntityMovementInformations(input) {
            var _val2 = 0;
            this.id = input.readInt();
            var _stepsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _stepsLen; _i2++) {
                _val2 = input.readByte();
                this.steps.push(_val2);
            }
        }
    }
    class AbstractFightTeamInformations {
        constructor() {

            this.teamId = 2;
            this.leaderId = 0;
            this.teamSide = 0;
            this.teamTypeId = 0;
            this.nbWaves = 0;
            this.ID = 7595;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.teamId = 2;
            this.leaderId = 0;
            this.teamSide = 0;
            this.teamTypeId = 0;
            this.nbWaves = 0;
        }

        serialize(output) {
            this.serializeAs_AbstractFightTeamInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractFightTeamInformations(input);
        }

        serializeAs_AbstractFightTeamInformations(ouput) {
            output.writeByte(this.teamId);
            if (this.leaderId < -9007199254740992 || this.leaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeDouble(this.leaderId);
            output.writeByte(this.teamSide);
            output.writeByte(this.teamTypeId);
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
            }
            output.writeByte(this.nbWaves);
        }

        deserializeAs_AbstractFightTeamInformations(input) {
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of AbstractFightTeamInformations.teamId.");
            }
            this.leaderId = input.readDouble();
            if (this.leaderId < -9007199254740992 || this.leaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of AbstractFightTeamInformations.leaderId.");
            }
            this.teamSide = input.readByte();
            this.teamTypeId = input.readByte();
            if (this.teamTypeId < 0) {
                throw new Error("Forbidden value (" + this.teamTypeId + ") on element of AbstractFightTeamInformations.teamTypeId.");
            }
            this.nbWaves = input.readByte();
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element of AbstractFightTeamInformations.nbWaves.");
            }
        }
    }
    class SpawnInformation {
        constructor() {


            this.ID = 5624;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_SpawnInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SpawnInformation(input);
        }

        serializeAs_SpawnInformation(ouput) {

        }

        deserializeAs_SpawnInformation(input) {

        }
    }
    class BaseSpawnMonsterInformation extends SpawnInformation {
        constructor(_super) {
            super()
            this.creatureGenericId = 0;
            this.ID = 1758;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.creatureGenericId = 0;
        }

        serialize(output) {
            this.serializeAs_BaseSpawnMonsterInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_BaseSpawnMonsterInformation(input);
        }

        serializeAs_BaseSpawnMonsterInformation(ouput) {
            this.serializeAs_SpawnInformation(this, output);
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
            }
            output.writeVarShort(this.creatureGenericId);
        }

        deserializeAs_BaseSpawnMonsterInformation(input) {
            super.deserialize(input);
            this.creatureGenericId = input.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of BaseSpawnMonsterInformation.creatureGenericId.");
            }
        }
    }
    class ChallengeInformation {
        constructor() {

            this.challengeId = 0;
            this.targetsList = [];
            this.dropBonus = 0;
            this.xpBonus = 0;
            this.state = 2;
            this.ID = 5736;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeId = 0;
            this.targetsList = [];
            this.dropBonus = 0;
            this.xpBonus = 0;
            this.state = 2;
        }

        serialize(output) {
            this.serializeAs_ChallengeInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeInformation(input);
        }

        serializeAs_ChallengeInformation(ouput) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarInt(this.challengeId);
            output.writeShort(this.targetsList.length);
            for (var _i2 = 0; _i2 < this.targetsList.length; _i2++) {
                output.writeShort((this.targetsList[_i2]).getTypeId());
                (this.targetsList[_i2]).serialize(output);
            }
            if (this.dropBonus < 0) {
                throw new Error("Forbidden value (" + this.dropBonus + ") on element dropBonus.");
            }
            output.writeVarInt(this.dropBonus);
            if (this.xpBonus < 0) {
                throw new Error("Forbidden value (" + this.xpBonus + ") on element xpBonus.");
            }
            output.writeVarInt(this.xpBonus);
            output.writeByte(this.state);
        }

        deserializeAs_ChallengeInformation(input) {
            var _id2 = 0;
            var _item2 = null;
            this.challengeId = input.readVarUhInt();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeInformation.challengeId.");
            }
            var _targetsListLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _targetsListLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ChallengeTargetInformation, _id2);
                _item2.deserialize(input);
                this.targetsList.push(_item2);
            }
            this.dropBonus = input.readVarUhInt();
            if (this.dropBonus < 0) {
                throw new Error("Forbidden value (" + this.dropBonus + ") on element of ChallengeInformation.dropBonus.");
            }
            this.xpBonus = input.readVarUhInt();
            if (this.xpBonus < 0) {
                throw new Error("Forbidden value (" + this.xpBonus + ") on element of ChallengeInformation.xpBonus.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of ChallengeInformation.state.");
            }
        }
    }
    class ChallengeTargetInformation {
        constructor() {

            this.targetId = 0;
            this.targetCell = 0;
            this.ID = 3951;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.targetCell = 0;
        }

        serialize(output) {
            this.serializeAs_ChallengeTargetInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeTargetInformation(input);
        }

        serializeAs_ChallengeTargetInformation(ouput) {
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.targetCell < -1 || this.targetCell > 559) {
                throw new Error("Forbidden value (" + this.targetCell + ") on element targetCell.");
            }
            output.writeShort(this.targetCell);
        }

        deserializeAs_ChallengeTargetInformation(input) {
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of ChallengeTargetInformation.targetId.");
            }
            this.targetCell = input.readShort();
            if (this.targetCell < -1 || this.targetCell > 559) {
                throw new Error("Forbidden value (" + this.targetCell + ") on element of ChallengeTargetInformation.targetCell.");
            }
        }
    }
    class ChallengeTargetWithAttackerInformation extends ChallengeTargetInformation {
        constructor(_super) {
            super()
            this.attackersIds = [];
            this.ID = 9326;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.attackersIds = [];
        }

        serialize(output) {
            this.serializeAs_ChallengeTargetWithAttackerInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeTargetWithAttackerInformation(input);
        }

        serializeAs_ChallengeTargetWithAttackerInformation(ouput) {
            this.serializeAs_ChallengeTargetInformation(this, output);
            output.writeShort(this.attackersIds.length);
            for (var _i1 = 0; _i1 < this.attackersIds.length; _i1++) {
                if (this.attackersIds[_i1] < -9007199254740992 || this.attackersIds[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.attackersIds[_i1] + ") on element 1 (starting at 1) of attackersIds.");
                }
                output.writeDouble(this.attackersIds[_i1]);
            }
        }

        deserializeAs_ChallengeTargetWithAttackerInformation(input) {
            var _val1 = NaN;
            super.deserialize(input);
            var _attackersIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _attackersIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740992 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of attackersIds.");
                }
                this.attackersIds.push(_val1);
            }
        }
    }
    class FightTeamInformations extends AbstractFightTeamInformations {
        constructor(_super) {
            super()
            this.teamMembers = [];
            this.ID = 8922;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.teamMembers = [];
        }

        serialize(output) {
            this.serializeAs_FightTeamInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamInformations(input);
        }

        serializeAs_FightTeamInformations(ouput) {
            this.serializeAs_AbstractFightTeamInformations(this, output);
            output.writeShort(this.teamMembers.length);
            for (var _i1 = 0; _i1 < this.teamMembers.length; _i1++) {
                output.writeShort((this.teamMembers[_i1]).getTypeId());
                (this.teamMembers[_i1]).serialize(output);
            }
        }

        deserializeAs_FightTeamInformations(input) {
            var _id1 = 0;
            var _item1 = null;
            super.deserialize(input);
            var _teamMembersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _teamMembersLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(FightTeamMemberInformations, _id1);
                _item1.deserialize(input);
                this.teamMembers.push(_item1);
            }
        }
    }
    class FightAllianceTeamInformations extends FightTeamInformations {
        constructor(_super) {
            super()
            this.relation = 0;
            this.ID = 6801;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.relation = 0;
        }

        serialize(output) {
            this.serializeAs_FightAllianceTeamInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightAllianceTeamInformations(input);
        }

        serializeAs_FightAllianceTeamInformations(ouput) {
            this.serializeAs_FightTeamInformations(this, output);
            output.writeByte(this.relation);
        }

        deserializeAs_FightAllianceTeamInformations(input) {
            super.deserialize(input);
            this.relation = input.readByte();
            if (this.relation < 0) {
                throw new Error("Forbidden value (" + this.relation + ") on element of FightAllianceTeamInformations.relation.");
            }
        }
    }
    class FightCommonInformations {
        constructor() {

            this.fightId = 0;
            this.fightType = 0;
            this.fightTeams = [];
            this.fightTeamsPositions = [];
            this.fightTeamsOptions = [];
            this.ID = 9208;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightTeams = [];
            this.fightTeamsPositions = [];
            this.fightTeamsOptions = [];
        }

        serialize(output) {
            this.serializeAs_FightCommonInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightCommonInformations(input);
        }

        serializeAs_FightCommonInformations(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.fightType);
            output.writeShort(this.fightTeams.length);
            for (var _i3 = 0; _i3 < this.fightTeams.length; _i3++) {
                output.writeShort((this.fightTeams[_i3]).getTypeId());
                (this.fightTeams[_i3]).serialize(output);
            }
            output.writeShort(this.fightTeamsPositions.length);
            for (var _i4 = 0; _i4 < this.fightTeamsPositions.length; _i4++) {
                if (this.fightTeamsPositions[_i4] < 0 || this.fightTeamsPositions[_i4] > 559) {
                    throw new Error("Forbidden value (" + this.fightTeamsPositions[_i4] + ") on element 4 (starting at 1) of fightTeamsPositions.");
                }
                output.writeVarShort(this.fightTeamsPositions[_i4]);
            }
            output.writeShort(this.fightTeamsOptions.length);
            for (var _i5 = 0; _i5 < this.fightTeamsOptions.length; _i5++) {
                (this.fightTeamsOptions[_i5]).serializeAs_FightOptionsInformations(output);
            }
        }

        deserializeAs_FightCommonInformations(input) {
            var _id3 = 0;
            var _item3 = null;
            var _val4 = 0;
            var _item5 = null;
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of FightCommonInformations.fightId.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of FightCommonInformations.fightType.");
            }
            var _fightTeamsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _fightTeamsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(FightTeamInformations, _id3);
                _item3.deserialize(input);
                this.fightTeams.push(_item3);
            }
            var _fightTeamsPositionsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _fightTeamsPositionsLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0 || _val4 > 559) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of fightTeamsPositions.");
                }
                this.fightTeamsPositions.push(_val4);
            }
            var _fightTeamsOptionsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _fightTeamsOptionsLen; _i5++) {
                _item5 = new FightOptionsInformations();
                _item5.deserialize(input);
                this.fightTeamsOptions.push(_item5);
            }
        }
    }
    class FightExternalInformations {
        constructor() {

            this.fightId = 0;
            this.fightType = 0;
            this.fightStart = 0;
            this.fightSpectatorLocked = false;
            this.fightTeams = [];
            this.fightTeamsOptions = [];
            this.ID = 6224;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightStart = 0;
            this.fightSpectatorLocked = false;
            this.fightTeams = [];
            this.fightTeamsOptions = [];
        }

        serialize(output) {
            this.serializeAs_FightExternalInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightExternalInformations(input);
        }

        serializeAs_FightExternalInformations(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.fightType);
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element fightStart.");
            }
            output.writeInt(this.fightStart);
            output.writeBoolean(this.fightSpectatorLocked);
            for (var _i5 = 0; _i5 < 2; _i5++) {
                this.fightTeams[_i5].serializeAs_FightTeamLightInformations(output);
            }
            for (var _i6 = 0; _i6 < 2; _i6++) {
                this.fightTeamsOptions[_i6].serializeAs_FightOptionsInformations(output);
            }
        }

        deserializeAs_FightExternalInformations(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of FightExternalInformations.fightId.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of FightExternalInformations.fightType.");
            }
            this.fightStart = input.readInt();
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element of FightExternalInformations.fightStart.");
            }
            this.fightSpectatorLocked = input.readBoolean();
            for (var _i5 = 0; _i5 < 2; _i5++) {
                this.fightTeams[_i5] = new FightTeamLightInformations();
                this.fightTeams[_i5].deserialize(input);
            }
            for (var _i6 = 0; _i6 < 2; _i6++) {
                this.fightTeamsOptions[_i6] = new FightOptionsInformations();
                this.fightTeamsOptions[_i6].deserialize(input);
            }
        }
    }
    class FightLoot {
        constructor() {

            this.objects = [];
            this.kamas = 0;
            this.ID = 5092;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
            this.kamas = 0;
        }

        serialize(output) {
            this.serializeAs_FightLoot(output);
        }

        deserialize(input) {
            this.deserializeAs_FightLoot(input);
        }

        serializeAs_FightLoot(ouput) {
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_FightLootObject(output);
            }
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        }

        deserializeAs_FightLoot(input) {
            var _item1 = null;
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new FightLootObject();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of FightLoot.kamas.");
            }
        }
    }
    class FightLootObject {
        constructor() {

            this.objectId = 0;
            this.quantity = 0;
            this.priorityHint = 0;
            this.ID = 4940;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectId = 0;
            this.quantity = 0;
            this.priorityHint = 0;
        }

        serialize(output) {
            this.serializeAs_FightLootObject(output);
        }

        deserialize(input) {
            this.deserializeAs_FightLootObject(input);
        }

        serializeAs_FightLootObject(ouput) {
            output.writeInt(this.objectId);
            output.writeInt(this.quantity);
            output.writeInt(this.priorityHint);
        }

        deserializeAs_FightLootObject(input) {
            this.objectId = input.readInt();
            this.quantity = input.readInt();
            this.priorityHint = input.readInt();
        }
    }
    class FightOptionsInformations {
        constructor() {

            this.isSecret = false;
            this.isRestrictedToPartyOnly = false;
            this.isClosed = false;
            this.isAskingForHelp = false;
            this.ID = 1641;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isSecret = false;
            this.isRestrictedToPartyOnly = false;
            this.isClosed = false;
            this.isAskingForHelp = false;
        }

        serialize(output) {
            this.serializeAs_FightOptionsInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightOptionsInformations(input);
        }

        serializeAs_FightOptionsInformations(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isSecret);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isRestrictedToPartyOnly);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isClosed);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isAskingForHelp);
            output.writeByte(_box0);
        }

        deserializeAs_FightOptionsInformations(input) {
            var _box0 = input.readByte();
            this.isSecret = BooleanByteWrapper.getFlag(_box0, 0);
            this.isRestrictedToPartyOnly = BooleanByteWrapper.getFlag(_box0, 1);
            this.isClosed = BooleanByteWrapper.getFlag(_box0, 2);
            this.isAskingForHelp = BooleanByteWrapper.getFlag(_box0, 3);
        }
    }
    class FightPhase {
        constructor() {

            this.phase = 0;
            this.phaseEndTimeStamp = 0;
            this.ID = 5435;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.phase = 0;
            this.phaseEndTimeStamp = 0;
        }

        serialize(output) {
            this.serializeAs_FightPhase(output);
        }

        deserialize(input) {
            this.deserializeAs_FightPhase(input);
        }

        serializeAs_FightPhase(ouput) {
            output.writeByte(this.phase);
            if (this.phaseEndTimeStamp < -9007199254740992 || this.phaseEndTimeStamp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.phaseEndTimeStamp + ") on element phaseEndTimeStamp.");
            }
            output.writeDouble(this.phaseEndTimeStamp);
        }

        deserializeAs_FightPhase(input) {
            this.phase = input.readByte();
            if (this.phase < 0) {
                throw new Error("Forbidden value (" + this.phase + ") on element of FightPhase.phase.");
            }
            this.phaseEndTimeStamp = input.readDouble();
            if (this.phaseEndTimeStamp < -9007199254740992 || this.phaseEndTimeStamp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.phaseEndTimeStamp + ") on element of FightPhase.phaseEndTimeStamp.");
            }
        }
    }
    class FightResultAdditionalData {
        constructor() {


            this.ID = 6226;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_FightResultAdditionalData(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultAdditionalData(input);
        }

        serializeAs_FightResultAdditionalData(ouput) {

        }

        deserializeAs_FightResultAdditionalData(input) {

        }
    }
    class FightResultExperienceData extends FightResultAdditionalData {
        constructor(_super) {
            super()
            this.experience = 0;
            this.showExperience = false;
            this.experienceLevelFloor = 0;
            this.showExperienceLevelFloor = false;
            this.experienceNextLevelFloor = 0;
            this.showExperienceNextLevelFloor = false;
            this.experienceFightDelta = 0;
            this.showExperienceFightDelta = false;
            this.experienceForGuild = 0;
            this.showExperienceForGuild = false;
            this.experienceForMount = 0;
            this.showExperienceForMount = false;
            this.isIncarnationExperience = false;
            this.rerollExperienceMul = 0;
            this.ID = 3328;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.experience = 0;
            this.showExperience = false;
            this.experienceLevelFloor = 0;
            this.showExperienceLevelFloor = false;
            this.experienceNextLevelFloor = 0;
            this.showExperienceNextLevelFloor = false;
            this.experienceFightDelta = 0;
            this.showExperienceFightDelta = false;
            this.experienceForGuild = 0;
            this.showExperienceForGuild = false;
            this.experienceForMount = 0;
            this.showExperienceForMount = false;
            this.isIncarnationExperience = false;
            this.rerollExperienceMul = 0;
        }

        serialize(output) {
            this.serializeAs_FightResultExperienceData(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultExperienceData(input);
        }

        serializeAs_FightResultExperienceData(ouput) {
            this.serializeAs_FightResultAdditionalData(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.showExperience);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.showExperienceLevelFloor);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.showExperienceNextLevelFloor);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.showExperienceFightDelta);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.showExperienceForGuild);
            _box0 = BooleanByteWrapper.setFlag(_box0, 5, this.showExperienceForMount);
            _box0 = BooleanByteWrapper.setFlag(_box0, 6, this.isIncarnationExperience);
            output.writeByte(_box0);
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element experienceLevelFloor.");
            }
            output.writeVarLong(this.experienceLevelFloor);
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element experienceNextLevelFloor.");
            }
            output.writeVarLong(this.experienceNextLevelFloor);
            if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceFightDelta + ") on element experienceFightDelta.");
            }
            output.writeVarLong(this.experienceFightDelta);
            if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForGuild + ") on element experienceForGuild.");
            }
            output.writeVarLong(this.experienceForGuild);
            if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForMount + ") on element experienceForMount.");
            }
            output.writeVarLong(this.experienceForMount);
            if (this.rerollExperienceMul < 0) {
                throw new Error("Forbidden value (" + this.rerollExperienceMul + ") on element rerollExperienceMul.");
            }
            output.writeByte(this.rerollExperienceMul);
        }

        deserializeAs_FightResultExperienceData(input) {
            super.deserialize(input);
            var _box0 = input.readByte();
            this.showExperience = BooleanByteWrapper.getFlag(_box0, 0);
            this.showExperienceLevelFloor = BooleanByteWrapper.getFlag(_box0, 1);
            this.showExperienceNextLevelFloor = BooleanByteWrapper.getFlag(_box0, 2);
            this.showExperienceFightDelta = BooleanByteWrapper.getFlag(_box0, 3);
            this.showExperienceForGuild = BooleanByteWrapper.getFlag(_box0, 4);
            this.showExperienceForMount = BooleanByteWrapper.getFlag(_box0, 5);
            this.isIncarnationExperience = BooleanByteWrapper.getFlag(_box0, 6);
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element of FightResultExperienceData.experience.");
            }
            this.experienceLevelFloor = input.readVarUhLong();
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceLevelFloor + ") on element of FightResultExperienceData.experienceLevelFloor.");
            }
            this.experienceNextLevelFloor = input.readVarUhLong();
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceNextLevelFloor + ") on element of FightResultExperienceData.experienceNextLevelFloor.");
            }
            this.experienceFightDelta = input.readVarUhLong();
            if (this.experienceFightDelta < 0 || this.experienceFightDelta > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceFightDelta + ") on element of FightResultExperienceData.experienceFightDelta.");
            }
            this.experienceForGuild = input.readVarUhLong();
            if (this.experienceForGuild < 0 || this.experienceForGuild > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForGuild + ") on element of FightResultExperienceData.experienceForGuild.");
            }
            this.experienceForMount = input.readVarUhLong();
            if (this.experienceForMount < 0 || this.experienceForMount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForMount + ") on element of FightResultExperienceData.experienceForMount.");
            }
            this.rerollExperienceMul = input.readByte();
            if (this.rerollExperienceMul < 0) {
                throw new Error("Forbidden value (" + this.rerollExperienceMul + ") on element of FightResultExperienceData.rerollExperienceMul.");
            }
        }
    }
    class FightResultListEntry {
        constructor() {

            this.outcome = 0;
            this.wave = 0;
            this.rewards = new FightLoot();
            this.ID = 1699;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.outcome = 0;
            this.wave = 0;
            this.rewards = new FightLoot();
        }

        serialize(output) {
            this.serializeAs_FightResultListEntry(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultListEntry(input);
        }

        serializeAs_FightResultListEntry(ouput) {
            output.writeVarShort(this.outcome);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            this.rewards.serializeAs_FightLoot(output);
        }

        deserializeAs_FightResultListEntry(input) {
            this.outcome = input.readVarUhShort();
            if (this.outcome < 0) {
                throw new Error("Forbidden value (" + this.outcome + ") on element of FightResultListEntry.outcome.");
            }
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of FightResultListEntry.wave.");
            }
            this.rewards = new FightLoot();
            this.rewards.deserialize(input);
        }
    }
    class FightResultFighterListEntry extends FightResultListEntry {
        constructor(_super) {
            super()
            this.id = 0;
            this.alive = false;
            this.ID = 4005;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.alive = false;
        }

        serialize(output) {
            this.serializeAs_FightResultFighterListEntry(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultFighterListEntry(input);
        }

        serializeAs_FightResultFighterListEntry(ouput) {
            this.serializeAs_FightResultListEntry(this, output);
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            output.writeBoolean(this.alive);
        }

        deserializeAs_FightResultFighterListEntry(input) {
            super.deserialize(input);
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of FightResultFighterListEntry.id.");
            }
            this.alive = input.readBoolean();
        }
    }
    class FightResultMutantListEntry extends FightResultFighterListEntry {
        constructor(_super) {
            super()
            this.level = 0;
            this.ID = 1132;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_FightResultMutantListEntry(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultMutantListEntry(input);
        }

        serializeAs_FightResultMutantListEntry(ouput) {
            this.serializeAs_FightResultFighterListEntry(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        }

        deserializeAs_FightResultMutantListEntry(input) {
            super.deserialize(input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightResultMutantListEntry.level.");
            }
        }
    }
    class FightResultPlayerListEntry extends FightResultFighterListEntry {
        constructor(_super) {
            super()
            this.level = 0;
            this.additional = [];
            this.ID = 1467;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.level = 0;
            this.additional = [];
        }

        serialize(output) {
            this.serializeAs_FightResultPlayerListEntry(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultPlayerListEntry(input);
        }

        serializeAs_FightResultPlayerListEntry(ouput) {
            this.serializeAs_FightResultFighterListEntry(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeShort(this.additional.length);
            for (var _i2 = 0; _i2 < this.additional.length; _i2++) {
                output.writeShort((this.additional[_i2]).getTypeId());
                (this.additional[_i2]).serialize(output);
            }
        }

        deserializeAs_FightResultPlayerListEntry(input) {
            var _id2 = 0;
            var _item2 = null;
            super.deserialize(input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightResultPlayerListEntry.level.");
            }
            var _additionalLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _additionalLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(FightResultAdditionalData, _id2);
                _item2.deserialize(input);
                this.additional.push(_item2);
            }
        }
    }
    class FightResultPvpData extends FightResultAdditionalData {
        constructor(_super) {
            super()
            this.grade = 0;
            this.minHonorForGrade = 0;
            this.maxHonorForGrade = 0;
            this.honor = 0;
            this.honorDelta = 0;
            this.ID = 3270;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.grade = 0;
            this.minHonorForGrade = 0;
            this.maxHonorForGrade = 0;
            this.honor = 0;
            this.honorDelta = 0;
        }

        serialize(output) {
            this.serializeAs_FightResultPvpData(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultPvpData(input);
        }

        serializeAs_FightResultPvpData(ouput) {
            this.serializeAs_FightResultAdditionalData(this, output);
            if (this.grade < 0 || this.grade > 255) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeByte(this.grade);
            if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.minHonorForGrade + ") on element minHonorForGrade.");
            }
            output.writeVarShort(this.minHonorForGrade);
            if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.maxHonorForGrade + ") on element maxHonorForGrade.");
            }
            output.writeVarShort(this.maxHonorForGrade);
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element honor.");
            }
            output.writeVarShort(this.honor);
            output.writeVarShort(this.honorDelta);
        }

        deserializeAs_FightResultPvpData(input) {
            super.deserialize(input);
            this.grade = input.readUnsignedByte();
            if (this.grade < 0 || this.grade > 255) {
                throw new Error("Forbidden value (" + this.grade + ") on element of FightResultPvpData.grade.");
            }
            this.minHonorForGrade = input.readVarUhShort();
            if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.minHonorForGrade + ") on element of FightResultPvpData.minHonorForGrade.");
            }
            this.maxHonorForGrade = input.readVarUhShort();
            if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
                throw new Error("Forbidden value (" + this.maxHonorForGrade + ") on element of FightResultPvpData.maxHonorForGrade.");
            }
            this.honor = input.readVarUhShort();
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error("Forbidden value (" + this.honor + ") on element of FightResultPvpData.honor.");
            }
            this.honorDelta = input.readVarShort();
        }
    }
    class FightResultTaxCollectorListEntry extends FightResultFighterListEntry {
        constructor(_super) {
            super()
            this.allianceInfo = new BasicAllianceInformations();
            this.ID = 1075;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInfo = new BasicAllianceInformations();
        }

        serialize(output) {
            this.serializeAs_FightResultTaxCollectorListEntry(output);
        }

        deserialize(input) {
            this.deserializeAs_FightResultTaxCollectorListEntry(input);
        }

        serializeAs_FightResultTaxCollectorListEntry(ouput) {
            this.serializeAs_FightResultFighterListEntry(this, output);
            this.allianceInfo.serializeAs_BasicAllianceInformations(output);
        }

        deserializeAs_FightResultTaxCollectorListEntry(input) {
            super.deserialize(input);
            this.allianceInfo = new BasicAllianceInformations();
            this.allianceInfo.deserialize(input);
        }
    }
    class FightStartingPositions {
        constructor() {

            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.ID = 2219;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
        }

        serialize(output) {
            this.serializeAs_FightStartingPositions(output);
        }

        deserialize(input) {
            this.deserializeAs_FightStartingPositions(input);
        }

        serializeAs_FightStartingPositions(ouput) {
            output.writeShort(this.positionsForChallengers.length);
            for (var _i1 = 0; _i1 < this.positionsForChallengers.length; _i1++) {
                if (this.positionsForChallengers[_i1] < 0 || this.positionsForChallengers[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForChallengers[_i1] + ") on element 1 (starting at 1) of positionsForChallengers.");
                }
                output.writeVarShort(this.positionsForChallengers[_i1]);
            }
            output.writeShort(this.positionsForDefenders.length);
            for (var _i2 = 0; _i2 < this.positionsForDefenders.length; _i2++) {
                if (this.positionsForDefenders[_i2] < 0 || this.positionsForDefenders[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForDefenders[_i2] + ") on element 2 (starting at 1) of positionsForDefenders.");
                }
                output.writeVarShort(this.positionsForDefenders[_i2]);
            }
        }

        deserializeAs_FightStartingPositions(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _positionsForChallengersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _positionsForChallengersLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of positionsForChallengers.");
                }
                this.positionsForChallengers.push(_val1);
            }
            var _positionsForDefendersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _positionsForDefendersLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of positionsForDefenders.");
                }
                this.positionsForDefenders.push(_val2);
            }
        }
    }
    class FightTeamLightInformations extends AbstractFightTeamInformations {
        constructor(_super) {
            super()
            this.teamMembersCount = 0;
            this.meanLevel = 0;
            this.hasFriend = false;
            this.hasGuildMember = false;
            this.hasAllianceMember = false;
            this.hasGroupMember = false;
            this.hasMyTaxCollector = false;
            this.ID = 2652;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.teamMembersCount = 0;
            this.meanLevel = 0;
            this.hasFriend = false;
            this.hasGuildMember = false;
            this.hasAllianceMember = false;
            this.hasGroupMember = false;
            this.hasMyTaxCollector = false;
        }

        serialize(output) {
            this.serializeAs_FightTeamLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamLightInformations(input);
        }

        serializeAs_FightTeamLightInformations(ouput) {
            this.serializeAs_AbstractFightTeamInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.hasFriend);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasGuildMember);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.hasAllianceMember);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.hasGroupMember);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.hasMyTaxCollector);
            output.writeByte(_box0);
            if (this.teamMembersCount < 0) {
                throw new Error("Forbidden value (" + this.teamMembersCount + ") on element teamMembersCount.");
            }
            output.writeByte(this.teamMembersCount);
            if (this.meanLevel < 0) {
                throw new Error("Forbidden value (" + this.meanLevel + ") on element meanLevel.");
            }
            output.writeVarInt(this.meanLevel);
        }

        deserializeAs_FightTeamLightInformations(input) {
            super.deserialize(input);
            var _box0 = input.readByte();
            this.hasFriend = BooleanByteWrapper.getFlag(_box0, 0);
            this.hasGuildMember = BooleanByteWrapper.getFlag(_box0, 1);
            this.hasAllianceMember = BooleanByteWrapper.getFlag(_box0, 2);
            this.hasGroupMember = BooleanByteWrapper.getFlag(_box0, 3);
            this.hasMyTaxCollector = BooleanByteWrapper.getFlag(_box0, 4);
            this.teamMembersCount = input.readByte();
            if (this.teamMembersCount < 0) {
                throw new Error("Forbidden value (" + this.teamMembersCount + ") on element of FightTeamLightInformations.teamMembersCount.");
            }
            this.meanLevel = input.readVarUhInt();
            if (this.meanLevel < 0) {
                throw new Error("Forbidden value (" + this.meanLevel + ") on element of FightTeamLightInformations.meanLevel.");
            }
        }
    }
    class FightTeamMemberInformations {
        constructor() {

            this.id = 0;
            this.ID = 1196;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        serialize(output) {
            this.serializeAs_FightTeamMemberInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamMemberInformations(input);
        }

        serializeAs_FightTeamMemberInformations(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        }

        deserializeAs_FightTeamMemberInformations(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of FightTeamMemberInformations.id.");
            }
        }
    }
    class FightTeamMemberCharacterInformations extends FightTeamMemberInformations {
        constructor(_super) {
            super()
            this.name = "";
            this.level = 0;
            this.ID = 3236;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_FightTeamMemberCharacterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamMemberCharacterInformations(input);
        }

        serializeAs_FightTeamMemberCharacterInformations(ouput) {
            this.serializeAs_FightTeamMemberInformations(this, output);
            output.writeUTF(this.name);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        }

        deserializeAs_FightTeamMemberCharacterInformations(input) {
            super.deserialize(input);
            this.name = input.readUTF();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberCharacterInformations.level.");
            }
        }
    }
    class FightTeamMemberEntityInformation extends FightTeamMemberInformations {
        constructor(_super) {
            super()
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
            this.ID = 4058;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
        }

        serialize(output) {
            this.serializeAs_FightTeamMemberEntityInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamMemberEntityInformation(input);
        }

        serializeAs_FightTeamMemberEntityInformation(ouput) {
            this.serializeAs_FightTeamMemberInformations(this, output);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
        }

        deserializeAs_FightTeamMemberEntityInformation(input) {
            super.deserialize(input);
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of FightTeamMemberEntityInformation.entityModelId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of FightTeamMemberEntityInformation.level.");
            }
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of FightTeamMemberEntityInformation.masterId.");
            }
        }
    }
    class FightTeamMemberMonsterInformations extends FightTeamMemberInformations {
        constructor(_super) {
            super()
            this.monsterId = 0;
            this.grade = 0;
            this.ID = 3080;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.monsterId = 0;
            this.grade = 0;
        }

        serialize(output) {
            this.serializeAs_FightTeamMemberMonsterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamMemberMonsterInformations(input);
        }

        serializeAs_FightTeamMemberMonsterInformations(ouput) {
            this.serializeAs_FightTeamMemberInformations(this, output);
            output.writeInt(this.monsterId);
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeByte(this.grade);
        }

        deserializeAs_FightTeamMemberMonsterInformations(input) {
            super.deserialize(input);
            this.monsterId = input.readInt();
            this.grade = input.readByte();
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element of FightTeamMemberMonsterInformations.grade.");
            }
        }
    }
    class FightTeamMemberTaxCollectorInformations extends FightTeamMemberInformations {
        constructor(_super) {
            super()
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.groupId = 0;
            this.uid = 0;
            this.ID = 9811;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.groupId = 0;
            this.uid = 0;
        }

        serialize(output) {
            this.serializeAs_FightTeamMemberTaxCollectorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamMemberTaxCollectorInformations(input);
        }

        serializeAs_FightTeamMemberTaxCollectorInformations(ouput) {
            this.serializeAs_FightTeamMemberInformations(this, output);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.groupId < 0) {
                throw new Error("Forbidden value (" + this.groupId + ") on element groupId.");
            }
            output.writeVarInt(this.groupId);
            if (this.uid < 0 || this.uid > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeDouble(this.uid);
        }

        deserializeAs_FightTeamMemberTaxCollectorInformations(input) {
            super.deserialize(input);
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of FightTeamMemberTaxCollectorInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of FightTeamMemberTaxCollectorInformations.lastNameId.");
            }
            this.groupId = input.readVarUhInt();
            if (this.groupId < 0) {
                throw new Error("Forbidden value (" + this.groupId + ") on element of FightTeamMemberTaxCollectorInformations.groupId.");
            }
            this.uid = input.readDouble();
            if (this.uid < 0 || this.uid > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uid + ") on element of FightTeamMemberTaxCollectorInformations.uid.");
            }
        }
    }
    class FightTeamMemberWithAllianceCharacterInformations extends FightTeamMemberCharacterInformations {
        constructor(_super) {
            super()
            this.allianceInfos = new BasicAllianceInformations();
            this.ID = 4930;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInfos = new BasicAllianceInformations();
        }

        serialize(output) {
            this.serializeAs_FightTeamMemberWithAllianceCharacterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightTeamMemberWithAllianceCharacterInformations(input);
        }

        serializeAs_FightTeamMemberWithAllianceCharacterInformations(ouput) {
            this.serializeAs_FightTeamMemberCharacterInformations(this, output);
            this.allianceInfos.serializeAs_BasicAllianceInformations(output);
        }

        deserializeAs_FightTeamMemberWithAllianceCharacterInformations(input) {
            super.deserialize(input);
            this.allianceInfos = new BasicAllianceInformations();
            this.allianceInfos.deserialize(input);
        }
    }
    class GameContextBasicSpawnInformation {
        constructor() {

            this.teamId = 2;
            this.alive = false;
            this.informations = new GameContextActorPositionInformations();
            this.ID = 8501;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.teamId = 2;
            this.alive = false;
            this.informations = new GameContextActorPositionInformations();
        }

        serialize(output) {
            this.serializeAs_GameContextBasicSpawnInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextBasicSpawnInformation(input);
        }

        serializeAs_GameContextBasicSpawnInformation(ouput) {
            output.writeByte(this.teamId);
            output.writeBoolean(this.alive);
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        }

        deserializeAs_GameContextBasicSpawnInformation(input) {
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameContextBasicSpawnInformation.teamId.");
            }
            this.alive = input.readBoolean();
            var _id3 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameContextActorPositionInformations, _id3);
            this.informations.deserialize(input);
        }
    }
    class GameContextSummonsInformation {
        constructor() {

            this.spawnInformation = new SpawnInformation();
            this.wave = 0;
            this.look = new EntityLook();
            this.stats = new GameFightCharacteristics();
            this.summons = [];
            this.ID = 3745;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spawnInformation = new SpawnInformation();
            this.wave = 0;
            this.look = new EntityLook();
            this.stats = new GameFightCharacteristics();
            this.summons = [];
        }

        serialize(output) {
            this.serializeAs_GameContextSummonsInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextSummonsInformation(input);
        }

        serializeAs_GameContextSummonsInformation(ouput) {
            output.writeShort(this.spawnInformation.getTypeId());
            this.spawnInformation.serialize(output);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            this.look.serializeAs_EntityLook(output);
            output.writeShort(this.stats.getTypeId());
            this.stats.serialize(output);
            output.writeShort(this.summons.length);
            for (var _i5 = 0; _i5 < this.summons.length; _i5++) {
                output.writeShort((this.summons[_i5]).getTypeId());
                (this.summons[_i5]).serialize(output);
            }
        }

        deserializeAs_GameContextSummonsInformation(input) {
            var _id5 = 0;
            var _item5 = null;
            var _id1 = input.readUnsignedShort();
            this.spawnInformation = ProtocolTypeManager.getInstance(SpawnInformation, _id1);
            this.spawnInformation.deserialize(input);
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of GameContextSummonsInformation.wave.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
            var _id4 = input.readUnsignedShort();
            this.stats = ProtocolTypeManager.getInstance(GameFightCharacteristics, _id4);
            this.stats.deserialize(input);
            var _summonsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _summonsLen; _i5++) {
                _id5 = input.readUnsignedShort();
                _item5 = ProtocolTypeManager.getInstance(GameContextBasicSpawnInformation, _id5);
                _item5.deserialize(input);
                this.summons.push(_item5);
            }
        }
    }
    class GameContextActorPositionInformations {
        constructor() {

            this.contextualId = 0;
            this.disposition = new EntityDispositionInformations();
            this.ID = 4277;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.contextualId = 0;
            this.disposition = new EntityDispositionInformations();
        }

        serialize(output) {
            this.serializeAs_GameContextActorPositionInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextActorPositionInformations(input);
        }

        serializeAs_GameContextActorPositionInformations(ouput) {
            if (this.contextualId < -9007199254740992 || this.contextualId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.contextualId + ") on element contextualId.");
            }
            output.writeDouble(this.contextualId);
            output.writeShort(this.disposition.getTypeId());
            this.disposition.serialize(output);
        }

        deserializeAs_GameContextActorPositionInformations(input) {
            this.contextualId = input.readDouble();
            if (this.contextualId < -9007199254740992 || this.contextualId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.contextualId + ") on element of GameContextActorPositionInformations.contextualId.");
            }
            var _id2 = input.readUnsignedShort();
            this.disposition = ProtocolTypeManager.getInstance(EntityDispositionInformations, _id2);
            this.disposition.deserialize(input);
        }
    }
    class GameContextActorInformations extends GameContextActorPositionInformations {
        constructor(_super) {
            super()
            this.look = new EntityLook();
            this.ID = 7738;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.look = new EntityLook();
        }

        serialize(output) {
            this.serializeAs_GameContextActorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextActorInformations(input);
        }

        serializeAs_GameContextActorInformations(ouput) {
            this.serializeAs_GameContextActorPositionInformations(this, output);
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_GameContextActorInformations(input) {
            super.deserialize(input);
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class GameFightFighterInformations extends GameContextActorInformations {
        constructor(_super) {
            super()
            this.spawnInfo = new GameContextBasicSpawnInformation();
            this.wave = 0;
            this.stats = new GameFightCharacteristics();
            this.previousPositions = [];
            this.ID = 486;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spawnInfo = new GameContextBasicSpawnInformation();
            this.wave = 0;
            this.stats = new GameFightCharacteristics();
            this.previousPositions = [];
        }

        serialize(output) {
            this.serializeAs_GameFightFighterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterInformations(input);
        }

        serializeAs_GameFightFighterInformations(ouput) {
            this.serializeAs_GameContextActorInformations(this, output);
            this.spawnInfo.serializeAs_GameContextBasicSpawnInformation(output);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            output.writeShort(this.stats.getTypeId());
            this.stats.serialize(output);
            output.writeShort(this.previousPositions.length);
            for (var _i4 = 0; _i4 < this.previousPositions.length; _i4++) {
                if (this.previousPositions[_i4] < 0 || this.previousPositions[_i4] > 559) {
                    throw new Error("Forbidden value (" + this.previousPositions[_i4] + ") on element 4 (starting at 1) of previousPositions.");
                }
                output.writeVarShort(this.previousPositions[_i4]);
            }
        }

        deserializeAs_GameFightFighterInformations(input) {
            var _val4 = 0;
            super.deserialize(input);
            this.spawnInfo = new GameContextBasicSpawnInformation();
            this.spawnInfo.deserialize(input);
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of GameFightFighterInformations.wave.");
            }
            var _id3 = input.readUnsignedShort();
            this.stats = ProtocolTypeManager.getInstance(GameFightCharacteristics, _id3);
            this.stats.deserialize(input);
            var _previousPositionsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _previousPositionsLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0 || _val4 > 559) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of previousPositions.");
                }
                this.previousPositions.push(_val4);
            }
        }
    }
    class GameFightAIInformations extends GameFightFighterInformations {
        constructor(_super) {
            super()

            this.ID = 4653;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_GameFightAIInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightAIInformations(input);
        }

        serializeAs_GameFightAIInformations(ouput) {
            this.serializeAs_GameFightFighterInformations(this, output);
        }

        deserializeAs_GameFightAIInformations(input) {
            super.deserialize(input);
        }
    }
    class GameFightFighterNamedInformations extends GameFightFighterInformations {
        constructor(_super) {
            super()
            this.name = "";
            this.status = new PlayerStatus();
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.hiddenInPrefight = false;
            this.ID = 5498;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.status = new PlayerStatus();
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.hiddenInPrefight = false;
        }

        serialize(output) {
            this.serializeAs_GameFightFighterNamedInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterNamedInformations(input);
        }

        serializeAs_GameFightFighterNamedInformations(ouput) {
            this.serializeAs_GameFightFighterInformations(this, output);
            output.writeUTF(this.name);
            this.status.serializeAs_PlayerStatus(output);
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
            output.writeBoolean(this.hiddenInPrefight);
        }

        deserializeAs_GameFightFighterNamedInformations(input) {
            super.deserialize(input);
            this.name = input.readUTF();
            this.status = new PlayerStatus();
            this.status.deserialize(input);
            this.leagueId = input.readVarShort();
            this.ladderPosition = input.readInt();
            this.hiddenInPrefight = input.readBoolean();
        }
    }
    class GameFightCharacterInformations extends GameFightFighterNamedInformations {
        constructor(_super) {
            super()
            this.level = 0;
            this.alignmentInfos = new ActorAlignmentInformations();
            this.breed = 0;
            this.sex = false;
            this.ID = 1332;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.level = 0;
            this.alignmentInfos = new ActorAlignmentInformations();
            this.breed = 0;
            this.sex = false;
        }

        serialize(output) {
            this.serializeAs_GameFightCharacterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightCharacterInformations(input);
        }

        serializeAs_GameFightCharacterInformations(ouput) {
            this.serializeAs_GameFightFighterNamedInformations(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(output);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
        }

        deserializeAs_GameFightCharacterInformations(input) {
            super.deserialize(input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightCharacterInformations.level.");
            }
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(input);
            this.breed = input.readByte();
            this.sex = input.readBoolean();
        }
    }
    class GameFightCharacteristics {
        constructor() {

            this.characteristics = new CharacterCharacteristics();
            this.summoner = 0;
            this.summoned = false;
            this.invisibilityState = 0;
            this.ID = 2892;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characteristics = new CharacterCharacteristics();
            this.summoner = 0;
            this.summoned = false;
            this.invisibilityState = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightCharacteristics(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightCharacteristics(input);
        }

        serializeAs_GameFightCharacteristics(ouput) {
            this.characteristics.serializeAs_CharacterCharacteristics(output);
            if (this.summoner < -9007199254740992 || this.summoner > 9007199254740992) {
                throw new Error("Forbidden value (" + this.summoner + ") on element summoner.");
            }
            output.writeDouble(this.summoner);
            output.writeBoolean(this.summoned);
            output.writeByte(this.invisibilityState);
        }

        deserializeAs_GameFightCharacteristics(input) {
            this.characteristics = new CharacterCharacteristics();
            this.characteristics.deserialize(input);
            this.summoner = input.readDouble();
            if (this.summoner < -9007199254740992 || this.summoner > 9007199254740992) {
                throw new Error("Forbidden value (" + this.summoner + ") on element of GameFightCharacteristics.summoner.");
            }
            this.summoned = input.readBoolean();
            this.invisibilityState = input.readByte();
            if (this.invisibilityState < 0) {
                throw new Error("Forbidden value (" + this.invisibilityState + ") on element of GameFightCharacteristics.invisibilityState.");
            }
        }
    }
    class GameFightEffectTriggerCount {
        constructor() {

            this.effectId = 0;
            this.targetId = 0;
            this.count = 0;
            this.ID = 4051;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.effectId = 0;
            this.targetId = 0;
            this.count = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightEffectTriggerCount(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightEffectTriggerCount(input);
        }

        serializeAs_GameFightEffectTriggerCount(ouput) {
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element effectId.");
            }
            output.writeVarInt(this.effectId);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.count < 0) {
                throw new Error("Forbidden value (" + this.count + ") on element count.");
            }
            output.writeShort(this.count);
        }

        deserializeAs_GameFightEffectTriggerCount(input) {
            this.effectId = input.readVarUhInt();
            if (this.effectId < 0) {
                throw new Error("Forbidden value (" + this.effectId + ") on element of GameFightEffectTriggerCount.effectId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameFightEffectTriggerCount.targetId.");
            }
            this.count = input.readShort();
            if (this.count < 0) {
                throw new Error("Forbidden value (" + this.count + ") on element of GameFightEffectTriggerCount.count.");
            }
        }
    }
    class GameFightEntityInformation extends GameFightFighterInformations {
        constructor(_super) {
            super()
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
            this.ID = 7538;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityModelId = 0;
            this.level = 0;
            this.masterId = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightEntityInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightEntityInformation(input);
        }

        serializeAs_GameFightEntityInformation(ouput) {
            this.serializeAs_GameFightFighterInformations(this, output);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
        }

        deserializeAs_GameFightEntityInformation(input) {
            super.deserialize(input);
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of GameFightEntityInformation.entityModelId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightEntityInformation.level.");
            }
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of GameFightEntityInformation.masterId.");
            }
        }
    }
    class GameFightFighterLightInformations {
        constructor() {

            this.id = 0;
            this.wave = 0;
            this.level = 0;
            this.breed = 0;
            this.sex = false;
            this.alive = false;
            this.ID = 7874;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.wave = 0;
            this.level = 0;
            this.breed = 0;
            this.sex = false;
            this.alive = false;
        }

        serialize(output) {
            this.serializeAs_GameFightFighterLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterLightInformations(input);
        }

        serializeAs_GameFightFighterLightInformations(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.alive);
            output.writeByte(_box0);
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element wave.");
            }
            output.writeByte(this.wave);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeByte(this.breed);
        }

        deserializeAs_GameFightFighterLightInformations(input) {
            var _box0 = input.readByte();
            this.sex = BooleanByteWrapper.getFlag(_box0, 0);
            this.alive = BooleanByteWrapper.getFlag(_box0, 1);
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightFighterLightInformations.id.");
            }
            this.wave = input.readByte();
            if (this.wave < 0) {
                throw new Error("Forbidden value (" + this.wave + ") on element of GameFightFighterLightInformations.wave.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameFightFighterLightInformations.level.");
            }
            this.breed = input.readByte();
        }
    }
    class GameFightFighterEntityLightInformation extends GameFightFighterLightInformations {
        constructor(_super) {
            super()
            this.entityModelId = 0;
            this.masterId = 0;
            this.ID = 8775;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityModelId = 0;
            this.masterId = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightFighterEntityLightInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterEntityLightInformation(input);
        }

        serializeAs_GameFightFighterEntityLightInformation(ouput) {
            this.serializeAs_GameFightFighterLightInformations(this, output);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
        }

        deserializeAs_GameFightFighterEntityLightInformation(input) {
            super.deserialize(input);
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of GameFightFighterEntityLightInformation.entityModelId.");
            }
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of GameFightFighterEntityLightInformation.masterId.");
            }
        }
    }
    class GameFightFighterMonsterLightInformations extends GameFightFighterLightInformations {
        constructor(_super) {
            super()
            this.creatureGenericId = 0;
            this.ID = 9343;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.creatureGenericId = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightFighterMonsterLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterMonsterLightInformations(input);
        }

        serializeAs_GameFightFighterMonsterLightInformations(ouput) {
            this.serializeAs_GameFightFighterLightInformations(this, output);
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
            }
            output.writeVarShort(this.creatureGenericId);
        }

        deserializeAs_GameFightFighterMonsterLightInformations(input) {
            super.deserialize(input);
            this.creatureGenericId = input.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightFighterMonsterLightInformations.creatureGenericId.");
            }
        }
    }
    class GameFightFighterNamedLightInformations extends GameFightFighterLightInformations {
        constructor(_super) {
            super()
            this.name = "";
            this.ID = 4905;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
        }

        serialize(output) {
            this.serializeAs_GameFightFighterNamedLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterNamedLightInformations(input);
        }

        serializeAs_GameFightFighterNamedLightInformations(ouput) {
            this.serializeAs_GameFightFighterLightInformations(this, output);
            output.writeUTF(this.name);
        }

        deserializeAs_GameFightFighterNamedLightInformations(input) {
            super.deserialize(input);
            this.name = input.readUTF();
        }
    }
    class GameFightFighterTaxCollectorLightInformations extends GameFightFighterLightInformations {
        constructor(_super) {
            super()
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.ID = 9215;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstNameId = 0;
            this.lastNameId = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightFighterTaxCollectorLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightFighterTaxCollectorLightInformations(input);
        }

        serializeAs_GameFightFighterTaxCollectorLightInformations(ouput) {
            this.serializeAs_GameFightFighterLightInformations(this, output);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
        }

        deserializeAs_GameFightFighterTaxCollectorLightInformations(input) {
            super.deserialize(input);
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of GameFightFighterTaxCollectorLightInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of GameFightFighterTaxCollectorLightInformations.lastNameId.");
            }
        }
    }
    class GameFightMonsterInformations extends GameFightAIInformations {
        constructor(_super) {
            super()
            this.creatureGenericId = 0;
            this.creatureGrade = 0;
            this.creatureLevel = 0;
            this.ID = 6284;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.creatureGenericId = 0;
            this.creatureGrade = 0;
            this.creatureLevel = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightMonsterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightMonsterInformations(input);
        }

        serializeAs_GameFightMonsterInformations(ouput) {
            this.serializeAs_GameFightAIInformations(this, output);
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element creatureGenericId.");
            }
            output.writeVarShort(this.creatureGenericId);
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element creatureGrade.");
            }
            output.writeByte(this.creatureGrade);
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element creatureLevel.");
            }
            output.writeShort(this.creatureLevel);
        }

        deserializeAs_GameFightMonsterInformations(input) {
            super.deserialize(input);
            this.creatureGenericId = input.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error("Forbidden value (" + this.creatureGenericId + ") on element of GameFightMonsterInformations.creatureGenericId.");
            }
            this.creatureGrade = input.readByte();
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element of GameFightMonsterInformations.creatureGrade.");
            }
            this.creatureLevel = input.readShort();
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element of GameFightMonsterInformations.creatureLevel.");
            }
        }
    }
    class GameFightMonsterWithAlignmentInformations extends GameFightMonsterInformations {
        constructor(_super) {
            super()
            this.alignmentInfos = new ActorAlignmentInformations();
            this.ID = 7765;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alignmentInfos = new ActorAlignmentInformations();
        }

        serialize(output) {
            this.serializeAs_GameFightMonsterWithAlignmentInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightMonsterWithAlignmentInformations(input);
        }

        serializeAs_GameFightMonsterWithAlignmentInformations(ouput) {
            this.serializeAs_GameFightMonsterInformations(this, output);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(output);
        }

        deserializeAs_GameFightMonsterWithAlignmentInformations(input) {
            super.deserialize(input);
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(input);
        }
    }
    class GameFightMutantInformations extends GameFightFighterNamedInformations {
        constructor(_super) {
            super()
            this.powerLevel = 0;
            this.ID = 2950;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.powerLevel = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightMutantInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightMutantInformations(input);
        }

        serializeAs_GameFightMutantInformations(ouput) {
            this.serializeAs_GameFightFighterNamedInformations(this, output);
            if (this.powerLevel < 0) {
                throw new Error("Forbidden value (" + this.powerLevel + ") on element powerLevel.");
            }
            output.writeByte(this.powerLevel);
        }

        deserializeAs_GameFightMutantInformations(input) {
            super.deserialize(input);
            this.powerLevel = input.readByte();
            if (this.powerLevel < 0) {
                throw new Error("Forbidden value (" + this.powerLevel + ") on element of GameFightMutantInformations.powerLevel.");
            }
        }
    }
    class GameFightResumeSlaveInfo {
        constructor() {

            this.slaveId = 0;
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
            this.ID = 6321;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.slaveId = 0;
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightResumeSlaveInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightResumeSlaveInfo(input);
        }

        serializeAs_GameFightResumeSlaveInfo(ouput) {
            if (this.slaveId < -9007199254740992 || this.slaveId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
            }
            output.writeDouble(this.slaveId);
            output.writeShort(this.spellCooldowns.length);
            for (var _i2 = 0; _i2 < this.spellCooldowns.length; _i2++) {
                (this.spellCooldowns[_i2]).serializeAs_GameFightSpellCooldown(output);
            }
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element summonCount.");
            }
            output.writeByte(this.summonCount);
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element bombCount.");
            }
            output.writeByte(this.bombCount);
        }

        deserializeAs_GameFightResumeSlaveInfo(input) {
            var _item2 = null;
            this.slaveId = input.readDouble();
            if (this.slaveId < -9007199254740992 || this.slaveId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element of GameFightResumeSlaveInfo.slaveId.");
            }
            var _spellCooldownsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellCooldownsLen; _i2++) {
                _item2 = new GameFightSpellCooldown();
                _item2.deserialize(input);
                this.spellCooldowns.push(_item2);
            }
            this.summonCount = input.readByte();
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element of GameFightResumeSlaveInfo.summonCount.");
            }
            this.bombCount = input.readByte();
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeSlaveInfo.bombCount.");
            }
        }
    }
    class GameFightSpellCooldown {
        constructor() {

            this.spellId = 0;
            this.cooldown = 0;
            this.ID = 8809;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.cooldown = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightSpellCooldown(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightSpellCooldown(input);
        }

        serializeAs_GameFightSpellCooldown(ouput) {
            output.writeInt(this.spellId);
            if (this.cooldown < 0) {
                throw new Error("Forbidden value (" + this.cooldown + ") on element cooldown.");
            }
            output.writeByte(this.cooldown);
        }

        deserializeAs_GameFightSpellCooldown(input) {
            this.spellId = input.readInt();
            this.cooldown = input.readByte();
            if (this.cooldown < 0) {
                throw new Error("Forbidden value (" + this.cooldown + ") on element of GameFightSpellCooldown.cooldown.");
            }
        }
    }
    class GameFightTaxCollectorInformations extends GameFightAIInformations {
        constructor(_super) {
            super()
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.ID = 5929;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstNameId = 0;
            this.lastNameId = 0;
        }

        serialize(output) {
            this.serializeAs_GameFightTaxCollectorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTaxCollectorInformations(input);
        }

        serializeAs_GameFightTaxCollectorInformations(ouput) {
            this.serializeAs_GameFightAIInformations(this, output);
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
        }

        deserializeAs_GameFightTaxCollectorInformations(input) {
            super.deserialize(input);
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of GameFightTaxCollectorInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of GameFightTaxCollectorInformations.lastNameId.");
            }
        }
    }
    class SpawnCharacterInformation extends SpawnInformation {
        constructor(_super) {
            super()
            this.name = "";
            this.level = 0;
            this.ID = 6545;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_SpawnCharacterInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SpawnCharacterInformation(input);
        }

        serializeAs_SpawnCharacterInformation(ouput) {
            this.serializeAs_SpawnInformation(this, output);
            output.writeUTF(this.name);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        }

        deserializeAs_SpawnCharacterInformation(input) {
            super.deserialize(input);
            this.name = input.readUTF();
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of SpawnCharacterInformation.level.");
            }
        }
    }
    class SpawnCompanionInformation extends SpawnInformation {
        constructor(_super) {
            super()
            this.modelId = 0;
            this.level = 0;
            this.summonerId = 0;
            this.ownerId = 0;
            this.ID = 7699;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.modelId = 0;
            this.level = 0;
            this.summonerId = 0;
            this.ownerId = 0;
        }

        serialize(output) {
            this.serializeAs_SpawnCompanionInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SpawnCompanionInformation(input);
        }

        serializeAs_SpawnCompanionInformation(ouput) {
            this.serializeAs_SpawnInformation(this, output);
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeByte(this.modelId);
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.summonerId < -9007199254740992 || this.summonerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.summonerId + ") on element summonerId.");
            }
            output.writeDouble(this.summonerId);
            if (this.ownerId < -9007199254740992 || this.ownerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
            }
            output.writeDouble(this.ownerId);
        }

        deserializeAs_SpawnCompanionInformation(input) {
            super.deserialize(input);
            this.modelId = input.readByte();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of SpawnCompanionInformation.modelId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 1 || this.level > 200) {
                throw new Error("Forbidden value (" + this.level + ") on element of SpawnCompanionInformation.level.");
            }
            this.summonerId = input.readDouble();
            if (this.summonerId < -9007199254740992 || this.summonerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.summonerId + ") on element of SpawnCompanionInformation.summonerId.");
            }
            this.ownerId = input.readDouble();
            if (this.ownerId < -9007199254740992 || this.ownerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element of SpawnCompanionInformation.ownerId.");
            }
        }
    }
    class SpawnMonsterInformation extends BaseSpawnMonsterInformation {
        constructor(_super) {
            super()
            this.creatureGrade = 0;
            this.ID = 3481;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.creatureGrade = 0;
        }

        serialize(output) {
            this.serializeAs_SpawnMonsterInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SpawnMonsterInformation(input);
        }

        serializeAs_SpawnMonsterInformation(ouput) {
            this.serializeAs_BaseSpawnMonsterInformation(this, output);
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element creatureGrade.");
            }
            output.writeByte(this.creatureGrade);
        }

        deserializeAs_SpawnMonsterInformation(input) {
            super.deserialize(input);
            this.creatureGrade = input.readByte();
            if (this.creatureGrade < 0) {
                throw new Error("Forbidden value (" + this.creatureGrade + ") on element of SpawnMonsterInformation.creatureGrade.");
            }
        }
    }
    class SpawnScaledMonsterInformation extends BaseSpawnMonsterInformation {
        constructor(_super) {
            super()
            this.creatureLevel = 0;
            this.ID = 606;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.creatureLevel = 0;
        }

        serialize(output) {
            this.serializeAs_SpawnScaledMonsterInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SpawnScaledMonsterInformation(input);
        }

        serializeAs_SpawnScaledMonsterInformation(ouput) {
            this.serializeAs_BaseSpawnMonsterInformation(this, output);
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element creatureLevel.");
            }
            output.writeShort(this.creatureLevel);
        }

        deserializeAs_SpawnScaledMonsterInformation(input) {
            super.deserialize(input);
            this.creatureLevel = input.readShort();
            if (this.creatureLevel < 0) {
                throw new Error("Forbidden value (" + this.creatureLevel + ") on element of SpawnScaledMonsterInformation.creatureLevel.");
            }
        }
    }
    class FightEntityDispositionInformations extends EntityDispositionInformations {
        constructor(_super) {
            super()
            this.carryingCharacterId = 0;
            this.ID = 8497;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.carryingCharacterId = 0;
        }

        serialize(output) {
            this.serializeAs_FightEntityDispositionInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FightEntityDispositionInformations(input);
        }

        serializeAs_FightEntityDispositionInformations(ouput) {
            this.serializeAs_EntityDispositionInformations(this, output);
            if (this.carryingCharacterId < -9007199254740992 || this.carryingCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.carryingCharacterId + ") on element carryingCharacterId.");
            }
            output.writeDouble(this.carryingCharacterId);
        }

        deserializeAs_FightEntityDispositionInformations(input) {
            super.deserialize(input);
            this.carryingCharacterId = input.readDouble();
            if (this.carryingCharacterId < -9007199254740992 || this.carryingCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.carryingCharacterId + ") on element of FightEntityDispositionInformations.carryingCharacterId.");
            }
        }
    }
    class GameRolePlayActorInformations extends GameContextActorInformations {
        constructor(_super) {
            super()

            this.ID = 9162;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_GameRolePlayActorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayActorInformations(input);
        }

        serializeAs_GameRolePlayActorInformations(ouput) {
            this.serializeAs_GameContextActorInformations(this, output);
        }

        deserializeAs_GameRolePlayActorInformations(input) {
            super.deserialize(input);
        }
    }
    class GameRolePlayTaxCollectorInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.identification = new TaxCollectorStaticInformations();
            this.taxCollectorAttack = 0;
            this.ID = 7225;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.identification = new TaxCollectorStaticInformations();
            this.taxCollectorAttack = 0;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayTaxCollectorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayTaxCollectorInformations(input);
        }

        serializeAs_GameRolePlayTaxCollectorInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.identification.getTypeId());
            this.identification.serialize(output);
            output.writeInt(this.taxCollectorAttack);
        }

        deserializeAs_GameRolePlayTaxCollectorInformations(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.identification = ProtocolTypeManager.getInstance(TaxCollectorStaticInformations, _id1);
            this.identification.deserialize(input);
            this.taxCollectorAttack = input.readInt();
        }
    }
    class IdentifiedEntityDispositionInformations extends EntityDispositionInformations {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 3464;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        serialize(output) {
            this.serializeAs_IdentifiedEntityDispositionInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentifiedEntityDispositionInformations(input);
        }

        serializeAs_IdentifiedEntityDispositionInformations(ouput) {
            this.serializeAs_EntityDispositionInformations(this, output);
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        }

        deserializeAs_IdentifiedEntityDispositionInformations(input) {
            super.deserialize(input);
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of IdentifiedEntityDispositionInformations.id.");
            }
        }
    }
    class MapCoordinates {
        constructor() {

            this.worldX = 0;
            this.worldY = 0;
            this.ID = 5969;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.worldX = 0;
            this.worldY = 0;
        }

        serialize(output) {
            this.serializeAs_MapCoordinates(output);
        }

        deserialize(input) {
            this.deserializeAs_MapCoordinates(input);
        }

        serializeAs_MapCoordinates(ouput) {
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
        }

        deserializeAs_MapCoordinates(input) {
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of MapCoordinates.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of MapCoordinates.worldY.");
            }
        }
    }
    class MapCoordinatesAndId extends MapCoordinates {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.ID = 3053;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
        }

        serialize(output) {
            this.serializeAs_MapCoordinatesAndId(output);
        }

        deserialize(input) {
            this.deserializeAs_MapCoordinatesAndId(input);
        }

        serializeAs_MapCoordinatesAndId(ouput) {
            this.serializeAs_MapCoordinates(this, output);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_MapCoordinatesAndId(input) {
            super.deserialize(input);
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapCoordinatesAndId.mapId.");
            }
        }
    }
    class MapCoordinatesExtended extends MapCoordinatesAndId {
        constructor(_super) {
            super()
            this.subAreaId = 0;
            this.ID = 7628;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaId = 0;
        }

        serialize(output) {
            this.serializeAs_MapCoordinatesExtended(output);
        }

        deserialize(input) {
            this.deserializeAs_MapCoordinatesExtended(input);
        }

        serializeAs_MapCoordinatesExtended(ouput) {
            this.serializeAs_MapCoordinatesAndId(this, output);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        }

        deserializeAs_MapCoordinatesExtended(input) {
            super.deserialize(input);
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of MapCoordinatesExtended.subAreaId.");
            }
        }
    }
    class AlignmentWarEffortInformation {
        constructor() {

            this.alignmentSide = 0;
            this.alignmentWarEffort = 0;
            this.ID = 6153;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alignmentSide = 0;
            this.alignmentWarEffort = 0;
        }

        serialize(output) {
            this.serializeAs_AlignmentWarEffortInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentWarEffortInformation(input);
        }

        serializeAs_AlignmentWarEffortInformation(ouput) {
            output.writeByte(this.alignmentSide);
            if (this.alignmentWarEffort < 0 || this.alignmentWarEffort > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffort + ") on element alignmentWarEffort.");
            }
            output.writeVarLong(this.alignmentWarEffort);
        }

        deserializeAs_AlignmentWarEffortInformation(input) {
            this.alignmentSide = input.readByte();
            this.alignmentWarEffort = input.readVarUhLong();
            if (this.alignmentWarEffort < 0 || this.alignmentWarEffort > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffort + ") on element of AlignmentWarEffortInformation.alignmentWarEffort.");
            }
        }
    }
    class AbstractSocialGroupInfos {
        constructor() {


            this.ID = 9344;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_AbstractSocialGroupInfos(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractSocialGroupInfos(input);
        }

        serializeAs_AbstractSocialGroupInfos(ouput) {

        }

        deserializeAs_AbstractSocialGroupInfos(input) {

        }
    }
    class BasicAllianceInformations extends AbstractSocialGroupInfos {
        constructor(_super) {
            super()
            this.allianceId = 0;
            this.allianceTag = "";
            this.ID = 1958;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceId = 0;
            this.allianceTag = "";
        }

        serialize(output) {
            this.serializeAs_BasicAllianceInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicAllianceInformations(input);
        }

        serializeAs_BasicAllianceInformations(ouput) {
            this.serializeAs_AbstractSocialGroupInfos(this, output);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
            output.writeUTF(this.allianceTag);
        }

        deserializeAs_BasicAllianceInformations(input) {
            super.deserialize(input);
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of BasicAllianceInformations.allianceId.");
            }
            this.allianceTag = input.readUTF();
        }
    }
    class BasicNamedAllianceInformations extends BasicAllianceInformations {
        constructor(_super) {
            super()
            this.allianceName = "";
            this.ID = 6986;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceName = "";
        }

        serialize(output) {
            this.serializeAs_BasicNamedAllianceInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicNamedAllianceInformations(input);
        }

        serializeAs_BasicNamedAllianceInformations(ouput) {
            this.serializeAs_BasicAllianceInformations(this, output);
            output.writeUTF(this.allianceName);
        }

        deserializeAs_BasicNamedAllianceInformations(input) {
            super.deserialize(input);
            this.allianceName = input.readUTF();
        }
    }
    class AllianceInformation extends BasicNamedAllianceInformations {
        constructor(_super) {
            super()
            this.allianceEmblem = new SocialEmblem();
            this.ID = 3263;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceEmblem = new SocialEmblem();
        }

        serialize(output) {
            this.serializeAs_AllianceInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInformation(input);
        }

        serializeAs_AllianceInformation(ouput) {
            this.serializeAs_BasicNamedAllianceInformations(this, output);
            this.allianceEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_AllianceInformation(input) {
            super.deserialize(input);
            this.allianceEmblem = new SocialEmblem();
            this.allianceEmblem.deserialize(input);
        }
    }
    class AlternativeMonstersInGroupLightInformations {
        constructor() {

            this.playerCount = 0;
            this.monsters = [];
            this.ID = 539;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerCount = 0;
            this.monsters = [];
        }

        serialize(output) {
            this.serializeAs_AlternativeMonstersInGroupLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_AlternativeMonstersInGroupLightInformations(input);
        }

        serializeAs_AlternativeMonstersInGroupLightInformations(ouput) {
            output.writeInt(this.playerCount);
            output.writeShort(this.monsters.length);
            for (var _i2 = 0; _i2 < this.monsters.length; _i2++) {
                (this.monsters[_i2]).serializeAs_MonsterInGroupLightInformations(output);
            }
        }

        deserializeAs_AlternativeMonstersInGroupLightInformations(input) {
            var _item2 = null;
            this.playerCount = input.readInt();
            var _monstersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _monstersLen; _i2++) {
                _item2 = new MonsterInGroupLightInformations();
                _item2.deserialize(input);
                this.monsters.push(_item2);
            }
        }
    }
    class AnomalySubareaInformation {
        constructor() {

            this.subAreaId = 0;
            this.rewardRate = 0;
            this.hasAnomaly = false;
            this.anomalyClosingTime = 0;
            this.ID = 3659;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaId = 0;
            this.rewardRate = 0;
            this.hasAnomaly = false;
            this.anomalyClosingTime = 0;
        }

        serialize(output) {
            this.serializeAs_AnomalySubareaInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AnomalySubareaInformation(input);
        }

        serializeAs_AnomalySubareaInformation(ouput) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeVarShort(this.rewardRate);
            output.writeBoolean(this.hasAnomaly);
            if (this.anomalyClosingTime < 0 || this.anomalyClosingTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.anomalyClosingTime + ") on element anomalyClosingTime.");
            }
            output.writeVarLong(this.anomalyClosingTime);
        }

        deserializeAs_AnomalySubareaInformation(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AnomalySubareaInformation.subAreaId.");
            }
            this.rewardRate = input.readVarShort();
            this.hasAnomaly = input.readBoolean();
            this.anomalyClosingTime = input.readVarUhLong();
            if (this.anomalyClosingTime < 0 || this.anomalyClosingTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.anomalyClosingTime + ") on element of AnomalySubareaInformation.anomalyClosingTime.");
            }
        }
    }
    class AtlasPointsInformations {
        constructor() {

            this.type = 0;
            this.coords = [];
            this.ID = 3823;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
            this.coords = [];
        }

        serialize(output) {
            this.serializeAs_AtlasPointsInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_AtlasPointsInformations(input);
        }

        serializeAs_AtlasPointsInformations(ouput) {
            output.writeByte(this.type);
            output.writeShort(this.coords.length);
            for (var _i2 = 0; _i2 < this.coords.length; _i2++) {
                (this.coords[_i2]).serializeAs_MapCoordinatesExtended(output);
            }
        }

        deserializeAs_AtlasPointsInformations(input) {
            var _item2 = null;
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of AtlasPointsInformations.type.");
            }
            var _coordsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _coordsLen; _i2++) {
                _item2 = new MapCoordinatesExtended();
                _item2.deserialize(input);
                this.coords.push(_item2);
            }
        }
    }
    class BasicGuildInformations extends AbstractSocialGroupInfos {
        constructor(_super) {
            super()
            this.guildId = 0;
            this.guildName = "";
            this.guildLevel = 0;
            this.ID = 8444;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildId = 0;
            this.guildName = "";
            this.guildLevel = 0;
        }

        serialize(output) {
            this.serializeAs_BasicGuildInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicGuildInformations(input);
        }

        serializeAs_BasicGuildInformations(ouput) {
            this.serializeAs_AbstractSocialGroupInfos(this, output);
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
            output.writeUTF(this.guildName);
            if (this.guildLevel < 0 || this.guildLevel > 200) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element guildLevel.");
            }
            output.writeByte(this.guildLevel);
        }

        deserializeAs_BasicGuildInformations(input) {
            super.deserialize(input);
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of BasicGuildInformations.guildId.");
            }
            this.guildName = input.readUTF();
            this.guildLevel = input.readUnsignedByte();
            if (this.guildLevel < 0 || this.guildLevel > 200) {
                throw new Error("Forbidden value (" + this.guildLevel + ") on element of BasicGuildInformations.guildLevel.");
            }
        }
    }
    class BreachBranch {
        constructor() {

            this.room = 0;
            this.element = 0;
            this.bosses = [];
            this.map = 0;
            this.score = 0;
            this.relativeScore = 0;
            this.monsters = [];
            this.ID = 5116;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.room = 0;
            this.element = 0;
            this.bosses = [];
            this.map = 0;
            this.score = 0;
            this.relativeScore = 0;
            this.monsters = [];
        }

        serialize(output) {
            this.serializeAs_BreachBranch(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachBranch(input);
        }

        serializeAs_BreachBranch(ouput) {
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element room.");
            }
            output.writeByte(this.room);
            if (this.element < 0) {
                throw new Error("Forbidden value (" + this.element + ") on element element.");
            }
            output.writeInt(this.element);
            output.writeShort(this.bosses.length);
            for (var _i3 = 0; _i3 < this.bosses.length; _i3++) {
                (this.bosses[_i3]).serializeAs_MonsterInGroupLightInformations(output);
            }
            if (this.map < 0 || this.map > 9007199254740992) {
                throw new Error("Forbidden value (" + this.map + ") on element map.");
            }
            output.writeDouble(this.map);
            output.writeShort(this.score);
            output.writeShort(this.relativeScore);
            output.writeShort(this.monsters.length);
            for (var _i7 = 0; _i7 < this.monsters.length; _i7++) {
                (this.monsters[_i7]).serializeAs_MonsterInGroupLightInformations(output);
            }
        }

        deserializeAs_BreachBranch(input) {
            var _item3 = null;
            var _item7 = null;
            this.room = input.readByte();
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element of BreachBranch.room.");
            }
            this.element = input.readInt();
            if (this.element < 0) {
                throw new Error("Forbidden value (" + this.element + ") on element of BreachBranch.element.");
            }
            var _bossesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _bossesLen; _i3++) {
                _item3 = new MonsterInGroupLightInformations();
                _item3.deserialize(input);
                this.bosses.push(_item3);
            }
            this.map = input.readDouble();
            if (this.map < 0 || this.map > 9007199254740992) {
                throw new Error("Forbidden value (" + this.map + ") on element of BreachBranch.map.");
            }
            this.score = input.readShort();
            this.relativeScore = input.readShort();
            var _monstersLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _monstersLen; _i7++) {
                _item7 = new MonsterInGroupLightInformations();
                _item7.deserialize(input);
                this.monsters.push(_item7);
            }
        }
    }
    class BreachReward {
        constructor() {

            this.id = 0;
            this.buyLocks = [];
            this.buyCriterion = "";
            this.remainingQty = 0;
            this.price = 0;
            this.ID = 3634;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.buyLocks = [];
            this.buyCriterion = "";
            this.remainingQty = 0;
            this.price = 0;
        }

        serialize(output) {
            this.serializeAs_BreachReward(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachReward(input);
        }

        serializeAs_BreachReward(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            output.writeShort(this.buyLocks.length);
            for (var _i2 = 0; _i2 < this.buyLocks.length; _i2++) {
                output.writeByte(this.buyLocks[_i2]);
            }
            output.writeUTF(this.buyCriterion);
            output.writeVarInt(this.remainingQty);
            if (this.price < 0) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarInt(this.price);
        }

        deserializeAs_BreachReward(input) {
            var _val2 = 0;
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of BreachReward.id.");
            }
            var _buyLocksLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _buyLocksLen; _i2++) {
                _val2 = input.readByte();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of buyLocks.");
                }
                this.buyLocks.push(_val2);
            }
            this.buyCriterion = input.readUTF();
            this.remainingQty = input.readVarInt();
            this.price = input.readVarUhInt();
            if (this.price < 0) {
                throw new Error("Forbidden value (" + this.price + ") on element of BreachReward.price.");
            }
        }
    }
    class ExtendedBreachBranch extends BreachBranch {
        constructor(_super) {
            super()
            this.rewards = [];
            this.modifier = 0;
            this.prize = 0;
            this.ID = 1449;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rewards = [];
            this.modifier = 0;
            this.prize = 0;
        }

        serialize(output) {
            this.serializeAs_ExtendedBreachBranch(output);
        }

        deserialize(input) {
            this.deserializeAs_ExtendedBreachBranch(input);
        }

        serializeAs_ExtendedBreachBranch(ouput) {
            this.serializeAs_BreachBranch(this, output);
            output.writeShort(this.rewards.length);
            for (var _i1 = 0; _i1 < this.rewards.length; _i1++) {
                (this.rewards[_i1]).serializeAs_BreachReward(output);
            }
            output.writeVarInt(this.modifier);
            if (this.prize < 0) {
                throw new Error("Forbidden value (" + this.prize + ") on element prize.");
            }
            output.writeVarInt(this.prize);
        }

        deserializeAs_ExtendedBreachBranch(input) {
            var _item1 = null;
            super.deserialize(input);
            var _rewardsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _rewardsLen; _i1++) {
                _item1 = new BreachReward();
                _item1.deserialize(input);
                this.rewards.push(_item1);
            }
            this.modifier = input.readVarInt();
            this.prize = input.readVarUhInt();
            if (this.prize < 0) {
                throw new Error("Forbidden value (" + this.prize + ") on element of ExtendedBreachBranch.prize.");
            }
        }
    }
    class ExtendedLockedBreachBranch extends ExtendedBreachBranch {
        constructor(_super) {
            super()
            this.unlockPrice = 0;
            this.ID = 5343;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.unlockPrice = 0;
        }

        serialize(output) {
            this.serializeAs_ExtendedLockedBreachBranch(output);
        }

        deserialize(input) {
            this.deserializeAs_ExtendedLockedBreachBranch(input);
        }

        serializeAs_ExtendedLockedBreachBranch(ouput) {
            this.serializeAs_ExtendedBreachBranch(this, output);
            if (this.unlockPrice < 0) {
                throw new Error("Forbidden value (" + this.unlockPrice + ") on element unlockPrice.");
            }
            output.writeVarInt(this.unlockPrice);
        }

        deserializeAs_ExtendedLockedBreachBranch(input) {
            super.deserialize(input);
            this.unlockPrice = input.readVarUhInt();
            if (this.unlockPrice < 0) {
                throw new Error("Forbidden value (" + this.unlockPrice + ") on element of ExtendedLockedBreachBranch.unlockPrice.");
            }
        }
    }
    class ArenaLeagueRanking {
        constructor() {

            this.rank = 0;
            this.leagueId = 0;
            this.leaguePoints = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
            this.ID = 561;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rank = 0;
            this.leagueId = 0;
            this.leaguePoints = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
        }

        serialize(output) {
            this.serializeAs_ArenaLeagueRanking(output);
        }

        deserialize(input) {
            this.deserializeAs_ArenaLeagueRanking(input);
        }

        serializeAs_ArenaLeagueRanking(ouput) {
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element leagueId.");
            }
            output.writeVarShort(this.leagueId);
            output.writeVarShort(this.leaguePoints);
            output.writeVarShort(this.totalLeaguePoints);
            output.writeInt(this.ladderPosition);
        }

        deserializeAs_ArenaLeagueRanking(input) {
            this.rank = input.readVarUhShort();
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element of ArenaLeagueRanking.rank.");
            }
            this.leagueId = input.readVarUhShort();
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element of ArenaLeagueRanking.leagueId.");
            }
            this.leaguePoints = input.readVarShort();
            this.totalLeaguePoints = input.readVarShort();
            this.ladderPosition = input.readInt();
        }
    }
    class ArenaRankInfos {
        constructor() {

            this.ranking = new ArenaRanking();
            this.leagueRanking = new ArenaLeagueRanking();
            this.victoryCount = 0;
            this.fightcount = 0;
            this.numFightNeededForLadder = 0;
            this.ID = 8800;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ranking = new ArenaRanking();
            this.leagueRanking = new ArenaLeagueRanking();
            this.victoryCount = 0;
            this.fightcount = 0;
            this.numFightNeededForLadder = 0;
        }

        serialize(output) {
            this.serializeAs_ArenaRankInfos(output);
        }

        deserialize(input) {
            this.deserializeAs_ArenaRankInfos(input);
        }

        serializeAs_ArenaRankInfos(ouput) {
            if (this.ranking == null) {
                output.writeByte(0);
            } else {
                output.writeByte(1);
                this.ranking.serializeAs_ArenaRanking(output);
            }
            if (this.leagueRanking == null) {
                output.writeByte(0);
            } else {
                output.writeByte(1);
                this.leagueRanking.serializeAs_ArenaLeagueRanking(output);
            }
            if (this.victoryCount < 0) {
                throw new Error("Forbidden value (" + this.victoryCount + ") on element victoryCount.");
            }
            output.writeVarShort(this.victoryCount);
            if (this.fightcount < 0) {
                throw new Error("Forbidden value (" + this.fightcount + ") on element fightcount.");
            }
            output.writeVarShort(this.fightcount);
            if (this.numFightNeededForLadder < 0) {
                throw new Error("Forbidden value (" + this.numFightNeededForLadder + ") on element numFightNeededForLadder.");
            }
            output.writeShort(this.numFightNeededForLadder);
        }

        deserializeAs_ArenaRankInfos(input) {
            if (input.readByte() == 0) {
                this.ranking = null;
            } else {
                this.ranking = new ArenaRanking();
                this.ranking.deserialize(input);
            }
            if (input.readByte() == 0) {
                this.leagueRanking = null;
            } else {
                this.leagueRanking = new ArenaLeagueRanking();
                this.leagueRanking.deserialize(input);
            }
            this.victoryCount = input.readVarUhShort();
            if (this.victoryCount < 0) {
                throw new Error("Forbidden value (" + this.victoryCount + ") on element of ArenaRankInfos.victoryCount.");
            }
            this.fightcount = input.readVarUhShort();
            if (this.fightcount < 0) {
                throw new Error("Forbidden value (" + this.fightcount + ") on element of ArenaRankInfos.fightcount.");
            }
            this.numFightNeededForLadder = input.readShort();
            if (this.numFightNeededForLadder < 0) {
                throw new Error("Forbidden value (" + this.numFightNeededForLadder + ") on element of ArenaRankInfos.numFightNeededForLadder.");
            }
        }
    }
    class ArenaRanking {
        constructor() {

            this.rank = 0;
            this.bestRank = 0;
            this.ID = 3529;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rank = 0;
            this.bestRank = 0;
        }

        serialize(output) {
            this.serializeAs_ArenaRanking(output);
        }

        deserialize(input) {
            this.deserializeAs_ArenaRanking(input);
        }

        serializeAs_ArenaRanking(ouput) {
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
            if (this.bestRank < 0 || this.bestRank > 20000) {
                throw new Error("Forbidden value (" + this.bestRank + ") on element bestRank.");
            }
            output.writeVarShort(this.bestRank);
        }

        deserializeAs_ArenaRanking(input) {
            this.rank = input.readVarUhShort();
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element of ArenaRanking.rank.");
            }
            this.bestRank = input.readVarUhShort();
            if (this.bestRank < 0 || this.bestRank > 20000) {
                throw new Error("Forbidden value (" + this.bestRank + ") on element of ArenaRanking.bestRank.");
            }
        }
    }
    class AbstractContactInformations {
        constructor() {

            this.accountId = 0;
            this.accountTag = new AccountTagInformation();
            this.ID = 2944;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
            this.accountTag = new AccountTagInformation();
        }

        serialize(output) {
            this.serializeAs_AbstractContactInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractContactInformations(input);
        }

        serializeAs_AbstractContactInformations(ouput) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            this.accountTag.serializeAs_AccountTagInformation(output);
        }

        deserializeAs_AbstractContactInformations(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of AbstractContactInformations.accountId.");
            }
            this.accountTag = new AccountTagInformation();
            this.accountTag.deserialize(input);
        }
    }
    class LeagueFriendInformations extends AbstractContactInformations {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.leagueId = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
            this.ID = 6716;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.leagueId = 0;
            this.totalLeaguePoints = 0;
            this.ladderPosition = 0;
        }

        serialize(output) {
            this.serializeAs_LeagueFriendInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_LeagueFriendInformations(input);
        }

        serializeAs_LeagueFriendInformations(ouput) {
            this.serializeAs_AbstractContactInformations(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeVarShort(this.leagueId);
            output.writeVarShort(this.totalLeaguePoints);
            output.writeInt(this.ladderPosition);
        }

        deserializeAs_LeagueFriendInformations(input) {
            super.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of LeagueFriendInformations.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of LeagueFriendInformations.breed.");
            }
            this.sex = input.readBoolean();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of LeagueFriendInformations.level.");
            }
            this.leagueId = input.readVarShort();
            this.totalLeaguePoints = input.readVarShort();
            this.ladderPosition = input.readInt();
        }
    }
    class GameRolePlayNamedActorInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.name = "";
            this.ID = 594;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
        }

        serialize(output) {
            this.serializeAs_GameRolePlayNamedActorInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayNamedActorInformations(input);
        }

        serializeAs_GameRolePlayNamedActorInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeUTF(this.name);
        }

        deserializeAs_GameRolePlayNamedActorInformations(input) {
            super.deserialize(input);
            this.name = input.readUTF();
        }
    }
    class GameRolePlayHumanoidInformations extends GameRolePlayNamedActorInformations {
        constructor(_super) {
            super()
            this.humanoidInfo = new HumanInformations();
            this.accountId = 0;
            this.ID = 8790;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.humanoidInfo = new HumanInformations();
            this.accountId = 0;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayHumanoidInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayHumanoidInformations(input);
        }

        serializeAs_GameRolePlayHumanoidInformations(ouput) {
            this.serializeAs_GameRolePlayNamedActorInformations(this, output);
            output.writeShort(this.humanoidInfo.getTypeId());
            this.humanoidInfo.serialize(output);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        }

        deserializeAs_GameRolePlayHumanoidInformations(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.humanoidInfo = ProtocolTypeManager.getInstance(HumanInformations, _id1);
            this.humanoidInfo.deserialize(input);
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of GameRolePlayHumanoidInformations.accountId.");
            }
        }
    }
    class GameRolePlayCharacterInformations extends GameRolePlayHumanoidInformations {
        constructor(_super) {
            super()
            this.alignmentInfos = new ActorAlignmentInformations();
            this.ID = 9497;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alignmentInfos = new ActorAlignmentInformations();
        }

        serialize(output) {
            this.serializeAs_GameRolePlayCharacterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayCharacterInformations(input);
        }

        serializeAs_GameRolePlayCharacterInformations(ouput) {
            this.serializeAs_GameRolePlayHumanoidInformations(this, output);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(output);
        }

        deserializeAs_GameRolePlayCharacterInformations(input) {
            super.deserialize(input);
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(input);
        }
    }
    class GameRolePlayGroupMonsterInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.staticInfos = new GroupMonsterStaticInformations();
            this.lootShare = 0;
            this.alignmentSide = 0;
            this.hasHardcoreDrop = false;
            this.ID = 7008;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.staticInfos = new GroupMonsterStaticInformations();
            this.lootShare = 0;
            this.alignmentSide = 0;
            this.hasHardcoreDrop = false;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayGroupMonsterInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayGroupMonsterInformations(input);
        }

        serializeAs_GameRolePlayGroupMonsterInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.staticInfos.getTypeId());
            this.staticInfos.serialize(output);
            if (this.lootShare < -1 || this.lootShare > 8) {
                throw new Error("Forbidden value (" + this.lootShare + ") on element lootShare.");
            }
            output.writeByte(this.lootShare);
            output.writeByte(this.alignmentSide);
            output.writeBoolean(this.hasHardcoreDrop);
        }

        deserializeAs_GameRolePlayGroupMonsterInformations(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.staticInfos = ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _id1);
            this.staticInfos.deserialize(input);
            this.lootShare = input.readByte();
            if (this.lootShare < -1 || this.lootShare > 8) {
                throw new Error("Forbidden value (" + this.lootShare + ") on element of GameRolePlayGroupMonsterInformations.lootShare.");
            }
            this.alignmentSide = input.readByte();
            this.hasHardcoreDrop = input.readBoolean();
        }
    }
    class GameRolePlayGroupMonsterWaveInformations extends GameRolePlayGroupMonsterInformations {
        constructor(_super) {
            super()
            this.nbWaves = 0;
            this.alternatives = [];
            this.ID = 8988;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nbWaves = 0;
            this.alternatives = [];
        }

        serialize(output) {
            this.serializeAs_GameRolePlayGroupMonsterWaveInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayGroupMonsterWaveInformations(input);
        }

        serializeAs_GameRolePlayGroupMonsterWaveInformations(ouput) {
            this.serializeAs_GameRolePlayGroupMonsterInformations(this, output);
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element nbWaves.");
            }
            output.writeByte(this.nbWaves);
            output.writeShort(this.alternatives.length);
            for (var _i2 = 0; _i2 < this.alternatives.length; _i2++) {
                output.writeShort((this.alternatives[_i2]).getTypeId());
                (this.alternatives[_i2]).serialize(output);
            }
        }

        deserializeAs_GameRolePlayGroupMonsterWaveInformations(input) {
            var _id2 = 0;
            var _item2 = null;
            super.deserialize(input);
            this.nbWaves = input.readByte();
            if (this.nbWaves < 0) {
                throw new Error("Forbidden value (" + this.nbWaves + ") on element of GameRolePlayGroupMonsterWaveInformations.nbWaves.");
            }
            var _alternativesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _alternativesLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _id2);
                _item2.deserialize(input);
                this.alternatives.push(_item2);
            }
        }
    }
    class GameRolePlayMountInformations extends GameRolePlayNamedActorInformations {
        constructor(_super) {
            super()
            this.ownerName = "";
            this.level = 0;
            this.ID = 3340;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ownerName = "";
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayMountInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayMountInformations(input);
        }

        serializeAs_GameRolePlayMountInformations(ouput) {
            this.serializeAs_GameRolePlayNamedActorInformations(this, output);
            output.writeUTF(this.ownerName);
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
        }

        deserializeAs_GameRolePlayMountInformations(input) {
            super.deserialize(input);
            this.ownerName = input.readUTF();
            this.level = input.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element of GameRolePlayMountInformations.level.");
            }
        }
    }
    class GameRolePlayMutantInformations extends GameRolePlayHumanoidInformations {
        constructor(_super) {
            super()
            this.monsterId = 0;
            this.powerLevel = 0;
            this.ID = 6556;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.monsterId = 0;
            this.powerLevel = 0;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayMutantInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayMutantInformations(input);
        }

        serializeAs_GameRolePlayMutantInformations(ouput) {
            this.serializeAs_GameRolePlayHumanoidInformations(this, output);
            if (this.monsterId < 0) {
                throw new Error("Forbidden value (" + this.monsterId + ") on element monsterId.");
            }
            output.writeVarShort(this.monsterId);
            output.writeByte(this.powerLevel);
        }

        deserializeAs_GameRolePlayMutantInformations(input) {
            super.deserialize(input);
            this.monsterId = input.readVarUhShort();
            if (this.monsterId < 0) {
                throw new Error("Forbidden value (" + this.monsterId + ") on element of GameRolePlayMutantInformations.monsterId.");
            }
            this.powerLevel = input.readByte();
        }
    }
    class GameRolePlayNpcInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.npcId = 0;
            this.sex = false;
            this.specialArtworkId = 0;
            this.ID = 2951;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.npcId = 0;
            this.sex = false;
            this.specialArtworkId = 0;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayNpcInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayNpcInformations(input);
        }

        serializeAs_GameRolePlayNpcInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeVarShort(this.npcId);
            output.writeBoolean(this.sex);
            if (this.specialArtworkId < 0) {
                throw new Error("Forbidden value (" + this.specialArtworkId + ") on element specialArtworkId.");
            }
            output.writeVarShort(this.specialArtworkId);
        }

        deserializeAs_GameRolePlayNpcInformations(input) {
            super.deserialize(input);
            this.npcId = input.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of GameRolePlayNpcInformations.npcId.");
            }
            this.sex = input.readBoolean();
            this.specialArtworkId = input.readVarUhShort();
            if (this.specialArtworkId < 0) {
                throw new Error("Forbidden value (" + this.specialArtworkId + ") on element of GameRolePlayNpcInformations.specialArtworkId.");
            }
        }
    }
    class GameRolePlayNpcWithQuestInformations extends GameRolePlayNpcInformations {
        constructor(_super) {
            super()
            this.questFlag = new GameRolePlayNpcQuestFlag();
            this.ID = 2889;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questFlag = new GameRolePlayNpcQuestFlag();
        }

        serialize(output) {
            this.serializeAs_GameRolePlayNpcWithQuestInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayNpcWithQuestInformations(input);
        }

        serializeAs_GameRolePlayNpcWithQuestInformations(ouput) {
            this.serializeAs_GameRolePlayNpcInformations(this, output);
            this.questFlag.serializeAs_GameRolePlayNpcQuestFlag(output);
        }

        deserializeAs_GameRolePlayNpcWithQuestInformations(input) {
            super.deserialize(input);
            this.questFlag = new GameRolePlayNpcQuestFlag();
            this.questFlag.deserialize(input);
        }
    }
    class GameRolePlayPortalInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.portal = new PortalInformation();
            this.ID = 4429;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.portal = new PortalInformation();
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPortalInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPortalInformations(input);
        }

        serializeAs_GameRolePlayPortalInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.portal.getTypeId());
            this.portal.serialize(output);
        }

        deserializeAs_GameRolePlayPortalInformations(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.portal = ProtocolTypeManager.getInstance(PortalInformation, _id1);
            this.portal.deserialize(input);
        }
    }
    class GameRolePlayPrismInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.prism = new PrismInformation();
            this.ID = 9294;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.prism = new PrismInformation();
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPrismInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPrismInformations(input);
        }

        serializeAs_GameRolePlayPrismInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            output.writeShort(this.prism.getTypeId());
            this.prism.serialize(output);
        }

        deserializeAs_GameRolePlayPrismInformations(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.prism = ProtocolTypeManager.getInstance(PrismInformation, _id1);
            this.prism.deserialize(input);
        }
    }
    class GameRolePlayTreasureHintInformations extends GameRolePlayActorInformations {
        constructor(_super) {
            super()
            this.npcId = 0;
            this.ID = 8092;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.npcId = 0;
        }

        serialize(output) {
            this.serializeAs_GameRolePlayTreasureHintInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayTreasureHintInformations(input);
        }

        serializeAs_GameRolePlayTreasureHintInformations(ouput) {
            this.serializeAs_GameRolePlayActorInformations(this, output);
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeVarShort(this.npcId);
        }

        deserializeAs_GameRolePlayTreasureHintInformations(input) {
            super.deserialize(input);
            this.npcId = input.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of GameRolePlayTreasureHintInformations.npcId.");
            }
        }
    }
    class GroupMonsterStaticInformations {
        constructor() {

            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.underlings = [];
            this.ID = 2255;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.underlings = [];
        }

        serialize(output) {
            this.serializeAs_GroupMonsterStaticInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GroupMonsterStaticInformations(input);
        }

        serializeAs_GroupMonsterStaticInformations(ouput) {
            this.mainCreatureLightInfos.serializeAs_MonsterInGroupLightInformations(output);
            output.writeShort(this.underlings.length);
            for (var _i2 = 0; _i2 < this.underlings.length; _i2++) {
                (this.underlings[_i2]).serializeAs_MonsterInGroupInformations(output);
            }
        }

        deserializeAs_GroupMonsterStaticInformations(input) {
            var _item2 = null;
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.mainCreatureLightInfos.deserialize(input);
            var _underlingsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _underlingsLen; _i2++) {
                _item2 = new MonsterInGroupInformations();
                _item2.deserialize(input);
                this.underlings.push(_item2);
            }
        }
    }
    class GroupMonsterStaticInformationsWithAlternatives extends GroupMonsterStaticInformations {
        constructor(_super) {
            super()
            this.alternatives = [];
            this.ID = 1872;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alternatives = [];
        }

        serialize(output) {
            this.serializeAs_GroupMonsterStaticInformationsWithAlternatives(output);
        }

        deserialize(input) {
            this.deserializeAs_GroupMonsterStaticInformationsWithAlternatives(input);
        }

        serializeAs_GroupMonsterStaticInformationsWithAlternatives(ouput) {
            this.serializeAs_GroupMonsterStaticInformations(this, output);
            output.writeShort(this.alternatives.length);
            for (var _i1 = 0; _i1 < this.alternatives.length; _i1++) {
                (this.alternatives[_i1]).serializeAs_AlternativeMonstersInGroupLightInformations(output);
            }
        }

        deserializeAs_GroupMonsterStaticInformationsWithAlternatives(input) {
            var _item1 = null;
            super.deserialize(input);
            var _alternativesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alternativesLen; _i1++) {
                _item1 = new AlternativeMonstersInGroupLightInformations();
                _item1.deserialize(input);
                this.alternatives.push(_item1);
            }
        }
    }
    class GuildInformations extends BasicGuildInformations {
        constructor(_super) {
            super()
            this.guildEmblem = new SocialEmblem();
            this.ID = 2358;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildEmblem = new SocialEmblem();
        }

        serialize(output) {
            this.serializeAs_GuildInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInformations(input);
        }

        serializeAs_GuildInformations(ouput) {
            this.serializeAs_BasicGuildInformations(this, output);
            this.guildEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_GuildInformations(input) {
            super.deserialize(input);
            this.guildEmblem = new SocialEmblem();
            this.guildEmblem.deserialize(input);
        }
    }
    class HumanInformations {
        constructor() {

            this.restrictions = new ActorRestrictionsInformations();
            this.sex = false;
            this.options = [];
            this.ID = 6568;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.restrictions = new ActorRestrictionsInformations();
            this.sex = false;
            this.options = [];
        }

        serialize(output) {
            this.serializeAs_HumanInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanInformations(input);
        }

        serializeAs_HumanInformations(ouput) {
            this.restrictions.serializeAs_ActorRestrictionsInformations(output);
            output.writeBoolean(this.sex);
            output.writeShort(this.options.length);
            for (var _i3 = 0; _i3 < this.options.length; _i3++) {
                output.writeShort((this.options[_i3]).getTypeId());
                (this.options[_i3]).serialize(output);
            }
        }

        deserializeAs_HumanInformations(input) {
            var _id3 = 0;
            var _item3 = null;
            this.restrictions = new ActorRestrictionsInformations();
            this.restrictions.deserialize(input);
            this.sex = input.readBoolean();
            var _optionsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _optionsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(HumanOption, _id3);
                _item3.deserialize(input);
                this.options.push(_item3);
            }
        }
    }
    class HumanOption {
        constructor() {


            this.ID = 2920;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_HumanOption(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOption(input);
        }

        serializeAs_HumanOption(ouput) {

        }

        deserializeAs_HumanOption(input) {

        }
    }
    class HumanOptionAlliance extends HumanOption {
        constructor(_super) {
            super()
            this.allianceInformation = new AllianceInformation();
            this.aggressable = 0;
            this.ID = 5811;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInformation = new AllianceInformation();
            this.aggressable = 0;
        }

        serialize(output) {
            this.serializeAs_HumanOptionAlliance(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionAlliance(input);
        }

        serializeAs_HumanOptionAlliance(ouput) {
            this.serializeAs_HumanOption(this, output);
            this.allianceInformation.serializeAs_AllianceInformation(output);
            output.writeByte(this.aggressable);
        }

        deserializeAs_HumanOptionAlliance(input) {
            super.deserialize(input);
            this.allianceInformation = new AllianceInformation();
            this.allianceInformation.deserialize(input);
            this.aggressable = input.readByte();
            if (this.aggressable < 0) {
                throw new Error("Forbidden value (" + this.aggressable + ") on element of HumanOptionAlliance.aggressable.");
            }
        }
    }
    class HumanOptionEmote extends HumanOption {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.emoteStartTime = 0;
            this.ID = 3316;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
        }

        serialize(output) {
            this.serializeAs_HumanOptionEmote(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionEmote(input);
        }

        serializeAs_HumanOptionEmote(ouput) {
            this.serializeAs_HumanOption(this, output);
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
            if (this.emoteStartTime < -9007199254740992 || this.emoteStartTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
            }
            output.writeDouble(this.emoteStartTime);
        }

        deserializeAs_HumanOptionEmote(input) {
            super.deserialize(input);
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of HumanOptionEmote.emoteId.");
            }
            this.emoteStartTime = input.readDouble();
            if (this.emoteStartTime < -9007199254740992 || this.emoteStartTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element of HumanOptionEmote.emoteStartTime.");
            }
        }
    }
    class HumanOptionFollowers extends HumanOption {
        constructor(_super) {
            super()
            this.followingCharactersLook = [];
            this.ID = 8012;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.followingCharactersLook = [];
        }

        serialize(output) {
            this.serializeAs_HumanOptionFollowers(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionFollowers(input);
        }

        serializeAs_HumanOptionFollowers(ouput) {
            this.serializeAs_HumanOption(this, output);
            output.writeShort(this.followingCharactersLook.length);
            for (var _i1 = 0; _i1 < this.followingCharactersLook.length; _i1++) {
                (this.followingCharactersLook[_i1]).serializeAs_IndexedEntityLook(output);
            }
        }

        deserializeAs_HumanOptionFollowers(input) {
            var _item1 = null;
            super.deserialize(input);
            var _followingCharactersLookLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _followingCharactersLookLen; _i1++) {
                _item1 = new IndexedEntityLook();
                _item1.deserialize(input);
                this.followingCharactersLook.push(_item1);
            }
        }
    }
    class HumanOptionGuild extends HumanOption {
        constructor(_super) {
            super()
            this.guildInformations = new GuildInformations();
            this.ID = 8515;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildInformations = new GuildInformations();
        }

        serialize(output) {
            this.serializeAs_HumanOptionGuild(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionGuild(input);
        }

        serializeAs_HumanOptionGuild(ouput) {
            this.serializeAs_HumanOption(this, output);
            this.guildInformations.serializeAs_GuildInformations(output);
        }

        deserializeAs_HumanOptionGuild(input) {
            super.deserialize(input);
            this.guildInformations = new GuildInformations();
            this.guildInformations.deserialize(input);
        }
    }
    class HumanOptionObjectUse extends HumanOption {
        constructor(_super) {
            super()
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.objectGID = 0;
            this.ID = 4513;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.objectGID = 0;
        }

        serialize(output) {
            this.serializeAs_HumanOptionObjectUse(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionObjectUse(input);
        }

        serializeAs_HumanOptionObjectUse(ouput) {
            this.serializeAs_HumanOption(this, output);
            output.writeByte(this.delayTypeId);
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
            }
            output.writeDouble(this.delayEndTime);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
        }

        deserializeAs_HumanOptionObjectUse(input) {
            super.deserialize(input);
            this.delayTypeId = input.readByte();
            if (this.delayTypeId < 0) {
                throw new Error("Forbidden value (" + this.delayTypeId + ") on element of HumanOptionObjectUse.delayTypeId.");
            }
            this.delayEndTime = input.readDouble();
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element of HumanOptionObjectUse.delayEndTime.");
            }
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of HumanOptionObjectUse.objectGID.");
            }
        }
    }
    class HumanOptionOrnament extends HumanOption {
        constructor(_super) {
            super()
            this.ornamentId = 0;
            this.level = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.ID = 355;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ornamentId = 0;
            this.level = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
        }

        serialize(output) {
            this.serializeAs_HumanOptionOrnament(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionOrnament(input);
        }

        serializeAs_HumanOptionOrnament(ouput) {
            this.serializeAs_HumanOption(this, output);
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeVarShort(this.ornamentId);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
        }

        deserializeAs_HumanOptionOrnament(input) {
            super.deserialize(input);
            this.ornamentId = input.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of HumanOptionOrnament.ornamentId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of HumanOptionOrnament.level.");
            }
            this.leagueId = input.readVarShort();
            this.ladderPosition = input.readInt();
        }
    }
    class HumanOptionSkillUse extends HumanOption {
        constructor(_super) {
            super()
            this.elementId = 0;
            this.skillId = 0;
            this.skillEndTime = 0;
            this.ID = 8721;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elementId = 0;
            this.skillId = 0;
            this.skillEndTime = 0;
        }

        serialize(output) {
            this.serializeAs_HumanOptionSkillUse(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionSkillUse(input);
        }

        serializeAs_HumanOptionSkillUse(ouput) {
            this.serializeAs_HumanOption(this, output);
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeVarInt(this.elementId);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
            if (this.skillEndTime < -9007199254740992 || this.skillEndTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.skillEndTime + ") on element skillEndTime.");
            }
            output.writeDouble(this.skillEndTime);
        }

        deserializeAs_HumanOptionSkillUse(input) {
            super.deserialize(input);
            this.elementId = input.readVarUhInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of HumanOptionSkillUse.elementId.");
            }
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of HumanOptionSkillUse.skillId.");
            }
            this.skillEndTime = input.readDouble();
            if (this.skillEndTime < -9007199254740992 || this.skillEndTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.skillEndTime + ") on element of HumanOptionSkillUse.skillEndTime.");
            }
        }
    }
    class HumanOptionSpeedMultiplier extends HumanOption {
        constructor(_super) {
            super()
            this.speedMultiplier = 0;
            this.ID = 3522;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.speedMultiplier = 0;
        }

        serialize(output) {
            this.serializeAs_HumanOptionSpeedMultiplier(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionSpeedMultiplier(input);
        }

        serializeAs_HumanOptionSpeedMultiplier(ouput) {
            this.serializeAs_HumanOption(this, output);
            if (this.speedMultiplier < 0) {
                throw new Error("Forbidden value (" + this.speedMultiplier + ") on element speedMultiplier.");
            }
            output.writeVarInt(this.speedMultiplier);
        }

        deserializeAs_HumanOptionSpeedMultiplier(input) {
            super.deserialize(input);
            this.speedMultiplier = input.readVarUhInt();
            if (this.speedMultiplier < 0) {
                throw new Error("Forbidden value (" + this.speedMultiplier + ") on element of HumanOptionSpeedMultiplier.speedMultiplier.");
            }
        }
    }
    class HumanOptionTitle extends HumanOption {
        constructor(_super) {
            super()
            this.titleId = 0;
            this.titleParam = "";
            this.ID = 7437;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.titleId = 0;
            this.titleParam = "";
        }

        serialize(output) {
            this.serializeAs_HumanOptionTitle(output);
        }

        deserialize(input) {
            this.deserializeAs_HumanOptionTitle(input);
        }

        serializeAs_HumanOptionTitle(ouput) {
            this.serializeAs_HumanOption(this, output);
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
            output.writeUTF(this.titleParam);
        }

        deserializeAs_HumanOptionTitle(input) {
            super.deserialize(input);
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of HumanOptionTitle.titleId.");
            }
            this.titleParam = input.readUTF();
        }
    }
    class DecraftedItemStackInfo {
        constructor() {

            this.objectUID = 0;
            this.bonusMin = 0;
            this.bonusMax = 0;
            this.runesId = [];
            this.runesQty = [];
            this.ID = 216;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.bonusMin = 0;
            this.bonusMax = 0;
            this.runesId = [];
            this.runesQty = [];
        }

        serialize(output) {
            this.serializeAs_DecraftedItemStackInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_DecraftedItemStackInfo(input);
        }

        serializeAs_DecraftedItemStackInfo(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeFloat(this.bonusMin);
            output.writeFloat(this.bonusMax);
            output.writeShort(this.runesId.length);
            for (var _i4 = 0; _i4 < this.runesId.length; _i4++) {
                if (this.runesId[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.runesId[_i4] + ") on element 4 (starting at 1) of runesId.");
                }
                output.writeVarInt(this.runesId[_i4]);
            }
            output.writeShort(this.runesQty.length);
            for (var _i5 = 0; _i5 < this.runesQty.length; _i5++) {
                if (this.runesQty[_i5] < 0) {
                    throw new Error("Forbidden value (" + this.runesQty[_i5] + ") on element 5 (starting at 1) of runesQty.");
                }
                output.writeVarInt(this.runesQty[_i5]);
            }
        }

        deserializeAs_DecraftedItemStackInfo(input) {
            var _val4 = 0;
            var _val5 = 0;
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of DecraftedItemStackInfo.objectUID.");
            }
            this.bonusMin = input.readFloat();
            this.bonusMax = input.readFloat();
            var _runesIdLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _runesIdLen; _i4++) {
                _val4 = input.readVarUhInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of runesId.");
                }
                this.runesId.push(_val4);
            }
            var _runesQtyLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _runesQtyLen; _i5++) {
                _val5 = input.readVarUhInt();
                if (_val5 < 0) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of runesQty.");
                }
                this.runesQty.push(_val5);
            }
        }
    }
    class JobBookSubscription {
        constructor() {

            this.jobId = 0;
            this.subscribed = false;
            this.ID = 2960;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
            this.subscribed = false;
        }

        serialize(output) {
            this.serializeAs_JobBookSubscription(output);
        }

        deserialize(input) {
            this.deserializeAs_JobBookSubscription(input);
        }

        serializeAs_JobBookSubscription(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            output.writeBoolean(this.subscribed);
        }

        deserializeAs_JobBookSubscription(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobBookSubscription.jobId.");
            }
            this.subscribed = input.readBoolean();
        }
    }
    class JobCrafterDirectoryEntryJobInfo {
        constructor() {

            this.jobId = 0;
            this.jobLevel = 0;
            this.free = false;
            this.minLevel = 0;
            this.ID = 2424;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.free = false;
            this.minLevel = 0;
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryEntryJobInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryEntryJobInfo(input);
        }

        serializeAs_JobCrafterDirectoryEntryJobInfo(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.jobLevel < 1 || this.jobLevel > 200) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
            }
            output.writeByte(this.jobLevel);
            output.writeBoolean(this.free);
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
            }
            output.writeByte(this.minLevel);
        }

        deserializeAs_JobCrafterDirectoryEntryJobInfo(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryEntryJobInfo.jobId.");
            }
            this.jobLevel = input.readUnsignedByte();
            if (this.jobLevel < 1 || this.jobLevel > 200) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element of JobCrafterDirectoryEntryJobInfo.jobLevel.");
            }
            this.free = input.readBoolean();
            this.minLevel = input.readUnsignedByte();
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectoryEntryJobInfo.minLevel.");
            }
        }
    }
    class JobCrafterDirectoryEntryPlayerInfo {
        constructor() {

            this.playerId = 0;
            this.playerName = "";
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.isInWorkshop = false;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.canCraftLegendary = false;
            this.status = new PlayerStatus();
            this.ID = 642;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.isInWorkshop = false;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.canCraftLegendary = false;
            this.status = new PlayerStatus();
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryEntryPlayerInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryEntryPlayerInfo(input);
        }

        serializeAs_JobCrafterDirectoryEntryPlayerInfo(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.alignmentSide);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            output.writeBoolean(this.isInWorkshop);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.canCraftLegendary);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        }

        deserializeAs_JobCrafterDirectoryEntryPlayerInfo(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryPlayerInfo.playerId.");
            }
            this.playerName = input.readUTF();
            this.alignmentSide = input.readByte();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of JobCrafterDirectoryEntryPlayerInfo.breed.");
            }
            this.sex = input.readBoolean();
            this.isInWorkshop = input.readBoolean();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of JobCrafterDirectoryEntryPlayerInfo.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of JobCrafterDirectoryEntryPlayerInfo.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of JobCrafterDirectoryEntryPlayerInfo.subAreaId.");
            }
            this.canCraftLegendary = input.readBoolean();
            var _id12 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id12);
            this.status.deserialize(input);
        }
    }
    class JobCrafterDirectoryListEntry {
        constructor() {

            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
            this.ID = 8615;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryListEntry(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryListEntry(input);
        }

        serializeAs_JobCrafterDirectoryListEntry(ouput) {
            this.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(output);
            this.jobInfo.serializeAs_JobCrafterDirectoryEntryJobInfo(output);
        }

        deserializeAs_JobCrafterDirectoryListEntry(input) {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.playerInfo.deserialize(input);
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
            this.jobInfo.deserialize(input);
        }
    }
    class JobCrafterDirectorySettings {
        constructor() {

            this.jobId = 0;
            this.minLevel = 0;
            this.free = false;
            this.ID = 3438;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
            this.minLevel = 0;
            this.free = false;
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectorySettings(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectorySettings(input);
        }

        serializeAs_JobCrafterDirectorySettings(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
            }
            output.writeByte(this.minLevel);
            output.writeBoolean(this.free);
        }

        deserializeAs_JobCrafterDirectorySettings(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectorySettings.jobId.");
            }
            this.minLevel = input.readUnsignedByte();
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element of JobCrafterDirectorySettings.minLevel.");
            }
            this.free = input.readBoolean();
        }
    }
    class JobDescription {
        constructor() {

            this.jobId = 0;
            this.skills = [];
            this.ID = 4847;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
            this.skills = [];
        }

        serialize(output) {
            this.serializeAs_JobDescription(output);
        }

        deserialize(input) {
            this.deserializeAs_JobDescription(input);
        }

        serializeAs_JobDescription(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            output.writeShort(this.skills.length);
            for (var _i2 = 0; _i2 < this.skills.length; _i2++) {
                output.writeShort((this.skills[_i2]).getTypeId());
                (this.skills[_i2]).serialize(output);
            }
        }

        deserializeAs_JobDescription(input) {
            var _id2 = 0;
            var _item2 = null;
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobDescription.jobId.");
            }
            var _skillsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _skillsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(SkillActionDescription, _id2);
                _item2.deserialize(input);
                this.skills.push(_item2);
            }
        }
    }
    class JobExperience {
        constructor() {

            this.jobId = 0;
            this.jobLevel = 0;
            this.jobXP = 0;
            this.jobXpLevelFloor = 0;
            this.jobXpNextLevelFloor = 0;
            this.ID = 4237;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.jobXP = 0;
            this.jobXpLevelFloor = 0;
            this.jobXpNextLevelFloor = 0;
        }

        serialize(output) {
            this.serializeAs_JobExperience(output);
        }

        deserialize(input) {
            this.deserializeAs_JobExperience(input);
        }

        serializeAs_JobExperience(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.jobLevel < 0 || this.jobLevel > 255) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element jobLevel.");
            }
            output.writeByte(this.jobLevel);
            if (this.jobXP < 0 || this.jobXP > 9007199254740992) {
                throw new Error("Forbidden value (" + this.jobXP + ") on element jobXP.");
            }
            output.writeVarLong(this.jobXP);
            if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.jobXpLevelFloor + ") on element jobXpLevelFloor.");
            }
            output.writeVarLong(this.jobXpLevelFloor);
            if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element jobXpNextLevelFloor.");
            }
            output.writeVarLong(this.jobXpNextLevelFloor);
        }

        deserializeAs_JobExperience(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobExperience.jobId.");
            }
            this.jobLevel = input.readUnsignedByte();
            if (this.jobLevel < 0 || this.jobLevel > 255) {
                throw new Error("Forbidden value (" + this.jobLevel + ") on element of JobExperience.jobLevel.");
            }
            this.jobXP = input.readVarUhLong();
            if (this.jobXP < 0 || this.jobXP > 9007199254740992) {
                throw new Error("Forbidden value (" + this.jobXP + ") on element of JobExperience.jobXP.");
            }
            this.jobXpLevelFloor = input.readVarUhLong();
            if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.jobXpLevelFloor + ") on element of JobExperience.jobXpLevelFloor.");
            }
            this.jobXpNextLevelFloor = input.readVarUhLong();
            if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.jobXpNextLevelFloor + ") on element of JobExperience.jobXpNextLevelFloor.");
            }
        }
    }
    class MonsterBoosts {
        constructor() {

            this.id = 0;
            this.xpBoost = 0;
            this.dropBoost = 0;
            this.ID = 876;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.xpBoost = 0;
            this.dropBoost = 0;
        }

        serialize(output) {
            this.serializeAs_MonsterBoosts(output);
        }

        deserialize(input) {
            this.deserializeAs_MonsterBoosts(input);
        }

        serializeAs_MonsterBoosts(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            if (this.xpBoost < 0) {
                throw new Error("Forbidden value (" + this.xpBoost + ") on element xpBoost.");
            }
            output.writeVarShort(this.xpBoost);
            if (this.dropBoost < 0) {
                throw new Error("Forbidden value (" + this.dropBoost + ") on element dropBoost.");
            }
            output.writeVarShort(this.dropBoost);
        }

        deserializeAs_MonsterBoosts(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of MonsterBoosts.id.");
            }
            this.xpBoost = input.readVarUhShort();
            if (this.xpBoost < 0) {
                throw new Error("Forbidden value (" + this.xpBoost + ") on element of MonsterBoosts.xpBoost.");
            }
            this.dropBoost = input.readVarUhShort();
            if (this.dropBoost < 0) {
                throw new Error("Forbidden value (" + this.dropBoost + ") on element of MonsterBoosts.dropBoost.");
            }
        }
    }
    class MonsterInGroupLightInformations {
        constructor() {

            this.genericId = 0;
            this.grade = 0;
            this.level = 0;
            this.ID = 5721;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.genericId = 0;
            this.grade = 0;
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_MonsterInGroupLightInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_MonsterInGroupLightInformations(input);
        }

        serializeAs_MonsterInGroupLightInformations(ouput) {
            output.writeInt(this.genericId);
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element grade.");
            }
            output.writeByte(this.grade);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeShort(this.level);
        }

        deserializeAs_MonsterInGroupLightInformations(input) {
            this.genericId = input.readInt();
            this.grade = input.readByte();
            if (this.grade < 0) {
                throw new Error("Forbidden value (" + this.grade + ") on element of MonsterInGroupLightInformations.grade.");
            }
            this.level = input.readShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of MonsterInGroupLightInformations.level.");
            }
        }
    }
    class MonsterInGroupInformations extends MonsterInGroupLightInformations {
        constructor(_super) {
            super()
            this.look = new EntityLook();
            this.ID = 902;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.look = new EntityLook();
        }

        serialize(output) {
            this.serializeAs_MonsterInGroupInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_MonsterInGroupInformations(input);
        }

        serializeAs_MonsterInGroupInformations(ouput) {
            this.serializeAs_MonsterInGroupLightInformations(this, output);
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_MonsterInGroupInformations(input) {
            super.deserialize(input);
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class MapNpcQuestInfo {
        constructor() {

            this.mapId = 0;
            this.npcsIdsWithQuest = [];
            this.questFlags = [];
            this.ID = 8369;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.npcsIdsWithQuest = [];
            this.questFlags = [];
        }

        serialize(output) {
            this.serializeAs_MapNpcQuestInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_MapNpcQuestInfo(input);
        }

        serializeAs_MapNpcQuestInfo(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.npcsIdsWithQuest.length);
            for (var _i2 = 0; _i2 < this.npcsIdsWithQuest.length; _i2++) {
                output.writeInt(this.npcsIdsWithQuest[_i2]);
            }
            output.writeShort(this.questFlags.length);
            for (var _i3 = 0; _i3 < this.questFlags.length; _i3++) {
                (this.questFlags[_i3]).serializeAs_GameRolePlayNpcQuestFlag(output);
            }
        }

        deserializeAs_MapNpcQuestInfo(input) {
            var _val2 = 0;
            var _item3 = null;
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapNpcQuestInfo.mapId.");
            }
            var _npcsIdsWithQuestLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _npcsIdsWithQuestLen; _i2++) {
                _val2 = input.readInt();
                this.npcsIdsWithQuest.push(_val2);
            }
            var _questFlagsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _questFlagsLen; _i3++) {
                _item3 = new GameRolePlayNpcQuestFlag();
                _item3.deserialize(input);
                this.questFlags.push(_item3);
            }
        }
    }
    class ObjectItemInRolePlay {
        constructor() {

            this.cellId = 0;
            this.objectGID = 0;
            this.ID = 2267;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
            this.objectGID = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemInRolePlay(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemInRolePlay(input);
        }

        serializeAs_ObjectItemInRolePlay(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
        }

        deserializeAs_ObjectItemInRolePlay(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ObjectItemInRolePlay.cellId.");
            }
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemInRolePlay.objectGID.");
            }
        }
    }
    class DungeonPartyFinderPlayer {
        constructor() {

            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.ID = 9241;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderPlayer(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderPlayer(input);
        }

        serializeAs_DungeonPartyFinderPlayer(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
        }

        deserializeAs_DungeonPartyFinderPlayer(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of DungeonPartyFinderPlayer.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of DungeonPartyFinderPlayer.breed.");
            }
            this.sex = input.readBoolean();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of DungeonPartyFinderPlayer.level.");
            }
        }
    }
    class PartyEntityBaseInformation {
        constructor() {

            this.indexId = 0;
            this.entityModelId = 0;
            this.entityLook = new EntityLook();
            this.ID = 9722;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.indexId = 0;
            this.entityModelId = 0;
            this.entityLook = new EntityLook();
        }

        serialize(output) {
            this.serializeAs_PartyEntityBaseInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyEntityBaseInformation(input);
        }

        serializeAs_PartyEntityBaseInformation(ouput) {
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element indexId.");
            }
            output.writeByte(this.indexId);
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element entityModelId.");
            }
            output.writeByte(this.entityModelId);
            this.entityLook.serializeAs_EntityLook(output);
        }

        deserializeAs_PartyEntityBaseInformation(input) {
            this.indexId = input.readByte();
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element of PartyEntityBaseInformation.indexId.");
            }
            this.entityModelId = input.readByte();
            if (this.entityModelId < 0) {
                throw new Error("Forbidden value (" + this.entityModelId + ") on element of PartyEntityBaseInformation.entityModelId.");
            }
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(input);
        }
    }
    class PartyEntityMemberInformation extends PartyEntityBaseInformation {
        constructor(_super) {
            super()
            this.initiative = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.ID = 9590;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.initiative = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
        }

        serialize(output) {
            this.serializeAs_PartyEntityMemberInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyEntityMemberInformation(input);
        }

        serializeAs_PartyEntityMemberInformation(ouput) {
            this.serializeAs_PartyEntityBaseInformation(this, output);
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
            }
            output.writeVarInt(this.initiative);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarInt(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
        }

        deserializeAs_PartyEntityMemberInformation(input) {
            super.deserialize(input);
            this.initiative = input.readVarUhInt();
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element of PartyEntityMemberInformation.initiative.");
            }
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyEntityMemberInformation.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyEntityMemberInformation.maxLifePoints.");
            }
            this.prospecting = input.readVarUhInt();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyEntityMemberInformation.prospecting.");
            }
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyEntityMemberInformation.regenRate.");
            }
        }
    }
    class NamedPartyTeam {
        constructor() {

            this.teamId = 2;
            this.partyName = "";
            this.ID = 6881;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.teamId = 2;
            this.partyName = "";
        }

        serialize(output) {
            this.serializeAs_NamedPartyTeam(output);
        }

        deserialize(input) {
            this.deserializeAs_NamedPartyTeam(input);
        }

        serializeAs_NamedPartyTeam(ouput) {
            output.writeByte(this.teamId);
            output.writeUTF(this.partyName);
        }

        deserializeAs_NamedPartyTeam(input) {
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of NamedPartyTeam.teamId.");
            }
            this.partyName = input.readUTF();
        }
    }
    class NamedPartyTeamWithOutcome {
        constructor() {

            this.team = new NamedPartyTeam();
            this.outcome = 0;
            this.ID = 6201;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.team = new NamedPartyTeam();
            this.outcome = 0;
        }

        serialize(output) {
            this.serializeAs_NamedPartyTeamWithOutcome(output);
        }

        deserialize(input) {
            this.deserializeAs_NamedPartyTeamWithOutcome(input);
        }

        serializeAs_NamedPartyTeamWithOutcome(ouput) {
            this.team.serializeAs_NamedPartyTeam(output);
            output.writeVarShort(this.outcome);
        }

        deserializeAs_NamedPartyTeamWithOutcome(input) {
            this.team = new NamedPartyTeam();
            this.team.deserialize(input);
            this.outcome = input.readVarUhShort();
            if (this.outcome < 0) {
                throw new Error("Forbidden value (" + this.outcome + ") on element of NamedPartyTeamWithOutcome.outcome.");
            }
        }
    }
    class PartyGuestInformations {
        constructor() {

            this.guestId = 0;
            this.hostId = 0;
            this.name = "";
            this.guestLook = new EntityLook();
            this.breed = 0;
            this.sex = false;
            this.status = new PlayerStatus();
            this.entities = [];
            this.ID = 7304;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guestId = 0;
            this.hostId = 0;
            this.name = "";
            this.guestLook = new EntityLook();
            this.breed = 0;
            this.sex = false;
            this.status = new PlayerStatus();
            this.entities = [];
        }

        serialize(output) {
            this.serializeAs_PartyGuestInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyGuestInformations(input);
        }

        serializeAs_PartyGuestInformations(ouput) {
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
            if (this.hostId < 0 || this.hostId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.hostId + ") on element hostId.");
            }
            output.writeVarLong(this.hostId);
            output.writeUTF(this.name);
            this.guestLook.serializeAs_EntityLook(output);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
            output.writeShort(this.entities.length);
            for (var _i8 = 0; _i8 < this.entities.length; _i8++) {
                (this.entities[_i8]).serializeAs_PartyEntityBaseInformation(output);
            }
        }

        deserializeAs_PartyGuestInformations(input) {
            var _item8 = null;
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyGuestInformations.guestId.");
            }
            this.hostId = input.readVarUhLong();
            if (this.hostId < 0 || this.hostId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.hostId + ") on element of PartyGuestInformations.hostId.");
            }
            this.name = input.readUTF();
            this.guestLook = new EntityLook();
            this.guestLook.deserialize(input);
            this.breed = input.readByte();
            this.sex = input.readBoolean();
            var _id7 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id7);
            this.status.deserialize(input);
            var _entitiesLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _entitiesLen; _i8++) {
                _item8 = new PartyEntityBaseInformation();
                _item8.deserialize(input);
                this.entities.push(_item8);
            }
        }
    }
    class PartyInvitationMemberInformations extends CharacterBaseInformations {
        constructor(_super) {
            super()
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.entities = [];
            this.ID = 5638;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.entities = [];
        }

        serialize(output) {
            this.serializeAs_PartyInvitationMemberInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationMemberInformations(input);
        }

        serializeAs_PartyInvitationMemberInformations(ouput) {
            this.serializeAs_CharacterBaseInformations(this, output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeShort(this.entities.length);
            for (var _i5 = 0; _i5 < this.entities.length; _i5++) {
                (this.entities[_i5]).serializeAs_PartyEntityBaseInformation(output);
            }
        }

        deserializeAs_PartyInvitationMemberInformations(input) {
            var _item5 = null;
            super.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PartyInvitationMemberInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PartyInvitationMemberInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PartyInvitationMemberInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyInvitationMemberInformations.subAreaId.");
            }
            var _entitiesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _entitiesLen; _i5++) {
                _item5 = new PartyEntityBaseInformation();
                _item5.deserialize(input);
                this.entities.push(_item5);
            }
        }
    }
    class PartyMemberInformations extends CharacterBaseInformations {
        constructor(_super) {
            super()
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.initiative = 0;
            this.alignmentSide = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
            this.entities = [];
            this.ID = 7992;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.initiative = 0;
            this.alignmentSide = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
            this.entities = [];
        }

        serialize(output) {
            this.serializeAs_PartyMemberInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberInformations(input);
        }

        serializeAs_PartyMemberInformations(ouput) {
            this.serializeAs_CharacterBaseInformations(this, output);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarInt(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element initiative.");
            }
            output.writeVarInt(this.initiative);
            output.writeByte(this.alignmentSide);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
            output.writeShort(this.entities.length);
            for (var _i12 = 0; _i12 < this.entities.length; _i12++) {
                output.writeShort((this.entities[_i12]).getTypeId());
                (this.entities[_i12]).serialize(output);
            }
        }

        deserializeAs_PartyMemberInformations(input) {
            var _id12 = 0;
            var _item12 = null;
            super.deserialize(input);
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyMemberInformations.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyMemberInformations.maxLifePoints.");
            }
            this.prospecting = input.readVarUhInt();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyMemberInformations.prospecting.");
            }
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyMemberInformations.regenRate.");
            }
            this.initiative = input.readVarUhInt();
            if (this.initiative < 0) {
                throw new Error("Forbidden value (" + this.initiative + ") on element of PartyMemberInformations.initiative.");
            }
            this.alignmentSide = input.readByte();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PartyMemberInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PartyMemberInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PartyMemberInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberInformations.subAreaId.");
            }
            var _id11 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id11);
            this.status.deserialize(input);
            var _entitiesLen = input.readUnsignedShort();
            for (var _i12 = 0; _i12 < _entitiesLen; _i12++) {
                _id12 = input.readUnsignedShort();
                _item12 = ProtocolTypeManager.getInstance(PartyEntityBaseInformation, _id12);
                _item12.deserialize(input);
                this.entities.push(_item12);
            }
        }
    }
    class PartyMemberArenaInformations extends PartyMemberInformations {
        constructor(_super) {
            super()
            this.rank = 0;
            this.ID = 6541;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rank = 0;
        }

        serialize(output) {
            this.serializeAs_PartyMemberArenaInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberArenaInformations(input);
        }

        serializeAs_PartyMemberArenaInformations(ouput) {
            this.serializeAs_PartyMemberInformations(this, output);
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element rank.");
            }
            output.writeVarShort(this.rank);
        }

        deserializeAs_PartyMemberArenaInformations(input) {
            super.deserialize(input);
            this.rank = input.readVarUhShort();
            if (this.rank < 0 || this.rank > 20000) {
                throw new Error("Forbidden value (" + this.rank + ") on element of PartyMemberArenaInformations.rank.");
            }
        }
    }
    class PartyMemberGeoPosition {
        constructor() {

            this.memberId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.ID = 7799;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        serialize(output) {
            this.serializeAs_PartyMemberGeoPosition(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberGeoPosition(input);
        }

        serializeAs_PartyMemberGeoPosition(ouput) {
            if (this.memberId < 0) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeInt(this.memberId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        }

        deserializeAs_PartyMemberGeoPosition(input) {
            this.memberId = input.readInt();
            if (this.memberId < 0) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of PartyMemberGeoPosition.memberId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PartyMemberGeoPosition.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PartyMemberGeoPosition.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PartyMemberGeoPosition.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PartyMemberGeoPosition.subAreaId.");
            }
        }
    }
    class GameRolePlayNpcQuestFlag {
        constructor() {

            this.questsToValidId = [];
            this.questsToStartId = [];
            this.ID = 252;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questsToValidId = [];
            this.questsToStartId = [];
        }

        serialize(output) {
            this.serializeAs_GameRolePlayNpcQuestFlag(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayNpcQuestFlag(input);
        }

        serializeAs_GameRolePlayNpcQuestFlag(ouput) {
            output.writeShort(this.questsToValidId.length);
            for (var _i1 = 0; _i1 < this.questsToValidId.length; _i1++) {
                if (this.questsToValidId[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.questsToValidId[_i1] + ") on element 1 (starting at 1) of questsToValidId.");
                }
                output.writeVarShort(this.questsToValidId[_i1]);
            }
            output.writeShort(this.questsToStartId.length);
            for (var _i2 = 0; _i2 < this.questsToStartId.length; _i2++) {
                if (this.questsToStartId[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.questsToStartId[_i2] + ") on element 2 (starting at 1) of questsToStartId.");
                }
                output.writeVarShort(this.questsToStartId[_i2]);
            }
        }

        deserializeAs_GameRolePlayNpcQuestFlag(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _questsToValidIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _questsToValidIdLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of questsToValidId.");
                }
                this.questsToValidId.push(_val1);
            }
            var _questsToStartIdLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _questsToStartIdLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of questsToStartId.");
                }
                this.questsToStartId.push(_val2);
            }
        }
    }
    class QuestActiveInformations {
        constructor() {

            this.questId = 0;
            this.ID = 4012;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
        }

        serialize(output) {
            this.serializeAs_QuestActiveInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestActiveInformations(input);
        }

        serializeAs_QuestActiveInformations(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        }

        deserializeAs_QuestActiveInformations(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestActiveInformations.questId.");
            }
        }
    }
    class QuestActiveDetailedInformations extends QuestActiveInformations {
        constructor(_super) {
            super()
            this.stepId = 0;
            this.objectives = [];
            this.ID = 2347;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stepId = 0;
            this.objectives = [];
        }

        serialize(output) {
            this.serializeAs_QuestActiveDetailedInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestActiveDetailedInformations(input);
        }

        serializeAs_QuestActiveDetailedInformations(ouput) {
            this.serializeAs_QuestActiveInformations(this, output);
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
            }
            output.writeVarShort(this.stepId);
            output.writeShort(this.objectives.length);
            for (var _i2 = 0; _i2 < this.objectives.length; _i2++) {
                output.writeShort((this.objectives[_i2]).getTypeId());
                (this.objectives[_i2]).serialize(output);
            }
        }

        deserializeAs_QuestActiveDetailedInformations(input) {
            var _id2 = 0;
            var _item2 = null;
            super.deserialize(input);
            this.stepId = input.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element of QuestActiveDetailedInformations.stepId.");
            }
            var _objectivesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _objectivesLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(QuestObjectiveInformations, _id2);
                _item2.deserialize(input);
                this.objectives.push(_item2);
            }
        }
    }
    class QuestObjectiveInformations {
        constructor() {

            this.objectiveId = 0;
            this.objectiveStatus = false;
            this.dialogParams = [];
            this.ID = 3099;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectiveId = 0;
            this.objectiveStatus = false;
            this.dialogParams = [];
        }

        serialize(output) {
            this.serializeAs_QuestObjectiveInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestObjectiveInformations(input);
        }

        serializeAs_QuestObjectiveInformations(ouput) {
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
            }
            output.writeVarShort(this.objectiveId);
            output.writeBoolean(this.objectiveStatus);
            output.writeShort(this.dialogParams.length);
            for (var _i3 = 0; _i3 < this.dialogParams.length; _i3++) {
                output.writeUTF(this.dialogParams[_i3]);
            }
        }

        deserializeAs_QuestObjectiveInformations(input) {
            var _val3 = null;
            this.objectiveId = input.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveInformations.objectiveId.");
            }
            this.objectiveStatus = input.readBoolean();
            var _dialogParamsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _dialogParamsLen; _i3++) {
                _val3 = input.readUTF();
                this.dialogParams.push(_val3);
            }
        }
    }
    class QuestObjectiveInformationsWithCompletion extends QuestObjectiveInformations {
        constructor(_super) {
            super()
            this.curCompletion = 0;
            this.maxCompletion = 0;
            this.ID = 2377;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.curCompletion = 0;
            this.maxCompletion = 0;
        }

        serialize(output) {
            this.serializeAs_QuestObjectiveInformationsWithCompletion(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestObjectiveInformationsWithCompletion(input);
        }

        serializeAs_QuestObjectiveInformationsWithCompletion(ouput) {
            this.serializeAs_QuestObjectiveInformations(this, output);
            if (this.curCompletion < 0) {
                throw new Error("Forbidden value (" + this.curCompletion + ") on element curCompletion.");
            }
            output.writeVarShort(this.curCompletion);
            if (this.maxCompletion < 0) {
                throw new Error("Forbidden value (" + this.maxCompletion + ") on element maxCompletion.");
            }
            output.writeVarShort(this.maxCompletion);
        }

        deserializeAs_QuestObjectiveInformationsWithCompletion(input) {
            super.deserialize(input);
            this.curCompletion = input.readVarUhShort();
            if (this.curCompletion < 0) {
                throw new Error("Forbidden value (" + this.curCompletion + ") on element of QuestObjectiveInformationsWithCompletion.curCompletion.");
            }
            this.maxCompletion = input.readVarUhShort();
            if (this.maxCompletion < 0) {
                throw new Error("Forbidden value (" + this.maxCompletion + ") on element of QuestObjectiveInformationsWithCompletion.maxCompletion.");
            }
        }
    }
    class PortalInformation {
        constructor() {

            this.portalId = 0;
            this.areaId = 0;
            this.ID = 2687;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.portalId = 0;
            this.areaId = 0;
        }

        serialize(output) {
            this.serializeAs_PortalInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PortalInformation(input);
        }

        serializeAs_PortalInformation(ouput) {
            output.writeInt(this.portalId);
            output.writeShort(this.areaId);
        }

        deserializeAs_PortalInformation(input) {
            this.portalId = input.readInt();
            this.areaId = input.readShort();
        }
    }
    class TreasureHuntFlag {
        constructor() {

            this.mapId = 0;
            this.state = 0;
            this.ID = 4127;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.state = 0;
        }

        serialize(output) {
            this.serializeAs_TreasureHuntFlag(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntFlag(input);
        }

        serializeAs_TreasureHuntFlag(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeByte(this.state);
        }

        deserializeAs_TreasureHuntFlag(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TreasureHuntFlag.mapId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of TreasureHuntFlag.state.");
            }
        }
    }
    class TreasureHuntStep {
        constructor() {


            this.ID = 4064;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_TreasureHuntStep(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntStep(input);
        }

        serializeAs_TreasureHuntStep(ouput) {

        }

        deserializeAs_TreasureHuntStep(input) {

        }
    }
    class TreasureHuntStepDig extends TreasureHuntStep {
        constructor(_super) {
            super()

            this.ID = 6844;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_TreasureHuntStepDig(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntStepDig(input);
        }

        serializeAs_TreasureHuntStepDig(ouput) {

        }

        deserializeAs_TreasureHuntStepDig(input) {

        }
    }
    class TreasureHuntStepFight extends TreasureHuntStep {
        constructor(_super) {
            super()

            this.ID = 3707;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_TreasureHuntStepFight(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntStepFight(input);
        }

        serializeAs_TreasureHuntStepFight(ouput) {

        }

        deserializeAs_TreasureHuntStepFight(input) {

        }
    }
    class TreasureHuntStepFollowDirection extends TreasureHuntStep {
        constructor(_super) {
            super()
            this.direction = 1;
            this.mapCount = 0;
            this.ID = 7523;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.direction = 1;
            this.mapCount = 0;
        }

        serialize(output) {
            this.serializeAs_TreasureHuntStepFollowDirection(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntStepFollowDirection(input);
        }

        serializeAs_TreasureHuntStepFollowDirection(ouput) {
            this.serializeAs_TreasureHuntStep(this, output);
            output.writeByte(this.direction);
            if (this.mapCount < 0) {
                throw new Error("Forbidden value (" + this.mapCount + ") on element mapCount.");
            }
            output.writeVarShort(this.mapCount);
        }

        deserializeAs_TreasureHuntStepFollowDirection(input) {
            super.deserialize(input);
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirection.direction.");
            }
            this.mapCount = input.readVarUhShort();
            if (this.mapCount < 0) {
                throw new Error("Forbidden value (" + this.mapCount + ") on element of TreasureHuntStepFollowDirection.mapCount.");
            }
        }
    }
    class TreasureHuntStepFollowDirectionToHint extends TreasureHuntStep {
        constructor(_super) {
            super()
            this.direction = 1;
            this.npcId = 0;
            this.ID = 2292;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.direction = 1;
            this.npcId = 0;
        }

        serialize(output) {
            this.serializeAs_TreasureHuntStepFollowDirectionToHint(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntStepFollowDirectionToHint(input);
        }

        serializeAs_TreasureHuntStepFollowDirectionToHint(ouput) {
            this.serializeAs_TreasureHuntStep(this, output);
            output.writeByte(this.direction);
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeVarShort(this.npcId);
        }

        deserializeAs_TreasureHuntStepFollowDirectionToHint(input) {
            super.deserialize(input);
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToHint.direction.");
            }
            this.npcId = input.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of TreasureHuntStepFollowDirectionToHint.npcId.");
            }
        }
    }
    class TreasureHuntStepFollowDirectionToPOI extends TreasureHuntStep {
        constructor(_super) {
            super()
            this.direction = 1;
            this.poiLabelId = 0;
            this.ID = 9055;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.direction = 1;
            this.poiLabelId = 0;
        }

        serialize(output) {
            this.serializeAs_TreasureHuntStepFollowDirectionToPOI(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntStepFollowDirectionToPOI(input);
        }

        serializeAs_TreasureHuntStepFollowDirectionToPOI(ouput) {
            this.serializeAs_TreasureHuntStep(this, output);
            output.writeByte(this.direction);
            if (this.poiLabelId < 0) {
                throw new Error("Forbidden value (" + this.poiLabelId + ") on element poiLabelId.");
            }
            output.writeVarShort(this.poiLabelId);
        }

        deserializeAs_TreasureHuntStepFollowDirectionToPOI(input) {
            super.deserialize(input);
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of TreasureHuntStepFollowDirectionToPOI.direction.");
            }
            this.poiLabelId = input.readVarUhShort();
            if (this.poiLabelId < 0) {
                throw new Error("Forbidden value (" + this.poiLabelId + ") on element of TreasureHuntStepFollowDirectionToPOI.poiLabelId.");
            }
        }
    }
    class TaxCollectorStaticInformations {
        constructor() {

            this.firstNameId = 0;
            this.lastNameId = 0;
            this.allianceIdentity = new AllianceInformation();
            this.callerId = 0;
            this.ID = 7297;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.allianceIdentity = new AllianceInformation();
            this.callerId = 0;
        }

        serialize(output) {
            this.serializeAs_TaxCollectorStaticInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorStaticInformations(input);
        }

        serializeAs_TaxCollectorStaticInformations(ouput) {
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            this.allianceIdentity.serializeAs_AllianceInformation(output);
            if (this.callerId < 0 || this.callerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.callerId + ") on element callerId.");
            }
            output.writeVarLong(this.callerId);
        }

        deserializeAs_TaxCollectorStaticInformations(input) {
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorStaticInformations.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorStaticInformations.lastNameId.");
            }
            this.allianceIdentity = new AllianceInformation();
            this.allianceIdentity.deserialize(input);
            this.callerId = input.readVarUhLong();
            if (this.callerId < 0 || this.callerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.callerId + ") on element of TaxCollectorStaticInformations.callerId.");
            }
        }
    }
    class BidExchangerObjectInfo {
        constructor() {

            this.objectUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
            this.ID = 3317;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
        }

        serialize(output) {
            this.serializeAs_BidExchangerObjectInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_BidExchangerObjectInfo(input);
        }

        serializeAs_BidExchangerObjectInfo(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.effects.length);
            for (var _i4 = 0; _i4 < this.effects.length; _i4++) {
                output.writeShort((this.effects[_i4]).getTypeId());
                (this.effects[_i4]).serialize(output);
            }
            output.writeShort(this.prices.length);
            for (var _i5 = 0; _i5 < this.prices.length; _i5++) {
                if (this.prices[_i5] < 0 || this.prices[_i5] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.prices[_i5] + ") on element 5 (starting at 1) of prices.");
                }
                output.writeVarLong(this.prices[_i5]);
            }
        }

        deserializeAs_BidExchangerObjectInfo(input) {
            var _id4 = 0;
            var _item4 = null;
            var _val5 = NaN;
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of BidExchangerObjectInfo.objectUID.");
            }
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of BidExchangerObjectInfo.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of BidExchangerObjectInfo.objectType.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _effectsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(ObjectEffect, _id4);
                _item4.deserialize(input);
                this.effects.push(_item4);
            }
            var _pricesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _pricesLen; _i5++) {
                _val5 = input.readVarUhLong();
                if (_val5 < 0 || _val5 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of prices.");
                }
                this.prices.push(_val5);
            }
        }
    }
    class ObjectEffect {
        constructor() {

            this.actionId = 0;
            this.ID = 2700;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actionId = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffect(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffect(input);
        }

        serializeAs_ObjectEffect(ouput) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
        }

        deserializeAs_ObjectEffect(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of ObjectEffect.actionId.");
            }
        }
    }
    class ObjectEffectCreature extends ObjectEffect {
        constructor(_super) {
            super()
            this.monsterFamilyId = 0;
            this.ID = 6756;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.monsterFamilyId = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectCreature(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectCreature(input);
        }

        serializeAs_ObjectEffectCreature(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            if (this.monsterFamilyId < 0) {
                throw new Error("Forbidden value (" + this.monsterFamilyId + ") on element monsterFamilyId.");
            }
            output.writeVarShort(this.monsterFamilyId);
        }

        deserializeAs_ObjectEffectCreature(input) {
            super.deserialize(input);
            this.monsterFamilyId = input.readVarUhShort();
            if (this.monsterFamilyId < 0) {
                throw new Error("Forbidden value (" + this.monsterFamilyId + ") on element of ObjectEffectCreature.monsterFamilyId.");
            }
        }
    }
    class ObjectEffectDate extends ObjectEffect {
        constructor(_super) {
            super()
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
            this.ID = 396;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectDate(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectDate(input);
        }

        serializeAs_ObjectEffectDate(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element year.");
            }
            output.writeVarShort(this.year);
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element month.");
            }
            output.writeByte(this.month);
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element day.");
            }
            output.writeByte(this.day);
            if (this.hour < 0) {
                throw new Error("Forbidden value (" + this.hour + ") on element hour.");
            }
            output.writeByte(this.hour);
            if (this.minute < 0) {
                throw new Error("Forbidden value (" + this.minute + ") on element minute.");
            }
            output.writeByte(this.minute);
        }

        deserializeAs_ObjectEffectDate(input) {
            super.deserialize(input);
            this.year = input.readVarUhShort();
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element of ObjectEffectDate.year.");
            }
            this.month = input.readByte();
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element of ObjectEffectDate.month.");
            }
            this.day = input.readByte();
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element of ObjectEffectDate.day.");
            }
            this.hour = input.readByte();
            if (this.hour < 0) {
                throw new Error("Forbidden value (" + this.hour + ") on element of ObjectEffectDate.hour.");
            }
            this.minute = input.readByte();
            if (this.minute < 0) {
                throw new Error("Forbidden value (" + this.minute + ") on element of ObjectEffectDate.minute.");
            }
        }
    }
    class ObjectEffectDice extends ObjectEffect {
        constructor(_super) {
            super()
            this.diceNum = 0;
            this.diceSide = 0;
            this.diceConst = 0;
            this.ID = 1988;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.diceNum = 0;
            this.diceSide = 0;
            this.diceConst = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectDice(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectDice(input);
        }

        serializeAs_ObjectEffectDice(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            if (this.diceNum < 0) {
                throw new Error("Forbidden value (" + this.diceNum + ") on element diceNum.");
            }
            output.writeVarInt(this.diceNum);
            if (this.diceSide < 0) {
                throw new Error("Forbidden value (" + this.diceSide + ") on element diceSide.");
            }
            output.writeVarInt(this.diceSide);
            if (this.diceConst < 0) {
                throw new Error("Forbidden value (" + this.diceConst + ") on element diceConst.");
            }
            output.writeVarInt(this.diceConst);
        }

        deserializeAs_ObjectEffectDice(input) {
            super.deserialize(input);
            this.diceNum = input.readVarUhInt();
            if (this.diceNum < 0) {
                throw new Error("Forbidden value (" + this.diceNum + ") on element of ObjectEffectDice.diceNum.");
            }
            this.diceSide = input.readVarUhInt();
            if (this.diceSide < 0) {
                throw new Error("Forbidden value (" + this.diceSide + ") on element of ObjectEffectDice.diceSide.");
            }
            this.diceConst = input.readVarUhInt();
            if (this.diceConst < 0) {
                throw new Error("Forbidden value (" + this.diceConst + ") on element of ObjectEffectDice.diceConst.");
            }
        }
    }
    class ObjectEffectDuration extends ObjectEffect {
        constructor(_super) {
            super()
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            this.ID = 7910;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectDuration(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectDuration(input);
        }

        serializeAs_ObjectEffectDuration(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element days.");
            }
            output.writeVarShort(this.days);
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element hours.");
            }
            output.writeByte(this.hours);
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element minutes.");
            }
            output.writeByte(this.minutes);
        }

        deserializeAs_ObjectEffectDuration(input) {
            super.deserialize(input);
            this.days = input.readVarUhShort();
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element of ObjectEffectDuration.days.");
            }
            this.hours = input.readByte();
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element of ObjectEffectDuration.hours.");
            }
            this.minutes = input.readByte();
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element of ObjectEffectDuration.minutes.");
            }
        }
    }
    class ObjectEffectInteger extends ObjectEffect {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 9292;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectInteger(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectInteger(input);
        }

        serializeAs_ObjectEffectInteger(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element value.");
            }
            output.writeVarInt(this.value);
        }

        deserializeAs_ObjectEffectInteger(input) {
            super.deserialize(input);
            this.value = input.readVarUhInt();
            if (this.value < 0) {
                throw new Error("Forbidden value (" + this.value + ") on element of ObjectEffectInteger.value.");
            }
        }
    }
    class ObjectEffectLadder extends ObjectEffectCreature {
        constructor(_super) {
            super()
            this.monsterCount = 0;
            this.ID = 9404;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.monsterCount = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectLadder(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectLadder(input);
        }

        serializeAs_ObjectEffectLadder(ouput) {
            this.serializeAs_ObjectEffectCreature(this, output);
            if (this.monsterCount < 0) {
                throw new Error("Forbidden value (" + this.monsterCount + ") on element monsterCount.");
            }
            output.writeVarInt(this.monsterCount);
        }

        deserializeAs_ObjectEffectLadder(input) {
            super.deserialize(input);
            this.monsterCount = input.readVarUhInt();
            if (this.monsterCount < 0) {
                throw new Error("Forbidden value (" + this.monsterCount + ") on element of ObjectEffectLadder.monsterCount.");
            }
        }
    }
    class ObjectEffectMinMax extends ObjectEffect {
        constructor(_super) {
            super()
            this.min = 0;
            this.max = 0;
            this.ID = 6229;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.min = 0;
            this.max = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectEffectMinMax(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectMinMax(input);
        }

        serializeAs_ObjectEffectMinMax(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element min.");
            }
            output.writeVarInt(this.min);
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element max.");
            }
            output.writeVarInt(this.max);
        }

        deserializeAs_ObjectEffectMinMax(input) {
            super.deserialize(input);
            this.min = input.readVarUhInt();
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element of ObjectEffectMinMax.min.");
            }
            this.max = input.readVarUhInt();
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element of ObjectEffectMinMax.max.");
            }
        }
    }
    class ObjectEffectMount extends ObjectEffect {
        constructor(_super) {
            super()
            this.id = 0;
            this.expirationDate = 0;
            this.model = 0;
            this.name = "";
            this.owner = "";
            this.level = 0;
            this.sex = false;
            this.isRideable = false;
            this.isFeconded = false;
            this.isFecondationReady = false;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.effects = [];
            this.capacities = [];
            this.ID = 5138;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.expirationDate = 0;
            this.model = 0;
            this.name = "";
            this.owner = "";
            this.level = 0;
            this.sex = false;
            this.isRideable = false;
            this.isFeconded = false;
            this.isFecondationReady = false;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.effects = [];
            this.capacities = [];
        }

        serialize(output) {
            this.serializeAs_ObjectEffectMount(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectMount(input);
        }

        serializeAs_ObjectEffectMount(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isRideable);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isFeconded);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isFecondationReady);
            output.writeByte(_box0);
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            if (this.expirationDate < 0 || this.expirationDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expirationDate + ") on element expirationDate.");
            }
            output.writeVarLong(this.expirationDate);
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element model.");
            }
            output.writeVarInt(this.model);
            output.writeUTF(this.name);
            output.writeUTF(this.owner);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            output.writeVarInt(this.reproductionCount);
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element reproductionCountMax.");
            }
            output.writeVarInt(this.reproductionCountMax);
            output.writeShort(this.effects.length);
            for (var _i13 = 0; _i13 < this.effects.length; _i13++) {
                (this.effects[_i13]).serializeAs_ObjectEffectInteger(output);
            }
            output.writeShort(this.capacities.length);
            for (var _i14 = 0; _i14 < this.capacities.length; _i14++) {
                if (this.capacities[_i14] < 0) {
                    throw new Error("Forbidden value (" + this.capacities[_i14] + ") on element 14 (starting at 1) of capacities.");
                }
                output.writeVarInt(this.capacities[_i14]);
            }
        }

        deserializeAs_ObjectEffectMount(input) {
            var _item13 = null;
            var _val14 = 0;
            super.deserialize(input);
            var _box0 = input.readByte();
            this.sex = BooleanByteWrapper.getFlag(_box0, 0);
            this.isRideable = BooleanByteWrapper.getFlag(_box0, 1);
            this.isFeconded = BooleanByteWrapper.getFlag(_box0, 2);
            this.isFecondationReady = BooleanByteWrapper.getFlag(_box0, 3);
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of ObjectEffectMount.id.");
            }
            this.expirationDate = input.readVarUhLong();
            if (this.expirationDate < 0 || this.expirationDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expirationDate + ") on element of ObjectEffectMount.expirationDate.");
            }
            this.model = input.readVarUhInt();
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element of ObjectEffectMount.model.");
            }
            this.name = input.readUTF();
            this.owner = input.readUTF();
            this.level = input.readByte();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of ObjectEffectMount.level.");
            }
            this.reproductionCount = input.readVarInt();
            this.reproductionCountMax = input.readVarUhInt();
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element of ObjectEffectMount.reproductionCountMax.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i13 = 0; _i13 < _effectsLen; _i13++) {
                _item13 = new ObjectEffectInteger();
                _item13.deserialize(input);
                this.effects.push(_item13);
            }
            var _capacitiesLen = input.readUnsignedShort();
            for (var _i14 = 0; _i14 < _capacitiesLen; _i14++) {
                _val14 = input.readVarUhInt();
                if (_val14 < 0) {
                    throw new Error("Forbidden value (" + _val14 + ") on elements of capacities.");
                }
                this.capacities.push(_val14);
            }
        }
    }
    class ObjectEffectString extends ObjectEffect {
        constructor(_super) {
            super()
            this.value = "";
            this.ID = 6359;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = "";
        }

        serialize(output) {
            this.serializeAs_ObjectEffectString(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffectString(input);
        }

        serializeAs_ObjectEffectString(ouput) {
            this.serializeAs_ObjectEffect(this, output);
            output.writeUTF(this.value);
        }

        deserializeAs_ObjectEffectString(input) {
            super.deserialize(input);
            this.value = input.readUTF();
        }
    }
    class Item {
        constructor() {


            this.ID = 2946;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_Item(output);
        }

        deserialize(input) {
            this.deserializeAs_Item(input);
        }

        serializeAs_Item(ouput) {

        }

        deserializeAs_Item(input) {

        }
    }
    class SpellItem extends Item {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.spellLevel = 0;
            this.ID = 6177;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.spellLevel = 0;
        }

        serialize(output) {
            this.serializeAs_SpellItem(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellItem(input);
        }

        serializeAs_SpellItem(ouput) {
            this.serializeAs_Item(this, output);
            output.writeInt(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
            }
            output.writeShort(this.spellLevel);
        }

        deserializeAs_SpellItem(input) {
            super.deserialize(input);
            this.spellId = input.readInt();
            this.spellLevel = input.readShort();
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element of SpellItem.spellLevel.");
            }
        }
    }
    class ForgettableSpellItem extends SpellItem {
        constructor(_super) {
            super()
            this.available = false;
            this.ID = 4285;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.available = false;
        }

        serialize(output) {
            this.serializeAs_ForgettableSpellItem(output);
        }

        deserialize(input) {
            this.deserializeAs_ForgettableSpellItem(input);
        }

        serializeAs_ForgettableSpellItem(ouput) {
            this.serializeAs_SpellItem(this, output);
            output.writeBoolean(this.available);
        }

        deserializeAs_ForgettableSpellItem(input) {
            super.deserialize(input);
            this.available = input.readBoolean();
        }
    }
    class GoldItem extends Item {
        constructor(_super) {
            super()
            this.sum = 0;
            this.ID = 6097;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sum = 0;
        }

        serialize(output) {
            this.serializeAs_GoldItem(output);
        }

        deserialize(input) {
            this.deserializeAs_GoldItem(input);
        }

        serializeAs_GoldItem(ouput) {
            this.serializeAs_Item(this, output);
            if (this.sum < 0 || this.sum > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sum + ") on element sum.");
            }
            output.writeVarLong(this.sum);
        }

        deserializeAs_GoldItem(input) {
            super.deserialize(input);
            this.sum = input.readVarUhLong();
            if (this.sum < 0 || this.sum > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sum + ") on element of GoldItem.sum.");
            }
        }
    }
    class ObjectEffects {
        constructor() {

            this.effects = [];
            this.ID = 1985;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.effects = [];
        }

        serialize(output) {
            this.serializeAs_ObjectEffects(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectEffects(input);
        }

        serializeAs_ObjectEffects(ouput) {
            output.writeShort(this.effects.length);
            for (var _i1 = 0; _i1 < this.effects.length; _i1++) {
                output.writeShort((this.effects[_i1]).getTypeId());
                (this.effects[_i1]).serialize(output);
            }
        }

        deserializeAs_ObjectEffects(input) {
            var _id1 = 0;
            var _item1 = null;
            var _effectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _effectsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(ObjectEffect, _id1);
                _item1.deserialize(input);
                this.effects.push(_item1);
            }
        }
    }
    class ObjectItem extends Item {
        constructor(_super) {
            super()
            this.position = 63;
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 9429;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.position = 63;
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItem(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItem(input);
        }

        serializeAs_ObjectItem(ouput) {
            this.serializeAs_Item(this, output);
            output.writeShort(this.position);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i3 = 0; _i3 < this.effects.length; _i3++) {
                output.writeShort((this.effects[_i3]).getTypeId());
                (this.effects[_i3]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectItem(input) {
            var _id3 = 0;
            var _item3 = null;
            super.deserialize(input);
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ObjectItem.position.");
            }
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItem.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _effectsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(ObjectEffect, _id3);
                _item3.deserialize(input);
                this.effects.push(_item3);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItem.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItem.quantity.");
            }
        }
    }
    class ObjectItemGenericQuantity extends Item {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.quantity = 0;
            this.ID = 2187;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.quantity = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemGenericQuantity(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemGenericQuantity(input);
        }

        serializeAs_ObjectItemGenericQuantity(ouput) {
            this.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectItemGenericQuantity(input) {
            super.deserialize(input);
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemGenericQuantity.objectGID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemGenericQuantity.quantity.");
            }
        }
    }
    class ObjectItemMinimalInformation extends Item {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.effects = [];
            this.ID = 1626;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.effects = [];
        }

        serialize(output) {
            this.serializeAs_ObjectItemMinimalInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemMinimalInformation(input);
        }

        serializeAs_ObjectItemMinimalInformation(ouput) {
            this.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
        }

        deserializeAs_ObjectItemMinimalInformation(input) {
            var _id2 = 0;
            var _item2 = null;
            super.deserialize(input);
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemMinimalInformation.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
        }
    }
    class ObjectItemInformationWithQuantity extends ObjectItemMinimalInformation {
        constructor(_super) {
            super()
            this.quantity = 0;
            this.ID = 4410;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantity = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemInformationWithQuantity(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemInformationWithQuantity(input);
        }

        serializeAs_ObjectItemInformationWithQuantity(ouput) {
            this.serializeAs_ObjectItemMinimalInformation(this, output);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectItemInformationWithQuantity(input) {
            super.deserialize(input);
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemInformationWithQuantity.quantity.");
            }
        }
    }
    class ObjectItemNotInContainer extends Item {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 7047;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemNotInContainer(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemNotInContainer(input);
        }

        serializeAs_ObjectItemNotInContainer(ouput) {
            this.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectItemNotInContainer(input) {
            var _id2 = 0;
            var _item2 = null;
            super.deserialize(input);
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemNotInContainer.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemNotInContainer.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemNotInContainer.quantity.");
            }
        }
    }
    class ObjectItemQuantity extends Item {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 4778;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemQuantity(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemQuantity(input);
        }

        serializeAs_ObjectItemQuantity(ouput) {
            this.serializeAs_Item(this, output);
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectItemQuantity(input) {
            super.deserialize(input);
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemQuantity.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemQuantity.quantity.");
            }
        }
    }
    class ObjectItemQuantityPriceDateEffects extends ObjectItemGenericQuantity {
        constructor(_super) {
            super()
            this.price = 0;
            this.effects = new ObjectEffects();
            this.date = 0;
            this.ID = 7856;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.price = 0;
            this.effects = new ObjectEffects();
            this.date = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemQuantityPriceDateEffects(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemQuantityPriceDateEffects(input);
        }

        serializeAs_ObjectItemQuantityPriceDateEffects(ouput) {
            this.serializeAs_ObjectItemGenericQuantity(this, output);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
            this.effects.serializeAs_ObjectEffects(output);
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeInt(this.date);
        }

        deserializeAs_ObjectItemQuantityPriceDateEffects(input) {
            super.deserialize(input);
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of ObjectItemQuantityPriceDateEffects.price.");
            }
            this.effects = new ObjectEffects();
            this.effects.deserialize(input);
            this.date = input.readInt();
            if (this.date < 0) {
                throw new Error("Forbidden value (" + this.date + ") on element of ObjectItemQuantityPriceDateEffects.date.");
            }
        }
    }
    class ObjectItemToSell extends Item {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            this.ID = 4245;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemToSell(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemToSell(input);
        }

        serializeAs_ObjectItemToSell(ouput) {
            this.serializeAs_Item(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            output.writeShort(this.effects.length);
            for (var _i2 = 0; _i2 < this.effects.length; _i2++) {
                output.writeShort((this.effects[_i2]).getTypeId());
                (this.effects[_i2]).serialize(output);
            }
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
            }
            output.writeVarLong(this.objectPrice);
        }

        deserializeAs_ObjectItemToSell(input) {
            var _id2 = 0;
            var _item2 = null;
            super.deserialize(input);
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectItemToSell.objectGID.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _effectsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(ObjectEffect, _id2);
                _item2.deserialize(input);
                this.effects.push(_item2);
            }
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectItemToSell.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectItemToSell.quantity.");
            }
            this.objectPrice = input.readVarUhLong();
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSell.objectPrice.");
            }
        }
    }
    class ObjectItemToSellInBid extends ObjectItemToSell {
        constructor(_super) {
            super()
            this.unsoldDelay = 0;
            this.ID = 6;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.unsoldDelay = 0;
        }

        serialize(output) {
            this.serializeAs_ObjectItemToSellInBid(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemToSellInBid(input);
        }

        serializeAs_ObjectItemToSellInBid(ouput) {
            this.serializeAs_ObjectItemToSell(this, output);
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
            }
            output.writeInt(this.unsoldDelay);
        }

        deserializeAs_ObjectItemToSellInBid(input) {
            super.deserialize(input);
            this.unsoldDelay = input.readInt();
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element of ObjectItemToSellInBid.unsoldDelay.");
            }
        }
    }
    class ObjectItemToSellInNpcShop extends ObjectItemMinimalInformation {
        constructor(_super) {
            super()
            this.objectPrice = 0;
            this.buyCriterion = "";
            this.ID = 5192;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectPrice = 0;
            this.buyCriterion = "";
        }

        serialize(output) {
            this.serializeAs_ObjectItemToSellInNpcShop(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectItemToSellInNpcShop(input);
        }

        serializeAs_ObjectItemToSellInNpcShop(ouput) {
            this.serializeAs_ObjectItemMinimalInformation(this, output);
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element objectPrice.");
            }
            output.writeVarLong(this.objectPrice);
            output.writeUTF(this.buyCriterion);
        }

        deserializeAs_ObjectItemToSellInNpcShop(input) {
            super.deserialize(input);
            this.objectPrice = input.readVarUhLong();
            if (this.objectPrice < 0 || this.objectPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.objectPrice + ") on element of ObjectItemToSellInNpcShop.objectPrice.");
            }
            this.buyCriterion = input.readUTF();
        }
    }
    class SellerBuyerDescriptor {
        constructor() {

            this.quantities = [];
            this.types = [];
            this.taxPercentage = 0;
            this.taxModificationPercentage = 0;
            this.maxItemLevel = 0;
            this.maxItemPerAccount = 0;
            this.npcContextualId = 0;
            this.unsoldDelay = 0;
            this.ID = 1317;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantities = [];
            this.types = [];
            this.taxPercentage = 0;
            this.taxModificationPercentage = 0;
            this.maxItemLevel = 0;
            this.maxItemPerAccount = 0;
            this.npcContextualId = 0;
            this.unsoldDelay = 0;
        }

        serialize(output) {
            this.serializeAs_SellerBuyerDescriptor(output);
        }

        deserialize(input) {
            this.deserializeAs_SellerBuyerDescriptor(input);
        }

        serializeAs_SellerBuyerDescriptor(ouput) {
            output.writeShort(this.quantities.length);
            for (var _i1 = 0; _i1 < this.quantities.length; _i1++) {
                if (this.quantities[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.quantities[_i1] + ") on element 1 (starting at 1) of quantities.");
                }
                output.writeVarInt(this.quantities[_i1]);
            }
            output.writeShort(this.types.length);
            for (var _i2 = 0; _i2 < this.types.length; _i2++) {
                if (this.types[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.types[_i2] + ") on element 2 (starting at 1) of types.");
                }
                output.writeVarInt(this.types[_i2]);
            }
            output.writeFloat(this.taxPercentage);
            output.writeFloat(this.taxModificationPercentage);
            if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
                throw new Error("Forbidden value (" + this.maxItemLevel + ") on element maxItemLevel.");
            }
            output.writeByte(this.maxItemLevel);
            if (this.maxItemPerAccount < 0) {
                throw new Error("Forbidden value (" + this.maxItemPerAccount + ") on element maxItemPerAccount.");
            }
            output.writeVarInt(this.maxItemPerAccount);
            output.writeInt(this.npcContextualId);
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element unsoldDelay.");
            }
            output.writeVarShort(this.unsoldDelay);
        }

        deserializeAs_SellerBuyerDescriptor(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _quantitiesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _quantitiesLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of quantities.");
                }
                this.quantities.push(_val1);
            }
            var _typesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _typesLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of types.");
                }
                this.types.push(_val2);
            }
            this.taxPercentage = input.readFloat();
            this.taxModificationPercentage = input.readFloat();
            this.maxItemLevel = input.readUnsignedByte();
            if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
                throw new Error("Forbidden value (" + this.maxItemLevel + ") on element of SellerBuyerDescriptor.maxItemLevel.");
            }
            this.maxItemPerAccount = input.readVarUhInt();
            if (this.maxItemPerAccount < 0) {
                throw new Error("Forbidden value (" + this.maxItemPerAccount + ") on element of SellerBuyerDescriptor.maxItemPerAccount.");
            }
            this.npcContextualId = input.readInt();
            this.unsoldDelay = input.readVarUhShort();
            if (this.unsoldDelay < 0) {
                throw new Error("Forbidden value (" + this.unsoldDelay + ") on element of SellerBuyerDescriptor.unsoldDelay.");
            }
        }
    }
    class EntityInformation {
        constructor() {

            this.id = 0;
            this.experience = 0;
            this.status = false;
            this.ID = 6144;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.experience = 0;
            this.status = false;
        }

        serialize(output) {
            this.serializeAs_EntityInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_EntityInformation(input);
        }

        serializeAs_EntityInformation(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            if (this.experience < 0) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarInt(this.experience);
            output.writeBoolean(this.status);
        }

        deserializeAs_EntityInformation(input) {
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of EntityInformation.id.");
            }
            this.experience = input.readVarUhInt();
            if (this.experience < 0) {
                throw new Error("Forbidden value (" + this.experience + ") on element of EntityInformation.experience.");
            }
            this.status = input.readBoolean();
        }
    }
    class ProtectedEntityWaitingForHelpInfo {
        constructor() {

            this.timeLeftBeforeFight = 0;
            this.waitTimeForPlacement = 0;
            this.nbPositionForDefensors = 0;
            this.ID = 8921;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.timeLeftBeforeFight = 0;
            this.waitTimeForPlacement = 0;
            this.nbPositionForDefensors = 0;
        }

        serialize(output) {
            this.serializeAs_ProtectedEntityWaitingForHelpInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_ProtectedEntityWaitingForHelpInfo(input);
        }

        serializeAs_ProtectedEntityWaitingForHelpInfo(ouput) {
            output.writeInt(this.timeLeftBeforeFight);
            output.writeInt(this.waitTimeForPlacement);
            if (this.nbPositionForDefensors < 0) {
                throw new Error("Forbidden value (" + this.nbPositionForDefensors + ") on element nbPositionForDefensors.");
            }
            output.writeByte(this.nbPositionForDefensors);
        }

        deserializeAs_ProtectedEntityWaitingForHelpInfo(input) {
            this.timeLeftBeforeFight = input.readInt();
            this.waitTimeForPlacement = input.readInt();
            this.nbPositionForDefensors = input.readByte();
            if (this.nbPositionForDefensors < 0) {
                throw new Error("Forbidden value (" + this.nbPositionForDefensors + ") on element of ProtectedEntityWaitingForHelpInfo.nbPositionForDefensors.");
            }
        }
    }
    class FinishMoveInformations {
        constructor() {

            this.finishMoveId = 0;
            this.finishMoveState = false;
            this.ID = 9504;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.finishMoveId = 0;
            this.finishMoveState = false;
        }

        serialize(output) {
            this.serializeAs_FinishMoveInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FinishMoveInformations(input);
        }

        serializeAs_FinishMoveInformations(ouput) {
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
            }
            output.writeInt(this.finishMoveId);
            output.writeBoolean(this.finishMoveState);
        }

        deserializeAs_FinishMoveInformations(input) {
            this.finishMoveId = input.readInt();
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveInformations.finishMoveId.");
            }
            this.finishMoveState = input.readBoolean();
        }
    }
    class AcquaintanceInformation extends AbstractContactInformations {
        constructor(_super) {
            super()
            this.playerState = 99;
            this.ID = 1170;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerState = 99;
        }

        serialize(output) {
            this.serializeAs_AcquaintanceInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintanceInformation(input);
        }

        serializeAs_AcquaintanceInformation(ouput) {
            this.serializeAs_AbstractContactInformations(this, output);
            output.writeByte(this.playerState);
        }

        deserializeAs_AcquaintanceInformation(input) {
            super.deserialize(input);
            this.playerState = input.readByte();
            if (this.playerState < 0) {
                throw new Error("Forbidden value (" + this.playerState + ") on element of AcquaintanceInformation.playerState.");
            }
        }
    }
    class AcquaintanceOnlineInformation extends AcquaintanceInformation {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            this.ID = 7696;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
        }

        serialize(output) {
            this.serializeAs_AcquaintanceOnlineInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintanceOnlineInformation(input);
        }

        serializeAs_AcquaintanceOnlineInformation(ouput) {
            this.serializeAs_AcquaintanceInformation(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
            }
            output.writeVarShort(this.moodSmileyId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        }

        deserializeAs_AcquaintanceOnlineInformation(input) {
            super.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AcquaintanceOnlineInformation.playerId.");
            }
            this.playerName = input.readUTF();
            this.moodSmileyId = input.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of AcquaintanceOnlineInformation.moodSmileyId.");
            }
            var _id4 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id4);
            this.status.deserialize(input);
        }
    }
    class FriendInformations extends AbstractContactInformations {
        constructor(_super) {
            super()
            this.playerState = 99;
            this.lastConnection = 0;
            this.achievementPoints = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.ID = 9;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerState = 99;
            this.lastConnection = 0;
            this.achievementPoints = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
        }

        serialize(output) {
            this.serializeAs_FriendInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendInformations(input);
        }

        serializeAs_FriendInformations(ouput) {
            this.serializeAs_AbstractContactInformations(this, output);
            output.writeByte(this.playerState);
            if (this.lastConnection < 0) {
                throw new Error("Forbidden value (" + this.lastConnection + ") on element lastConnection.");
            }
            output.writeVarShort(this.lastConnection);
            output.writeInt(this.achievementPoints);
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
        }

        deserializeAs_FriendInformations(input) {
            super.deserialize(input);
            this.playerState = input.readByte();
            if (this.playerState < 0) {
                throw new Error("Forbidden value (" + this.playerState + ") on element of FriendInformations.playerState.");
            }
            this.lastConnection = input.readVarUhShort();
            if (this.lastConnection < 0) {
                throw new Error("Forbidden value (" + this.lastConnection + ") on element of FriendInformations.lastConnection.");
            }
            this.achievementPoints = input.readInt();
            this.leagueId = input.readVarShort();
            this.ladderPosition = input.readInt();
        }
    }
    class FriendOnlineInformations extends FriendInformations {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.level = 0;
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.guildInfo = new GuildInformations();
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            this.havenBagShared = false;
            this.ID = 6761;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.level = 0;
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.guildInfo = new GuildInformations();
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            this.havenBagShared = false;
        }

        serialize(output) {
            this.serializeAs_FriendOnlineInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendOnlineInformations(input);
        }

        serializeAs_FriendOnlineInformations(ouput) {
            this.serializeAs_FriendInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.havenBagShared);
            output.writeByte(_box0);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            output.writeByte(this.alignmentSide);
            output.writeByte(this.breed);
            this.guildInfo.serializeAs_GuildInformations(output);
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
            }
            output.writeVarShort(this.moodSmileyId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        }

        deserializeAs_FriendOnlineInformations(input) {
            super.deserialize(input);
            var _box0 = input.readByte();
            this.sex = BooleanByteWrapper.getFlag(_box0, 0);
            this.havenBagShared = BooleanByteWrapper.getFlag(_box0, 1);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of FriendOnlineInformations.playerId.");
            }
            this.playerName = input.readUTF();
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of FriendOnlineInformations.level.");
            }
            this.alignmentSide = input.readByte();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of FriendOnlineInformations.breed.");
            }
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.moodSmileyId = input.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of FriendOnlineInformations.moodSmileyId.");
            }
            var _id9 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id9);
            this.status.deserialize(input);
        }
    }
    class FriendSpouseInformations {
        constructor() {

            this.spouseAccountId = 0;
            this.spouseId = 0;
            this.spouseName = "";
            this.spouseLevel = 0;
            this.breed = 0;
            this.sex = 0;
            this.spouseEntityLook = new EntityLook();
            this.guildInfo = new GuildInformations();
            this.alignmentSide = 0;
            this.ID = 2963;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spouseAccountId = 0;
            this.spouseId = 0;
            this.spouseName = "";
            this.spouseLevel = 0;
            this.breed = 0;
            this.sex = 0;
            this.spouseEntityLook = new EntityLook();
            this.guildInfo = new GuildInformations();
            this.alignmentSide = 0;
        }

        serialize(output) {
            this.serializeAs_FriendSpouseInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSpouseInformations(input);
        }

        serializeAs_FriendSpouseInformations(ouput) {
            if (this.spouseAccountId < 0) {
                throw new Error("Forbidden value (" + this.spouseAccountId + ") on element spouseAccountId.");
            }
            output.writeInt(this.spouseAccountId);
            if (this.spouseId < 0 || this.spouseId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.spouseId + ") on element spouseId.");
            }
            output.writeVarLong(this.spouseId);
            output.writeUTF(this.spouseName);
            if (this.spouseLevel < 0) {
                throw new Error("Forbidden value (" + this.spouseLevel + ") on element spouseLevel.");
            }
            output.writeVarShort(this.spouseLevel);
            output.writeByte(this.breed);
            output.writeByte(this.sex);
            this.spouseEntityLook.serializeAs_EntityLook(output);
            this.guildInfo.serializeAs_GuildInformations(output);
            output.writeByte(this.alignmentSide);
        }

        deserializeAs_FriendSpouseInformations(input) {
            this.spouseAccountId = input.readInt();
            if (this.spouseAccountId < 0) {
                throw new Error("Forbidden value (" + this.spouseAccountId + ") on element of FriendSpouseInformations.spouseAccountId.");
            }
            this.spouseId = input.readVarUhLong();
            if (this.spouseId < 0 || this.spouseId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.spouseId + ") on element of FriendSpouseInformations.spouseId.");
            }
            this.spouseName = input.readUTF();
            this.spouseLevel = input.readVarUhShort();
            if (this.spouseLevel < 0) {
                throw new Error("Forbidden value (" + this.spouseLevel + ") on element of FriendSpouseInformations.spouseLevel.");
            }
            this.breed = input.readByte();
            this.sex = input.readByte();
            this.spouseEntityLook = new EntityLook();
            this.spouseEntityLook.deserialize(input);
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.alignmentSide = input.readByte();
        }
    }
    class FriendSpouseOnlineInformations extends FriendSpouseInformations {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.subAreaId = 0;
            this.inFight = false;
            this.followSpouse = false;
            this.ID = 24;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.subAreaId = 0;
            this.inFight = false;
            this.followSpouse = false;
        }

        serialize(output) {
            this.serializeAs_FriendSpouseOnlineInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSpouseOnlineInformations(input);
        }

        serializeAs_FriendSpouseOnlineInformations(ouput) {
            this.serializeAs_FriendSpouseInformations(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.inFight);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.followSpouse);
            output.writeByte(_box0);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        }

        deserializeAs_FriendSpouseOnlineInformations(input) {
            super.deserialize(input);
            var _box0 = input.readByte();
            this.inFight = BooleanByteWrapper.getFlag(_box0, 0);
            this.followSpouse = BooleanByteWrapper.getFlag(_box0, 1);
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of FriendSpouseOnlineInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of FriendSpouseOnlineInformations.subAreaId.");
            }
        }
    }
    class IgnoredInformations extends AbstractContactInformations {
        constructor(_super) {
            super()

            this.ID = 4916;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_IgnoredInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredInformations(input);
        }

        serializeAs_IgnoredInformations(ouput) {
            this.serializeAs_AbstractContactInformations(this, output);
        }

        deserializeAs_IgnoredInformations(input) {
            super.deserialize(input);
        }
    }
    class IgnoredOnlineInformations extends IgnoredInformations {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.ID = 9704;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
        }

        serialize(output) {
            this.serializeAs_IgnoredOnlineInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredOnlineInformations(input);
        }

        serializeAs_IgnoredOnlineInformations(ouput) {
            this.serializeAs_IgnoredInformations(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
        }

        deserializeAs_IgnoredOnlineInformations(input) {
            super.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of IgnoredOnlineInformations.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of IgnoredOnlineInformations.breed.");
            }
            this.sex = input.readBoolean();
        }
    }
    class Contribution {
        constructor() {

            this.contributorId = 0;
            this.contributorName = "";
            this.amount = 0;
            this.ID = 1331;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.contributorId = 0;
            this.contributorName = "";
            this.amount = 0;
        }

        serialize(output) {
            this.serializeAs_Contribution(output);
        }

        deserialize(input) {
            this.deserializeAs_Contribution(input);
        }

        serializeAs_Contribution(ouput) {
            if (this.contributorId < 0 || this.contributorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.contributorId + ") on element contributorId.");
            }
            output.writeVarLong(this.contributorId);
            output.writeUTF(this.contributorName);
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
        }

        deserializeAs_Contribution(input) {
            this.contributorId = input.readVarUhLong();
            if (this.contributorId < 0 || this.contributorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.contributorId + ") on element of Contribution.contributorId.");
            }
            this.contributorName = input.readUTF();
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element of Contribution.amount.");
            }
        }
    }
    class GuildMemberInfo extends SocialMember {
        constructor(_super) {
            super()
            this.givenExperience = 0;
            this.experienceGivenPercent = 0;
            this.alignmentSide = 0;
            this.moodSmileyId = 0;
            this.achievementPoints = 0;
            this.havenBagShared = false;
            this.note = new PlayerNote();
            this.ID = 5050;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.givenExperience = 0;
            this.experienceGivenPercent = 0;
            this.alignmentSide = 0;
            this.moodSmileyId = 0;
            this.achievementPoints = 0;
            this.havenBagShared = false;
            this.note = new PlayerNote();
        }

        serialize(output) {
            this.serializeAs_GuildMemberInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMemberInfo(input);
        }

        serializeAs_GuildMemberInfo(ouput) {
            this.serializeAs_SocialMember(this, output);
            if (this.givenExperience < 0 || this.givenExperience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.givenExperience + ") on element givenExperience.");
            }
            output.writeVarLong(this.givenExperience);
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
            }
            output.writeByte(this.experienceGivenPercent);
            output.writeByte(this.alignmentSide);
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element moodSmileyId.");
            }
            output.writeVarShort(this.moodSmileyId);
            output.writeInt(this.achievementPoints);
            output.writeBoolean(this.havenBagShared);
            this.note.serializeAs_PlayerNote(output);
        }

        deserializeAs_GuildMemberInfo(input) {
            super.deserialize(input);
            this.givenExperience = input.readVarUhLong();
            if (this.givenExperience < 0 || this.givenExperience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.givenExperience + ") on element of GuildMemberInfo.givenExperience.");
            }
            this.experienceGivenPercent = input.readByte();
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildMemberInfo.experienceGivenPercent.");
            }
            this.alignmentSide = input.readByte();
            this.moodSmileyId = input.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error("Forbidden value (" + this.moodSmileyId + ") on element of GuildMemberInfo.moodSmileyId.");
            }
            this.achievementPoints = input.readInt();
            this.havenBagShared = input.readBoolean();
            this.note = new PlayerNote();
            this.note.deserialize(input);
        }
    }
    class HavenBagFurnitureInformation {
        constructor() {

            this.cellId = 0;
            this.funitureId = 0;
            this.orientation = 0;
            this.ID = 2261;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
            this.funitureId = 0;
            this.orientation = 0;
        }

        serialize(output) {
            this.serializeAs_HavenBagFurnitureInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagFurnitureInformation(input);
        }

        serializeAs_HavenBagFurnitureInformation(ouput) {
            if (this.cellId < 0) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            output.writeInt(this.funitureId);
            if (this.orientation < 0) {
                throw new Error("Forbidden value (" + this.orientation + ") on element orientation.");
            }
            output.writeByte(this.orientation);
        }

        deserializeAs_HavenBagFurnitureInformation(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of HavenBagFurnitureInformation.cellId.");
            }
            this.funitureId = input.readInt();
            this.orientation = input.readByte();
            if (this.orientation < 0) {
                throw new Error("Forbidden value (" + this.orientation + ") on element of HavenBagFurnitureInformation.orientation.");
            }
        }
    }
    class GuildLogbookEntryBasicInformation {
        constructor() {

            this.id = 0;
            this.date = 0;
            this.ID = 9523;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.date = 0;
        }

        serialize(output) {
            this.serializeAs_GuildLogbookEntryBasicInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLogbookEntryBasicInformation(input);
        }

        serializeAs_GuildLogbookEntryBasicInformation(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            if (this.date < 0 || this.date > 9007199254740992) {
                throw new Error("Forbidden value (" + this.date + ") on element date.");
            }
            output.writeDouble(this.date);
        }

        deserializeAs_GuildLogbookEntryBasicInformation(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of GuildLogbookEntryBasicInformation.id.");
            }
            this.date = input.readDouble();
            if (this.date < 0 || this.date > 9007199254740992) {
                throw new Error("Forbidden value (" + this.date + ") on element of GuildLogbookEntryBasicInformation.date.");
            }
        }
    }
    class GuildLogbookChestActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.eventType = 0;
            this.quantity = 0;
            this.object = new ObjectItemNotInContainer();
            this.sourceTabId = 0;
            this.destinationTabId = 0;
            this.ID = 6005;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.eventType = 0;
            this.quantity = 0;
            this.object = new ObjectItemNotInContainer();
            this.sourceTabId = 0;
            this.destinationTabId = 0;
        }

        serialize(output) {
            this.serializeAs_GuildLogbookChestActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLogbookChestActivity(input);
        }

        serializeAs_GuildLogbookChestActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.eventType);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeInt(this.quantity);
            this.object.serializeAs_ObjectItemNotInContainer(output);
            if (this.sourceTabId < 0) {
                throw new Error("Forbidden value (" + this.sourceTabId + ") on element sourceTabId.");
            }
            output.writeInt(this.sourceTabId);
            if (this.destinationTabId < 0) {
                throw new Error("Forbidden value (" + this.destinationTabId + ") on element destinationTabId.");
            }
            output.writeInt(this.destinationTabId);
        }

        deserializeAs_GuildLogbookChestActivity(input) {
            super.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildLogbookChestActivity.playerId.");
            }
            this.playerName = input.readUTF();
            this.eventType = input.readByte();
            if (this.eventType < 0) {
                throw new Error("Forbidden value (" + this.eventType + ") on element of GuildLogbookChestActivity.eventType.");
            }
            this.quantity = input.readInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of GuildLogbookChestActivity.quantity.");
            }
            this.object = new ObjectItemNotInContainer();
            this.object.deserialize(input);
            this.sourceTabId = input.readInt();
            if (this.sourceTabId < 0) {
                throw new Error("Forbidden value (" + this.sourceTabId + ") on element of GuildLogbookChestActivity.sourceTabId.");
            }
            this.destinationTabId = input.readInt();
            if (this.destinationTabId < 0) {
                throw new Error("Forbidden value (" + this.destinationTabId + ") on element of GuildLogbookChestActivity.destinationTabId.");
            }
        }
    }
    class GuildLevelUpActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()
            this.newGuildLevel = 0;
            this.ID = 3144;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.newGuildLevel = 0;
        }

        serialize(output) {
            this.serializeAs_GuildLevelUpActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLevelUpActivity(input);
        }

        serializeAs_GuildLevelUpActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
            if (this.newGuildLevel < 0 || this.newGuildLevel > 255) {
                throw new Error("Forbidden value (" + this.newGuildLevel + ") on element newGuildLevel.");
            }
            output.writeByte(this.newGuildLevel);
        }

        deserializeAs_GuildLevelUpActivity(input) {
            super.deserialize(input);
            this.newGuildLevel = input.readUnsignedByte();
            if (this.newGuildLevel < 0 || this.newGuildLevel > 255) {
                throw new Error("Forbidden value (" + this.newGuildLevel + ") on element of GuildLevelUpActivity.newGuildLevel.");
            }
        }
    }
    class GuildPaddockActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.paddockCoordinates = new MapCoordinatesExtended();
            this.farmId = 0;
            this.paddockEventType = 0;
            this.ID = 9496;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.paddockCoordinates = new MapCoordinatesExtended();
            this.farmId = 0;
            this.paddockEventType = 0;
        }

        serialize(output) {
            this.serializeAs_GuildPaddockActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPaddockActivity(input);
        }

        serializeAs_GuildPaddockActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            this.paddockCoordinates.serializeAs_MapCoordinatesExtended(output);
            if (this.farmId < 0 || this.farmId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.farmId + ") on element farmId.");
            }
            output.writeDouble(this.farmId);
            output.writeByte(this.paddockEventType);
        }

        deserializeAs_GuildPaddockActivity(input) {
            super.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildPaddockActivity.playerId.");
            }
            this.playerName = input.readUTF();
            this.paddockCoordinates = new MapCoordinatesExtended();
            this.paddockCoordinates.deserialize(input);
            this.farmId = input.readDouble();
            if (this.farmId < 0 || this.farmId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.farmId + ") on element of GuildPaddockActivity.farmId.");
            }
            this.paddockEventType = input.readByte();
            if (this.paddockEventType < 0) {
                throw new Error("Forbidden value (" + this.paddockEventType + ") on element of GuildPaddockActivity.paddockEventType.");
            }
        }
    }
    class GuildPlayerFlowActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.playerName = "";
            this.playerFlowEventType = 0;
            this.ID = 418;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.playerFlowEventType = 0;
        }

        serialize(output) {
            this.serializeAs_GuildPlayerFlowActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPlayerFlowActivity(input);
        }

        serializeAs_GuildPlayerFlowActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.playerFlowEventType);
        }

        deserializeAs_GuildPlayerFlowActivity(input) {
            super.deserialize(input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildPlayerFlowActivity.playerId.");
            }
            this.playerName = input.readUTF();
            this.playerFlowEventType = input.readByte();
            if (this.playerFlowEventType < 0) {
                throw new Error("Forbidden value (" + this.playerFlowEventType + ") on element of GuildPlayerFlowActivity.playerFlowEventType.");
            }
        }
    }
    class GuildPlayerRankUpdateActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()
            this.guildRankMinimalInfos = new RankMinimalInformation();
            this.sourcePlayerId = 0;
            this.targetPlayerId = 0;
            this.sourcePlayerName = "";
            this.targetPlayerName = "";
            this.ID = 2109;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildRankMinimalInfos = new RankMinimalInformation();
            this.sourcePlayerId = 0;
            this.targetPlayerId = 0;
            this.sourcePlayerName = "";
            this.targetPlayerName = "";
        }

        serialize(output) {
            this.serializeAs_GuildPlayerRankUpdateActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPlayerRankUpdateActivity(input);
        }

        serializeAs_GuildPlayerRankUpdateActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
            this.guildRankMinimalInfos.serializeAs_RankMinimalInformation(output);
            if (this.sourcePlayerId < 0 || this.sourcePlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourcePlayerId + ") on element sourcePlayerId.");
            }
            output.writeVarLong(this.sourcePlayerId);
            if (this.targetPlayerId < 0 || this.targetPlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetPlayerId + ") on element targetPlayerId.");
            }
            output.writeVarLong(this.targetPlayerId);
            output.writeUTF(this.sourcePlayerName);
            output.writeUTF(this.targetPlayerName);
        }

        deserializeAs_GuildPlayerRankUpdateActivity(input) {
            super.deserialize(input);
            this.guildRankMinimalInfos = new RankMinimalInformation();
            this.guildRankMinimalInfos.deserialize(input);
            this.sourcePlayerId = input.readVarUhLong();
            if (this.sourcePlayerId < 0 || this.sourcePlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourcePlayerId + ") on element of GuildPlayerRankUpdateActivity.sourcePlayerId.");
            }
            this.targetPlayerId = input.readVarUhLong();
            if (this.targetPlayerId < 0 || this.targetPlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetPlayerId + ") on element of GuildPlayerRankUpdateActivity.targetPlayerId.");
            }
            this.sourcePlayerName = input.readUTF();
            this.targetPlayerName = input.readUTF();
        }
    }
    class GuildRankActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()
            this.rankActivityType = 0;
            this.guildRankMinimalInfos = new RankMinimalInformation();
            this.ID = 7599;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rankActivityType = 0;
            this.guildRankMinimalInfos = new RankMinimalInformation();
        }

        serialize(output) {
            this.serializeAs_GuildRankActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildRankActivity(input);
        }

        serializeAs_GuildRankActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
            output.writeByte(this.rankActivityType);
            this.guildRankMinimalInfos.serializeAs_RankMinimalInformation(output);
        }

        deserializeAs_GuildRankActivity(input) {
            super.deserialize(input);
            this.rankActivityType = input.readByte();
            if (this.rankActivityType < 0) {
                throw new Error("Forbidden value (" + this.rankActivityType + ") on element of GuildRankActivity.rankActivityType.");
            }
            this.guildRankMinimalInfos = new RankMinimalInformation();
            this.guildRankMinimalInfos.deserialize(input);
        }
    }
    class GuildUnlockNewTabActivity extends GuildLogbookEntryBasicInformation {
        constructor(_super) {
            super()

            this.ID = 2924;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_GuildUnlockNewTabActivity(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildUnlockNewTabActivity(input);
        }

        serializeAs_GuildUnlockNewTabActivity(ouput) {
            this.serializeAs_GuildLogbookEntryBasicInformation(this, output);
        }

        deserializeAs_GuildUnlockNewTabActivity(input) {
            super.deserialize(input);
        }
    }
    class RankMinimalInformation {
        constructor() {

            this.id = 0;
            this.name = "";
            this.ID = 2095;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.name = "";
        }

        serialize(output) {
            this.serializeAs_RankMinimalInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_RankMinimalInformation(input);
        }

        serializeAs_RankMinimalInformation(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            output.writeUTF(this.name);
        }

        deserializeAs_RankMinimalInformation(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of RankMinimalInformation.id.");
            }
            this.name = input.readUTF();
        }
    }
    class RankPublicInformation extends RankMinimalInformation {
        constructor(_super) {
            super()
            this.order = 0;
            this.gfxId = 0;
            this.ID = 8064;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.order = 0;
            this.gfxId = 0;
        }

        serialize(output) {
            this.serializeAs_RankPublicInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_RankPublicInformation(input);
        }

        serializeAs_RankPublicInformation(ouput) {
            this.serializeAs_RankMinimalInformation(this, output);
            if (this.order < 0) {
                throw new Error("Forbidden value (" + this.order + ") on element order.");
            }
            output.writeVarInt(this.order);
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element gfxId.");
            }
            output.writeVarInt(this.gfxId);
        }

        deserializeAs_RankPublicInformation(input) {
            super.deserialize(input);
            this.order = input.readVarUhInt();
            if (this.order < 0) {
                throw new Error("Forbidden value (" + this.order + ") on element of RankPublicInformation.order.");
            }
            this.gfxId = input.readVarUhInt();
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element of RankPublicInformation.gfxId.");
            }
        }
    }
    class GuildRecruitmentInformation extends SocialRecruitmentInformation {
        constructor(_super) {
            super()
            this.minSuccess = 0;
            this.minSuccessFacultative = false;
            this.ID = 8160;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.minSuccess = 0;
            this.minSuccessFacultative = false;
        }

        serialize(output) {
            this.serializeAs_GuildRecruitmentInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildRecruitmentInformation(input);
        }

        serializeAs_GuildRecruitmentInformation(ouput) {
            this.serializeAs_SocialRecruitmentInformation(this, output);
            if (this.minSuccess < 0) {
                throw new Error("Forbidden value (" + this.minSuccess + ") on element minSuccess.");
            }
            output.writeVarInt(this.minSuccess);
            output.writeBoolean(this.minSuccessFacultative);
        }

        deserializeAs_GuildRecruitmentInformation(input) {
            super.deserialize(input);
            this.minSuccess = input.readVarUhInt();
            if (this.minSuccess < 0) {
                throw new Error("Forbidden value (" + this.minSuccess + ") on element of GuildRecruitmentInformation.minSuccess.");
            }
            this.minSuccessFacultative = input.readBoolean();
        }
    }
    class HavenBagRoomPreviewInformation {
        constructor() {

            this.roomId = 0;
            this.themeId = 0;
            this.ID = 5153;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.roomId = 0;
            this.themeId = 0;
        }

        serialize(output) {
            this.serializeAs_HavenBagRoomPreviewInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagRoomPreviewInformation(input);
        }

        serializeAs_HavenBagRoomPreviewInformation(ouput) {
            if (this.roomId < 0 || this.roomId > 255) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
            output.writeByte(this.themeId);
        }

        deserializeAs_HavenBagRoomPreviewInformation(input) {
            this.roomId = input.readUnsignedByte();
            if (this.roomId < 0 || this.roomId > 255) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of HavenBagRoomPreviewInformation.roomId.");
            }
            this.themeId = input.readByte();
        }
    }
    class HouseInformations {
        constructor() {

            this.houseId = 0;
            this.modelId = 0;
            this.ID = 5854;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.modelId = 0;
        }

        serialize(output) {
            this.serializeAs_HouseInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseInformations(input);
        }

        serializeAs_HouseInformations(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeVarShort(this.modelId);
        }

        deserializeAs_HouseInformations(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseInformations.houseId.");
            }
            this.modelId = input.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of HouseInformations.modelId.");
            }
        }
    }
    class AccountHouseInformations extends HouseInformations {
        constructor(_super) {
            super()
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.ID = 7977;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        serialize(output) {
            this.serializeAs_AccountHouseInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountHouseInformations(input);
        }

        serializeAs_AccountHouseInformations(ouput) {
            this.serializeAs_HouseInformations(this, output);
            output.writeShort(this.houseInfos.getTypeId());
            this.houseInfos.serialize(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        }

        deserializeAs_AccountHouseInformations(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.houseInfos = ProtocolTypeManager.getInstance(HouseInstanceInformations, _id1);
            this.houseInfos.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of AccountHouseInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of AccountHouseInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of AccountHouseInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AccountHouseInformations.subAreaId.");
            }
        }
    }
    class HouseInstanceInformations {
        constructor() {

            this.instanceId = 0;
            this.secondHand = false;
            this.isLocked = false;
            this.ownerTag = new AccountTagInformation();
            this.hasOwner = false;
            this.price = 0;
            this.isSaleLocked = false;
            this.isAdminLocked = false;
            this.ID = 4306;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.instanceId = 0;
            this.secondHand = false;
            this.isLocked = false;
            this.ownerTag = new AccountTagInformation();
            this.hasOwner = false;
            this.price = 0;
            this.isSaleLocked = false;
            this.isAdminLocked = false;
        }

        serialize(output) {
            this.serializeAs_HouseInstanceInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseInstanceInformations(input);
        }

        serializeAs_HouseInstanceInformations(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.secondHand);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isLocked);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.hasOwner);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isSaleLocked);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.isAdminLocked);
            output.writeByte(_box0);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            this.ownerTag.serializeAs_AccountTagInformation(output);
            if (this.price < -9007199254740992 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_HouseInstanceInformations(input) {
            var _box0 = input.readByte();
            this.secondHand = BooleanByteWrapper.getFlag(_box0, 0);
            this.isLocked = BooleanByteWrapper.getFlag(_box0, 1);
            this.hasOwner = BooleanByteWrapper.getFlag(_box0, 2);
            this.isSaleLocked = BooleanByteWrapper.getFlag(_box0, 3);
            this.isAdminLocked = BooleanByteWrapper.getFlag(_box0, 4);
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInstanceInformations.instanceId.");
            }
            this.ownerTag = new AccountTagInformation();
            this.ownerTag.deserialize(input);
            this.price = input.readVarLong();
            if (this.price < -9007199254740992 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of HouseInstanceInformations.price.");
            }
        }
    }
    class HouseGuildedInformations extends HouseInstanceInformations {
        constructor(_super) {
            super()
            this.guildInfo = new GuildInformations();
            this.ID = 4880;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildInfo = new GuildInformations();
        }

        serialize(output) {
            this.serializeAs_HouseGuildedInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseGuildedInformations(input);
        }

        serializeAs_HouseGuildedInformations(ouput) {
            this.serializeAs_HouseInstanceInformations(this, output);
            this.guildInfo.serializeAs_GuildInformations(output);
        }

        deserializeAs_HouseGuildedInformations(input) {
            super.deserialize(input);
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
        }
    }
    class HouseInformationsForGuild extends HouseInformations {
        constructor(_super) {
            super()
            this.instanceId = 0;
            this.secondHand = false;
            this.ownerTag = new AccountTagInformation();
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.skillListIds = [];
            this.guildshareParams = 0;
            this.ID = 5625;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.instanceId = 0;
            this.secondHand = false;
            this.ownerTag = new AccountTagInformation();
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.skillListIds = [];
            this.guildshareParams = 0;
        }

        serialize(output) {
            this.serializeAs_HouseInformationsForGuild(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseInformationsForGuild(input);
        }

        serializeAs_HouseInformationsForGuild(ouput) {
            this.serializeAs_HouseInformations(this, output);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            this.ownerTag.serializeAs_AccountTagInformation(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeShort(this.skillListIds.length);
            for (var _i8 = 0; _i8 < this.skillListIds.length; _i8++) {
                output.writeInt(this.skillListIds[_i8]);
            }
            if (this.guildshareParams < 0) {
                throw new Error("Forbidden value (" + this.guildshareParams + ") on element guildshareParams.");
            }
            output.writeVarInt(this.guildshareParams);
        }

        deserializeAs_HouseInformationsForGuild(input) {
            var _val8 = 0;
            super.deserialize(input);
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsForGuild.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.ownerTag = new AccountTagInformation();
            this.ownerTag.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForGuild.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForGuild.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of HouseInformationsForGuild.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForGuild.subAreaId.");
            }
            var _skillListIdsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _skillListIdsLen; _i8++) {
                _val8 = input.readInt();
                this.skillListIds.push(_val8);
            }
            this.guildshareParams = input.readVarUhInt();
            if (this.guildshareParams < 0) {
                throw new Error("Forbidden value (" + this.guildshareParams + ") on element of HouseInformationsForGuild.guildshareParams.");
            }
        }
    }
    class HouseInformationsForSell {
        constructor() {

            this.instanceId = 0;
            this.secondHand = false;
            this.modelId = 0;
            this.ownerTag = new AccountTagInformation();
            this.hasOwner = false;
            this.ownerCharacterName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbRoom = 0;
            this.nbChest = 0;
            this.skillListIds = [];
            this.isLocked = false;
            this.price = 0;
            this.ID = 4035;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.instanceId = 0;
            this.secondHand = false;
            this.modelId = 0;
            this.ownerTag = new AccountTagInformation();
            this.hasOwner = false;
            this.ownerCharacterName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbRoom = 0;
            this.nbChest = 0;
            this.skillListIds = [];
            this.isLocked = false;
            this.price = 0;
        }

        serialize(output) {
            this.serializeAs_HouseInformationsForSell(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseInformationsForSell(input);
        }

        serializeAs_HouseInformationsForSell(ouput) {
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeVarInt(this.modelId);
            this.ownerTag.serializeAs_AccountTagInformation(output);
            output.writeBoolean(this.hasOwner);
            output.writeUTF(this.ownerCharacterName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.nbRoom);
            output.writeByte(this.nbChest);
            output.writeShort(this.skillListIds.length);
            for (var _i12 = 0; _i12 < this.skillListIds.length; _i12++) {
                output.writeInt(this.skillListIds[_i12]);
            }
            output.writeBoolean(this.isLocked);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_HouseInformationsForSell(input) {
            var _val12 = 0;
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseInformationsForSell.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.modelId = input.readVarUhInt();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of HouseInformationsForSell.modelId.");
            }
            this.ownerTag = new AccountTagInformation();
            this.ownerTag.deserialize(input);
            this.hasOwner = input.readBoolean();
            this.ownerCharacterName = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsForSell.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsForSell.worldY.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of HouseInformationsForSell.subAreaId.");
            }
            this.nbRoom = input.readByte();
            this.nbChest = input.readByte();
            var _skillListIdsLen = input.readUnsignedShort();
            for (var _i12 = 0; _i12 < _skillListIdsLen; _i12++) {
                _val12 = input.readInt();
                this.skillListIds.push(_val12);
            }
            this.isLocked = input.readBoolean();
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of HouseInformationsForSell.price.");
            }
        }
    }
    class HouseInformationsInside extends HouseInformations {
        constructor(_super) {
            super()
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.ID = 9507;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseInfos = new HouseInstanceInformations();
            this.worldX = 0;
            this.worldY = 0;
        }

        serialize(output) {
            this.serializeAs_HouseInformationsInside(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseInformationsInside(input);
        }

        serializeAs_HouseInformationsInside(ouput) {
            this.serializeAs_HouseInformations(this, output);
            output.writeShort(this.houseInfos.getTypeId());
            this.houseInfos.serialize(output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
        }

        deserializeAs_HouseInformationsInside(input) {
            super.deserialize(input);
            var _id1 = input.readUnsignedShort();
            this.houseInfos = ProtocolTypeManager.getInstance(HouseInstanceInformations, _id1);
            this.houseInfos.deserialize(input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of HouseInformationsInside.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of HouseInformationsInside.worldY.");
            }
        }
    }
    class HouseOnMapInformations extends HouseInformations {
        constructor(_super) {
            super()
            this.doorsOnMap = [];
            this.houseInstances = [];
            this.ID = 9048;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.doorsOnMap = [];
            this.houseInstances = [];
        }

        serialize(output) {
            this.serializeAs_HouseOnMapInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseOnMapInformations(input);
        }

        serializeAs_HouseOnMapInformations(ouput) {
            this.serializeAs_HouseInformations(this, output);
            output.writeShort(this.doorsOnMap.length);
            for (var _i1 = 0; _i1 < this.doorsOnMap.length; _i1++) {
                if (this.doorsOnMap[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.doorsOnMap[_i1] + ") on element 1 (starting at 1) of doorsOnMap.");
                }
                output.writeInt(this.doorsOnMap[_i1]);
            }
            output.writeShort(this.houseInstances.length);
            for (var _i2 = 0; _i2 < this.houseInstances.length; _i2++) {
                (this.houseInstances[_i2]).serializeAs_HouseInstanceInformations(output);
            }
        }

        deserializeAs_HouseOnMapInformations(input) {
            var _val1 = 0;
            var _item2 = null;
            super.deserialize(input);
            var _doorsOnMapLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _doorsOnMapLen; _i1++) {
                _val1 = input.readInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of doorsOnMap.");
                }
                this.doorsOnMap.push(_val1);
            }
            var _houseInstancesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _houseInstancesLen; _i2++) {
                _item2 = new HouseInstanceInformations();
                _item2.deserialize(input);
                this.houseInstances.push(_item2);
            }
        }
    }
    class InteractiveElement {
        constructor() {

            this.elementId = 0;
            this.elementTypeId = 0;
            this.enabledSkills = [];
            this.disabledSkills = [];
            this.onCurrentMap = false;
            this.ID = 8946;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elementId = 0;
            this.elementTypeId = 0;
            this.enabledSkills = [];
            this.disabledSkills = [];
            this.onCurrentMap = false;
        }

        serialize(output) {
            this.serializeAs_InteractiveElement(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveElement(input);
        }

        serializeAs_InteractiveElement(ouput) {
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeInt(this.elementId);
            output.writeInt(this.elementTypeId);
            output.writeShort(this.enabledSkills.length);
            for (var _i3 = 0; _i3 < this.enabledSkills.length; _i3++) {
                output.writeShort((this.enabledSkills[_i3]).getTypeId());
                (this.enabledSkills[_i3]).serialize(output);
            }
            output.writeShort(this.disabledSkills.length);
            for (var _i4 = 0; _i4 < this.disabledSkills.length; _i4++) {
                output.writeShort((this.disabledSkills[_i4]).getTypeId());
                (this.disabledSkills[_i4]).serialize(output);
            }
            output.writeBoolean(this.onCurrentMap);
        }

        deserializeAs_InteractiveElement(input) {
            var _id3 = 0;
            var _item3 = null;
            var _id4 = 0;
            var _item4 = null;
            this.elementId = input.readInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of InteractiveElement.elementId.");
            }
            this.elementTypeId = input.readInt();
            var _enabledSkillsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _enabledSkillsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(InteractiveElementSkill, _id3);
                _item3.deserialize(input);
                this.enabledSkills.push(_item3);
            }
            var _disabledSkillsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _disabledSkillsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(InteractiveElementSkill, _id4);
                _item4.deserialize(input);
                this.disabledSkills.push(_item4);
            }
            this.onCurrentMap = input.readBoolean();
        }
    }
    class InteractiveElementSkill {
        constructor() {

            this.skillId = 0;
            this.skillInstanceUid = 0;
            this.ID = 7959;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.skillId = 0;
            this.skillInstanceUid = 0;
        }

        serialize(output) {
            this.serializeAs_InteractiveElementSkill(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveElementSkill(input);
        }

        serializeAs_InteractiveElementSkill(ouput) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
            }
            output.writeInt(this.skillInstanceUid);
        }

        deserializeAs_InteractiveElementSkill(input) {
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveElementSkill.skillId.");
            }
            this.skillInstanceUid = input.readInt();
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveElementSkill.skillInstanceUid.");
            }
        }
    }
    class InteractiveElementNamedSkill extends InteractiveElementSkill {
        constructor(_super) {
            super()
            this.nameId = 0;
            this.ID = 6946;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nameId = 0;
        }

        serialize(output) {
            this.serializeAs_InteractiveElementNamedSkill(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveElementNamedSkill(input);
        }

        serializeAs_InteractiveElementNamedSkill(ouput) {
            this.serializeAs_InteractiveElementSkill(this, output);
            if (this.nameId < 0) {
                throw new Error("Forbidden value (" + this.nameId + ") on element nameId.");
            }
            output.writeVarInt(this.nameId);
        }

        deserializeAs_InteractiveElementNamedSkill(input) {
            super.deserialize(input);
            this.nameId = input.readVarUhInt();
            if (this.nameId < 0) {
                throw new Error("Forbidden value (" + this.nameId + ") on element of InteractiveElementNamedSkill.nameId.");
            }
        }
    }
    class InteractiveElementWithAgeBonus extends InteractiveElement {
        constructor(_super) {
            super()
            this.ageBonus = 0;
            this.ID = 312;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ageBonus = 0;
        }

        serialize(output) {
            this.serializeAs_InteractiveElementWithAgeBonus(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveElementWithAgeBonus(input);
        }

        serializeAs_InteractiveElementWithAgeBonus(ouput) {
            this.serializeAs_InteractiveElement(this, output);
            if (this.ageBonus < -1 || this.ageBonus > 1000) {
                throw new Error("Forbidden value (" + this.ageBonus + ") on element ageBonus.");
            }
            output.writeShort(this.ageBonus);
        }

        deserializeAs_InteractiveElementWithAgeBonus(input) {
            super.deserialize(input);
            this.ageBonus = input.readShort();
            if (this.ageBonus < -1 || this.ageBonus > 1000) {
                throw new Error("Forbidden value (" + this.ageBonus + ") on element of InteractiveElementWithAgeBonus.ageBonus.");
            }
        }
    }
    class MapObstacle {
        constructor() {

            this.obstacleCellId = 0;
            this.state = 0;
            this.ID = 4786;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.obstacleCellId = 0;
            this.state = 0;
        }

        serialize(output) {
            this.serializeAs_MapObstacle(output);
        }

        deserialize(input) {
            this.deserializeAs_MapObstacle(input);
        }

        serializeAs_MapObstacle(ouput) {
            if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
                throw new Error("Forbidden value (" + this.obstacleCellId + ") on element obstacleCellId.");
            }
            output.writeVarShort(this.obstacleCellId);
            output.writeByte(this.state);
        }

        deserializeAs_MapObstacle(input) {
            this.obstacleCellId = input.readVarUhShort();
            if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
                throw new Error("Forbidden value (" + this.obstacleCellId + ") on element of MapObstacle.obstacleCellId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of MapObstacle.state.");
            }
        }
    }
    class SkillActionDescription {
        constructor() {

            this.skillId = 0;
            this.ID = 3991;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.skillId = 0;
        }

        serialize(output) {
            this.serializeAs_SkillActionDescription(output);
        }

        deserialize(input) {
            this.deserializeAs_SkillActionDescription(input);
        }

        serializeAs_SkillActionDescription(ouput) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
        }

        deserializeAs_SkillActionDescription(input) {
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of SkillActionDescription.skillId.");
            }
        }
    }
    class SkillActionDescriptionTimed extends SkillActionDescription {
        constructor(_super) {
            super()
            this.time = 0;
            this.ID = 9881;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.time = 0;
        }

        serialize(output) {
            this.serializeAs_SkillActionDescriptionTimed(output);
        }

        deserialize(input) {
            this.deserializeAs_SkillActionDescriptionTimed(input);
        }

        serializeAs_SkillActionDescriptionTimed(ouput) {
            this.serializeAs_SkillActionDescription(this, output);
            if (this.time < 0 || this.time > 255) {
                throw new Error("Forbidden value (" + this.time + ") on element time.");
            }
            output.writeByte(this.time);
        }

        deserializeAs_SkillActionDescriptionTimed(input) {
            super.deserialize(input);
            this.time = input.readUnsignedByte();
            if (this.time < 0 || this.time > 255) {
                throw new Error("Forbidden value (" + this.time + ") on element of SkillActionDescriptionTimed.time.");
            }
        }
    }
    class SkillActionDescriptionCollect extends SkillActionDescriptionTimed {
        constructor(_super) {
            super()
            this.min = 0;
            this.max = 0;
            this.ID = 8841;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.min = 0;
            this.max = 0;
        }

        serialize(output) {
            this.serializeAs_SkillActionDescriptionCollect(output);
        }

        deserialize(input) {
            this.deserializeAs_SkillActionDescriptionCollect(input);
        }

        serializeAs_SkillActionDescriptionCollect(ouput) {
            this.serializeAs_SkillActionDescriptionTimed(this, output);
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element min.");
            }
            output.writeVarShort(this.min);
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element max.");
            }
            output.writeVarShort(this.max);
        }

        deserializeAs_SkillActionDescriptionCollect(input) {
            super.deserialize(input);
            this.min = input.readVarUhShort();
            if (this.min < 0) {
                throw new Error("Forbidden value (" + this.min + ") on element of SkillActionDescriptionCollect.min.");
            }
            this.max = input.readVarUhShort();
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element of SkillActionDescriptionCollect.max.");
            }
        }
    }
    class SkillActionDescriptionCraft extends SkillActionDescription {
        constructor(_super) {
            super()
            this.probability = 0;
            this.ID = 4921;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.probability = 0;
        }

        serialize(output) {
            this.serializeAs_SkillActionDescriptionCraft(output);
        }

        deserialize(input) {
            this.deserializeAs_SkillActionDescriptionCraft(input);
        }

        serializeAs_SkillActionDescriptionCraft(ouput) {
            this.serializeAs_SkillActionDescription(this, output);
            if (this.probability < 0) {
                throw new Error("Forbidden value (" + this.probability + ") on element probability.");
            }
            output.writeByte(this.probability);
        }

        deserializeAs_SkillActionDescriptionCraft(input) {
            super.deserialize(input);
            this.probability = input.readByte();
            if (this.probability < 0) {
                throw new Error("Forbidden value (" + this.probability + ") on element of SkillActionDescriptionCraft.probability.");
            }
        }
    }
    class StatedElement {
        constructor() {

            this.elementId = 0;
            this.elementCellId = 0;
            this.elementState = 0;
            this.onCurrentMap = false;
            this.ID = 8253;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elementId = 0;
            this.elementCellId = 0;
            this.elementState = 0;
            this.onCurrentMap = false;
        }

        serialize(output) {
            this.serializeAs_StatedElement(output);
        }

        deserialize(input) {
            this.deserializeAs_StatedElement(input);
        }

        serializeAs_StatedElement(ouput) {
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeInt(this.elementId);
            if (this.elementCellId < 0 || this.elementCellId > 559) {
                throw new Error("Forbidden value (" + this.elementCellId + ") on element elementCellId.");
            }
            output.writeVarShort(this.elementCellId);
            if (this.elementState < 0) {
                throw new Error("Forbidden value (" + this.elementState + ") on element elementState.");
            }
            output.writeVarInt(this.elementState);
            output.writeBoolean(this.onCurrentMap);
        }

        deserializeAs_StatedElement(input) {
            this.elementId = input.readInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of StatedElement.elementId.");
            }
            this.elementCellId = input.readVarUhShort();
            if (this.elementCellId < 0 || this.elementCellId > 559) {
                throw new Error("Forbidden value (" + this.elementCellId + ") on element of StatedElement.elementCellId.");
            }
            this.elementState = input.readVarUhInt();
            if (this.elementState < 0) {
                throw new Error("Forbidden value (" + this.elementState + ") on element of StatedElement.elementState.");
            }
            this.onCurrentMap = input.readBoolean();
        }
    }
    class TeleportDestination {
        constructor() {

            this.type = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.level = 0;
            this.cost = 0;
            this.ID = 7820;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.level = 0;
            this.cost = 0;
        }

        serialize(output) {
            this.serializeAs_TeleportDestination(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportDestination(input);
        }

        serializeAs_TeleportDestination(ouput) {
            output.writeByte(this.type);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.cost < 0) {
                throw new Error("Forbidden value (" + this.cost + ") on element cost.");
            }
            output.writeVarShort(this.cost);
        }

        deserializeAs_TeleportDestination(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of TeleportDestination.type.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportDestination.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TeleportDestination.subAreaId.");
            }
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of TeleportDestination.level.");
            }
            this.cost = input.readVarUhShort();
            if (this.cost < 0) {
                throw new Error("Forbidden value (" + this.cost + ") on element of TeleportDestination.cost.");
            }
        }
    }
    class RecycledItem {
        constructor() {

            this.id = 0;
            this.qty = 0;
            this.ID = 4734;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.qty = 0;
        }

        serialize(output) {
            this.serializeAs_RecycledItem(output);
        }

        deserialize(input) {
            this.deserializeAs_RecycledItem(input);
        }

        serializeAs_RecycledItem(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            if (this.qty < 0 || this.qty > 4294967295) {
                throw new Error("Forbidden value (" + this.qty + ") on element qty.");
            }
            output.writeUnsignedInt(this.qty);
        }

        deserializeAs_RecycledItem(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of RecycledItem.id.");
            }
            this.qty = input.readUnsignedInt();
            if (this.qty < 0 || this.qty > 4294967295) {
                throw new Error("Forbidden value (" + this.qty + ") on element of RecycledItem.qty.");
            }
        }
    }
    class StorageTabInformation {
        constructor() {

            this.name = "";
            this.tabNumber = 0;
            this.picto = 0;
            this.openRight = 0;
            this.dropRight = 0;
            this.takeRight = 0;
            this.dropTypeLimitation = [];
            this.ID = 2494;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.tabNumber = 0;
            this.picto = 0;
            this.openRight = 0;
            this.dropRight = 0;
            this.takeRight = 0;
            this.dropTypeLimitation = [];
        }

        serialize(output) {
            this.serializeAs_StorageTabInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageTabInformation(input);
        }

        serializeAs_StorageTabInformation(ouput) {
            output.writeUTF(this.name);
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element tabNumber.");
            }
            output.writeVarInt(this.tabNumber);
            if (this.picto < 0) {
                throw new Error("Forbidden value (" + this.picto + ") on element picto.");
            }
            output.writeVarInt(this.picto);
            if (this.openRight < 0) {
                throw new Error("Forbidden value (" + this.openRight + ") on element openRight.");
            }
            output.writeVarInt(this.openRight);
            if (this.dropRight < 0) {
                throw new Error("Forbidden value (" + this.dropRight + ") on element dropRight.");
            }
            output.writeVarInt(this.dropRight);
            if (this.takeRight < 0) {
                throw new Error("Forbidden value (" + this.takeRight + ") on element takeRight.");
            }
            output.writeVarInt(this.takeRight);
            output.writeShort(this.dropTypeLimitation.length);
            for (var _i7 = 0; _i7 < this.dropTypeLimitation.length; _i7++) {
                if (this.dropTypeLimitation[_i7] < 0) {
                    throw new Error("Forbidden value (" + this.dropTypeLimitation[_i7] + ") on element 7 (starting at 1) of dropTypeLimitation.");
                }
                output.writeVarInt(this.dropTypeLimitation[_i7]);
            }
        }

        deserializeAs_StorageTabInformation(input) {
            var _val7 = 0;
            this.name = input.readUTF();
            this.tabNumber = input.readVarUhInt();
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element of StorageTabInformation.tabNumber.");
            }
            this.picto = input.readVarUhInt();
            if (this.picto < 0) {
                throw new Error("Forbidden value (" + this.picto + ") on element of StorageTabInformation.picto.");
            }
            this.openRight = input.readVarUhInt();
            if (this.openRight < 0) {
                throw new Error("Forbidden value (" + this.openRight + ") on element of StorageTabInformation.openRight.");
            }
            this.dropRight = input.readVarUhInt();
            if (this.dropRight < 0) {
                throw new Error("Forbidden value (" + this.dropRight + ") on element of StorageTabInformation.dropRight.");
            }
            this.takeRight = input.readVarUhInt();
            if (this.takeRight < 0) {
                throw new Error("Forbidden value (" + this.takeRight + ") on element of StorageTabInformation.takeRight.");
            }
            var _dropTypeLimitationLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _dropTypeLimitationLen; _i7++) {
                _val7 = input.readVarUhInt();
                if (_val7 < 0) {
                    throw new Error("Forbidden value (" + _val7 + ") on elements of dropTypeLimitation.");
                }
                this.dropTypeLimitation.push(_val7);
            }
        }
    }
    class UpdatedStorageTabInformation {
        constructor() {

            this.name = "";
            this.tabNumber = 0;
            this.picto = 0;
            this.dropTypeLimitation = [];
            this.ID = 1038;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.tabNumber = 0;
            this.picto = 0;
            this.dropTypeLimitation = [];
        }

        serialize(output) {
            this.serializeAs_UpdatedStorageTabInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdatedStorageTabInformation(input);
        }

        serializeAs_UpdatedStorageTabInformation(ouput) {
            output.writeUTF(this.name);
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element tabNumber.");
            }
            output.writeVarInt(this.tabNumber);
            if (this.picto < 0) {
                throw new Error("Forbidden value (" + this.picto + ") on element picto.");
            }
            output.writeVarInt(this.picto);
            output.writeShort(this.dropTypeLimitation.length);
            for (var _i4 = 0; _i4 < this.dropTypeLimitation.length; _i4++) {
                if (this.dropTypeLimitation[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.dropTypeLimitation[_i4] + ") on element 4 (starting at 1) of dropTypeLimitation.");
                }
                output.writeVarInt(this.dropTypeLimitation[_i4]);
            }
        }

        deserializeAs_UpdatedStorageTabInformation(input) {
            var _val4 = 0;
            this.name = input.readUTF();
            this.tabNumber = input.readVarUhInt();
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element of UpdatedStorageTabInformation.tabNumber.");
            }
            this.picto = input.readVarUhInt();
            if (this.picto < 0) {
                throw new Error("Forbidden value (" + this.picto + ") on element of UpdatedStorageTabInformation.picto.");
            }
            var _dropTypeLimitationLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _dropTypeLimitationLen; _i4++) {
                _val4 = input.readVarUhInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of dropTypeLimitation.");
                }
                this.dropTypeLimitation.push(_val4);
            }
        }
    }
    class EntityLook {
        constructor() {

            this.bonesId = 0;
            this.skins = [];
            this.indexedColors = [];
            this.scales = [];
            this.subentities = [];
            this.ID = 9813;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bonesId = 0;
            this.skins = [];
            this.indexedColors = [];
            this.scales = [];
            this.subentities = [];
        }

        serialize(output) {
            this.serializeAs_EntityLook(output);
        }

        deserialize(input) {
            this.deserializeAs_EntityLook(input);
        }

        serializeAs_EntityLook(ouput) {
            if (this.bonesId < 0) {
                throw new Error("Forbidden value (" + this.bonesId + ") on element bonesId.");
            }
            output.writeVarShort(this.bonesId);
            output.writeShort(this.skins.length);
            for (var _i2 = 0; _i2 < this.skins.length; _i2++) {
                if (this.skins[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.skins[_i2] + ") on element 2 (starting at 1) of skins.");
                }
                output.writeVarShort(this.skins[_i2]);
            }
            output.writeShort(this.indexedColors.length);
            for (var _i3 = 0; _i3 < this.indexedColors.length; _i3++) {
                output.writeInt(this.indexedColors[_i3]);
            }
            output.writeShort(this.scales.length);
            for (var _i4 = 0; _i4 < this.scales.length; _i4++) {
                output.writeVarShort(this.scales[_i4]);
            }
            output.writeShort(this.subentities.length);
            for (var _i5 = 0; _i5 < this.subentities.length; _i5++) {
                (this.subentities[_i5]).serializeAs_SubEntity(output);
            }
        }

        deserializeAs_EntityLook(input) {
            var _val2 = 0;
            var _val3 = 0;
            var _val4 = 0;
            var _item5 = null;
            this.bonesId = input.readVarUhShort();
            if (this.bonesId < 0) {
                throw new Error("Forbidden value (" + this.bonesId + ") on element of EntityLook.bonesId.");
            }
            var _skinsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _skinsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of skins.");
                }
                this.skins.push(_val2);
            }
            var _indexedColorsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _indexedColorsLen; _i3++) {
                _val3 = input.readInt();
                this.indexedColors.push(_val3);
            }
            var _scalesLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _scalesLen; _i4++) {
                _val4 = input.readVarShort();
                this.scales.push(_val4);
            }
            var _subentitiesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _subentitiesLen; _i5++) {
                _item5 = new SubEntity();
                _item5.deserialize(input);
                this.subentities.push(_item5);
            }
        }
    }
    class IndexedEntityLook {
        constructor() {

            this.look = new EntityLook();
            this.index = 0;
            this.ID = 6734;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.look = new EntityLook();
            this.index = 0;
        }

        serialize(output) {
            this.serializeAs_IndexedEntityLook(output);
        }

        deserialize(input) {
            this.deserializeAs_IndexedEntityLook(input);
        }

        serializeAs_IndexedEntityLook(ouput) {
            this.look.serializeAs_EntityLook(output);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        }

        deserializeAs_IndexedEntityLook(input) {
            this.look = new EntityLook();
            this.look.deserialize(input);
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of IndexedEntityLook.index.");
            }
        }
    }
    class SubEntity {
        constructor() {

            this.bindingPointCategory = 0;
            this.bindingPointIndex = 0;
            this.subEntityLook = new EntityLook();
            this.ID = 6465;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bindingPointCategory = 0;
            this.bindingPointIndex = 0;
            this.subEntityLook = new EntityLook();
        }

        serialize(output) {
            this.serializeAs_SubEntity(output);
        }

        deserialize(input) {
            this.deserializeAs_SubEntity(input);
        }

        serializeAs_SubEntity(ouput) {
            output.writeByte(this.bindingPointCategory);
            if (this.bindingPointIndex < 0) {
                throw new Error("Forbidden value (" + this.bindingPointIndex + ") on element bindingPointIndex.");
            }
            output.writeByte(this.bindingPointIndex);
            this.subEntityLook.serializeAs_EntityLook(output);
        }

        deserializeAs_SubEntity(input) {
            this.bindingPointCategory = input.readByte();
            if (this.bindingPointCategory < 0) {
                throw new Error("Forbidden value (" + this.bindingPointCategory + ") on element of SubEntity.bindingPointCategory.");
            }
            this.bindingPointIndex = input.readByte();
            if (this.bindingPointIndex < 0) {
                throw new Error("Forbidden value (" + this.bindingPointIndex + ") on element of SubEntity.bindingPointIndex.");
            }
            this.subEntityLook = new EntityLook();
            this.subEntityLook.deserialize(input);
        }
    }
    class ItemDurability {
        constructor() {

            this.durability = 0;
            this.durabilityMax = 0;
            this.ID = 8768;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.durability = 0;
            this.durabilityMax = 0;
        }

        serialize(output) {
            this.serializeAs_ItemDurability(output);
        }

        deserialize(input) {
            this.deserializeAs_ItemDurability(input);
        }

        serializeAs_ItemDurability(ouput) {
            output.writeShort(this.durability);
            output.writeShort(this.durabilityMax);
        }

        deserializeAs_ItemDurability(input) {
            this.durability = input.readShort();
            this.durabilityMax = input.readShort();
        }
    }
    class MountClientData {
        constructor() {

            this.id = 0;
            this.model = 0;
            this.ancestor = [];
            this.behaviors = [];
            this.name = "";
            this.sex = false;
            this.ownerId = 0;
            this.experience = 0;
            this.experienceForLevel = 0;
            this.experienceForNextLevel = 0;
            this.level = 0;
            this.isRideable = false;
            this.maxPods = 0;
            this.isWild = false;
            this.stamina = 0;
            this.staminaMax = 0;
            this.maturity = 0;
            this.maturityForAdult = 0;
            this.energy = 0;
            this.energyMax = 0;
            this.serenity = 0;
            this.aggressivityMax = 0;
            this.serenityMax = 0;
            this.love = 0;
            this.loveMax = 0;
            this.fecondationTime = 0;
            this.isFecondationReady = false;
            this.boostLimiter = 0;
            this.boostMax = 0;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.harnessGID = 0;
            this.useHarnessColors = false;
            this.effectList = [];
            this.ID = 7903;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.model = 0;
            this.ancestor = [];
            this.behaviors = [];
            this.name = "";
            this.sex = false;
            this.ownerId = 0;
            this.experience = 0;
            this.experienceForLevel = 0;
            this.experienceForNextLevel = 0;
            this.level = 0;
            this.isRideable = false;
            this.maxPods = 0;
            this.isWild = false;
            this.stamina = 0;
            this.staminaMax = 0;
            this.maturity = 0;
            this.maturityForAdult = 0;
            this.energy = 0;
            this.energyMax = 0;
            this.serenity = 0;
            this.aggressivityMax = 0;
            this.serenityMax = 0;
            this.love = 0;
            this.loveMax = 0;
            this.fecondationTime = 0;
            this.isFecondationReady = false;
            this.boostLimiter = 0;
            this.boostMax = 0;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.harnessGID = 0;
            this.useHarnessColors = false;
            this.effectList = [];
        }

        serialize(output) {
            this.serializeAs_MountClientData(output);
        }

        deserialize(input) {
            this.deserializeAs_MountClientData(input);
        }

        serializeAs_MountClientData(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.sex);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isRideable);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.isWild);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isFecondationReady);
            _box0 = BooleanByteWrapper.setFlag(_box0, 4, this.useHarnessColors);
            output.writeByte(_box0);
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element model.");
            }
            output.writeVarInt(this.model);
            output.writeShort(this.ancestor.length);
            for (var _i3 = 0; _i3 < this.ancestor.length; _i3++) {
                if (this.ancestor[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.ancestor[_i3] + ") on element 3 (starting at 1) of ancestor.");
                }
                output.writeInt(this.ancestor[_i3]);
            }
            output.writeShort(this.behaviors.length);
            for (var _i4 = 0; _i4 < this.behaviors.length; _i4++) {
                if (this.behaviors[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.behaviors[_i4] + ") on element 4 (starting at 1) of behaviors.");
                }
                output.writeInt(this.behaviors[_i4]);
            }
            output.writeUTF(this.name);
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
            }
            output.writeInt(this.ownerId);
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForLevel + ") on element experienceForLevel.");
            }
            output.writeVarLong(this.experienceForLevel);
            if (this.experienceForNextLevel < -9007199254740992 || this.experienceForNextLevel > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForNextLevel + ") on element experienceForNextLevel.");
            }
            output.writeDouble(this.experienceForNextLevel);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element maxPods.");
            }
            output.writeVarInt(this.maxPods);
            if (this.stamina < 0) {
                throw new Error("Forbidden value (" + this.stamina + ") on element stamina.");
            }
            output.writeVarInt(this.stamina);
            if (this.staminaMax < 0) {
                throw new Error("Forbidden value (" + this.staminaMax + ") on element staminaMax.");
            }
            output.writeVarInt(this.staminaMax);
            if (this.maturity < 0) {
                throw new Error("Forbidden value (" + this.maturity + ") on element maturity.");
            }
            output.writeVarInt(this.maturity);
            if (this.maturityForAdult < 0) {
                throw new Error("Forbidden value (" + this.maturityForAdult + ") on element maturityForAdult.");
            }
            output.writeVarInt(this.maturityForAdult);
            if (this.energy < 0) {
                throw new Error("Forbidden value (" + this.energy + ") on element energy.");
            }
            output.writeVarInt(this.energy);
            if (this.energyMax < 0) {
                throw new Error("Forbidden value (" + this.energyMax + ") on element energyMax.");
            }
            output.writeVarInt(this.energyMax);
            output.writeInt(this.serenity);
            output.writeInt(this.aggressivityMax);
            if (this.serenityMax < 0) {
                throw new Error("Forbidden value (" + this.serenityMax + ") on element serenityMax.");
            }
            output.writeVarInt(this.serenityMax);
            if (this.love < 0) {
                throw new Error("Forbidden value (" + this.love + ") on element love.");
            }
            output.writeVarInt(this.love);
            if (this.loveMax < 0) {
                throw new Error("Forbidden value (" + this.loveMax + ") on element loveMax.");
            }
            output.writeVarInt(this.loveMax);
            output.writeInt(this.fecondationTime);
            if (this.boostLimiter < 0) {
                throw new Error("Forbidden value (" + this.boostLimiter + ") on element boostLimiter.");
            }
            output.writeInt(this.boostLimiter);
            if (this.boostMax < -9007199254740992 || this.boostMax > 9007199254740992) {
                throw new Error("Forbidden value (" + this.boostMax + ") on element boostMax.");
            }
            output.writeDouble(this.boostMax);
            output.writeInt(this.reproductionCount);
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element reproductionCountMax.");
            }
            output.writeVarInt(this.reproductionCountMax);
            if (this.harnessGID < 0) {
                throw new Error("Forbidden value (" + this.harnessGID + ") on element harnessGID.");
            }
            output.writeVarInt(this.harnessGID);
            output.writeShort(this.effectList.length);
            for (var _i34 = 0; _i34 < this.effectList.length; _i34++) {
                (this.effectList[_i34]).serializeAs_ObjectEffectInteger(output);
            }
        }

        deserializeAs_MountClientData(input) {
            var _val3 = 0;
            var _val4 = 0;
            var _item34 = null;
            var _box0 = input.readByte();
            this.sex = BooleanByteWrapper.getFlag(_box0, 0);
            this.isRideable = BooleanByteWrapper.getFlag(_box0, 1);
            this.isWild = BooleanByteWrapper.getFlag(_box0, 2);
            this.isFecondationReady = BooleanByteWrapper.getFlag(_box0, 3);
            this.useHarnessColors = BooleanByteWrapper.getFlag(_box0, 4);
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of MountClientData.id.");
            }
            this.model = input.readVarUhInt();
            if (this.model < 0) {
                throw new Error("Forbidden value (" + this.model + ") on element of MountClientData.model.");
            }
            var _ancestorLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _ancestorLen; _i3++) {
                _val3 = input.readInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of ancestor.");
                }
                this.ancestor.push(_val3);
            }
            var _behaviorsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _behaviorsLen; _i4++) {
                _val4 = input.readInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of behaviors.");
                }
                this.behaviors.push(_val4);
            }
            this.name = input.readUTF();
            this.ownerId = input.readInt();
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element of MountClientData.ownerId.");
            }
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element of MountClientData.experience.");
            }
            this.experienceForLevel = input.readVarUhLong();
            if (this.experienceForLevel < 0 || this.experienceForLevel > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForLevel + ") on element of MountClientData.experienceForLevel.");
            }
            this.experienceForNextLevel = input.readDouble();
            if (this.experienceForNextLevel < -9007199254740992 || this.experienceForNextLevel > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceForNextLevel + ") on element of MountClientData.experienceForNextLevel.");
            }
            this.level = input.readByte();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of MountClientData.level.");
            }
            this.maxPods = input.readVarUhInt();
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element of MountClientData.maxPods.");
            }
            this.stamina = input.readVarUhInt();
            if (this.stamina < 0) {
                throw new Error("Forbidden value (" + this.stamina + ") on element of MountClientData.stamina.");
            }
            this.staminaMax = input.readVarUhInt();
            if (this.staminaMax < 0) {
                throw new Error("Forbidden value (" + this.staminaMax + ") on element of MountClientData.staminaMax.");
            }
            this.maturity = input.readVarUhInt();
            if (this.maturity < 0) {
                throw new Error("Forbidden value (" + this.maturity + ") on element of MountClientData.maturity.");
            }
            this.maturityForAdult = input.readVarUhInt();
            if (this.maturityForAdult < 0) {
                throw new Error("Forbidden value (" + this.maturityForAdult + ") on element of MountClientData.maturityForAdult.");
            }
            this.energy = input.readVarUhInt();
            if (this.energy < 0) {
                throw new Error("Forbidden value (" + this.energy + ") on element of MountClientData.energy.");
            }
            this.energyMax = input.readVarUhInt();
            if (this.energyMax < 0) {
                throw new Error("Forbidden value (" + this.energyMax + ") on element of MountClientData.energyMax.");
            }
            this.serenity = input.readInt();
            this.aggressivityMax = input.readInt();
            this.serenityMax = input.readVarUhInt();
            if (this.serenityMax < 0) {
                throw new Error("Forbidden value (" + this.serenityMax + ") on element of MountClientData.serenityMax.");
            }
            this.love = input.readVarUhInt();
            if (this.love < 0) {
                throw new Error("Forbidden value (" + this.love + ") on element of MountClientData.love.");
            }
            this.loveMax = input.readVarUhInt();
            if (this.loveMax < 0) {
                throw new Error("Forbidden value (" + this.loveMax + ") on element of MountClientData.loveMax.");
            }
            this.fecondationTime = input.readInt();
            this.boostLimiter = input.readInt();
            if (this.boostLimiter < 0) {
                throw new Error("Forbidden value (" + this.boostLimiter + ") on element of MountClientData.boostLimiter.");
            }
            this.boostMax = input.readDouble();
            if (this.boostMax < -9007199254740992 || this.boostMax > 9007199254740992) {
                throw new Error("Forbidden value (" + this.boostMax + ") on element of MountClientData.boostMax.");
            }
            this.reproductionCount = input.readInt();
            this.reproductionCountMax = input.readVarUhInt();
            if (this.reproductionCountMax < 0) {
                throw new Error("Forbidden value (" + this.reproductionCountMax + ") on element of MountClientData.reproductionCountMax.");
            }
            this.harnessGID = input.readVarUhInt();
            if (this.harnessGID < 0) {
                throw new Error("Forbidden value (" + this.harnessGID + ") on element of MountClientData.harnessGID.");
            }
            var _effectListLen = input.readUnsignedShort();
            for (var _i34 = 0; _i34 < _effectListLen; _i34++) {
                _item34 = new ObjectEffectInteger();
                _item34.deserialize(input);
                this.effectList.push(_item34);
            }
        }
    }
    class UpdateMountCharacteristic {
        constructor() {

            this.type = 0;
            this.ID = 8000;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
        }

        serialize(output) {
            this.serializeAs_UpdateMountCharacteristic(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateMountCharacteristic(input);
        }

        serializeAs_UpdateMountCharacteristic(ouput) {
            output.writeByte(this.type);
        }

        deserializeAs_UpdateMountCharacteristic(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of UpdateMountCharacteristic.type.");
            }
        }
    }
    class UpdateMountBooleanCharacteristic extends UpdateMountCharacteristic {
        constructor(_super) {
            super()
            this.value = false;
            this.ID = 7365;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = false;
        }

        serialize(output) {
            this.serializeAs_UpdateMountBooleanCharacteristic(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateMountBooleanCharacteristic(input);
        }

        serializeAs_UpdateMountBooleanCharacteristic(ouput) {
            this.serializeAs_UpdateMountCharacteristic(this, output);
            output.writeBoolean(this.value);
        }

        deserializeAs_UpdateMountBooleanCharacteristic(input) {
            super.deserialize(input);
            this.value = input.readBoolean();
        }
    }
    class UpdateMountIntegerCharacteristic extends UpdateMountCharacteristic {
        constructor(_super) {
            super()
            this.value = 0;
            this.ID = 9850;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.value = 0;
        }

        serialize(output) {
            this.serializeAs_UpdateMountIntegerCharacteristic(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateMountIntegerCharacteristic(input);
        }

        serializeAs_UpdateMountIntegerCharacteristic(ouput) {
            this.serializeAs_UpdateMountCharacteristic(this, output);
            output.writeInt(this.value);
        }

        deserializeAs_UpdateMountIntegerCharacteristic(input) {
            super.deserialize(input);
            this.value = input.readInt();
        }
    }
    class NuggetsBeneficiary {
        constructor() {

            this.beneficiaryPlayerId = 0;
            this.nuggetsQuantity = 0;
            this.ID = 1639;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.beneficiaryPlayerId = 0;
            this.nuggetsQuantity = 0;
        }

        serialize(output) {
            this.serializeAs_NuggetsBeneficiary(output);
        }

        deserialize(input) {
            this.deserializeAs_NuggetsBeneficiary(input);
        }

        serializeAs_NuggetsBeneficiary(ouput) {
            if (this.beneficiaryPlayerId < 0 || this.beneficiaryPlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.beneficiaryPlayerId + ") on element beneficiaryPlayerId.");
            }
            output.writeVarLong(this.beneficiaryPlayerId);
            output.writeInt(this.nuggetsQuantity);
        }

        deserializeAs_NuggetsBeneficiary(input) {
            this.beneficiaryPlayerId = input.readVarUhLong();
            if (this.beneficiaryPlayerId < 0 || this.beneficiaryPlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.beneficiaryPlayerId + ") on element of NuggetsBeneficiary.beneficiaryPlayerId.");
            }
            this.nuggetsQuantity = input.readInt();
        }
    }
    class MountInformationsForPaddock {
        constructor() {

            this.modelId = 0;
            this.name = "";
            this.ownerName = "";
            this.ID = 149;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.modelId = 0;
            this.name = "";
            this.ownerName = "";
        }

        serialize(output) {
            this.serializeAs_MountInformationsForPaddock(output);
        }

        deserialize(input) {
            this.deserializeAs_MountInformationsForPaddock(input);
        }

        serializeAs_MountInformationsForPaddock(ouput) {
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element modelId.");
            }
            output.writeVarShort(this.modelId);
            output.writeUTF(this.name);
            output.writeUTF(this.ownerName);
        }

        deserializeAs_MountInformationsForPaddock(input) {
            this.modelId = input.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error("Forbidden value (" + this.modelId + ") on element of MountInformationsForPaddock.modelId.");
            }
            this.name = input.readUTF();
            this.ownerName = input.readUTF();
        }
    }
    class PaddockBuyableInformations {
        constructor() {

            this.price = 0;
            this.locked = false;
            this.ID = 6219;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.price = 0;
            this.locked = false;
        }

        serialize(output) {
            this.serializeAs_PaddockBuyableInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockBuyableInformations(input);
        }

        serializeAs_PaddockBuyableInformations(ouput) {
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
            output.writeBoolean(this.locked);
        }

        deserializeAs_PaddockBuyableInformations(input) {
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockBuyableInformations.price.");
            }
            this.locked = input.readBoolean();
        }
    }
    class PaddockInformations {
        constructor() {

            this.maxOutdoorMount = 0;
            this.maxItems = 0;
            this.ID = 7442;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.maxOutdoorMount = 0;
            this.maxItems = 0;
        }

        serialize(output) {
            this.serializeAs_PaddockInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockInformations(input);
        }

        serializeAs_PaddockInformations(ouput) {
            if (this.maxOutdoorMount < 0) {
                throw new Error("Forbidden value (" + this.maxOutdoorMount + ") on element maxOutdoorMount.");
            }
            output.writeVarShort(this.maxOutdoorMount);
            if (this.maxItems < 0) {
                throw new Error("Forbidden value (" + this.maxItems + ") on element maxItems.");
            }
            output.writeVarShort(this.maxItems);
        }

        deserializeAs_PaddockInformations(input) {
            this.maxOutdoorMount = input.readVarUhShort();
            if (this.maxOutdoorMount < 0) {
                throw new Error("Forbidden value (" + this.maxOutdoorMount + ") on element of PaddockInformations.maxOutdoorMount.");
            }
            this.maxItems = input.readVarUhShort();
            if (this.maxItems < 0) {
                throw new Error("Forbidden value (" + this.maxItems + ") on element of PaddockInformations.maxItems.");
            }
        }
    }
    class PaddockContentInformations extends PaddockInformations {
        constructor(_super) {
            super()
            this.paddockId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.abandonned = false;
            this.mountsInformations = [];
            this.ID = 1296;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.abandonned = false;
            this.mountsInformations = [];
        }

        serialize(output) {
            this.serializeAs_PaddockContentInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockContentInformations(input);
        }

        serializeAs_PaddockContentInformations(ouput) {
            this.serializeAs_PaddockInformations(this, output);
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.abandonned);
            output.writeShort(this.mountsInformations.length);
            for (var _i7 = 0; _i7 < this.mountsInformations.length; _i7++) {
                (this.mountsInformations[_i7]).serializeAs_MountInformationsForPaddock(output);
            }
        }

        deserializeAs_PaddockContentInformations(input) {
            var _item7 = null;
            super.deserialize(input);
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of PaddockContentInformations.paddockId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PaddockContentInformations.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PaddockContentInformations.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PaddockContentInformations.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PaddockContentInformations.subAreaId.");
            }
            this.abandonned = input.readBoolean();
            var _mountsInformationsLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _mountsInformationsLen; _i7++) {
                _item7 = new MountInformationsForPaddock();
                _item7.deserialize(input);
                this.mountsInformations.push(_item7);
            }
        }
    }
    class PaddockGuildedInformations extends PaddockBuyableInformations {
        constructor(_super) {
            super()
            this.deserted = false;
            this.guildInfo = new GuildInformations();
            this.ID = 4482;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.deserted = false;
            this.guildInfo = new GuildInformations();
        }

        serialize(output) {
            this.serializeAs_PaddockGuildedInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockGuildedInformations(input);
        }

        serializeAs_PaddockGuildedInformations(ouput) {
            this.serializeAs_PaddockBuyableInformations(this, output);
            output.writeBoolean(this.deserted);
            this.guildInfo.serializeAs_GuildInformations(output);
        }

        deserializeAs_PaddockGuildedInformations(input) {
            super.deserialize(input);
            this.deserted = input.readBoolean();
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
        }
    }
    class PaddockInformationsForSell {
        constructor() {

            this.guildOwner = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbMount = 0;
            this.nbObject = 0;
            this.price = 0;
            this.ID = 6595;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildOwner = "";
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbMount = 0;
            this.nbObject = 0;
            this.price = 0;
        }

        serialize(output) {
            this.serializeAs_PaddockInformationsForSell(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockInformationsForSell(input);
        }

        serializeAs_PaddockInformationsForSell(ouput) {
            output.writeUTF(this.guildOwner);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeByte(this.nbMount);
            output.writeByte(this.nbObject);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_PaddockInformationsForSell(input) {
            this.guildOwner = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PaddockInformationsForSell.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PaddockInformationsForSell.worldY.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PaddockInformationsForSell.subAreaId.");
            }
            this.nbMount = input.readByte();
            this.nbObject = input.readByte();
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockInformationsForSell.price.");
            }
        }
    }
    class PaddockInstancesInformations extends PaddockInformations {
        constructor(_super) {
            super()
            this.paddocks = [];
            this.ID = 4732;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddocks = [];
        }

        serialize(output) {
            this.serializeAs_PaddockInstancesInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockInstancesInformations(input);
        }

        serializeAs_PaddockInstancesInformations(ouput) {
            this.serializeAs_PaddockInformations(this, output);
            output.writeShort(this.paddocks.length);
            for (var _i1 = 0; _i1 < this.paddocks.length; _i1++) {
                output.writeShort((this.paddocks[_i1]).getTypeId());
                (this.paddocks[_i1]).serialize(output);
            }
        }

        deserializeAs_PaddockInstancesInformations(input) {
            var _id1 = 0;
            var _item1 = null;
            super.deserialize(input);
            var _paddocksLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _paddocksLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(PaddockBuyableInformations, _id1);
                _item1.deserialize(input);
                this.paddocks.push(_item1);
            }
        }
    }
    class PaddockItem extends ObjectItemInRolePlay {
        constructor(_super) {
            super()
            this.durability = new ItemDurability();
            this.ID = 5892;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.durability = new ItemDurability();
        }

        serialize(output) {
            this.serializeAs_PaddockItem(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockItem(input);
        }

        serializeAs_PaddockItem(ouput) {
            this.serializeAs_ObjectItemInRolePlay(this, output);
            this.durability.serializeAs_ItemDurability(output);
        }

        deserializeAs_PaddockItem(input) {
            super.deserialize(input);
            this.durability = new ItemDurability();
            this.durability.deserialize(input);
        }
    }
    class SimpleCharacterCharacteristicForPreset {
        constructor() {

            this.keyword = "";
            this.base = 0;
            this.additionnal = 0;
            this.ID = 4462;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.keyword = "";
            this.base = 0;
            this.additionnal = 0;
        }

        serialize(output) {
            this.serializeAs_SimpleCharacterCharacteristicForPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_SimpleCharacterCharacteristicForPreset(input);
        }

        serializeAs_SimpleCharacterCharacteristicForPreset(ouput) {
            output.writeUTF(this.keyword);
            output.writeVarInt(this.base);
            output.writeVarInt(this.additionnal);
        }

        deserializeAs_SimpleCharacterCharacteristicForPreset(input) {
            this.keyword = input.readUTF();
            this.base = input.readVarInt();
            this.additionnal = input.readVarInt();
        }
    }
    class CharacterCharacteristicForPreset extends SimpleCharacterCharacteristicForPreset {
        constructor(_super) {
            super()
            this.stuff = 0;
            this.ID = 8956;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stuff = 0;
        }

        serialize(output) {
            this.serializeAs_CharacterCharacteristicForPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCharacteristicForPreset(input);
        }

        serializeAs_CharacterCharacteristicForPreset(ouput) {
            this.serializeAs_SimpleCharacterCharacteristicForPreset(this, output);
            output.writeVarInt(this.stuff);
        }

        deserializeAs_CharacterCharacteristicForPreset(input) {
            super.deserialize(input);
            this.stuff = input.readVarInt();
        }
    }
    class Preset {
        constructor() {

            this.id = 0;
            this.ID = 1447;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        serialize(output) {
            this.serializeAs_Preset(output);
        }

        deserialize(input) {
            this.deserializeAs_Preset(input);
        }

        serializeAs_Preset(ouput) {
            output.writeShort(this.id);
        }

        deserializeAs_Preset(input) {
            this.id = input.readShort();
        }
    }
    class EntitiesPreset extends Preset {
        constructor(_super) {
            super()
            this.iconId = 0;
            this.entityIds = [];
            this.ID = 2574;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.iconId = 0;
            this.entityIds = [];
        }

        serialize(output) {
            this.serializeAs_EntitiesPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_EntitiesPreset(input);
        }

        serializeAs_EntitiesPreset(ouput) {
            this.serializeAs_Preset(this, output);
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element iconId.");
            }
            output.writeShort(this.iconId);
            output.writeShort(this.entityIds.length);
            for (var _i2 = 0; _i2 < this.entityIds.length; _i2++) {
                if (this.entityIds[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.entityIds[_i2] + ") on element 2 (starting at 1) of entityIds.");
                }
                output.writeVarShort(this.entityIds[_i2]);
            }
        }

        deserializeAs_EntitiesPreset(input) {
            var _val2 = 0;
            super.deserialize(input);
            this.iconId = input.readShort();
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element of EntitiesPreset.iconId.");
            }
            var _entityIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _entityIdsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of entityIds.");
                }
                this.entityIds.push(_val2);
            }
        }
    }
    class ForgettableSpellsPreset extends Preset {
        constructor(_super) {
            super()
            this.baseSpellsPreset = new SpellsPreset();
            this.forgettableSpells = [];
            this.ID = 4852;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.baseSpellsPreset = new SpellsPreset();
            this.forgettableSpells = [];
        }

        serialize(output) {
            this.serializeAs_ForgettableSpellsPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_ForgettableSpellsPreset(input);
        }

        serializeAs_ForgettableSpellsPreset(ouput) {
            this.serializeAs_Preset(this, output);
            this.baseSpellsPreset.serializeAs_SpellsPreset(output);
            output.writeShort(this.forgettableSpells.length);
            for (var _i2 = 0; _i2 < this.forgettableSpells.length; _i2++) {
                (this.forgettableSpells[_i2]).serializeAs_SpellForPreset(output);
            }
        }

        deserializeAs_ForgettableSpellsPreset(input) {
            var _item2 = null;
            super.deserialize(input);
            this.baseSpellsPreset = new SpellsPreset();
            this.baseSpellsPreset.deserialize(input);
            var _forgettableSpellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _forgettableSpellsLen; _i2++) {
                _item2 = new SpellForPreset();
                _item2.deserialize(input);
                this.forgettableSpells.push(_item2);
            }
        }
    }
    class FullStatsPreset extends Preset {
        constructor(_super) {
            super()
            this.stats = [];
            this.ID = 563;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stats = [];
        }

        serialize(output) {
            this.serializeAs_FullStatsPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_FullStatsPreset(input);
        }

        serializeAs_FullStatsPreset(ouput) {
            this.serializeAs_Preset(this, output);
            output.writeShort(this.stats.length);
            for (var _i1 = 0; _i1 < this.stats.length; _i1++) {
                (this.stats[_i1]).serializeAs_CharacterCharacteristicForPreset(output);
            }
        }

        deserializeAs_FullStatsPreset(input) {
            var _item1 = null;
            super.deserialize(input);
            var _statsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _statsLen; _i1++) {
                _item1 = new CharacterCharacteristicForPreset();
                _item1.deserialize(input);
                this.stats.push(_item1);
            }
        }
    }
    class PresetsContainerPreset extends Preset {
        constructor(_super) {
            super()
            this.presets = [];
            this.ID = 5239;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presets = [];
        }

        serialize(output) {
            this.serializeAs_PresetsContainerPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetsContainerPreset(input);
        }

        serializeAs_PresetsContainerPreset(ouput) {
            this.serializeAs_Preset(this, output);
            output.writeShort(this.presets.length);
            for (var _i1 = 0; _i1 < this.presets.length; _i1++) {
                output.writeShort((this.presets[_i1]).getTypeId());
                (this.presets[_i1]).serialize(output);
            }
        }

        deserializeAs_PresetsContainerPreset(input) {
            var _id1 = 0;
            var _item1 = null;
            super.deserialize(input);
            var _presetsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(Preset, _id1);
                _item1.deserialize(input);
                this.presets.push(_item1);
            }
        }
    }
    class IconNamedPreset extends PresetsContainerPreset {
        constructor(_super) {
            super()
            this.iconId = 0;
            this.name = "";
            this.ID = 4926;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.iconId = 0;
            this.name = "";
        }

        serialize(output) {
            this.serializeAs_IconNamedPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_IconNamedPreset(input);
        }

        serializeAs_IconNamedPreset(ouput) {
            this.serializeAs_PresetsContainerPreset(this, output);
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element iconId.");
            }
            output.writeShort(this.iconId);
            output.writeUTF(this.name);
        }

        deserializeAs_IconNamedPreset(input) {
            super.deserialize(input);
            this.iconId = input.readShort();
            if (this.iconId < 0) {
                throw new Error("Forbidden value (" + this.iconId + ") on element of IconNamedPreset.iconId.");
            }
            this.name = input.readUTF();
        }
    }
    class ItemForPreset {
        constructor() {

            this.position = 63;
            this.objGid = 0;
            this.objUid = 0;
            this.ID = 5762;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.position = 63;
            this.objGid = 0;
            this.objUid = 0;
        }

        serialize(output) {
            this.serializeAs_ItemForPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_ItemForPreset(input);
        }

        serializeAs_ItemForPreset(ouput) {
            output.writeShort(this.position);
            if (this.objGid < 0) {
                throw new Error("Forbidden value (" + this.objGid + ") on element objGid.");
            }
            output.writeVarInt(this.objGid);
            if (this.objUid < 0) {
                throw new Error("Forbidden value (" + this.objUid + ") on element objUid.");
            }
            output.writeVarInt(this.objUid);
        }

        deserializeAs_ItemForPreset(input) {
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ItemForPreset.position.");
            }
            this.objGid = input.readVarUhInt();
            if (this.objGid < 0) {
                throw new Error("Forbidden value (" + this.objGid + ") on element of ItemForPreset.objGid.");
            }
            this.objUid = input.readVarUhInt();
            if (this.objUid < 0) {
                throw new Error("Forbidden value (" + this.objUid + ") on element of ItemForPreset.objUid.");
            }
        }
    }
    class ItemsPreset extends Preset {
        constructor(_super) {
            super()
            this.items = [];
            this.mountEquipped = false;
            this.look = new EntityLook();
            this.ID = 1179;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.items = [];
            this.mountEquipped = false;
            this.look = new EntityLook();
        }

        serialize(output) {
            this.serializeAs_ItemsPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_ItemsPreset(input);
        }

        serializeAs_ItemsPreset(ouput) {
            this.serializeAs_Preset(this, output);
            output.writeShort(this.items.length);
            for (var _i1 = 0; _i1 < this.items.length; _i1++) {
                (this.items[_i1]).serializeAs_ItemForPreset(output);
            }
            output.writeBoolean(this.mountEquipped);
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_ItemsPreset(input) {
            var _item1 = null;
            super.deserialize(input);
            var _itemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _itemsLen; _i1++) {
                _item1 = new ItemForPreset();
                _item1.deserialize(input);
                this.items.push(_item1);
            }
            this.mountEquipped = input.readBoolean();
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class SpellForPreset {
        constructor() {

            this.spellId = 0;
            this.shortcuts = [];
            this.ID = 6238;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.shortcuts = [];
        }

        serialize(output) {
            this.serializeAs_SpellForPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellForPreset(input);
        }

        serializeAs_SpellForPreset(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeShort(this.shortcuts.length);
            for (var _i2 = 0; _i2 < this.shortcuts.length; _i2++) {
                output.writeShort(this.shortcuts[_i2]);
            }
        }

        deserializeAs_SpellForPreset(input) {
            var _val2 = 0;
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellForPreset.spellId.");
            }
            var _shortcutsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _shortcutsLen; _i2++) {
                _val2 = input.readShort();
                this.shortcuts.push(_val2);
            }
        }
    }
    class SpellsPreset extends Preset {
        constructor(_super) {
            super()
            this.spells = [];
            this.ID = 8478;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spells = [];
        }

        serialize(output) {
            this.serializeAs_SpellsPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellsPreset(input);
        }

        serializeAs_SpellsPreset(ouput) {
            this.serializeAs_Preset(this, output);
            output.writeShort(this.spells.length);
            for (var _i1 = 0; _i1 < this.spells.length; _i1++) {
                (this.spells[_i1]).serializeAs_SpellForPreset(output);
            }
        }

        deserializeAs_SpellsPreset(input) {
            var _item1 = null;
            super.deserialize(input);
            var _spellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _spellsLen; _i1++) {
                _item1 = new SpellForPreset();
                _item1.deserialize(input);
                this.spells.push(_item1);
            }
        }
    }
    class StatsPreset extends Preset {
        constructor(_super) {
            super()
            this.stats = [];
            this.ID = 2518;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stats = [];
        }

        serialize(output) {
            this.serializeAs_StatsPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_StatsPreset(input);
        }

        serializeAs_StatsPreset(ouput) {
            this.serializeAs_Preset(this, output);
            output.writeShort(this.stats.length);
            for (var _i1 = 0; _i1 < this.stats.length; _i1++) {
                (this.stats[_i1]).serializeAs_SimpleCharacterCharacteristicForPreset(output);
            }
        }

        deserializeAs_StatsPreset(input) {
            var _item1 = null;
            super.deserialize(input);
            var _statsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _statsLen; _i1++) {
                _item1 = new SimpleCharacterCharacteristicForPreset();
                _item1.deserialize(input);
                this.stats.push(_item1);
            }
        }
    }
    class PrismInformation {
        constructor() {

            this.state = 1;
            this.placementDate = 0;
            this.nuggetsCount = 0;
            this.durability = 0;
            this.nextEvolutionDate = 0;
            this.ID = 85;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.state = 1;
            this.placementDate = 0;
            this.nuggetsCount = 0;
            this.durability = 0;
            this.nextEvolutionDate = 0;
        }

        serialize(output) {
            this.serializeAs_PrismInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismInformation(input);
        }

        serializeAs_PrismInformation(ouput) {
            output.writeByte(this.state);
            if (this.placementDate < 0) {
                throw new Error("Forbidden value (" + this.placementDate + ") on element placementDate.");
            }
            output.writeInt(this.placementDate);
            if (this.nuggetsCount < 0) {
                throw new Error("Forbidden value (" + this.nuggetsCount + ") on element nuggetsCount.");
            }
            output.writeVarInt(this.nuggetsCount);
            if (this.durability < 0) {
                throw new Error("Forbidden value (" + this.durability + ") on element durability.");
            }
            output.writeInt(this.durability);
            if (this.nextEvolutionDate < 0 || this.nextEvolutionDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.nextEvolutionDate + ") on element nextEvolutionDate.");
            }
            output.writeDouble(this.nextEvolutionDate);
        }

        deserializeAs_PrismInformation(input) {
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of PrismInformation.state.");
            }
            this.placementDate = input.readInt();
            if (this.placementDate < 0) {
                throw new Error("Forbidden value (" + this.placementDate + ") on element of PrismInformation.placementDate.");
            }
            this.nuggetsCount = input.readVarUhInt();
            if (this.nuggetsCount < 0) {
                throw new Error("Forbidden value (" + this.nuggetsCount + ") on element of PrismInformation.nuggetsCount.");
            }
            this.durability = input.readInt();
            if (this.durability < 0) {
                throw new Error("Forbidden value (" + this.durability + ") on element of PrismInformation.durability.");
            }
            this.nextEvolutionDate = input.readDouble();
            if (this.nextEvolutionDate < 0 || this.nextEvolutionDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.nextEvolutionDate + ") on element of PrismInformation.nextEvolutionDate.");
            }
        }
    }
    class AllianceInsiderPrismInformation extends PrismInformation {
        constructor(_super) {
            super()
            this.moduleObject = new ObjectItem();
            this.moduleType = -1;
            this.cristalObject = new ObjectItem();
            this.cristalType = -1;
            this.cristalNumberLeft = 0;
            this.ID = 1593;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.moduleObject = new ObjectItem();
            this.moduleType = -1;
            this.cristalObject = new ObjectItem();
            this.cristalType = -1;
            this.cristalNumberLeft = 0;
        }

        serialize(output) {
            this.serializeAs_AllianceInsiderPrismInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInsiderPrismInformation(input);
        }

        serializeAs_AllianceInsiderPrismInformation(ouput) {
            this.serializeAs_PrismInformation(this, output);
            this.moduleObject.serializeAs_ObjectItem(output);
            output.writeInt(this.moduleType);
            this.cristalObject.serializeAs_ObjectItem(output);
            output.writeInt(this.cristalType);
            if (this.cristalNumberLeft < 0) {
                throw new Error("Forbidden value (" + this.cristalNumberLeft + ") on element cristalNumberLeft.");
            }
            output.writeInt(this.cristalNumberLeft);
        }

        deserializeAs_AllianceInsiderPrismInformation(input) {
            super.deserialize(input);
            this.moduleObject = new ObjectItem();
            this.moduleObject.deserialize(input);
            this.moduleType = input.readInt();
            this.cristalObject = new ObjectItem();
            this.cristalObject.deserialize(input);
            this.cristalType = input.readInt();
            this.cristalNumberLeft = input.readInt();
            if (this.cristalNumberLeft < 0) {
                throw new Error("Forbidden value (" + this.cristalNumberLeft + ") on element of AllianceInsiderPrismInformation.cristalNumberLeft.");
            }
        }
    }
    class AlliancePrismInformation extends PrismInformation {
        constructor(_super) {
            super()
            this.alliance = new AllianceInformation();
            this.ID = 5492;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alliance = new AllianceInformation();
        }

        serialize(output) {
            this.serializeAs_AlliancePrismInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AlliancePrismInformation(input);
        }

        serializeAs_AlliancePrismInformation(ouput) {
            this.serializeAs_PrismInformation(this, output);
            this.alliance.serializeAs_AllianceInformation(output);
        }

        deserializeAs_AlliancePrismInformation(input) {
            super.deserialize(input);
            this.alliance = new AllianceInformation();
            this.alliance.deserialize(input);
        }
    }
    class PrismGeolocalizedInformation {
        constructor() {

            this.subAreaId = 0;
            this.allianceId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.prism = new PrismInformation();
            this.ID = 4198;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaId = 0;
            this.allianceId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.prism = new PrismInformation();
        }

        serialize(output) {
            this.serializeAs_PrismGeolocalizedInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismGeolocalizedInformation(input);
        }

        serializeAs_PrismGeolocalizedInformation(ouput) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.prism.getTypeId());
            this.prism.serialize(output);
        }

        deserializeAs_PrismGeolocalizedInformation(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of PrismGeolocalizedInformation.subAreaId.");
            }
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of PrismGeolocalizedInformation.allianceId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of PrismGeolocalizedInformation.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of PrismGeolocalizedInformation.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of PrismGeolocalizedInformation.mapId.");
            }
            var _id6 = input.readUnsignedShort();
            this.prism = ProtocolTypeManager.getInstance(PrismInformation, _id6);
            this.prism.deserialize(input);
        }
    }
    class AgressableStatusMessage {
        constructor() {

            this.playerId = 0;
            this.enable = 0;
            this.roleAvAId = 0;
            this.pictoScore = 0;
            this.ID = 8496;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.enable = 0;
            this.roleAvAId = 0;
            this.pictoScore = 0;
        }

        serialize(output) {
            this.serializeAs_AgressableStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AgressableStatusMessage(input);
        }

        serializeAs_AgressableStatusMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeByte(this.enable);
            output.writeInt(this.roleAvAId);
            output.writeInt(this.pictoScore);
        }

        deserializeAs_AgressableStatusMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AgressableStatusMessage.playerId.");
            }
            this.enable = input.readByte();
            if (this.enable < 0) {
                throw new Error("Forbidden value (" + this.enable + ") on element of AgressableStatusMessage.enable.");
            }
            this.roleAvAId = input.readInt();
            this.pictoScore = input.readInt();
        }
    }
    class RankInformation extends RankMinimalInformation {
        constructor(_super) {
            super()
            this.order = 0;
            this.gfxId = 0;
            this.modifiable = false;
            this.rights = [];
            this.ID = 2084;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.order = 0;
            this.gfxId = 0;
            this.modifiable = false;
            this.rights = [];
        }

        serialize(output) {
            this.serializeAs_RankInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_RankInformation(input);
        }

        serializeAs_RankInformation(ouput) {
            this.serializeAs_RankMinimalInformation(this, output);
            if (this.order < 0) {
                throw new Error("Forbidden value (" + this.order + ") on element order.");
            }
            output.writeVarInt(this.order);
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element gfxId.");
            }
            output.writeVarInt(this.gfxId);
            output.writeBoolean(this.modifiable);
            output.writeShort(this.rights.length);
            for (var _i4 = 0; _i4 < this.rights.length; _i4++) {
                if (this.rights[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.rights[_i4] + ") on element 4 (starting at 1) of rights.");
                }
                output.writeVarInt(this.rights[_i4]);
            }
        }

        deserializeAs_RankInformation(input) {
            var _val4 = 0;
            super.deserialize(input);
            this.order = input.readVarUhInt();
            if (this.order < 0) {
                throw new Error("Forbidden value (" + this.order + ") on element of RankInformation.order.");
            }
            this.gfxId = input.readVarUhInt();
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element of RankInformation.gfxId.");
            }
            this.modifiable = input.readBoolean();
            var _rightsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _rightsLen; _i4++) {
                _val4 = input.readVarUhInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of rights.");
                }
                this.rights.push(_val4);
            }
        }
    }
    class Shortcut {
        constructor() {

            this.slot = 0;
            this.ID = 5535;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.slot = 0;
        }

        serialize(output) {
            this.serializeAs_Shortcut(output);
        }

        deserialize(input) {
            this.deserializeAs_Shortcut(input);
        }

        serializeAs_Shortcut(ouput) {
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        }

        deserializeAs_Shortcut(input) {
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element of Shortcut.slot.");
            }
        }
    }
    class ShortcutEmote extends Shortcut {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.ID = 144;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
        }

        serialize(output) {
            this.serializeAs_ShortcutEmote(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutEmote(input);
        }

        serializeAs_ShortcutEmote(ouput) {
            this.serializeAs_Shortcut(this, output);
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
        }

        deserializeAs_ShortcutEmote(input) {
            super.deserialize(input);
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of ShortcutEmote.emoteId.");
            }
        }
    }
    class ShortcutEntitiesPreset extends Shortcut {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.ID = 8453;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
        }

        serialize(output) {
            this.serializeAs_ShortcutEntitiesPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutEntitiesPreset(input);
        }

        serializeAs_ShortcutEntitiesPreset(ouput) {
            this.serializeAs_Shortcut(this, output);
            output.writeShort(this.presetId);
        }

        deserializeAs_ShortcutEntitiesPreset(input) {
            super.deserialize(input);
            this.presetId = input.readShort();
        }
    }
    class ShortcutObject extends Shortcut {
        constructor(_super) {
            super()

            this.ID = 7459;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        serialize(output) {
            this.serializeAs_ShortcutObject(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutObject(input);
        }

        serializeAs_ShortcutObject(ouput) {
            this.serializeAs_Shortcut(this, output);
        }

        deserializeAs_ShortcutObject(input) {
            super.deserialize(input);
        }
    }
    class ShortcutObjectItem extends ShortcutObject {
        constructor(_super) {
            super()
            this.itemUID = 0;
            this.itemGID = 0;
            this.ID = 1056;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.itemUID = 0;
            this.itemGID = 0;
        }

        serialize(output) {
            this.serializeAs_ShortcutObjectItem(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutObjectItem(input);
        }

        serializeAs_ShortcutObjectItem(ouput) {
            this.serializeAs_ShortcutObject(this, output);
            output.writeInt(this.itemUID);
            output.writeInt(this.itemGID);
        }

        deserializeAs_ShortcutObjectItem(input) {
            super.deserialize(input);
            this.itemUID = input.readInt();
            this.itemGID = input.readInt();
        }
    }
    class ShortcutObjectPreset extends ShortcutObject {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.ID = 4682;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
        }

        serialize(output) {
            this.serializeAs_ShortcutObjectPreset(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutObjectPreset(input);
        }

        serializeAs_ShortcutObjectPreset(ouput) {
            this.serializeAs_ShortcutObject(this, output);
            output.writeShort(this.presetId);
        }

        deserializeAs_ShortcutObjectPreset(input) {
            super.deserialize(input);
            this.presetId = input.readShort();
        }
    }
    class ShortcutSmiley extends Shortcut {
        constructor(_super) {
            super()
            this.smileyId = 0;
            this.ID = 9448;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.smileyId = 0;
        }

        serialize(output) {
            this.serializeAs_ShortcutSmiley(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutSmiley(input);
        }

        serializeAs_ShortcutSmiley(ouput) {
            this.serializeAs_Shortcut(this, output);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        }

        deserializeAs_ShortcutSmiley(input) {
            super.deserialize(input);
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of ShortcutSmiley.smileyId.");
            }
        }
    }
    class ShortcutSpell extends Shortcut {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.ID = 7947;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
        }

        serialize(output) {
            this.serializeAs_ShortcutSpell(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutSpell(input);
        }

        serializeAs_ShortcutSpell(ouput) {
            this.serializeAs_Shortcut(this, output);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        }

        deserializeAs_ShortcutSpell(input) {
            super.deserialize(input);
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of ShortcutSpell.spellId.");
            }
        }
    }
    class AllianceFactSheetInformation extends AllianceInformation {
        constructor(_super) {
            super()
            this.creationDate = 0;
            this.nbMembers = 0;
            this.nbSubarea = 0;
            this.nbTaxCollectors = 0;
            this.recruitment = new AllianceRecruitmentInformation();
            this.ID = 7646;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.creationDate = 0;
            this.nbMembers = 0;
            this.nbSubarea = 0;
            this.nbTaxCollectors = 0;
            this.recruitment = new AllianceRecruitmentInformation();
        }

        serialize(output) {
            this.serializeAs_AllianceFactSheetInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFactSheetInformation(input);
        }

        serializeAs_AllianceFactSheetInformation(ouput) {
            this.serializeAs_AllianceInformation(this, output);
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeInt(this.creationDate);
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
            }
            output.writeVarShort(this.nbMembers);
            if (this.nbSubarea < 0) {
                throw new Error("Forbidden value (" + this.nbSubarea + ") on element nbSubarea.");
            }
            output.writeVarShort(this.nbSubarea);
            if (this.nbTaxCollectors < 0) {
                throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element nbTaxCollectors.");
            }
            output.writeVarShort(this.nbTaxCollectors);
            this.recruitment.serializeAs_AllianceRecruitmentInformation(output);
        }

        deserializeAs_AllianceFactSheetInformation(input) {
            super.deserialize(input);
            this.creationDate = input.readInt();
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of AllianceFactSheetInformation.creationDate.");
            }
            this.nbMembers = input.readVarUhShort();
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element of AllianceFactSheetInformation.nbMembers.");
            }
            this.nbSubarea = input.readVarUhShort();
            if (this.nbSubarea < 0) {
                throw new Error("Forbidden value (" + this.nbSubarea + ") on element of AllianceFactSheetInformation.nbSubarea.");
            }
            this.nbTaxCollectors = input.readVarUhShort();
            if (this.nbTaxCollectors < 0) {
                throw new Error("Forbidden value (" + this.nbTaxCollectors + ") on element of AllianceFactSheetInformation.nbTaxCollectors.");
            }
            this.recruitment = new AllianceRecruitmentInformation();
            this.recruitment.deserialize(input);
        }
    }
    class ApplicationPlayerInformation {
        constructor() {

            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.accountId = 0;
            this.accountTag = "";
            this.accountNickname = "";
            this.status = new PlayerStatus();
            this.ID = 8601;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.playerName = "";
            this.breed = 0;
            this.sex = false;
            this.level = 0;
            this.accountId = 0;
            this.accountTag = "";
            this.accountNickname = "";
            this.status = new PlayerStatus();
        }

        serialize(output) {
            this.serializeAs_ApplicationPlayerInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_ApplicationPlayerInformation(input);
        }

        serializeAs_ApplicationPlayerInformation(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeUTF(this.playerName);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarInt(this.level);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeVarInt(this.accountId);
            output.writeUTF(this.accountTag);
            output.writeUTF(this.accountNickname);
            this.status.serializeAs_PlayerStatus(output);
        }

        deserializeAs_ApplicationPlayerInformation(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ApplicationPlayerInformation.playerId.");
            }
            this.playerName = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of ApplicationPlayerInformation.breed.");
            }
            this.sex = input.readBoolean();
            this.level = input.readVarUhInt();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of ApplicationPlayerInformation.level.");
            }
            this.accountId = input.readVarUhInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of ApplicationPlayerInformation.accountId.");
            }
            this.accountTag = input.readUTF();
            this.accountNickname = input.readUTF();
            this.status = new PlayerStatus();
            this.status.deserialize(input);
        }
    }
    class SocialApplicationInformation {
        constructor() {

            this.playerInfo = new ApplicationPlayerInformation();
            this.applyText = "";
            this.creationDate = 0;
            this.ID = 9221;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerInfo = new ApplicationPlayerInformation();
            this.applyText = "";
            this.creationDate = 0;
        }

        serialize(output) {
            this.serializeAs_SocialApplicationInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialApplicationInformation(input);
        }

        serializeAs_SocialApplicationInformation(ouput) {
            this.playerInfo.serializeAs_ApplicationPlayerInformation(output);
            output.writeUTF(this.applyText);
            if (this.creationDate < -9007199254740992 || this.creationDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeDouble(this.creationDate);
        }

        deserializeAs_SocialApplicationInformation(input) {
            this.playerInfo = new ApplicationPlayerInformation();
            this.playerInfo.deserialize(input);
            this.applyText = input.readUTF();
            this.creationDate = input.readDouble();
            if (this.creationDate < -9007199254740992 || this.creationDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of SocialApplicationInformation.creationDate.");
            }
        }
    }
    class SocialFight {
        constructor() {

            this.socialFightInfo = new SocialFightInfo();
            this.attackers = [];
            this.defenders = [];
            this.phase = new FightPhase();
            this.ID = 700;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.socialFightInfo = new SocialFightInfo();
            this.attackers = [];
            this.defenders = [];
            this.phase = new FightPhase();
        }

        serialize(output) {
            this.serializeAs_SocialFight(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialFight(input);
        }

        serializeAs_SocialFight(ouput) {
            this.socialFightInfo.serializeAs_SocialFightInfo(output);
            output.writeShort(this.attackers.length);
            for (var _i2 = 0; _i2 < this.attackers.length; _i2++) {
                (this.attackers[_i2]).serializeAs_CharacterMinimalPlusLookInformations(output);
            }
            output.writeShort(this.defenders.length);
            for (var _i3 = 0; _i3 < this.defenders.length; _i3++) {
                (this.defenders[_i3]).serializeAs_CharacterMinimalPlusLookInformations(output);
            }
            this.phase.serializeAs_FightPhase(output);
        }

        deserializeAs_SocialFight(input) {
            var _item2 = null;
            var _item3 = null;
            this.socialFightInfo = new SocialFightInfo();
            this.socialFightInfo.deserialize(input);
            var _attackersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _attackersLen; _i2++) {
                _item2 = new CharacterMinimalPlusLookInformations();
                _item2.deserialize(input);
                this.attackers.push(_item2);
            }
            var _defendersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _defendersLen; _i3++) {
                _item3 = new CharacterMinimalPlusLookInformations();
                _item3.deserialize(input);
                this.defenders.push(_item3);
            }
            this.phase = new FightPhase();
            this.phase.deserialize(input);
        }
    }
    class SocialFightInfo {
        constructor() {

            this.fightId = 0;
            this.fightType = 0;
            this.mapId = 0;
            this.ID = 5620;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.fightType = 0;
            this.mapId = 0;
        }

        serialize(output) {
            this.serializeAs_SocialFightInfo(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialFightInfo(input);
        }

        serializeAs_SocialFightInfo(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.fightType);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_SocialFightInfo(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of SocialFightInfo.fightId.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of SocialFightInfo.fightType.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of SocialFightInfo.mapId.");
            }
        }
    }
    class GuildFactSheetInformations extends GuildInformations {
        constructor(_super) {
            super()
            this.leaderId = 0;
            this.nbMembers = 0;
            this.lastActivityDay = 0;
            this.recruitment = new GuildRecruitmentInformation();
            this.nbPendingApply = 0;
            this.ID = 7323;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.leaderId = 0;
            this.nbMembers = 0;
            this.lastActivityDay = 0;
            this.recruitment = new GuildRecruitmentInformation();
            this.nbPendingApply = 0;
        }

        serialize(output) {
            this.serializeAs_GuildFactSheetInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildFactSheetInformations(input);
        }

        serializeAs_GuildFactSheetInformations(ouput) {
            this.serializeAs_GuildInformations(this, output);
            if (this.leaderId < 0 || this.leaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeVarLong(this.leaderId);
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element nbMembers.");
            }
            output.writeVarShort(this.nbMembers);
            if (this.lastActivityDay < 0) {
                throw new Error("Forbidden value (" + this.lastActivityDay + ") on element lastActivityDay.");
            }
            output.writeShort(this.lastActivityDay);
            this.recruitment.serializeAs_GuildRecruitmentInformation(output);
            if (this.nbPendingApply < 0) {
                throw new Error("Forbidden value (" + this.nbPendingApply + ") on element nbPendingApply.");
            }
            output.writeInt(this.nbPendingApply);
        }

        deserializeAs_GuildFactSheetInformations(input) {
            super.deserialize(input);
            this.leaderId = input.readVarUhLong();
            if (this.leaderId < 0 || this.leaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of GuildFactSheetInformations.leaderId.");
            }
            this.nbMembers = input.readVarUhShort();
            if (this.nbMembers < 0) {
                throw new Error("Forbidden value (" + this.nbMembers + ") on element of GuildFactSheetInformations.nbMembers.");
            }
            this.lastActivityDay = input.readShort();
            if (this.lastActivityDay < 0) {
                throw new Error("Forbidden value (" + this.lastActivityDay + ") on element of GuildFactSheetInformations.lastActivityDay.");
            }
            this.recruitment = new GuildRecruitmentInformation();
            this.recruitment.deserialize(input);
            this.nbPendingApply = input.readInt();
            if (this.nbPendingApply < 0) {
                throw new Error("Forbidden value (" + this.nbPendingApply + ") on element of GuildFactSheetInformations.nbPendingApply.");
            }
        }
    }
    class GuildInsiderFactSheetInformations extends GuildFactSheetInformations {
        constructor(_super) {
            super()
            this.leaderName = "";
            this.ID = 1142;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.leaderName = "";
        }

        serialize(output) {
            this.serializeAs_GuildInsiderFactSheetInformations(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInsiderFactSheetInformations(input);
        }

        serializeAs_GuildInsiderFactSheetInformations(ouput) {
            this.serializeAs_GuildFactSheetInformations(this, output);
            output.writeUTF(this.leaderName);
        }

        deserializeAs_GuildInsiderFactSheetInformations(input) {
            super.deserialize(input);
            this.leaderName = input.readUTF();
        }
    }
    class SocialEmblem {
        constructor() {

            this.symbolShape = 0;
            this.symbolColor = 0;
            this.backgroundShape = 0;
            this.backgroundColor = 0;
            this.ID = 6497;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.symbolShape = 0;
            this.symbolColor = 0;
            this.backgroundShape = 0;
            this.backgroundColor = 0;
        }

        serialize(output) {
            this.serializeAs_SocialEmblem(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialEmblem(input);
        }

        serializeAs_SocialEmblem(ouput) {
            if (this.symbolShape < 0) {
                throw new Error("Forbidden value (" + this.symbolShape + ") on element symbolShape.");
            }
            output.writeVarShort(this.symbolShape);
            output.writeInt(this.symbolColor);
            if (this.backgroundShape < 0) {
                throw new Error("Forbidden value (" + this.backgroundShape + ") on element backgroundShape.");
            }
            output.writeByte(this.backgroundShape);
            output.writeInt(this.backgroundColor);
        }

        deserializeAs_SocialEmblem(input) {
            this.symbolShape = input.readVarUhShort();
            if (this.symbolShape < 0) {
                throw new Error("Forbidden value (" + this.symbolShape + ") on element of SocialEmblem.symbolShape.");
            }
            this.symbolColor = input.readInt();
            this.backgroundShape = input.readByte();
            if (this.backgroundShape < 0) {
                throw new Error("Forbidden value (" + this.backgroundShape + ") on element of SocialEmblem.backgroundShape.");
            }
            this.backgroundColor = input.readInt();
        }
    }
    class GameActionItem {
        constructor() {

            this.uid = 0;
            this.title = "";
            this.text = "";
            this.descUrl = "";
            this.pictureUrl = "";
            this.items = [];
            this.ID = 6799;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uid = 0;
            this.title = "";
            this.text = "";
            this.descUrl = "";
            this.pictureUrl = "";
            this.items = [];
        }

        serialize(output) {
            this.serializeAs_GameActionItem(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionItem(input);
        }

        serializeAs_GameActionItem(ouput) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeInt(this.uid);
            output.writeUTF(this.title);
            output.writeUTF(this.text);
            output.writeUTF(this.descUrl);
            output.writeUTF(this.pictureUrl);
            output.writeShort(this.items.length);
            for (var _i6 = 0; _i6 < this.items.length; _i6++) {
                (this.items[_i6]).serializeAs_ObjectItemInformationWithQuantity(output);
            }
        }

        deserializeAs_GameActionItem(input) {
            var _item6 = null;
            this.uid = input.readInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of GameActionItem.uid.");
            }
            this.title = input.readUTF();
            this.text = input.readUTF();
            this.descUrl = input.readUTF();
            this.pictureUrl = input.readUTF();
            var _itemsLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _itemsLen; _i6++) {
                _item6 = new ObjectItemInformationWithQuantity();
                _item6.deserialize(input);
                this.items.push(_item6);
            }
        }
    }
    class Uuid {
        constructor() {

            this.uuidString = "";
            this.ID = 8529;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uuidString = "";
        }

        serialize(output) {
            this.serializeAs_Uuid(output);
        }

        deserialize(input) {
            this.deserializeAs_Uuid(input);
        }

        serializeAs_Uuid(ouput) {
            output.writeUTF(this.uuidString);
        }

        deserializeAs_Uuid(input) {
            this.uuidString = input.readUTF();
        }
    }
    class TrustCertificate {
        constructor() {

            this.id = 0;
            this.hash = "";
            this.ID = 1528;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.hash = "";
        }

        serialize(output) {
            this.serializeAs_TrustCertificate(output);
        }

        deserialize(input) {
            this.deserializeAs_TrustCertificate(input);
        }

        serializeAs_TrustCertificate(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeInt(this.id);
            output.writeUTF(this.hash);
        }

        deserializeAs_TrustCertificate(input) {
            this.id = input.readInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of TrustCertificate.id.");
            }
            this.hash = input.readUTF();
        }
    }
    class Version {
        constructor() {

            this.major = 0;
            this.minor = 0;
            this.code = 0;
            this.build = 0;
            this.buildType = 0;
            this.ID = 2100;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.major = 0;
            this.minor = 0;
            this.code = 0;
            this.build = 0;
            this.buildType = 0;
        }

        serialize(output) {
            this.serializeAs_Version(output);
        }

        deserialize(input) {
            this.deserializeAs_Version(input);
        }

        serializeAs_Version(ouput) {
            if (this.major < 0) {
                throw new Error("Forbidden value (" + this.major + ") on element major.");
            }
            output.writeByte(this.major);
            if (this.minor < 0) {
                throw new Error("Forbidden value (" + this.minor + ") on element minor.");
            }
            output.writeByte(this.minor);
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element code.");
            }
            output.writeByte(this.code);
            if (this.build < 0) {
                throw new Error("Forbidden value (" + this.build + ") on element build.");
            }
            output.writeInt(this.build);
            output.writeByte(this.buildType);
        }

        deserializeAs_Version(input) {
            this.major = input.readByte();
            if (this.major < 0) {
                throw new Error("Forbidden value (" + this.major + ") on element of Version.major.");
            }
            this.minor = input.readByte();
            if (this.minor < 0) {
                throw new Error("Forbidden value (" + this.minor + ") on element of Version.minor.");
            }
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of Version.code.");
            }
            this.build = input.readInt();
            if (this.build < 0) {
                throw new Error("Forbidden value (" + this.build + ") on element of Version.build.");
            }
            this.buildType = input.readByte();
            if (this.buildType < 0) {
                throw new Error("Forbidden value (" + this.buildType + ") on element of Version.buildType.");
            }
        }
    }
    class BufferInformation {
        constructor() {

            this.id = 0;
            this.amount = 0;
            this.ID = 7931;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.amount = 0;
        }

        serialize(output) {
            this.serializeAs_BufferInformation(output);
        }

        deserialize(input) {
            this.deserializeAs_BufferInformation(input);
        }

        serializeAs_BufferInformation(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
        }

        deserializeAs_BufferInformation(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of BufferInformation.id.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element of BufferInformation.amount.");
            }
        }
    }
    class AdminCommandMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.messageUuid = new Uuid();
            this.content = "";
            this.ID = 3305;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.messageUuid = new Uuid();
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AdminCommandMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AdminCommandMessage(input);
        }

        serializeAs_AdminCommandMessage(ouput) {
            this.messageUuid.serializeAs_Uuid(output);
            output.writeUTF(this.content);
        }

        deserializeAs_AdminCommandMessage(input) {
            this.messageUuid = new Uuid();
            this.messageUuid.deserialize(input);
            this.content = input.readUTF();
        }
    }
    class AdminQuietCommandMessage extends AdminCommandMessage {
        constructor(_super) {
            super()

            this.ID = 3781;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AdminQuietCommandMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AdminQuietCommandMessage(input);
        }

        serializeAs_AdminQuietCommandMessage(ouput) {
            this.serializeAs_AdminCommandMessage.call(this, output);
        }

        deserializeAs_AdminQuietCommandMessage(input) {
            this.deserializeAs_AdminCommandMessage.call(this, input);
        }
    }
    class ConsoleCommandsListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.aliases = [];
            this.args = [];
            this.descriptions = [];
            this.ID = 5709;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.aliases = [];
            this.args = [];
            this.descriptions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ConsoleCommandsListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ConsoleCommandsListMessage(input);
        }

        serializeAs_ConsoleCommandsListMessage(ouput) {
            output.writeShort(this.aliases.length);
            for (var _i1 = 0; _i1 < this.aliases.length; _i1++) {
                output.writeUTF(this.aliases[_i1]);
            }
            output.writeShort(this.args.length);
            for (var _i2 = 0; _i2 < this.args.length; _i2++) {
                output.writeUTF(this.args[_i2]);
            }
            output.writeShort(this.descriptions.length);
            for (var _i3 = 0; _i3 < this.descriptions.length; _i3++) {
                output.writeUTF(this.descriptions[_i3]);
            }
        }

        deserializeAs_ConsoleCommandsListMessage(input) {
            var _val1 = null;
            var _val2 = null;
            var _val3 = null;
            var _aliasesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _aliasesLen; _i1++) {
                _val1 = input.readUTF();
                this.aliases.push(_val1);
            }
            var _argsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _argsLen; _i2++) {
                _val2 = input.readUTF();
                this.args.push(_val2);
            }
            var _descriptionsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _descriptionsLen; _i3++) {
                _val3 = input.readUTF();
                this.descriptions.push(_val3);
            }
        }
    }
    class ConsoleEndMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.consoleUuid = new Uuid();
            this.isSuccess = false;
            this.ID = 7083;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.consoleUuid = new Uuid();
            this.isSuccess = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ConsoleEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ConsoleEndMessage(input);
        }

        serializeAs_ConsoleEndMessage(ouput) {
            this.consoleUuid.serializeAs_Uuid(output);
            output.writeBoolean(this.isSuccess);
        }

        deserializeAs_ConsoleEndMessage(input) {
            this.consoleUuid = new Uuid();
            this.consoleUuid.deserialize(input);
            this.isSuccess = input.readBoolean();
        }
    }
    class ConsoleMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.content = "";
            this.ID = 5631;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ConsoleMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ConsoleMessage(input);
        }

        serializeAs_ConsoleMessage(ouput) {
            output.writeByte(this.type);
            output.writeUTF(this.content);
        }

        deserializeAs_ConsoleMessage(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of ConsoleMessage.type.");
            }
            this.content = input.readUTF();
        }
    }
    class BasicPingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quiet = false;
            this.ID = 4681;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quiet = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicPingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicPingMessage(input);
        }

        serializeAs_BasicPingMessage(ouput) {
            output.writeBoolean(this.quiet);
        }

        deserializeAs_BasicPingMessage(input) {
            this.quiet = input.readBoolean();
        }
    }
    class BasicPongMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quiet = false;
            this.ID = 5180;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quiet = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicPongMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicPongMessage(input);
        }

        serializeAs_BasicPongMessage(ouput) {
            output.writeBoolean(this.quiet);
        }

        deserializeAs_BasicPongMessage(input) {
            this.quiet = input.readBoolean();
        }
    }
    class BasicStatMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.timeSpent = 0;
            this.statId = 0;
            this.ID = 6463;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.timeSpent = 0;
            this.statId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicStatMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicStatMessage(input);
        }

        serializeAs_BasicStatMessage(ouput) {
            if (this.timeSpent < 0 || this.timeSpent > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timeSpent + ") on element timeSpent.");
            }
            output.writeDouble(this.timeSpent);
            output.writeVarShort(this.statId);
        }

        deserializeAs_BasicStatMessage(input) {
            this.timeSpent = input.readDouble();
            if (this.timeSpent < 0 || this.timeSpent > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timeSpent + ") on element of BasicStatMessage.timeSpent.");
            }
            this.statId = input.readVarUhShort();
            if (this.statId < 0) {
                throw new Error("Forbidden value (" + this.statId + ") on element of BasicStatMessage.statId.");
            }
        }
    }
    class BasicStatWithDataMessage extends BasicStatMessage {
        constructor(_super) {
            super()
            this.datas = [];
            this.ID = 2819;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.datas = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicStatWithDataMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicStatWithDataMessage(input);
        }

        serializeAs_BasicStatWithDataMessage(ouput) {
            this.serializeAs_BasicStatMessage.call(this, output);
            output.writeShort(this.datas.length);
            for (var _i1 = 0; _i1 < this.datas.length; _i1++) {
                output.writeShort((this.datas[_i1]).getTypeId());
                (this.datas[_i1]).serialize(output);
            }
        }

        deserializeAs_BasicStatWithDataMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            this.deserializeAs_BasicStatMessage.call(this, input);
            var _datasLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _datasLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(StatisticData, _id1);
                _item1.deserialize(input);
                this.datas.push(_item1);
            }
        }
    }
    class NetworkDataContainerMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NetworkDataContainerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NetworkDataContainerMessage(input);
        }

        serializeAs_NetworkDataContainerMessage(ouput) {
            output.writeBytes(this.content);
            throw new Error("Not implemented");
        }

        deserializeAs_NetworkDataContainerMessage(input) {
            var _contentLen = input.readVarInt();
            var tmpBuffer = new ByteArray();
            input.readBytes(tmpBuffer, 0, _contentLen);
            tmpBuffer.uncompress();
            this.content = tmpBuffer;
        }
    }
    class CredentialsAcknowledgementMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8100;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CredentialsAcknowledgementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CredentialsAcknowledgementMessage(input);
        }

        serializeAs_CredentialsAcknowledgementMessage(ouput) {

        }

        deserializeAs_CredentialsAcknowledgementMessage(input) {

        }
    }
    class ForceAccountErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8978;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForceAccountErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForceAccountErrorMessage(input);
        }

        serializeAs_ForceAccountErrorMessage(ouput) {

        }

        deserializeAs_ForceAccountErrorMessage(input) {

        }
    }
    class ForceAccountMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accountId = 0;
            this.ID = 78;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForceAccountMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForceAccountMessage(input);
        }

        serializeAs_ForceAccountMessage(ouput) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        }

        deserializeAs_ForceAccountMessage(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of ForceAccountMessage.accountId.");
            }
        }
    }
    class ForceAccountStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.force = false;
            this.forcedAccountId = 0;
            this.forcedNickname = "";
            this.forcedTag = "";
            this.ID = 7528;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.force = false;
            this.forcedAccountId = 0;
            this.forcedNickname = "";
            this.forcedTag = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForceAccountStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForceAccountStatusMessage(input);
        }

        serializeAs_ForceAccountStatusMessage(ouput) {
            output.writeBoolean(this.force);
            if (this.forcedAccountId < 0) {
                throw new Error("Forbidden value (" + this.forcedAccountId + ") on element forcedAccountId.");
            }
            output.writeInt(this.forcedAccountId);
            output.writeUTF(this.forcedNickname);
            output.writeUTF(this.forcedTag);
        }

        deserializeAs_ForceAccountStatusMessage(input) {
            this.force = input.readBoolean();
            this.forcedAccountId = input.readInt();
            if (this.forcedAccountId < 0) {
                throw new Error("Forbidden value (" + this.forcedAccountId + ") on element of ForceAccountStatusMessage.forcedAccountId.");
            }
            this.forcedNickname = input.readUTF();
            this.forcedTag = input.readUTF();
        }
    }
    class HelloConnectMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.salt = "";
            this.key = [];
            this.ID = 2909;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.salt = "";
            this.key = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HelloConnectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HelloConnectMessage(input);
        }

        serializeAs_HelloConnectMessage(ouput) {
            output.writeUTF(this.salt);
            output.writeVarInt(this.key.length);
            for (var _i2 = 0; _i2 < this.key.length; _i2++) {
                output.writeByte(this.key[_i2]);
            }
        }

        deserializeAs_HelloConnectMessage(input) {
            var _val2 = 0;
            this.salt = input.readUTF();
            var _keyLen = input.readVarInt();
            for (var _i2 = 0; _i2 < _keyLen; _i2++) {
                _val2 = input.readByte();
                this.key.push(_val2);
            }
        }
    }
    class IdentificationFailedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 99;
            this.ID = 7388;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 99;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IdentificationFailedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentificationFailedMessage(input);
        }

        serializeAs_IdentificationFailedMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_IdentificationFailedMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of IdentificationFailedMessage.reason.");
            }
        }
    }
    class IdentificationFailedBannedMessage extends IdentificationFailedMessage {
        constructor(_super) {
            super()
            this.banEndDate = 0;
            this.ID = 6412;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.banEndDate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IdentificationFailedBannedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentificationFailedBannedMessage(input);
        }

        serializeAs_IdentificationFailedBannedMessage(ouput) {
            this.serializeAs_IdentificationFailedMessage.call(this, output);
            if (this.banEndDate < 0 || this.banEndDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.banEndDate + ") on element banEndDate.");
            }
            output.writeDouble(this.banEndDate);
        }

        deserializeAs_IdentificationFailedBannedMessage(input) {
            this.deserializeAs_IdentificationFailedMessage.call(this, input);
            this.banEndDate = input.readDouble();
            if (this.banEndDate < 0 || this.banEndDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.banEndDate + ") on element of IdentificationFailedBannedMessage.banEndDate.");
            }
        }
    }
    class IdentificationFailedForBadVersionMessage extends IdentificationFailedMessage {
        constructor(_super) {
            super()
            this.requiredVersion = new Version();
            this.ID = 5123;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requiredVersion = new Version();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IdentificationFailedForBadVersionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentificationFailedForBadVersionMessage(input);
        }

        serializeAs_IdentificationFailedForBadVersionMessage(ouput) {
            this.serializeAs_IdentificationFailedMessage.call(this, output);
            this.requiredVersion.serializeAs_Version(output);
        }

        deserializeAs_IdentificationFailedForBadVersionMessage(input) {
            this.deserializeAs_IdentificationFailedMessage.call(this, input);
            this.requiredVersion = new Version();
            this.requiredVersion.deserialize(input);
        }
    }
    class IdentificationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.version = new Version();
            this.lang = "";
            this.credentials = [];
            this.serverId = 0;
            this.autoconnect = false;
            this.useCertificate = false;
            this.useLoginToken = false;
            this.sessionOptionalSalt = 0;
            this.failedAttempts = [];
            this.ID = 7755;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.version = new Version();
            this.lang = "";
            this.credentials = [];
            this.serverId = 0;
            this.autoconnect = false;
            this.useCertificate = false;
            this.useLoginToken = false;
            this.sessionOptionalSalt = 0;
            this.failedAttempts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IdentificationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentificationMessage(input);
        }

        serializeAs_IdentificationMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.autoconnect);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.useCertificate);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.useLoginToken);
            output.writeByte(_box0);
            this.version.serializeAs_Version(output);
            output.writeUTF(this.lang);
            output.writeVarInt(this.credentials.length);
            for (var _i3 = 0; _i3 < this.credentials.length; _i3++) {
                output.writeByte(this.credentials[_i3]);
            }
            output.writeShort(this.serverId);
            if (this.sessionOptionalSalt < -9007199254740992 || this.sessionOptionalSalt > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sessionOptionalSalt + ") on element sessionOptionalSalt.");
            }
            output.writeVarLong(this.sessionOptionalSalt);
            output.writeShort(this.failedAttempts.length);
            for (var _i9 = 0; _i9 < this.failedAttempts.length; _i9++) {
                if (this.failedAttempts[_i9] < 0) {
                    throw new Error("Forbidden value (" + this.failedAttempts[_i9] + ") on element 9 (starting at 1) of failedAttempts.");
                }
                output.writeVarShort(this.failedAttempts[_i9]);
            }
        }

        deserializeAs_IdentificationMessage(input) {
            var _val3 = 0;
            var _val9 = 0;
            var _box0 = input.readByte();
            this.autoconnect = BooleanByteWrapper.getFlag(_box0, 0);
            this.useCertificate = BooleanByteWrapper.getFlag(_box0, 1);
            this.useLoginToken = BooleanByteWrapper.getFlag(_box0, 2);
            this.version = new Version();
            this.version.deserialize(input);
            this.lang = input.readUTF();
            var _credentialsLen = input.readVarInt();
            for (var _i3 = 0; _i3 < _credentialsLen; _i3++) {
                _val3 = input.readByte();
                this.credentials.push(_val3);
            }
            this.serverId = input.readShort();
            this.sessionOptionalSalt = input.readVarLong();
            if (this.sessionOptionalSalt < -9007199254740992 || this.sessionOptionalSalt > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sessionOptionalSalt + ") on element of IdentificationMessage.sessionOptionalSalt.");
            }
            var _failedAttemptsLen = input.readUnsignedShort();
            for (var _i9 = 0; _i9 < _failedAttemptsLen; _i9++) {
                _val9 = input.readVarUhShort();
                if (_val9 < 0) {
                    throw new Error("Forbidden value (" + _val9 + ") on elements of failedAttempts.");
                }
                this.failedAttempts.push(_val9);
            }
        }
    }
    class IdentificationSuccessMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.login = "";
            this.accountTag = new AccountTagInformation();
            this.accountId = 0;
            this.communityId = 0;
            this.hasRights = false;
            this.hasForceRight = false;
            this.accountCreation = 0;
            this.subscriptionEndDate = 0;
            this.wasAlreadyConnected = false;
            this.havenbagAvailableRoom = 0;
            this.ID = 3876;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.login = "";
            this.accountTag = new AccountTagInformation();
            this.accountId = 0;
            this.communityId = 0;
            this.hasRights = false;
            this.hasForceRight = false;
            this.accountCreation = 0;
            this.subscriptionEndDate = 0;
            this.wasAlreadyConnected = false;
            this.havenbagAvailableRoom = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IdentificationSuccessMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentificationSuccessMessage(input);
        }

        serializeAs_IdentificationSuccessMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.hasRights);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasForceRight);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.wasAlreadyConnected);
            output.writeByte(_box0);
            output.writeUTF(this.login);
            this.accountTag.serializeAs_AccountTagInformation(output);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.communityId < 0) {
                throw new Error("Forbidden value (" + this.communityId + ") on element communityId.");
            }
            output.writeByte(this.communityId);
            if (this.accountCreation < 0 || this.accountCreation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.accountCreation + ") on element accountCreation.");
            }
            output.writeDouble(this.accountCreation);
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element subscriptionEndDate.");
            }
            output.writeDouble(this.subscriptionEndDate);
            if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
                throw new Error("Forbidden value (" + this.havenbagAvailableRoom + ") on element havenbagAvailableRoom.");
            }
            output.writeByte(this.havenbagAvailableRoom);
        }

        deserializeAs_IdentificationSuccessMessage(input) {
            var _box0 = input.readByte();
            this.hasRights = BooleanByteWrapper.getFlag(_box0, 0);
            this.hasForceRight = BooleanByteWrapper.getFlag(_box0, 1);
            this.wasAlreadyConnected = BooleanByteWrapper.getFlag(_box0, 2);
            this.login = input.readUTF();
            this.accountTag = new AccountTagInformation();
            this.accountTag.deserialize(input);
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of IdentificationSuccessMessage.accountId.");
            }
            this.communityId = input.readByte();
            if (this.communityId < 0) {
                throw new Error("Forbidden value (" + this.communityId + ") on element of IdentificationSuccessMessage.communityId.");
            }
            this.accountCreation = input.readDouble();
            if (this.accountCreation < 0 || this.accountCreation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.accountCreation + ") on element of IdentificationSuccessMessage.accountCreation.");
            }
            this.subscriptionEndDate = input.readDouble();
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element of IdentificationSuccessMessage.subscriptionEndDate.");
            }
            this.havenbagAvailableRoom = input.readUnsignedByte();
            if (this.havenbagAvailableRoom < 0 || this.havenbagAvailableRoom > 255) {
                throw new Error("Forbidden value (" + this.havenbagAvailableRoom + ") on element of IdentificationSuccessMessage.havenbagAvailableRoom.");
            }
        }
    }
    class IdentificationSuccessWithLoginTokenMessage extends IdentificationSuccessMessage {
        constructor(_super) {
            super()
            this.loginToken = "";
            this.ID = 6554;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.loginToken = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IdentificationSuccessWithLoginTokenMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IdentificationSuccessWithLoginTokenMessage(input);
        }

        serializeAs_IdentificationSuccessWithLoginTokenMessage(ouput) {
            this.serializeAs_IdentificationSuccessMessage.call(this, output);
            output.writeUTF(this.loginToken);
        }

        deserializeAs_IdentificationSuccessWithLoginTokenMessage(input) {
            this.deserializeAs_IdentificationSuccessMessage.call(this, input);
            this.loginToken = input.readUTF();
        }
    }
    class MigratedServerListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.migratedServerIds = [];
            this.ID = 2940;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.migratedServerIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MigratedServerListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MigratedServerListMessage(input);
        }

        serializeAs_MigratedServerListMessage(ouput) {
            output.writeShort(this.migratedServerIds.length);
            for (var _i1 = 0; _i1 < this.migratedServerIds.length; _i1++) {
                if (this.migratedServerIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.migratedServerIds[_i1] + ") on element 1 (starting at 1) of migratedServerIds.");
                }
                output.writeVarShort(this.migratedServerIds[_i1]);
            }
        }

        deserializeAs_MigratedServerListMessage(input) {
            var _val1 = 0;
            var _migratedServerIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _migratedServerIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of migratedServerIds.");
                }
                this.migratedServerIds.push(_val1);
            }
        }
    }
    class AccountLinkRequiredMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8119;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccountLinkRequiredMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountLinkRequiredMessage(input);
        }

        serializeAs_AccountLinkRequiredMessage(ouput) {

        }

        deserializeAs_AccountLinkRequiredMessage(input) {

        }
    }
    class NicknameAcceptedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8621;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NicknameAcceptedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NicknameAcceptedMessage(input);
        }

        serializeAs_NicknameAcceptedMessage(ouput) {

        }

        deserializeAs_NicknameAcceptedMessage(input) {

        }
    }
    class NicknameChoiceRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.nickname = "";
            this.ID = 1518;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nickname = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NicknameChoiceRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NicknameChoiceRequestMessage(input);
        }

        serializeAs_NicknameChoiceRequestMessage(ouput) {
            output.writeUTF(this.nickname);
        }

        deserializeAs_NicknameChoiceRequestMessage(input) {
            this.nickname = input.readUTF();
        }
    }
    class NicknameRefusedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 99;
            this.ID = 1363;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 99;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NicknameRefusedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NicknameRefusedMessage(input);
        }

        serializeAs_NicknameRefusedMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_NicknameRefusedMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of NicknameRefusedMessage.reason.");
            }
        }
    }
    class NicknameRegistrationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8723;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NicknameRegistrationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NicknameRegistrationMessage(input);
        }

        serializeAs_NicknameRegistrationMessage(ouput) {

        }

        deserializeAs_NicknameRegistrationMessage(input) {

        }
    }
    class ReleaseAccountMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9736;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ReleaseAccountMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ReleaseAccountMessage(input);
        }

        serializeAs_ReleaseAccountMessage(ouput) {

        }

        deserializeAs_ReleaseAccountMessage(input) {

        }
    }
    class AcquaintanceSearchErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 4300;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AcquaintanceSearchErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintanceSearchErrorMessage(input);
        }

        serializeAs_AcquaintanceSearchErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_AcquaintanceSearchErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of AcquaintanceSearchErrorMessage.reason.");
            }
        }
    }
    class AcquaintanceSearchMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.tag = new AccountTagInformation();
            this.ID = 9545;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tag = new AccountTagInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AcquaintanceSearchMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintanceSearchMessage(input);
        }

        serializeAs_AcquaintanceSearchMessage(ouput) {
            this.tag.serializeAs_AccountTagInformation(output);
        }

        deserializeAs_AcquaintanceSearchMessage(input) {
            this.tag = new AccountTagInformation();
            this.tag.deserialize(input);
        }
    }
    class AcquaintanceServerListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.servers = [];
            this.ID = 4979;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.servers = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AcquaintanceServerListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintanceServerListMessage(input);
        }

        serializeAs_AcquaintanceServerListMessage(ouput) {
            output.writeShort(this.servers.length);
            for (var _i1 = 0; _i1 < this.servers.length; _i1++) {
                if (this.servers[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.servers[_i1] + ") on element 1 (starting at 1) of servers.");
                }
                output.writeVarShort(this.servers[_i1]);
            }
        }

        deserializeAs_AcquaintanceServerListMessage(input) {
            var _val1 = 0;
            var _serversLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _serversLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of servers.");
                }
                this.servers.push(_val1);
            }
        }
    }
    class SelectedServerDataMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.serverId = 0;
            this.address = "";
            this.ports = [];
            this.canCreateNewCharacter = false;
            this.ticket = [];
            this.ID = 5981;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.serverId = 0;
            this.address = "";
            this.ports = [];
            this.canCreateNewCharacter = false;
            this.ticket = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SelectedServerDataMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SelectedServerDataMessage(input);
        }

        serializeAs_SelectedServerDataMessage(ouput) {
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
            }
            output.writeVarShort(this.serverId);
            output.writeUTF(this.address);
            output.writeShort(this.ports.length);
            for (var _i3 = 0; _i3 < this.ports.length; _i3++) {
                if (this.ports[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.ports[_i3] + ") on element 3 (starting at 1) of ports.");
                }
                output.writeVarShort(this.ports[_i3]);
            }
            output.writeBoolean(this.canCreateNewCharacter);
            output.writeVarInt(this.ticket.length);
            for (var _i5 = 0; _i5 < this.ticket.length; _i5++) {
                output.writeByte(this.ticket[_i5]);
            }
        }

        deserializeAs_SelectedServerDataMessage(input) {
            var _val3 = 0;
            var _val5 = 0;
            this.serverId = input.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element of SelectedServerDataMessage.serverId.");
            }
            this.address = input.readUTF();
            var _portsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _portsLen; _i3++) {
                _val3 = input.readVarUhShort();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of ports.");
                }
                this.ports.push(_val3);
            }
            this.canCreateNewCharacter = input.readBoolean();
            var _ticketLen = input.readVarInt();
            for (var _i5 = 0; _i5 < _ticketLen; _i5++) {
                _val5 = input.readByte();
                this.ticket.push(_val5);
            }
        }
    }
    class SelectedServerDataExtendedMessage extends SelectedServerDataMessage {
        constructor(_super) {
            super()
            this.servers = [];
            this.ID = 4551;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.servers = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SelectedServerDataExtendedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SelectedServerDataExtendedMessage(input);
        }

        serializeAs_SelectedServerDataExtendedMessage(ouput) {
            this.serializeAs_SelectedServerDataMessage.call(this, output);
            output.writeShort(this.servers.length);
            for (var _i1 = 0; _i1 < this.servers.length; _i1++) {
                (this.servers[_i1]).serializeAs_GameServerInformations(output);
            }
        }

        deserializeAs_SelectedServerDataExtendedMessage(input) {
            var _item1 = null;
            this.deserializeAs_SelectedServerDataMessage.call(this, input);
            var _serversLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _serversLen; _i1++) {
                _item1 = new GameServerInformations();
                _item1.deserialize(input);
                this.servers.push(_item1);
            }
        }
    }
    class SelectedServerRefusedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.serverId = 0;
            this.error = 1;
            this.serverStatus = 1;
            this.ID = 5669;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.serverId = 0;
            this.error = 1;
            this.serverStatus = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SelectedServerRefusedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SelectedServerRefusedMessage(input);
        }

        serializeAs_SelectedServerRefusedMessage(ouput) {
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
            }
            output.writeVarShort(this.serverId);
            output.writeByte(this.error);
            output.writeByte(this.serverStatus);
        }

        deserializeAs_SelectedServerRefusedMessage(input) {
            this.serverId = input.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element of SelectedServerRefusedMessage.serverId.");
            }
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of SelectedServerRefusedMessage.error.");
            }
            this.serverStatus = input.readByte();
            if (this.serverStatus < 0) {
                throw new Error("Forbidden value (" + this.serverStatus + ") on element of SelectedServerRefusedMessage.serverStatus.");
            }
        }
    }
    class ServerSelectionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.serverId = 0;
            this.ID = 1712;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.serverId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServerSelectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSelectionMessage(input);
        }

        serializeAs_ServerSelectionMessage(ouput) {
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element serverId.");
            }
            output.writeVarShort(this.serverId);
        }

        deserializeAs_ServerSelectionMessage(input) {
            this.serverId = input.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error("Forbidden value (" + this.serverId + ") on element of ServerSelectionMessage.serverId.");
            }
        }
    }
    class ServersListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.servers = [];
            this.canCreateNewCharacter = false;
            this.ID = 6791;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.servers = [];
            this.canCreateNewCharacter = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServersListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServersListMessage(input);
        }

        serializeAs_ServersListMessage(ouput) {
            output.writeShort(this.servers.length);
            for (var _i1 = 0; _i1 < this.servers.length; _i1++) {
                (this.servers[_i1]).serializeAs_GameServerInformations(output);
            }
            output.writeBoolean(this.canCreateNewCharacter);
        }

        deserializeAs_ServersListMessage(input) {
            var _item1 = null;
            var _serversLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _serversLen; _i1++) {
                _item1 = new GameServerInformations();
                _item1.deserialize(input);
                this.servers.push(_item1);
            }
            this.canCreateNewCharacter = input.readBoolean();
        }
    }
    class ServerStatusUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.server = new GameServerInformations();
            this.ID = 2374;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.server = new GameServerInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServerStatusUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerStatusUpdateMessage(input);
        }

        serializeAs_ServerStatusUpdateMessage(ouput) {
            this.server.serializeAs_GameServerInformations(output);
        }

        deserializeAs_ServerStatusUpdateMessage(input) {
            this.server = new GameServerInformations();
            this.server.deserialize(input);
        }
    }
    class DebugClearHighlightCellsMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3788;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DebugClearHighlightCellsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DebugClearHighlightCellsMessage(input);
        }

        serializeAs_DebugClearHighlightCellsMessage(ouput) {

        }

        deserializeAs_DebugClearHighlightCellsMessage(input) {

        }
    }
    class DebugHighlightCellsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.color = 0;
            this.cells = [];
            this.ID = 3220;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.color = 0;
            this.cells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DebugHighlightCellsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DebugHighlightCellsMessage(input);
        }

        serializeAs_DebugHighlightCellsMessage(ouput) {
            if (this.color < -9007199254740992 || this.color > 9007199254740992) {
                throw new Error("Forbidden value (" + this.color + ") on element color.");
            }
            output.writeDouble(this.color);
            output.writeShort(this.cells.length);
            for (var _i2 = 0; _i2 < this.cells.length; _i2++) {
                if (this.cells[_i2] < 0 || this.cells[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.cells[_i2] + ") on element 2 (starting at 1) of cells.");
                }
                output.writeVarShort(this.cells[_i2]);
            }
        }

        deserializeAs_DebugHighlightCellsMessage(input) {
            var _val2 = 0;
            this.color = input.readDouble();
            if (this.color < -9007199254740992 || this.color > 9007199254740992) {
                throw new Error("Forbidden value (" + this.color + ") on element of DebugHighlightCellsMessage.color.");
            }
            var _cellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _cellsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of cells.");
                }
                this.cells.push(_val2);
            }
        }
    }
    class DebugInClientMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.level = 0;
            this.message = "";
            this.ID = 968;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.level = 0;
            this.message = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DebugInClientMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DebugInClientMessage(input);
        }

        serializeAs_DebugInClientMessage(ouput) {
            output.writeByte(this.level);
            output.writeUTF(this.message);
        }

        deserializeAs_DebugInClientMessage(input) {
            this.level = input.readByte();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of DebugInClientMessage.level.");
            }
            this.message = input.readUTF();
        }
    }
    class DumpedEntityStatsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actorId = 0;
            this.stats = new CharacterCharacteristics();
            this.ID = 8612;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorId = 0;
            this.stats = new CharacterCharacteristics();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DumpedEntityStatsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DumpedEntityStatsMessage(input);
        }

        serializeAs_DumpedEntityStatsMessage(ouput) {
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            this.stats.serializeAs_CharacterCharacteristics(output);
        }

        deserializeAs_DumpedEntityStatsMessage(input) {
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of DumpedEntityStatsMessage.actorId.");
            }
            this.stats = new CharacterCharacteristics();
            this.stats.deserialize(input);
        }
    }
    class AchievementAlmostFinishedDetailedListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.almostFinishedAchievements = [];
            this.ID = 8401;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.almostFinishedAchievements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementAlmostFinishedDetailedListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementAlmostFinishedDetailedListMessage(input);
        }

        serializeAs_AchievementAlmostFinishedDetailedListMessage(ouput) {
            output.writeShort(this.almostFinishedAchievements.length);
            for (var _i1 = 0; _i1 < this.almostFinishedAchievements.length; _i1++) {
                (this.almostFinishedAchievements[_i1]).serializeAs_Achievement(output);
            }
        }

        deserializeAs_AchievementAlmostFinishedDetailedListMessage(input) {
            var _item1 = null;
            var _almostFinishedAchievementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _almostFinishedAchievementsLen; _i1++) {
                _item1 = new Achievement();
                _item1.deserialize(input);
                this.almostFinishedAchievements.push(_item1);
            }
        }
    }
    class AchievementAlmostFinishedDetailedListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8667;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementAlmostFinishedDetailedListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementAlmostFinishedDetailedListRequestMessage(input);
        }

        serializeAs_AchievementAlmostFinishedDetailedListRequestMessage(ouput) {

        }

        deserializeAs_AchievementAlmostFinishedDetailedListRequestMessage(input) {

        }
    }
    class AchievementDetailedListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.startedAchievements = [];
            this.finishedAchievements = [];
            this.ID = 8773;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.startedAchievements = [];
            this.finishedAchievements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementDetailedListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementDetailedListMessage(input);
        }

        serializeAs_AchievementDetailedListMessage(ouput) {
            output.writeShort(this.startedAchievements.length);
            for (var _i1 = 0; _i1 < this.startedAchievements.length; _i1++) {
                (this.startedAchievements[_i1]).serializeAs_Achievement(output);
            }
            output.writeShort(this.finishedAchievements.length);
            for (var _i2 = 0; _i2 < this.finishedAchievements.length; _i2++) {
                (this.finishedAchievements[_i2]).serializeAs_Achievement(output);
            }
        }

        deserializeAs_AchievementDetailedListMessage(input) {
            var _item1 = null;
            var _item2 = null;
            var _startedAchievementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _startedAchievementsLen; _i1++) {
                _item1 = new Achievement();
                _item1.deserialize(input);
                this.startedAchievements.push(_item1);
            }
            var _finishedAchievementsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _finishedAchievementsLen; _i2++) {
                _item2 = new Achievement();
                _item2.deserialize(input);
                this.finishedAchievements.push(_item2);
            }
        }
    }
    class AchievementDetailedListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.categoryId = 0;
            this.ID = 8893;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.categoryId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementDetailedListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementDetailedListRequestMessage(input);
        }

        serializeAs_AchievementDetailedListRequestMessage(ouput) {
            if (this.categoryId < 0) {
                throw new Error("Forbidden value (" + this.categoryId + ") on element categoryId.");
            }
            output.writeVarShort(this.categoryId);
        }

        deserializeAs_AchievementDetailedListRequestMessage(input) {
            this.categoryId = input.readVarUhShort();
            if (this.categoryId < 0) {
                throw new Error("Forbidden value (" + this.categoryId + ") on element of AchievementDetailedListRequestMessage.categoryId.");
            }
        }
    }
    class AchievementDetailsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.achievement = new Achievement();
            this.ID = 8366;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.achievement = new Achievement();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementDetailsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementDetailsMessage(input);
        }

        serializeAs_AchievementDetailsMessage(ouput) {
            this.achievement.serializeAs_Achievement(output);
        }

        deserializeAs_AchievementDetailsMessage(input) {
            this.achievement = new Achievement();
            this.achievement.deserialize(input);
        }
    }
    class AchievementDetailsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.achievementId = 0;
            this.ID = 838;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.achievementId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementDetailsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementDetailsRequestMessage(input);
        }

        serializeAs_AchievementDetailsRequestMessage(ouput) {
            if (this.achievementId < 0) {
                throw new Error("Forbidden value (" + this.achievementId + ") on element achievementId.");
            }
            output.writeVarShort(this.achievementId);
        }

        deserializeAs_AchievementDetailsRequestMessage(input) {
            this.achievementId = input.readVarUhShort();
            if (this.achievementId < 0) {
                throw new Error("Forbidden value (" + this.achievementId + ") on element of AchievementDetailsRequestMessage.achievementId.");
            }
        }
    }
    class AchievementFinishedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.achievement = new AchievementAchievedRewardable();
            this.ID = 1323;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.achievement = new AchievementAchievedRewardable();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementFinishedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementFinishedMessage(input);
        }

        serializeAs_AchievementFinishedMessage(ouput) {
            this.achievement.serializeAs_AchievementAchievedRewardable(output);
        }

        deserializeAs_AchievementFinishedMessage(input) {
            this.achievement = new AchievementAchievedRewardable();
            this.achievement.deserialize(input);
        }
    }
    class AchievementFinishedInformationMessage extends AchievementFinishedMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.playerId = 0;
            this.ID = 2610;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementFinishedInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementFinishedInformationMessage(input);
        }

        serializeAs_AchievementFinishedInformationMessage(ouput) {
            this.serializeAs_AchievementFinishedMessage.call(this, output);
            output.writeUTF(this.name);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_AchievementFinishedInformationMessage(input) {
            this.deserializeAs_AchievementFinishedMessage.call(this, input);
            this.name = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AchievementFinishedInformationMessage.playerId.");
            }
        }
    }
    class AchievementListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.finishedAchievements = [];
            this.ID = 4298;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.finishedAchievements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementListMessage(input);
        }

        serializeAs_AchievementListMessage(ouput) {
            output.writeShort(this.finishedAchievements.length);
            for (var _i1 = 0; _i1 < this.finishedAchievements.length; _i1++) {
                output.writeShort((this.finishedAchievements[_i1]).getTypeId());
                (this.finishedAchievements[_i1]).serialize(output);
            }
        }

        deserializeAs_AchievementListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _finishedAchievementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _finishedAchievementsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(AchievementAchieved, _id1);
                _item1.deserialize(input);
                this.finishedAchievements.push(_item1);
            }
        }
    }
    class AchievementRewardErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.achievementId = 0;
            this.ID = 9506;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.achievementId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementRewardErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementRewardErrorMessage(input);
        }

        serializeAs_AchievementRewardErrorMessage(ouput) {
            output.writeShort(this.achievementId);
        }

        deserializeAs_AchievementRewardErrorMessage(input) {
            this.achievementId = input.readShort();
        }
    }
    class AchievementRewardRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.achievementId = 0;
            this.ID = 1218;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.achievementId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementRewardRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementRewardRequestMessage(input);
        }

        serializeAs_AchievementRewardRequestMessage(ouput) {
            output.writeShort(this.achievementId);
        }

        deserializeAs_AchievementRewardRequestMessage(input) {
            this.achievementId = input.readShort();
        }
    }
    class AchievementRewardSuccessMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.achievementId = 0;
            this.ID = 1941;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.achievementId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AchievementRewardSuccessMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AchievementRewardSuccessMessage(input);
        }

        serializeAs_AchievementRewardSuccessMessage(ouput) {
            output.writeShort(this.achievementId);
        }

        deserializeAs_AchievementRewardSuccessMessage(input) {
            this.achievementId = input.readShort();
        }
    }
    class FriendGuildSetWarnOnAchievementCompleteMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 8910;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(input);
        }

        serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class FriendGuildWarnOnAchievementCompleteStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 188;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(input);
        }

        serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class AbstractGameActionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actionId = 0;
            this.sourceId = 0;
            this.ID = 409;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actionId = 0;
            this.sourceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AbstractGameActionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractGameActionMessage(input);
        }

        serializeAs_AbstractGameActionMessage(ouput) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
        }

        deserializeAs_AbstractGameActionMessage(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of AbstractGameActionMessage.actionId.");
            }
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of AbstractGameActionMessage.sourceId.");
            }
        }
    }
    class AbstractGameActionWithAckMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.waitAckId = 0;
            this.ID = 7499;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.waitAckId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AbstractGameActionWithAckMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractGameActionWithAckMessage(input);
        }

        serializeAs_AbstractGameActionWithAckMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.waitAckId);
        }

        deserializeAs_AbstractGameActionWithAckMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.waitAckId = input.readShort();
        }
    }
    class AbstractGameActionFightTargetedAbilityMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.destinationCellId = 0;
            this.critical = 1;
            this.silentCast = false;
            this.verboseCast = false;
            this.ID = 836;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.destinationCellId = 0;
            this.critical = 1;
            this.silentCast = false;
            this.verboseCast = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AbstractGameActionFightTargetedAbilityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractGameActionFightTargetedAbilityMessage(input);
        }

        serializeAs_AbstractGameActionFightTargetedAbilityMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.silentCast);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.verboseCast);
            output.writeByte(_box0);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.destinationCellId < -1 || this.destinationCellId > 559) {
                throw new Error("Forbidden value (" + this.destinationCellId + ") on element destinationCellId.");
            }
            output.writeShort(this.destinationCellId);
            output.writeByte(this.critical);
        }

        deserializeAs_AbstractGameActionFightTargetedAbilityMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _box0 = input.readByte();
            this.silentCast = BooleanByteWrapper.getFlag(_box0, 0);
            this.verboseCast = BooleanByteWrapper.getFlag(_box0, 1);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of AbstractGameActionFightTargetedAbilityMessage.targetId.");
            }
            this.destinationCellId = input.readShort();
            if (this.destinationCellId < -1 || this.destinationCellId > 559) {
                throw new Error("Forbidden value (" + this.destinationCellId + ") on element of AbstractGameActionFightTargetedAbilityMessage.destinationCellId.");
            }
            this.critical = input.readByte();
            if (this.critical < 0) {
                throw new Error("Forbidden value (" + this.critical + ") on element of AbstractGameActionFightTargetedAbilityMessage.critical.");
            }
        }
    }
    class GameActionFightActivateGlyphTrapMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.markId = 0;
            this.active = false;
            this.ID = 9295;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.markId = 0;
            this.active = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightActivateGlyphTrapMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightActivateGlyphTrapMessage(input);
        }

        serializeAs_GameActionFightActivateGlyphTrapMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.markId);
            output.writeBoolean(this.active);
        }

        deserializeAs_GameActionFightActivateGlyphTrapMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.markId = input.readShort();
            this.active = input.readBoolean();
        }
    }
    class GameActionFightCarryCharacterMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.cellId = 0;
            this.ID = 9711;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightCarryCharacterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightCarryCharacterMessage(input);
        }

        serializeAs_GameActionFightCarryCharacterMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        }

        deserializeAs_GameActionFightCarryCharacterMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightCarryCharacterMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightCarryCharacterMessage.cellId.");
            }
        }
    }
    class GameActionFightCastOnTargetRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.targetId = 0;
            this.ID = 5894;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightCastOnTargetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightCastOnTargetRequestMessage(input);
        }

        serializeAs_GameActionFightCastOnTargetRequestMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameActionFightCastOnTargetRequestMessage(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastOnTargetRequestMessage.spellId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightCastOnTargetRequestMessage.targetId.");
            }
        }
    }
    class GameActionFightCastRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.cellId = 0;
            this.ID = 6441;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightCastRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightCastRequestMessage(input);
        }

        serializeAs_GameActionFightCastRequestMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        }

        deserializeAs_GameActionFightCastRequestMessage(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightCastRequestMessage.spellId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightCastRequestMessage.cellId.");
            }
        }
    }
    class GameActionFightChangeLookMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.entityLook = new EntityLook();
            this.ID = 6798;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.entityLook = new EntityLook();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightChangeLookMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightChangeLookMessage(input);
        }

        serializeAs_GameActionFightChangeLookMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            this.entityLook.serializeAs_EntityLook(output);
        }

        deserializeAs_GameActionFightChangeLookMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightChangeLookMessage.targetId.");
            }
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(input);
        }
    }
    class GameActionFightCloseCombatMessage extends AbstractGameActionFightTargetedAbilityMessage {
        constructor(_super) {
            super()
            this.weaponGenericId = 0;
            this.ID = 1826;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.weaponGenericId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightCloseCombatMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightCloseCombatMessage(input);
        }

        serializeAs_GameActionFightCloseCombatMessage(ouput) {
            this.serializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, output);
            if (this.weaponGenericId < 0) {
                throw new Error("Forbidden value (" + this.weaponGenericId + ") on element weaponGenericId.");
            }
            output.writeVarInt(this.weaponGenericId);
        }

        deserializeAs_GameActionFightCloseCombatMessage(input) {
            this.deserializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, input);
            this.weaponGenericId = input.readVarUhInt();
            if (this.weaponGenericId < 0) {
                throw new Error("Forbidden value (" + this.weaponGenericId + ") on element of GameActionFightCloseCombatMessage.weaponGenericId.");
            }
        }
    }
    class GameActionFightDeathMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 2437;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDeathMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDeathMessage(input);
        }

        serializeAs_GameActionFightDeathMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameActionFightDeathMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDeathMessage.targetId.");
            }
        }
    }
    class GameActionFightDispellableEffectMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.effect = new AbstractFightDispellableEffect();
            this.ID = 869;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.effect = new AbstractFightDispellableEffect();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDispellableEffectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDispellableEffectMessage(input);
        }

        serializeAs_GameActionFightDispellableEffectMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.effect.getTypeId());
            this.effect.serialize(output);
        }

        deserializeAs_GameActionFightDispellableEffectMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _id1 = input.readUnsignedShort();
            this.effect = ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _id1);
            this.effect.deserialize(input);
        }
    }
    class GameActionFightDispellMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.verboseCast = false;
            this.ID = 4004;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.verboseCast = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDispellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDispellMessage(input);
        }

        serializeAs_GameActionFightDispellMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeBoolean(this.verboseCast);
        }

        deserializeAs_GameActionFightDispellMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDispellMessage.targetId.");
            }
            this.verboseCast = input.readBoolean();
        }
    }
    class GameActionFightDispellEffectMessage extends GameActionFightDispellMessage {
        constructor(_super) {
            super()
            this.boostUID = 0;
            this.ID = 339;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.boostUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDispellEffectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDispellEffectMessage(input);
        }

        serializeAs_GameActionFightDispellEffectMessage(ouput) {
            this.serializeAs_GameActionFightDispellMessage.call(this, output);
            if (this.boostUID < 0) {
                throw new Error("Forbidden value (" + this.boostUID + ") on element boostUID.");
            }
            output.writeInt(this.boostUID);
        }

        deserializeAs_GameActionFightDispellEffectMessage(input) {
            this.deserializeAs_GameActionFightDispellMessage.call(this, input);
            this.boostUID = input.readInt();
            if (this.boostUID < 0) {
                throw new Error("Forbidden value (" + this.boostUID + ") on element of GameActionFightDispellEffectMessage.boostUID.");
            }
        }
    }
    class GameActionFightDispellSpellMessage extends GameActionFightDispellMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.ID = 1974;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDispellSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDispellSpellMessage(input);
        }

        serializeAs_GameActionFightDispellSpellMessage(ouput) {
            this.serializeAs_GameActionFightDispellMessage.call(this, output);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        }

        deserializeAs_GameActionFightDispellSpellMessage(input) {
            this.deserializeAs_GameActionFightDispellMessage.call(this, input);
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightDispellSpellMessage.spellId.");
            }
        }
    }
    class GameActionFightDodgePointLossMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.amount = 0;
            this.ID = 8102;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.amount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDodgePointLossMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDodgePointLossMessage(input);
        }

        serializeAs_GameActionFightDodgePointLossMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarShort(this.amount);
        }

        deserializeAs_GameActionFightDodgePointLossMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDodgePointLossMessage.targetId.");
            }
            this.amount = input.readVarUhShort();
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightDodgePointLossMessage.amount.");
            }
        }
    }
    class GameActionFightDropCharacterMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.cellId = 0;
            this.ID = 1472;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightDropCharacterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightDropCharacterMessage(input);
        }

        serializeAs_GameActionFightDropCharacterMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        }

        deserializeAs_GameActionFightDropCharacterMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightDropCharacterMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightDropCharacterMessage.cellId.");
            }
        }
    }
    class GameActionFightExchangePositionsMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.casterCellId = 0;
            this.targetCellId = 0;
            this.ID = 2330;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.casterCellId = 0;
            this.targetCellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightExchangePositionsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightExchangePositionsMessage(input);
        }

        serializeAs_GameActionFightExchangePositionsMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.casterCellId < -1 || this.casterCellId > 559) {
                throw new Error("Forbidden value (" + this.casterCellId + ") on element casterCellId.");
            }
            output.writeShort(this.casterCellId);
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
            }
            output.writeShort(this.targetCellId);
        }

        deserializeAs_GameActionFightExchangePositionsMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightExchangePositionsMessage.targetId.");
            }
            this.casterCellId = input.readShort();
            if (this.casterCellId < -1 || this.casterCellId > 559) {
                throw new Error("Forbidden value (" + this.casterCellId + ") on element of GameActionFightExchangePositionsMessage.casterCellId.");
            }
            this.targetCellId = input.readShort();
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameActionFightExchangePositionsMessage.targetCellId.");
            }
        }
    }
    class GameActionFightInvisibilityMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.state = 0;
            this.ID = 4958;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.state = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightInvisibilityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightInvisibilityMessage(input);
        }

        serializeAs_GameActionFightInvisibilityMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeByte(this.state);
        }

        deserializeAs_GameActionFightInvisibilityMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibilityMessage.targetId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of GameActionFightInvisibilityMessage.state.");
            }
        }
    }
    class GameActionFightInvisibleDetectedMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.cellId = 0;
            this.ID = 3642;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightInvisibleDetectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightInvisibleDetectedMessage(input);
        }

        serializeAs_GameActionFightInvisibleDetectedMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        }

        deserializeAs_GameActionFightInvisibleDetectedMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightInvisibleDetectedMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightInvisibleDetectedMessage.cellId.");
            }
        }
    }
    class GameActionFightKillMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 7364;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightKillMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightKillMessage(input);
        }

        serializeAs_GameActionFightKillMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameActionFightKillMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightKillMessage.targetId.");
            }
        }
    }
    class GameActionFightLifePointsLostMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.loss = 0;
            this.permanentDamages = 0;
            this.elementId = 0;
            this.ID = 8706;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.loss = 0;
            this.permanentDamages = 0;
            this.elementId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightLifePointsLostMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightLifePointsLostMessage(input);
        }

        serializeAs_GameActionFightLifePointsLostMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.loss < 0) {
                throw new Error("Forbidden value (" + this.loss + ") on element loss.");
            }
            output.writeVarInt(this.loss);
            if (this.permanentDamages < 0) {
                throw new Error("Forbidden value (" + this.permanentDamages + ") on element permanentDamages.");
            }
            output.writeVarInt(this.permanentDamages);
            output.writeVarInt(this.elementId);
        }

        deserializeAs_GameActionFightLifePointsLostMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsLostMessage.targetId.");
            }
            this.loss = input.readVarUhInt();
            if (this.loss < 0) {
                throw new Error("Forbidden value (" + this.loss + ") on element of GameActionFightLifePointsLostMessage.loss.");
            }
            this.permanentDamages = input.readVarUhInt();
            if (this.permanentDamages < 0) {
                throw new Error("Forbidden value (" + this.permanentDamages + ") on element of GameActionFightLifePointsLostMessage.permanentDamages.");
            }
            this.elementId = input.readVarInt();
        }
    }
    class GameActionFightLifeAndShieldPointsLostMessage extends GameActionFightLifePointsLostMessage {
        constructor(_super) {
            super()
            this.shieldLoss = 0;
            this.ID = 2753;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.shieldLoss = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightLifeAndShieldPointsLostMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(input);
        }

        serializeAs_GameActionFightLifeAndShieldPointsLostMessage(ouput) {
            this.serializeAs_GameActionFightLifePointsLostMessage.call(this, output);
            if (this.shieldLoss < 0) {
                throw new Error("Forbidden value (" + this.shieldLoss + ") on element shieldLoss.");
            }
            output.writeVarShort(this.shieldLoss);
        }

        deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(input) {
            this.deserializeAs_GameActionFightLifePointsLostMessage.call(this, input);
            this.shieldLoss = input.readVarUhShort();
            if (this.shieldLoss < 0) {
                throw new Error("Forbidden value (" + this.shieldLoss + ") on element of GameActionFightLifeAndShieldPointsLostMessage.shieldLoss.");
            }
        }
    }
    class GameActionFightLifePointsGainMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.delta = 0;
            this.ID = 5968;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.delta = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightLifePointsGainMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightLifePointsGainMessage(input);
        }

        serializeAs_GameActionFightLifePointsGainMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.delta < 0) {
                throw new Error("Forbidden value (" + this.delta + ") on element delta.");
            }
            output.writeVarInt(this.delta);
        }

        deserializeAs_GameActionFightLifePointsGainMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightLifePointsGainMessage.targetId.");
            }
            this.delta = input.readVarUhInt();
            if (this.delta < 0) {
                throw new Error("Forbidden value (" + this.delta + ") on element of GameActionFightLifePointsGainMessage.delta.");
            }
        }
    }
    class GameActionFightMarkCellsMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.mark = new GameActionMark();
            this.ID = 7789;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mark = new GameActionMark();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightMarkCellsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightMarkCellsMessage(input);
        }

        serializeAs_GameActionFightMarkCellsMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            this.mark.serializeAs_GameActionMark(output);
        }

        deserializeAs_GameActionFightMarkCellsMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.mark = new GameActionMark();
            this.mark.deserialize(input);
        }
    }
    class GameActionFightModifyEffectsDurationMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.delta = 0;
            this.ID = 3924;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.delta = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightModifyEffectsDurationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightModifyEffectsDurationMessage(input);
        }

        serializeAs_GameActionFightModifyEffectsDurationMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeShort(this.delta);
        }

        deserializeAs_GameActionFightModifyEffectsDurationMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightModifyEffectsDurationMessage.targetId.");
            }
            this.delta = input.readShort();
        }
    }
    class GameActionFightMultipleSummonMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.summons = [];
            this.ID = 1078;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.summons = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightMultipleSummonMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightMultipleSummonMessage(input);
        }

        serializeAs_GameActionFightMultipleSummonMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.summons.length);
            for (var _i1 = 0; _i1 < this.summons.length; _i1++) {
                output.writeShort((this.summons[_i1]).getTypeId());
                (this.summons[_i1]).serialize(output);
            }
        }

        deserializeAs_GameActionFightMultipleSummonMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _summonsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _summonsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameContextSummonsInformation, _id1);
                _item1.deserialize(input);
                this.summons.push(_item1);
            }
        }
    }
    class GameActionFightNoSpellCastMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellLevelId = 0;
            this.ID = 1241;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellLevelId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightNoSpellCastMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightNoSpellCastMessage(input);
        }

        serializeAs_GameActionFightNoSpellCastMessage(ouput) {
            if (this.spellLevelId < 0) {
                throw new Error("Forbidden value (" + this.spellLevelId + ") on element spellLevelId.");
            }
            output.writeVarInt(this.spellLevelId);
        }

        deserializeAs_GameActionFightNoSpellCastMessage(input) {
            this.spellLevelId = input.readVarUhInt();
            if (this.spellLevelId < 0) {
                throw new Error("Forbidden value (" + this.spellLevelId + ") on element of GameActionFightNoSpellCastMessage.spellLevelId.");
            }
        }
    }
    class GameActionFightPointsVariationMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.delta = 0;
            this.ID = 2600;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.delta = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightPointsVariationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightPointsVariationMessage(input);
        }

        serializeAs_GameActionFightPointsVariationMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            output.writeShort(this.delta);
        }

        deserializeAs_GameActionFightPointsVariationMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightPointsVariationMessage.targetId.");
            }
            this.delta = input.readShort();
        }
    }
    class GameActionFightReduceDamagesMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.amount = 0;
            this.ID = 6000;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.amount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightReduceDamagesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightReduceDamagesMessage(input);
        }

        serializeAs_GameActionFightReduceDamagesMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarInt(this.amount);
        }

        deserializeAs_GameActionFightReduceDamagesMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReduceDamagesMessage.targetId.");
            }
            this.amount = input.readVarUhInt();
            if (this.amount < 0) {
                throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightReduceDamagesMessage.amount.");
            }
        }
    }
    class GameActionFightReflectDamagesMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 2532;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightReflectDamagesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightReflectDamagesMessage(input);
        }

        serializeAs_GameActionFightReflectDamagesMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameActionFightReflectDamagesMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectDamagesMessage.targetId.");
            }
        }
    }
    class GameActionFightReflectSpellMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 9227;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightReflectSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightReflectSpellMessage(input);
        }

        serializeAs_GameActionFightReflectSpellMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameActionFightReflectSpellMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightReflectSpellMessage.targetId.");
            }
        }
    }
    class GameActionFightSlideMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.startCellId = 0;
            this.endCellId = 0;
            this.ID = 9026;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.startCellId = 0;
            this.endCellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightSlideMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightSlideMessage(input);
        }

        serializeAs_GameActionFightSlideMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.startCellId < -1 || this.startCellId > 559) {
                throw new Error("Forbidden value (" + this.startCellId + ") on element startCellId.");
            }
            output.writeShort(this.startCellId);
            if (this.endCellId < -1 || this.endCellId > 559) {
                throw new Error("Forbidden value (" + this.endCellId + ") on element endCellId.");
            }
            output.writeShort(this.endCellId);
        }

        deserializeAs_GameActionFightSlideMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSlideMessage.targetId.");
            }
            this.startCellId = input.readShort();
            if (this.startCellId < -1 || this.startCellId > 559) {
                throw new Error("Forbidden value (" + this.startCellId + ") on element of GameActionFightSlideMessage.startCellId.");
            }
            this.endCellId = input.readShort();
            if (this.endCellId < -1 || this.endCellId > 559) {
                throw new Error("Forbidden value (" + this.endCellId + ") on element of GameActionFightSlideMessage.endCellId.");
            }
        }
    }
    class GameActionFightSpellCastMessage extends AbstractGameActionFightTargetedAbilityMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.spellLevel = 0;
            this.portalsIds = [];
            this.ID = 1220;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.spellLevel = 0;
            this.portalsIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightSpellCastMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightSpellCastMessage(input);
        }

        serializeAs_GameActionFightSpellCastMessage(ouput) {
            this.serializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, output);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
            }
            output.writeShort(this.spellLevel);
            output.writeShort(this.portalsIds.length);
            for (var _i3 = 0; _i3 < this.portalsIds.length; _i3++) {
                output.writeShort(this.portalsIds[_i3]);
            }
        }

        deserializeAs_GameActionFightSpellCastMessage(input) {
            var _val3 = 0;
            this.deserializeAs_AbstractGameActionFightTargetedAbilityMessage.call(this, input);
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCastMessage.spellId.");
            }
            this.spellLevel = input.readShort();
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element of GameActionFightSpellCastMessage.spellLevel.");
            }
            var _portalsIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _portalsIdsLen; _i3++) {
                _val3 = input.readShort();
                this.portalsIds.push(_val3);
            }
        }
    }
    class GameActionFightSpellCooldownVariationMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.spellId = 0;
            this.value = 0;
            this.ID = 4289;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.spellId = 0;
            this.value = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightSpellCooldownVariationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightSpellCooldownVariationMessage(input);
        }

        serializeAs_GameActionFightSpellCooldownVariationMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeVarShort(this.value);
        }

        deserializeAs_GameActionFightSpellCooldownVariationMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellCooldownVariationMessage.targetId.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellCooldownVariationMessage.spellId.");
            }
            this.value = input.readVarShort();
        }
    }
    class GameActionFightSpellImmunityMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.spellId = 0;
            this.ID = 4010;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.spellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightSpellImmunityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightSpellImmunityMessage(input);
        }

        serializeAs_GameActionFightSpellImmunityMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        }

        deserializeAs_GameActionFightSpellImmunityMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightSpellImmunityMessage.targetId.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameActionFightSpellImmunityMessage.spellId.");
            }
        }
    }
    class GameActionFightStealKamaMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.amount = 0;
            this.ID = 270;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.amount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightStealKamaMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightStealKamaMessage(input);
        }

        serializeAs_GameActionFightStealKamaMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
        }

        deserializeAs_GameActionFightStealKamaMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightStealKamaMessage.targetId.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element of GameActionFightStealKamaMessage.amount.");
            }
        }
    }
    class GameActionFightSummonMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.summons = [];
            this.ID = 7574;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.summons = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightSummonMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightSummonMessage(input);
        }

        serializeAs_GameActionFightSummonMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.summons.length);
            for (var _i1 = 0; _i1 < this.summons.length; _i1++) {
                output.writeShort((this.summons[_i1]).getTypeId());
                (this.summons[_i1]).serialize(output);
            }
        }

        deserializeAs_GameActionFightSummonMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _summonsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _summonsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameFightFighterInformations, _id1);
                _item1.deserialize(input);
                this.summons.push(_item1);
            }
        }
    }
    class GameActionFightTackledMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.tacklersIds = [];
            this.ID = 5588;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tacklersIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightTackledMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightTackledMessage(input);
        }

        serializeAs_GameActionFightTackledMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.tacklersIds.length);
            for (var _i1 = 0; _i1 < this.tacklersIds.length; _i1++) {
                if (this.tacklersIds[_i1] < -9007199254740992 || this.tacklersIds[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.tacklersIds[_i1] + ") on element 1 (starting at 1) of tacklersIds.");
                }
                output.writeDouble(this.tacklersIds[_i1]);
            }
        }

        deserializeAs_GameActionFightTackledMessage(input) {
            var _val1 = NaN;
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            var _tacklersIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _tacklersIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740992 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of tacklersIds.");
                }
                this.tacklersIds.push(_val1);
            }
        }
    }
    class GameActionFightTeleportOnSameMapMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.cellId = 0;
            this.ID = 6155;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightTeleportOnSameMapMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightTeleportOnSameMapMessage(input);
        }

        serializeAs_GameActionFightTeleportOnSameMapMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        }

        deserializeAs_GameActionFightTeleportOnSameMapMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightTeleportOnSameMapMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightTeleportOnSameMapMessage.cellId.");
            }
        }
    }
    class GameActionFightThrowCharacterMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.cellId = 0;
            this.ID = 2852;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightThrowCharacterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightThrowCharacterMessage(input);
        }

        serializeAs_GameActionFightThrowCharacterMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeShort(this.cellId);
        }

        deserializeAs_GameActionFightThrowCharacterMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightThrowCharacterMessage.targetId.");
            }
            this.cellId = input.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameActionFightThrowCharacterMessage.cellId.");
            }
        }
    }
    class GameActionFightTriggerEffectMessage extends GameActionFightDispellEffectMessage {
        constructor(_super) {
            super()

            this.ID = 8781;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightTriggerEffectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightTriggerEffectMessage(input);
        }

        serializeAs_GameActionFightTriggerEffectMessage(ouput) {
            this.serializeAs_GameActionFightDispellEffectMessage.call(this, output);
        }

        deserializeAs_GameActionFightTriggerEffectMessage(input) {
            this.deserializeAs_GameActionFightDispellEffectMessage.call(this, input);
        }
    }
    class GameActionFightTriggerGlyphTrapMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.markId = 0;
            this.markImpactCell = 0;
            this.triggeringCharacterId = 0;
            this.triggeredSpellId = 0;
            this.ID = 6805;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.markId = 0;
            this.markImpactCell = 0;
            this.triggeringCharacterId = 0;
            this.triggeredSpellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightTriggerGlyphTrapMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightTriggerGlyphTrapMessage(input);
        }

        serializeAs_GameActionFightTriggerGlyphTrapMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.markId);
            if (this.markImpactCell < 0) {
                throw new Error("Forbidden value (" + this.markImpactCell + ") on element markImpactCell.");
            }
            output.writeVarShort(this.markImpactCell);
            if (this.triggeringCharacterId < -9007199254740992 || this.triggeringCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.triggeringCharacterId + ") on element triggeringCharacterId.");
            }
            output.writeDouble(this.triggeringCharacterId);
            if (this.triggeredSpellId < 0) {
                throw new Error("Forbidden value (" + this.triggeredSpellId + ") on element triggeredSpellId.");
            }
            output.writeVarShort(this.triggeredSpellId);
        }

        deserializeAs_GameActionFightTriggerGlyphTrapMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.markId = input.readShort();
            this.markImpactCell = input.readVarUhShort();
            if (this.markImpactCell < 0) {
                throw new Error("Forbidden value (" + this.markImpactCell + ") on element of GameActionFightTriggerGlyphTrapMessage.markImpactCell.");
            }
            this.triggeringCharacterId = input.readDouble();
            if (this.triggeringCharacterId < -9007199254740992 || this.triggeringCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.triggeringCharacterId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeringCharacterId.");
            }
            this.triggeredSpellId = input.readVarUhShort();
            if (this.triggeredSpellId < 0) {
                throw new Error("Forbidden value (" + this.triggeredSpellId + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeredSpellId.");
            }
        }
    }
    class GameActionFightUnmarkCellsMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.markId = 0;
            this.ID = 2192;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.markId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightUnmarkCellsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightUnmarkCellsMessage(input);
        }

        serializeAs_GameActionFightUnmarkCellsMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            output.writeShort(this.markId);
        }

        deserializeAs_GameActionFightUnmarkCellsMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.markId = input.readShort();
        }
    }
    class GameActionFightVanishMessage extends AbstractGameActionMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 607;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionFightVanishMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionFightVanishMessage(input);
        }

        serializeAs_GameActionFightVanishMessage(ouput) {
            this.serializeAs_AbstractGameActionMessage.call(this, output);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameActionFightVanishMessage(input) {
            this.deserializeAs_AbstractGameActionMessage.call(this, input);
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameActionFightVanishMessage.targetId.");
            }
        }
    }
    class GameActionUpdateEffectTriggerCountMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.targetIds = [];
            this.ID = 7800;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionUpdateEffectTriggerCountMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionUpdateEffectTriggerCountMessage(input);
        }

        serializeAs_GameActionUpdateEffectTriggerCountMessage(ouput) {
            output.writeShort(this.targetIds.length);
            for (var _i1 = 0; _i1 < this.targetIds.length; _i1++) {
                (this.targetIds[_i1]).serializeAs_GameFightEffectTriggerCount(output);
            }
        }

        deserializeAs_GameActionUpdateEffectTriggerCountMessage(input) {
            var _item1 = null;
            var _targetIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _targetIdsLen; _i1++) {
                _item1 = new GameFightEffectTriggerCount();
                _item1.deserialize(input);
                this.targetIds.push(_item1);
            }
        }
    }
    class GameActionAcknowledgementMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.valid = false;
            this.actionId = 0;
            this.ID = 5824;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.valid = false;
            this.actionId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionAcknowledgementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionAcknowledgementMessage(input);
        }

        serializeAs_GameActionAcknowledgementMessage(ouput) {
            output.writeBoolean(this.valid);
            output.writeByte(this.actionId);
        }

        deserializeAs_GameActionAcknowledgementMessage(input) {
            this.valid = input.readBoolean();
            this.actionId = input.readByte();
        }
    }
    class GameActionNoopMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5512;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionNoopMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionNoopMessage(input);
        }

        serializeAs_GameActionNoopMessage(ouput) {

        }

        deserializeAs_GameActionNoopMessage(input) {

        }
    }
    class GameActionSpamMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cells = [];
            this.ID = 5126;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionSpamMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionSpamMessage(input);
        }

        serializeAs_GameActionSpamMessage(ouput) {
            output.writeShort(this.cells.length);
            for (var _i1 = 0; _i1 < this.cells.length; _i1++) {
                output.writeShort(this.cells[_i1]);
            }
        }

        deserializeAs_GameActionSpamMessage(input) {
            var _val1 = 0;
            var _cellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellsLen; _i1++) {
                _val1 = input.readShort();
                this.cells.push(_val1);
            }
        }
    }
    class SequenceEndMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actionId = 0;
            this.authorId = 0;
            this.sequenceType = 0;
            this.ID = 6647;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actionId = 0;
            this.authorId = 0;
            this.sequenceType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SequenceEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SequenceEndMessage(input);
        }

        serializeAs_SequenceEndMessage(ouput) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeVarShort(this.actionId);
            if (this.authorId < -9007199254740992 || this.authorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.authorId + ") on element authorId.");
            }
            output.writeDouble(this.authorId);
            output.writeByte(this.sequenceType);
        }

        deserializeAs_SequenceEndMessage(input) {
            this.actionId = input.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of SequenceEndMessage.actionId.");
            }
            this.authorId = input.readDouble();
            if (this.authorId < -9007199254740992 || this.authorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.authorId + ") on element of SequenceEndMessage.authorId.");
            }
            this.sequenceType = input.readByte();
        }
    }
    class SequenceStartMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.sequenceType = 0;
            this.authorId = 0;
            this.ID = 7930;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sequenceType = 0;
            this.authorId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SequenceStartMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SequenceStartMessage(input);
        }

        serializeAs_SequenceStartMessage(ouput) {
            output.writeByte(this.sequenceType);
            if (this.authorId < -9007199254740992 || this.authorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.authorId + ") on element authorId.");
            }
            output.writeDouble(this.authorId);
        }

        deserializeAs_SequenceStartMessage(input) {
            this.sequenceType = input.readByte();
            this.authorId = input.readDouble();
            if (this.authorId < -9007199254740992 || this.authorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.authorId + ") on element of SequenceStartMessage.authorId.");
            }
        }
    }
    class AllianceAllRanksUpdateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ranks = [];
            this.ID = 1136;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ranks = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceAllRanksUpdateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceAllRanksUpdateRequestMessage(input);
        }

        serializeAs_AllianceAllRanksUpdateRequestMessage(ouput) {
            output.writeShort(this.ranks.length);
            for (var _i1 = 0; _i1 < this.ranks.length; _i1++) {
                (this.ranks[_i1]).serializeAs_RankInformation(output);
            }
        }

        deserializeAs_AllianceAllRanksUpdateRequestMessage(input) {
            var _item1 = null;
            var _ranksLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ranksLen; _i1++) {
                _item1 = new RankInformation();
                _item1.deserialize(input);
                this.ranks.push(_item1);
            }
        }
    }
    class SocialNoticeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.content = "";
            this.timestamp = 0;
            this.memberId = 0;
            this.memberName = "";
            this.ID = 3103;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
            this.timestamp = 0;
            this.memberId = 0;
            this.memberName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SocialNoticeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialNoticeMessage(input);
        }

        serializeAs_SocialNoticeMessage(ouput) {
            output.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeInt(this.timestamp);
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeUTF(this.memberName);
        }

        deserializeAs_SocialNoticeMessage(input) {
            this.content = input.readUTF();
            this.timestamp = input.readInt();
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of SocialNoticeMessage.timestamp.");
            }
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of SocialNoticeMessage.memberId.");
            }
            this.memberName = input.readUTF();
        }
    }
    class BulletinMessage extends SocialNoticeMessage {
        constructor(_super) {
            super()

            this.ID = 881;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BulletinMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BulletinMessage(input);
        }

        serializeAs_BulletinMessage(ouput) {
            this.serializeAs_SocialNoticeMessage.call(this, output);
        }

        deserializeAs_BulletinMessage(input) {
            this.deserializeAs_SocialNoticeMessage.call(this, input);
        }
    }
    class AllianceBulletinMessage extends BulletinMessage {
        constructor(_super) {
            super()

            this.ID = 8980;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceBulletinMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceBulletinMessage(input);
        }

        serializeAs_AllianceBulletinMessage(ouput) {
            this.serializeAs_BulletinMessage.call(this, output);
        }

        deserializeAs_AllianceBulletinMessage(input) {
            this.deserializeAs_BulletinMessage.call(this, input);
        }
    }
    class SocialNoticeSetErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 8254;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SocialNoticeSetErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialNoticeSetErrorMessage(input);
        }

        serializeAs_SocialNoticeSetErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_SocialNoticeSetErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of SocialNoticeSetErrorMessage.reason.");
            }
        }
    }
    class AllianceBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
        constructor(_super) {
            super()

            this.ID = 6084;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceBulletinSetErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceBulletinSetErrorMessage(input);
        }

        serializeAs_AllianceBulletinSetErrorMessage(ouput) {
            this.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        }

        deserializeAs_AllianceBulletinSetErrorMessage(input) {
            this.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        }
    }
    class SocialNoticeSetRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4424;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SocialNoticeSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialNoticeSetRequestMessage(input);
        }

        serializeAs_SocialNoticeSetRequestMessage(ouput) {

        }

        deserializeAs_SocialNoticeSetRequestMessage(input) {

        }
    }
    class AllianceBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
        constructor(_super) {
            super()
            this.content = "";
            this.ID = 7394;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceBulletinSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceBulletinSetRequestMessage(input);
        }

        serializeAs_AllianceBulletinSetRequestMessage(ouput) {
            this.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
        }

        deserializeAs_AllianceBulletinSetRequestMessage(input) {
            this.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
        }
    }
    class AllianceChangeMemberRankMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.rankId = 0;
            this.ID = 1021;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.rankId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceChangeMemberRankMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceChangeMemberRankMessage(input);
        }

        serializeAs_AllianceChangeMemberRankMessage(ouput) {
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
        }

        deserializeAs_AllianceChangeMemberRankMessage(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of AllianceChangeMemberRankMessage.memberId.");
            }
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of AllianceChangeMemberRankMessage.rankId.");
            }
        }
    }
    class AllianceCreationResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.ID = 8740;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceCreationResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceCreationResultMessage(input);
        }

        serializeAs_AllianceCreationResultMessage(ouput) {
            output.writeByte(this.result);
        }

        deserializeAs_AllianceCreationResultMessage(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of AllianceCreationResultMessage.result.");
            }
        }
    }
    class AllianceCreationStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6593;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceCreationStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceCreationStartedMessage(input);
        }

        serializeAs_AllianceCreationStartedMessage(ouput) {

        }

        deserializeAs_AllianceCreationStartedMessage(input) {

        }
    }
    class AllianceCreationValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceName = "";
            this.allianceTag = "";
            this.allianceEmblem = new SocialEmblem();
            this.ID = 1538;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceName = "";
            this.allianceTag = "";
            this.allianceEmblem = new SocialEmblem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceCreationValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceCreationValidMessage(input);
        }

        serializeAs_AllianceCreationValidMessage(ouput) {
            output.writeUTF(this.allianceName);
            output.writeUTF(this.allianceTag);
            this.allianceEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_AllianceCreationValidMessage(input) {
            this.allianceName = input.readUTF();
            this.allianceTag = input.readUTF();
            this.allianceEmblem = new SocialEmblem();
            this.allianceEmblem.deserialize(input);
        }
    }
    class AllianceFactsErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceId = 0;
            this.ID = 7286;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFactsErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFactsErrorMessage(input);
        }

        serializeAs_AllianceFactsErrorMessage(ouput) {
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        }

        deserializeAs_AllianceFactsErrorMessage(input) {
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsErrorMessage.allianceId.");
            }
        }
    }
    class AllianceFactsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.infos = new AllianceFactSheetInformation();
            this.members = [];
            this.controlledSubareaIds = [];
            this.leaderCharacterId = 0;
            this.leaderCharacterName = "";
            this.ID = 3798;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.infos = new AllianceFactSheetInformation();
            this.members = [];
            this.controlledSubareaIds = [];
            this.leaderCharacterId = 0;
            this.leaderCharacterName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFactsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFactsMessage(input);
        }

        serializeAs_AllianceFactsMessage(ouput) {
            output.writeShort(this.infos.getTypeId());
            this.infos.serialize(output);
            output.writeShort(this.members.length);
            for (var _i2 = 0; _i2 < this.members.length; _i2++) {
                (this.members[_i2]).serializeAs_CharacterMinimalSocialPublicInformations(output);
            }
            output.writeShort(this.controlledSubareaIds.length);
            for (var _i3 = 0; _i3 < this.controlledSubareaIds.length; _i3++) {
                if (this.controlledSubareaIds[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.controlledSubareaIds[_i3] + ") on element 3 (starting at 1) of controlledSubareaIds.");
                }
                output.writeVarShort(this.controlledSubareaIds[_i3]);
            }
            if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderCharacterId + ") on element leaderCharacterId.");
            }
            output.writeVarLong(this.leaderCharacterId);
            output.writeUTF(this.leaderCharacterName);
        }

        deserializeAs_AllianceFactsMessage(input) {
            var _item2 = null;
            var _val3 = 0;
            var _id1 = input.readUnsignedShort();
            this.infos = ProtocolTypeManager.getInstance(AllianceFactSheetInformation, _id1);
            this.infos.deserialize(input);
            var _membersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _membersLen; _i2++) {
                _item2 = new CharacterMinimalSocialPublicInformations();
                _item2.deserialize(input);
                this.members.push(_item2);
            }
            var _controlledSubareaIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _controlledSubareaIdsLen; _i3++) {
                _val3 = input.readVarUhShort();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of controlledSubareaIds.");
                }
                this.controlledSubareaIds.push(_val3);
            }
            this.leaderCharacterId = input.readVarUhLong();
            if (this.leaderCharacterId < 0 || this.leaderCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderCharacterId + ") on element of AllianceFactsMessage.leaderCharacterId.");
            }
            this.leaderCharacterName = input.readUTF();
        }
    }
    class AllianceFactsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceId = 0;
            this.ID = 6034;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFactsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFactsRequestMessage(input);
        }

        serializeAs_AllianceFactsRequestMessage(ouput) {
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        }

        deserializeAs_AllianceFactsRequestMessage(input) {
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceFactsRequestMessage.allianceId.");
            }
        }
    }
    class AllianceInsiderInfoMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceInfos = new AllianceFactSheetInformation();
            this.members = [];
            this.prisms = [];
            this.taxCollectors = [];
            this.ID = 8929;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInfos = new AllianceFactSheetInformation();
            this.members = [];
            this.prisms = [];
            this.taxCollectors = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInsiderInfoMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInsiderInfoMessage(input);
        }

        serializeAs_AllianceInsiderInfoMessage(ouput) {
            this.allianceInfos.serializeAs_AllianceFactSheetInformation(output);
            output.writeShort(this.members.length);
            for (var _i2 = 0; _i2 < this.members.length; _i2++) {
                (this.members[_i2]).serializeAs_AllianceMemberInfo(output);
            }
            output.writeShort(this.prisms.length);
            for (var _i3 = 0; _i3 < this.prisms.length; _i3++) {
                output.writeShort((this.prisms[_i3]).getTypeId());
                (this.prisms[_i3]).serialize(output);
            }
            output.writeShort(this.taxCollectors.length);
            for (var _i4 = 0; _i4 < this.taxCollectors.length; _i4++) {
                (this.taxCollectors[_i4]).serializeAs_TaxCollectorInformations(output);
            }
        }

        deserializeAs_AllianceInsiderInfoMessage(input) {
            var _item2 = null;
            var _id3 = 0;
            var _item3 = null;
            var _item4 = null;
            this.allianceInfos = new AllianceFactSheetInformation();
            this.allianceInfos.deserialize(input);
            var _membersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _membersLen; _i2++) {
                _item2 = new AllianceMemberInfo();
                _item2.deserialize(input);
                this.members.push(_item2);
            }
            var _prismsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _prismsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(PrismGeolocalizedInformation, _id3);
                _item3.deserialize(input);
                this.prisms.push(_item3);
            }
            var _taxCollectorsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _taxCollectorsLen; _i4++) {
                _item4 = new TaxCollectorInformations();
                _item4.deserialize(input);
                this.taxCollectors.push(_item4);
            }
        }
    }
    class AllianceInsiderInfoRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3738;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInsiderInfoRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInsiderInfoRequestMessage(input);
        }

        serializeAs_AllianceInsiderInfoRequestMessage(ouput) {

        }

        deserializeAs_AllianceInsiderInfoRequestMessage(input) {

        }
    }
    class AllianceInvitationAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.ID = 841;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInvitationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInvitationAnswerMessage(input);
        }

        serializeAs_AllianceInvitationAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
        }

        deserializeAs_AllianceInvitationAnswerMessage(input) {
            this.accept = input.readBoolean();
        }
    }
    class AllianceInvitationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 8696;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInvitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInvitationMessage(input);
        }

        serializeAs_AllianceInvitationMessage(ouput) {
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        }

        deserializeAs_AllianceInvitationMessage(input) {
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of AllianceInvitationMessage.targetId.");
            }
        }
    }
    class AllianceInvitationStateRecrutedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.invitationState = 0;
            this.ID = 2728;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.invitationState = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInvitationStateRecrutedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInvitationStateRecrutedMessage(input);
        }

        serializeAs_AllianceInvitationStateRecrutedMessage(ouput) {
            output.writeByte(this.invitationState);
        }

        deserializeAs_AllianceInvitationStateRecrutedMessage(input) {
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecrutedMessage.invitationState.");
            }
        }
    }
    class AllianceInvitationStateRecruterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recrutedName = "";
            this.invitationState = 0;
            this.ID = 6001;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recrutedName = "";
            this.invitationState = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInvitationStateRecruterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInvitationStateRecruterMessage(input);
        }

        serializeAs_AllianceInvitationStateRecruterMessage(ouput) {
            output.writeUTF(this.recrutedName);
            output.writeByte(this.invitationState);
        }

        deserializeAs_AllianceInvitationStateRecruterMessage(input) {
            this.recrutedName = input.readUTF();
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of AllianceInvitationStateRecruterMessage.invitationState.");
            }
        }
    }
    class AllianceInvitedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recruterName = "";
            this.allianceInfo = new AllianceInformation();
            this.ID = 1579;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recruterName = "";
            this.allianceInfo = new AllianceInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceInvitedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceInvitedMessage(input);
        }

        serializeAs_AllianceInvitedMessage(ouput) {
            output.writeUTF(this.recruterName);
            this.allianceInfo.serializeAs_AllianceInformation(output);
        }

        deserializeAs_AllianceInvitedMessage(input) {
            this.recruterName = input.readUTF();
            this.allianceInfo = new AllianceInformation();
            this.allianceInfo.deserialize(input);
        }
    }
    class AllianceJoinAutomaticallyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceId = 0;
            this.ID = 8203;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceJoinAutomaticallyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceJoinAutomaticallyRequestMessage(input);
        }

        serializeAs_AllianceJoinAutomaticallyRequestMessage(ouput) {
            output.writeInt(this.allianceId);
        }

        deserializeAs_AllianceJoinAutomaticallyRequestMessage(input) {
            this.allianceId = input.readInt();
        }
    }
    class AllianceJoinedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceInfo = new AllianceInformation();
            this.rankId = 0;
            this.ID = 6952;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInfo = new AllianceInformation();
            this.rankId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceJoinedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceJoinedMessage(input);
        }

        serializeAs_AllianceJoinedMessage(ouput) {
            this.allianceInfo.serializeAs_AllianceInformation(output);
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
        }

        deserializeAs_AllianceJoinedMessage(input) {
            this.allianceInfo = new AllianceInformation();
            this.allianceInfo.deserialize(input);
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of AllianceJoinedMessage.rankId.");
            }
        }
    }
    class AllianceKickRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kickedId = 0;
            this.ID = 3588;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kickedId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceKickRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceKickRequestMessage(input);
        }

        serializeAs_AllianceKickRequestMessage(ouput) {
            if (this.kickedId < -9007199254740992 || this.kickedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element kickedId.");
            }
            output.writeVarLong(this.kickedId);
        }

        deserializeAs_AllianceKickRequestMessage(input) {
            this.kickedId = input.readVarLong();
            if (this.kickedId < -9007199254740992 || this.kickedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element of AllianceKickRequestMessage.kickedId.");
            }
        }
    }
    class AllianceLeftMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8384;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceLeftMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceLeftMessage(input);
        }

        serializeAs_AllianceLeftMessage(ouput) {

        }

        deserializeAs_AllianceLeftMessage(input) {

        }
    }
    class AllianceListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alliances = [];
            this.ID = 1245;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alliances = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceListMessage(input);
        }

        serializeAs_AllianceListMessage(ouput) {
            output.writeShort(this.alliances.length);
            for (var _i1 = 0; _i1 < this.alliances.length; _i1++) {
                (this.alliances[_i1]).serializeAs_AllianceFactSheetInformation(output);
            }
        }

        deserializeAs_AllianceListMessage(input) {
            var _item1 = null;
            var _alliancesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alliancesLen; _i1++) {
                _item1 = new AllianceFactSheetInformation();
                _item1.deserialize(input);
                this.alliances.push(_item1);
            }
        }
    }
    class AllianceMemberInformationUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.member = new AllianceMemberInfo();
            this.ID = 2538;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.member = new AllianceMemberInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMemberInformationUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMemberInformationUpdateMessage(input);
        }

        serializeAs_AllianceMemberInformationUpdateMessage(ouput) {
            this.member.serializeAs_AllianceMemberInfo(output);
        }

        deserializeAs_AllianceMemberInformationUpdateMessage(input) {
            this.member = new AllianceMemberInfo();
            this.member.deserialize(input);
        }
    }
    class AllianceMemberLeavingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kicked = false;
            this.memberId = 0;
            this.ID = 945;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kicked = false;
            this.memberId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMemberLeavingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMemberLeavingMessage(input);
        }

        serializeAs_AllianceMemberLeavingMessage(ouput) {
            output.writeBoolean(this.kicked);
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
        }

        deserializeAs_AllianceMemberLeavingMessage(input) {
            this.kicked = input.readBoolean();
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of AllianceMemberLeavingMessage.memberId.");
            }
        }
    }
    class AllianceMemberOnlineStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.online = false;
            this.ID = 5744;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.online = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMemberOnlineStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMemberOnlineStatusMessage(input);
        }

        serializeAs_AllianceMemberOnlineStatusMessage(ouput) {
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeBoolean(this.online);
        }

        deserializeAs_AllianceMemberOnlineStatusMessage(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of AllianceMemberOnlineStatusMessage.memberId.");
            }
            this.online = input.readBoolean();
        }
    }
    class AllianceMembershipMessage extends AllianceJoinedMessage {
        constructor(_super) {
            super()

            this.ID = 549;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMembershipMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMembershipMessage(input);
        }

        serializeAs_AllianceMembershipMessage(ouput) {
            this.serializeAs_AllianceJoinedMessage.call(this, output);
        }

        deserializeAs_AllianceMembershipMessage(input) {
            this.deserializeAs_AllianceJoinedMessage.call(this, input);
        }
    }
    class AllianceMemberStartWarningOnConnectionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7557;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMemberStartWarningOnConnectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMemberStartWarningOnConnectionMessage(input);
        }

        serializeAs_AllianceMemberStartWarningOnConnectionMessage(ouput) {

        }

        deserializeAs_AllianceMemberStartWarningOnConnectionMessage(input) {

        }
    }
    class AllianceMemberStopWarningOnConnectionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9966;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMemberStopWarningOnConnectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMemberStopWarningOnConnectionMessage(input);
        }

        serializeAs_AllianceMemberStopWarningOnConnectionMessage(ouput) {

        }

        deserializeAs_AllianceMemberStopWarningOnConnectionMessage(input) {

        }
    }
    class AllianceModificationEmblemValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceEmblem = new SocialEmblem();
            this.ID = 2792;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceEmblem = new SocialEmblem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceModificationEmblemValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceModificationEmblemValidMessage(input);
        }

        serializeAs_AllianceModificationEmblemValidMessage(ouput) {
            this.allianceEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_AllianceModificationEmblemValidMessage(input) {
            this.allianceEmblem = new SocialEmblem();
            this.allianceEmblem.deserialize(input);
        }
    }
    class AllianceModificationNameAndTagValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceName = "";
            this.allianceTag = "";
            this.ID = 637;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceName = "";
            this.allianceTag = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceModificationNameAndTagValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceModificationNameAndTagValidMessage(input);
        }

        serializeAs_AllianceModificationNameAndTagValidMessage(ouput) {
            output.writeUTF(this.allianceName);
            output.writeUTF(this.allianceTag);
        }

        deserializeAs_AllianceModificationNameAndTagValidMessage(input) {
            this.allianceName = input.readUTF();
            this.allianceTag = input.readUTF();
        }
    }
    class AllianceModificationResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.ID = 5648;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceModificationResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceModificationResultMessage(input);
        }

        serializeAs_AllianceModificationResultMessage(ouput) {
            output.writeByte(this.result);
        }

        deserializeAs_AllianceModificationResultMessage(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of AllianceModificationResultMessage.result.");
            }
        }
    }
    class AllianceModificationStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.canChangeName = false;
            this.canChangeTag = false;
            this.canChangeEmblem = false;
            this.ID = 447;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.canChangeName = false;
            this.canChangeTag = false;
            this.canChangeEmblem = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceModificationStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceModificationStartedMessage(input);
        }

        serializeAs_AllianceModificationStartedMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.canChangeName);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canChangeTag);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.canChangeEmblem);
            output.writeByte(_box0);
        }

        deserializeAs_AllianceModificationStartedMessage(input) {
            var _box0 = input.readByte();
            this.canChangeName = BooleanByteWrapper.getFlag(_box0, 0);
            this.canChangeTag = BooleanByteWrapper.getFlag(_box0, 1);
            this.canChangeEmblem = BooleanByteWrapper.getFlag(_box0, 2);
        }
    }
    class AllianceModificationValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceName = "";
            this.allianceTag = "";
            this.allianceEmblem = new SocialEmblem();
            this.ID = 7593;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceName = "";
            this.allianceTag = "";
            this.allianceEmblem = new SocialEmblem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceModificationValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceModificationValidMessage(input);
        }

        serializeAs_AllianceModificationValidMessage(ouput) {
            output.writeUTF(this.allianceName);
            output.writeUTF(this.allianceTag);
            this.allianceEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_AllianceModificationValidMessage(input) {
            this.allianceName = input.readUTF();
            this.allianceTag = input.readUTF();
            this.allianceEmblem = new SocialEmblem();
            this.allianceEmblem.deserialize(input);
        }
    }
    class AllianceMotdMessage extends SocialNoticeMessage {
        constructor(_super) {
            super()

            this.ID = 8500;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMotdMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMotdMessage(input);
        }

        serializeAs_AllianceMotdMessage(ouput) {
            this.serializeAs_SocialNoticeMessage.call(this, output);
        }

        deserializeAs_AllianceMotdMessage(input) {
            this.deserializeAs_SocialNoticeMessage.call(this, input);
        }
    }
    class AllianceMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
        constructor(_super) {
            super()

            this.ID = 2581;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMotdSetErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMotdSetErrorMessage(input);
        }

        serializeAs_AllianceMotdSetErrorMessage(ouput) {
            this.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        }

        deserializeAs_AllianceMotdSetErrorMessage(input) {
            this.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        }
    }
    class AllianceMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
        constructor(_super) {
            super()
            this.content = "";
            this.ID = 4660;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceMotdSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceMotdSetRequestMessage(input);
        }

        serializeAs_AllianceMotdSetRequestMessage(ouput) {
            this.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
        }

        deserializeAs_AllianceMotdSetRequestMessage(input) {
            this.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
        }
    }
    class AlliancePartialListMessage extends AllianceListMessage {
        constructor(_super) {
            super()

            this.ID = 7536;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlliancePartialListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlliancePartialListMessage(input);
        }

        serializeAs_AlliancePartialListMessage(ouput) {
            this.serializeAs_AllianceListMessage.call(this, output);
        }

        deserializeAs_AlliancePartialListMessage(input) {
            this.deserializeAs_AllianceListMessage.call(this, input);
        }
    }
    class AllianceRankCreateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.parentRankId = 0;
            this.gfxId = 0;
            this.name = "";
            this.ID = 9206;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.parentRankId = 0;
            this.gfxId = 0;
            this.name = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRankCreateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRankCreateRequestMessage(input);
        }

        serializeAs_AllianceRankCreateRequestMessage(ouput) {
            if (this.parentRankId < 0) {
                throw new Error("Forbidden value (" + this.parentRankId + ") on element parentRankId.");
            }
            output.writeVarInt(this.parentRankId);
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element gfxId.");
            }
            output.writeVarInt(this.gfxId);
            output.writeUTF(this.name);
        }

        deserializeAs_AllianceRankCreateRequestMessage(input) {
            this.parentRankId = input.readVarUhInt();
            if (this.parentRankId < 0) {
                throw new Error("Forbidden value (" + this.parentRankId + ") on element of AllianceRankCreateRequestMessage.parentRankId.");
            }
            this.gfxId = input.readVarUhInt();
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element of AllianceRankCreateRequestMessage.gfxId.");
            }
            this.name = input.readUTF();
        }
    }
    class AllianceRankRemoveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rankId = 0;
            this.newRankId = 0;
            this.ID = 8022;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rankId = 0;
            this.newRankId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRankRemoveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRankRemoveRequestMessage(input);
        }

        serializeAs_AllianceRankRemoveRequestMessage(ouput) {
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
            if (this.newRankId < 0) {
                throw new Error("Forbidden value (" + this.newRankId + ") on element newRankId.");
            }
            output.writeVarInt(this.newRankId);
        }

        deserializeAs_AllianceRankRemoveRequestMessage(input) {
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of AllianceRankRemoveRequestMessage.rankId.");
            }
            this.newRankId = input.readVarUhInt();
            if (this.newRankId < 0) {
                throw new Error("Forbidden value (" + this.newRankId + ") on element of AllianceRankRemoveRequestMessage.newRankId.");
            }
        }
    }
    class AllianceRanksMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ranks = [];
            this.ID = 9275;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ranks = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRanksMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRanksMessage(input);
        }

        serializeAs_AllianceRanksMessage(ouput) {
            output.writeShort(this.ranks.length);
            for (var _i1 = 0; _i1 < this.ranks.length; _i1++) {
                (this.ranks[_i1]).serializeAs_RankInformation(output);
            }
        }

        deserializeAs_AllianceRanksMessage(input) {
            var _item1 = null;
            var _ranksLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ranksLen; _i1++) {
                _item1 = new RankInformation();
                _item1.deserialize(input);
                this.ranks.push(_item1);
            }
        }
    }
    class AllianceRanksRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8832;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRanksRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRanksRequestMessage(input);
        }

        serializeAs_AllianceRanksRequestMessage(ouput) {

        }

        deserializeAs_AllianceRanksRequestMessage(input) {

        }
    }
    class AllianceRankUpdateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rank = new RankInformation();
            this.ID = 4114;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rank = new RankInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRankUpdateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRankUpdateRequestMessage(input);
        }

        serializeAs_AllianceRankUpdateRequestMessage(ouput) {
            this.rank.serializeAs_RankInformation(output);
        }

        deserializeAs_AllianceRankUpdateRequestMessage(input) {
            this.rank = new RankInformation();
            this.rank.deserialize(input);
        }
    }
    class AllianceRightsUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rankId = 0;
            this.rights = [];
            this.ID = 7383;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rankId = 0;
            this.rights = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRightsUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRightsUpdateMessage(input);
        }

        serializeAs_AllianceRightsUpdateMessage(ouput) {
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
            output.writeShort(this.rights.length);
            for (var _i2 = 0; _i2 < this.rights.length; _i2++) {
                if (this.rights[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.rights[_i2] + ") on element 2 (starting at 1) of rights.");
                }
                output.writeVarInt(this.rights[_i2]);
            }
        }

        deserializeAs_AllianceRightsUpdateMessage(input) {
            var _val2 = 0;
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of AllianceRightsUpdateMessage.rankId.");
            }
            var _rightsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _rightsLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of rights.");
                }
                this.rights.push(_val2);
            }
        }
    }
    class AllianceApplicationAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accepted = false;
            this.playerId = 0;
            this.ID = 8759;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accepted = false;
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceApplicationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceApplicationAnswerMessage(input);
        }

        serializeAs_AllianceApplicationAnswerMessage(ouput) {
            output.writeBoolean(this.accepted);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_AllianceApplicationAnswerMessage(input) {
            this.accepted = input.readBoolean();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AllianceApplicationAnswerMessage.playerId.");
            }
        }
    }
    class AllianceApplicationDeletedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.deleted = false;
            this.ID = 5178;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.deleted = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceApplicationDeletedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceApplicationDeletedMessage(input);
        }

        serializeAs_AllianceApplicationDeletedMessage(ouput) {
            output.writeBoolean(this.deleted);
        }

        deserializeAs_AllianceApplicationDeletedMessage(input) {
            this.deleted = input.readBoolean();
        }
    }
    class AllianceApplicationIsAnsweredMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accepted = false;
            this.allianceInformation = new AllianceInformation();
            this.ID = 5111;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accepted = false;
            this.allianceInformation = new AllianceInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceApplicationIsAnsweredMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceApplicationIsAnsweredMessage(input);
        }

        serializeAs_AllianceApplicationIsAnsweredMessage(ouput) {
            output.writeBoolean(this.accepted);
            this.allianceInformation.serializeAs_AllianceInformation(output);
        }

        deserializeAs_AllianceApplicationIsAnsweredMessage(input) {
            this.accepted = input.readBoolean();
            this.allianceInformation = new AllianceInformation();
            this.allianceInformation.deserialize(input);
        }
    }
    class AllianceApplicationListenMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.listen = false;
            this.ID = 121;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.listen = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceApplicationListenMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceApplicationListenMessage(input);
        }

        serializeAs_AllianceApplicationListenMessage(ouput) {
            output.writeBoolean(this.listen);
        }

        deserializeAs_AllianceApplicationListenMessage(input) {
            this.listen = input.readBoolean();
        }
    }
    class AllianceApplicationPresenceMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isApplication = false;
            this.ID = 6378;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isApplication = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceApplicationPresenceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceApplicationPresenceMessage(input);
        }

        serializeAs_AllianceApplicationPresenceMessage(ouput) {
            output.writeBoolean(this.isApplication);
        }

        deserializeAs_AllianceApplicationPresenceMessage(input) {
            this.isApplication = input.readBoolean();
        }
    }
    class AllianceApplicationReceivedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerName = "";
            this.playerId = 0;
            this.ID = 8915;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerName = "";
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceApplicationReceivedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceApplicationReceivedMessage(input);
        }

        serializeAs_AllianceApplicationReceivedMessage(ouput) {
            output.writeUTF(this.playerName);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_AllianceApplicationReceivedMessage(input) {
            this.playerName = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AllianceApplicationReceivedMessage.playerId.");
            }
        }
    }
    class AllianceDeleteApplicationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4504;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceDeleteApplicationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceDeleteApplicationRequestMessage(input);
        }

        serializeAs_AllianceDeleteApplicationRequestMessage(ouput) {

        }

        deserializeAs_AllianceDeleteApplicationRequestMessage(input) {

        }
    }
    class AllianceGetPlayerApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6329;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceGetPlayerApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceGetPlayerApplicationMessage(input);
        }

        serializeAs_AllianceGetPlayerApplicationMessage(ouput) {

        }

        deserializeAs_AllianceGetPlayerApplicationMessage(input) {

        }
    }
    class AllianceIsThereAnyApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6004;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceIsThereAnyApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceIsThereAnyApplicationMessage(input);
        }

        serializeAs_AllianceIsThereAnyApplicationMessage(ouput) {

        }

        deserializeAs_AllianceIsThereAnyApplicationMessage(input) {

        }
    }
    class PaginationAnswerAbstractMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.offset = 0;
            this.count = 0;
            this.total = 0;
            this.ID = 2081;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.offset = 0;
            this.count = 0;
            this.total = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaginationAnswerAbstractMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaginationAnswerAbstractMessage(input);
        }

        serializeAs_PaginationAnswerAbstractMessage(ouput) {
            if (this.offset < 0 || this.offset > 9007199254740992) {
                throw new Error("Forbidden value (" + this.offset + ") on element offset.");
            }
            output.writeDouble(this.offset);
            if (this.count < 0 || this.count > 4294967295) {
                throw new Error("Forbidden value (" + this.count + ") on element count.");
            }
            output.writeUnsignedInt(this.count);
            if (this.total < 0 || this.total > 4294967295) {
                throw new Error("Forbidden value (" + this.total + ") on element total.");
            }
            output.writeUnsignedInt(this.total);
        }

        deserializeAs_PaginationAnswerAbstractMessage(input) {
            this.offset = input.readDouble();
            if (this.offset < 0 || this.offset > 9007199254740992) {
                throw new Error("Forbidden value (" + this.offset + ") on element of PaginationAnswerAbstractMessage.offset.");
            }
            this.count = input.readUnsignedInt();
            if (this.count < 0 || this.count > 4294967295) {
                throw new Error("Forbidden value (" + this.count + ") on element of PaginationAnswerAbstractMessage.count.");
            }
            this.total = input.readUnsignedInt();
            if (this.total < 0 || this.total > 4294967295) {
                throw new Error("Forbidden value (" + this.total + ") on element of PaginationAnswerAbstractMessage.total.");
            }
        }
    }
    class AllianceListApplicationAnswerMessage extends PaginationAnswerAbstractMessage {
        constructor(_super) {
            super()
            this.applies = [];
            this.ID = 9160;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.applies = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceListApplicationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceListApplicationAnswerMessage(input);
        }

        serializeAs_AllianceListApplicationAnswerMessage(ouput) {
            this.serializeAs_PaginationAnswerAbstractMessage.call(this, output);
            output.writeShort(this.applies.length);
            for (var _i1 = 0; _i1 < this.applies.length; _i1++) {
                (this.applies[_i1]).serializeAs_SocialApplicationInformation(output);
            }
        }

        deserializeAs_AllianceListApplicationAnswerMessage(input) {
            var _item1 = null;
            this.deserializeAs_PaginationAnswerAbstractMessage.call(this, input);
            var _appliesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _appliesLen; _i1++) {
                _item1 = new SocialApplicationInformation();
                _item1.deserialize(input);
                this.applies.push(_item1);
            }
        }
    }
    class AllianceListApplicationModifiedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.apply = new SocialApplicationInformation();
            this.state = 0;
            this.playerId = 0;
            this.ID = 8362;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.apply = new SocialApplicationInformation();
            this.state = 0;
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceListApplicationModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceListApplicationModifiedMessage(input);
        }

        serializeAs_AllianceListApplicationModifiedMessage(ouput) {
            this.apply.serializeAs_SocialApplicationInformation(output);
            output.writeByte(this.state);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_AllianceListApplicationModifiedMessage(input) {
            this.apply = new SocialApplicationInformation();
            this.apply.deserialize(input);
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of AllianceListApplicationModifiedMessage.state.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of AllianceListApplicationModifiedMessage.playerId.");
            }
        }
    }
    class PaginationRequestAbstractMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.offset = 0;
            this.count = 0;
            this.ID = 5210;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.offset = 0;
            this.count = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaginationRequestAbstractMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaginationRequestAbstractMessage(input);
        }

        serializeAs_PaginationRequestAbstractMessage(ouput) {
            if (this.offset < 0 || this.offset > 9007199254740992) {
                throw new Error("Forbidden value (" + this.offset + ") on element offset.");
            }
            output.writeDouble(this.offset);
            if (this.count < 0 || this.count > 4294967295) {
                throw new Error("Forbidden value (" + this.count + ") on element count.");
            }
            output.writeUnsignedInt(this.count);
        }

        deserializeAs_PaginationRequestAbstractMessage(input) {
            this.offset = input.readDouble();
            if (this.offset < 0 || this.offset > 9007199254740992) {
                throw new Error("Forbidden value (" + this.offset + ") on element of PaginationRequestAbstractMessage.offset.");
            }
            this.count = input.readUnsignedInt();
            if (this.count < 0 || this.count > 4294967295) {
                throw new Error("Forbidden value (" + this.count + ") on element of PaginationRequestAbstractMessage.count.");
            }
        }
    }
    class AllianceListApplicationRequestMessage extends PaginationRequestAbstractMessage {
        constructor(_super) {
            super()

            this.ID = 2579;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceListApplicationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceListApplicationRequestMessage(input);
        }

        serializeAs_AllianceListApplicationRequestMessage(ouput) {
            this.serializeAs_PaginationRequestAbstractMessage.call(this, output);
        }

        deserializeAs_AllianceListApplicationRequestMessage(input) {
            this.deserializeAs_PaginationRequestAbstractMessage.call(this, input);
        }
    }
    class AlliancePlayerApplicationAbstractMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4220;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlliancePlayerApplicationAbstractMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlliancePlayerApplicationAbstractMessage(input);
        }

        serializeAs_AlliancePlayerApplicationAbstractMessage(ouput) {

        }

        deserializeAs_AlliancePlayerApplicationAbstractMessage(input) {

        }
    }
    class AlliancePlayerApplicationInformationMessage extends AlliancePlayerApplicationAbstractMessage {
        constructor(_super) {
            super()
            this.allianceInformation = new AllianceInformation();
            this.apply = new SocialApplicationInformation();
            this.ID = 96;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInformation = new AllianceInformation();
            this.apply = new SocialApplicationInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlliancePlayerApplicationInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlliancePlayerApplicationInformationMessage(input);
        }

        serializeAs_AlliancePlayerApplicationInformationMessage(ouput) {
            this.serializeAs_AlliancePlayerApplicationAbstractMessage.call(this, output);
            this.allianceInformation.serializeAs_AllianceInformation(output);
            this.apply.serializeAs_SocialApplicationInformation(output);
        }

        deserializeAs_AlliancePlayerApplicationInformationMessage(input) {
            this.deserializeAs_AlliancePlayerApplicationAbstractMessage.call(this, input);
            this.allianceInformation = new AllianceInformation();
            this.allianceInformation.deserialize(input);
            this.apply = new SocialApplicationInformation();
            this.apply.deserialize(input);
        }
    }
    class AlliancePlayerNoApplicationInformationMessage extends AlliancePlayerApplicationAbstractMessage {
        constructor(_super) {
            super()

            this.ID = 971;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlliancePlayerNoApplicationInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlliancePlayerNoApplicationInformationMessage(input);
        }

        serializeAs_AlliancePlayerNoApplicationInformationMessage(ouput) {

        }

        deserializeAs_AlliancePlayerNoApplicationInformationMessage(input) {

        }
    }
    class AllianceSubmitApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.applyText = "";
            this.allianceId = 0;
            this.ID = 961;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.applyText = "";
            this.allianceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceSubmitApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceSubmitApplicationMessage(input);
        }

        serializeAs_AllianceSubmitApplicationMessage(ouput) {
            output.writeUTF(this.applyText);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        }

        deserializeAs_AllianceSubmitApplicationMessage(input) {
            this.applyText = input.readUTF();
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceSubmitApplicationMessage.allianceId.");
            }
        }
    }
    class AllianceUpdateApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.applyText = "";
            this.allianceId = 0;
            this.ID = 6742;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.applyText = "";
            this.allianceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceUpdateApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceUpdateApplicationMessage(input);
        }

        serializeAs_AllianceUpdateApplicationMessage(ouput) {
            output.writeUTF(this.applyText);
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element allianceId.");
            }
            output.writeVarInt(this.allianceId);
        }

        deserializeAs_AllianceUpdateApplicationMessage(input) {
            this.applyText = input.readUTF();
            this.allianceId = input.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error("Forbidden value (" + this.allianceId + ") on element of AllianceUpdateApplicationMessage.allianceId.");
            }
        }
    }
    class AllianceFightFighterAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceFightInfo = new SocialFightInfo();
            this.fighter = new CharacterMinimalPlusLookInformations();
            this.team = 2;
            this.ID = 5166;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceFightInfo = new SocialFightInfo();
            this.fighter = new CharacterMinimalPlusLookInformations();
            this.team = 2;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFightFighterAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFightFighterAddedMessage(input);
        }

        serializeAs_AllianceFightFighterAddedMessage(ouput) {
            this.allianceFightInfo.serializeAs_SocialFightInfo(output);
            this.fighter.serializeAs_CharacterMinimalPlusLookInformations(output);
            output.writeByte(this.team);
        }

        deserializeAs_AllianceFightFighterAddedMessage(input) {
            this.allianceFightInfo = new SocialFightInfo();
            this.allianceFightInfo.deserialize(input);
            this.fighter = new CharacterMinimalPlusLookInformations();
            this.fighter.deserialize(input);
            this.team = input.readByte();
            if (this.team < 0) {
                throw new Error("Forbidden value (" + this.team + ") on element of AllianceFightFighterAddedMessage.team.");
            }
        }
    }
    class AllianceFightFighterRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceFightInfo = new SocialFightInfo();
            this.fighterId = 0;
            this.ID = 5651;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceFightInfo = new SocialFightInfo();
            this.fighterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFightFighterRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFightFighterRemovedMessage(input);
        }

        serializeAs_AllianceFightFighterRemovedMessage(ouput) {
            this.allianceFightInfo.serializeAs_SocialFightInfo(output);
            if (this.fighterId < 0 || this.fighterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
            }
            output.writeVarLong(this.fighterId);
        }

        deserializeAs_AllianceFightFighterRemovedMessage(input) {
            this.allianceFightInfo = new SocialFightInfo();
            this.allianceFightInfo.deserialize(input);
            this.fighterId = input.readVarUhLong();
            if (this.fighterId < 0 || this.fighterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element of AllianceFightFighterRemovedMessage.fighterId.");
            }
        }
    }
    class AllianceFightFinishedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceFightInfo = new SocialFightInfo();
            this.ID = 3017;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceFightInfo = new SocialFightInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFightFinishedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFightFinishedMessage(input);
        }

        serializeAs_AllianceFightFinishedMessage(ouput) {
            this.allianceFightInfo.serializeAs_SocialFightInfo(output);
        }

        deserializeAs_AllianceFightFinishedMessage(input) {
            this.allianceFightInfo = new SocialFightInfo();
            this.allianceFightInfo.deserialize(input);
        }
    }
    class AllianceFightInfoMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceFights = [];
            this.ID = 1055;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceFights = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFightInfoMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFightInfoMessage(input);
        }

        serializeAs_AllianceFightInfoMessage(ouput) {
            output.writeShort(this.allianceFights.length);
            for (var _i1 = 0; _i1 < this.allianceFights.length; _i1++) {
                (this.allianceFights[_i1]).serializeAs_SocialFight(output);
            }
        }

        deserializeAs_AllianceFightInfoMessage(input) {
            var _item1 = null;
            var _allianceFightsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _allianceFightsLen; _i1++) {
                _item1 = new SocialFight();
                _item1.deserialize(input);
                this.allianceFights.push(_item1);
            }
        }
    }
    class AllianceFightPhaseUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceFightInfo = new SocialFightInfo();
            this.newPhase = new FightPhase();
            this.ID = 460;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceFightInfo = new SocialFightInfo();
            this.newPhase = new FightPhase();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFightPhaseUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFightPhaseUpdateMessage(input);
        }

        serializeAs_AllianceFightPhaseUpdateMessage(ouput) {
            this.allianceFightInfo.serializeAs_SocialFightInfo(output);
            this.newPhase.serializeAs_FightPhase(output);
        }

        deserializeAs_AllianceFightPhaseUpdateMessage(input) {
            this.allianceFightInfo = new SocialFightInfo();
            this.allianceFightInfo.deserialize(input);
            this.newPhase = new FightPhase();
            this.newPhase.deserialize(input);
        }
    }
    class AllianceFightStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceFightInfo = new SocialFightInfo();
            this.phase = new FightPhase();
            this.ID = 6373;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceFightInfo = new SocialFightInfo();
            this.phase = new FightPhase();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceFightStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceFightStartedMessage(input);
        }

        serializeAs_AllianceFightStartedMessage(ouput) {
            this.allianceFightInfo.serializeAs_SocialFightInfo(output);
            this.phase.serializeAs_FightPhase(output);
        }

        deserializeAs_AllianceFightStartedMessage(input) {
            this.allianceFightInfo = new SocialFightInfo();
            this.allianceFightInfo.deserialize(input);
            this.phase = new FightPhase();
            this.phase.deserialize(input);
        }
    }
    class StartListenAllianceFightMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4134;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartListenAllianceFightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartListenAllianceFightMessage(input);
        }

        serializeAs_StartListenAllianceFightMessage(ouput) {

        }

        deserializeAs_StartListenAllianceFightMessage(input) {

        }
    }
    class StopListenAllianceFightMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6645;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopListenAllianceFightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopListenAllianceFightMessage(input);
        }

        serializeAs_StopListenAllianceFightMessage(ouput) {

        }

        deserializeAs_StopListenAllianceFightMessage(input) {

        }
    }
    class KohUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kohAllianceInfo = [];
            this.startingAvaTimestamp = 0;
            this.nextTickTime = 0;
            this.ID = 8374;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kohAllianceInfo = [];
            this.startingAvaTimestamp = 0;
            this.nextTickTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_KohUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_KohUpdateMessage(input);
        }

        serializeAs_KohUpdateMessage(ouput) {
            output.writeShort(this.kohAllianceInfo.length);
            for (var _i1 = 0; _i1 < this.kohAllianceInfo.length; _i1++) {
                (this.kohAllianceInfo[_i1]).serializeAs_KohAllianceInfo(output);
            }
            if (this.startingAvaTimestamp < 0) {
                throw new Error("Forbidden value (" + this.startingAvaTimestamp + ") on element startingAvaTimestamp.");
            }
            output.writeInt(this.startingAvaTimestamp);
            if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.nextTickTime + ") on element nextTickTime.");
            }
            output.writeDouble(this.nextTickTime);
        }

        deserializeAs_KohUpdateMessage(input) {
            var _item1 = null;
            var _kohAllianceInfoLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _kohAllianceInfoLen; _i1++) {
                _item1 = new KohAllianceInfo();
                _item1.deserialize(input);
                this.kohAllianceInfo.push(_item1);
            }
            this.startingAvaTimestamp = input.readInt();
            if (this.startingAvaTimestamp < 0) {
                throw new Error("Forbidden value (" + this.startingAvaTimestamp + ") on element of KohUpdateMessage.startingAvaTimestamp.");
            }
            this.nextTickTime = input.readDouble();
            if (this.nextTickTime < 0 || this.nextTickTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.nextTickTime + ") on element of KohUpdateMessage.nextTickTime.");
            }
        }
    }
    class KothEndMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.winner = new KothWinner();
            this.ID = 4175;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.winner = new KothWinner();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_KothEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_KothEndMessage(input);
        }

        serializeAs_KothEndMessage(ouput) {
            this.winner.serializeAs_KothWinner(output);
        }

        deserializeAs_KothEndMessage(input) {
            this.winner = new KothWinner();
            this.winner.deserialize(input);
        }
    }
    class AllianceGetRecruitmentInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5947;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceGetRecruitmentInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceGetRecruitmentInformationMessage(input);
        }

        serializeAs_AllianceGetRecruitmentInformationMessage(ouput) {

        }

        deserializeAs_AllianceGetRecruitmentInformationMessage(input) {

        }
    }
    class AllianceRecruitmentInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recruitmentData = new AllianceRecruitmentInformation();
            this.ID = 9279;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recruitmentData = new AllianceRecruitmentInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRecruitmentInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRecruitmentInformationMessage(input);
        }

        serializeAs_AllianceRecruitmentInformationMessage(ouput) {
            this.recruitmentData.serializeAs_AllianceRecruitmentInformation(output);
        }

        deserializeAs_AllianceRecruitmentInformationMessage(input) {
            this.recruitmentData = new AllianceRecruitmentInformation();
            this.recruitmentData.deserialize(input);
        }
    }
    class AllianceRecruitmentInvalidateMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3670;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceRecruitmentInvalidateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceRecruitmentInvalidateMessage(input);
        }

        serializeAs_AllianceRecruitmentInvalidateMessage(ouput) {

        }

        deserializeAs_AllianceRecruitmentInvalidateMessage(input) {

        }
    }
    class AllianceUpdateRecruitmentInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recruitmentData = new AllianceRecruitmentInformation();
            this.ID = 9974;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recruitmentData = new AllianceRecruitmentInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceUpdateRecruitmentInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceUpdateRecruitmentInformationMessage(input);
        }

        serializeAs_AllianceUpdateRecruitmentInformationMessage(ouput) {
            this.recruitmentData.serializeAs_AllianceRecruitmentInformation(output);
        }

        deserializeAs_AllianceUpdateRecruitmentInformationMessage(input) {
            this.recruitmentData = new AllianceRecruitmentInformation();
            this.recruitmentData.deserialize(input);
        }
    }
    class AllianceSummaryMessage extends PaginationAnswerAbstractMessage {
        constructor(_super) {
            super()
            this.alliances = [];
            this.ID = 2178;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alliances = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceSummaryMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceSummaryMessage(input);
        }

        serializeAs_AllianceSummaryMessage(ouput) {
            this.serializeAs_PaginationAnswerAbstractMessage.call(this, output);
            output.writeShort(this.alliances.length);
            for (var _i1 = 0; _i1 < this.alliances.length; _i1++) {
                (this.alliances[_i1]).serializeAs_AllianceFactSheetInformation(output);
            }
        }

        deserializeAs_AllianceSummaryMessage(input) {
            var _item1 = null;
            this.deserializeAs_PaginationAnswerAbstractMessage.call(this, input);
            var _alliancesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alliancesLen; _i1++) {
                _item1 = new AllianceFactSheetInformation();
                _item1.deserialize(input);
                this.alliances.push(_item1);
            }
        }
    }
    class AllianceSummaryRequestMessage extends PaginationRequestAbstractMessage {
        constructor(_super) {
            super()
            this.filterType = 0;
            this.textFilter = "";
            this.hideFullFilter = false;
            this.followingAllianceCriteria = false;
            this.criterionFilter = [];
            this.sortType = 0;
            this.sortDescending = false;
            this.languagesFilter = [];
            this.recruitmentTypeFilter = [];
            this.minPlayerLevelFilter = 0;
            this.maxPlayerLevelFilter = 0;
            this.ID = 8794;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.filterType = 0;
            this.textFilter = "";
            this.hideFullFilter = false;
            this.followingAllianceCriteria = false;
            this.criterionFilter = [];
            this.sortType = 0;
            this.sortDescending = false;
            this.languagesFilter = [];
            this.recruitmentTypeFilter = [];
            this.minPlayerLevelFilter = 0;
            this.maxPlayerLevelFilter = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AllianceSummaryRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AllianceSummaryRequestMessage(input);
        }

        serializeAs_AllianceSummaryRequestMessage(ouput) {
            this.serializeAs_PaginationRequestAbstractMessage.call(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.hideFullFilter);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.followingAllianceCriteria);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.sortDescending);
            output.writeByte(_box0);
            output.writeInt(this.filterType);
            output.writeUTF(this.textFilter);
            output.writeShort(this.criterionFilter.length);
            for (var _i5 = 0; _i5 < this.criterionFilter.length; _i5++) {
                if (this.criterionFilter[_i5] < 0) {
                    throw new Error("Forbidden value (" + this.criterionFilter[_i5] + ") on element 5 (starting at 1) of criterionFilter.");
                }
                output.writeVarInt(this.criterionFilter[_i5]);
            }
            output.writeByte(this.sortType);
            output.writeShort(this.languagesFilter.length);
            for (var _i8 = 0; _i8 < this.languagesFilter.length; _i8++) {
                if (this.languagesFilter[_i8] < 0) {
                    throw new Error("Forbidden value (" + this.languagesFilter[_i8] + ") on element 8 (starting at 1) of languagesFilter.");
                }
                output.writeVarInt(this.languagesFilter[_i8]);
            }
            output.writeShort(this.recruitmentTypeFilter.length);
            for (var _i9 = 0; _i9 < this.recruitmentTypeFilter.length; _i9++) {
                output.writeByte(this.recruitmentTypeFilter[_i9]);
            }
            if (this.minPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.minPlayerLevelFilter + ") on element minPlayerLevelFilter.");
            }
            output.writeShort(this.minPlayerLevelFilter);
            if (this.maxPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.maxPlayerLevelFilter + ") on element maxPlayerLevelFilter.");
            }
            output.writeShort(this.maxPlayerLevelFilter);
        }

        deserializeAs_AllianceSummaryRequestMessage(input) {
            var _val5 = 0;
            var _val8 = 0;
            var _val9 = 0;
            this.deserializeAs_PaginationRequestAbstractMessage.call(this, input);
            var _box0 = input.readByte();
            this.hideFullFilter = BooleanByteWrapper.getFlag(_box0, 0);
            this.followingAllianceCriteria = BooleanByteWrapper.getFlag(_box0, 1);
            this.sortDescending = BooleanByteWrapper.getFlag(_box0, 2);
            this.filterType = input.readInt();
            this.textFilter = input.readUTF();
            var _criterionFilterLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _criterionFilterLen; _i5++) {
                _val5 = input.readVarUhInt();
                if (_val5 < 0) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of criterionFilter.");
                }
                this.criterionFilter.push(_val5);
            }
            this.sortType = input.readByte();
            if (this.sortType < 0) {
                throw new Error("Forbidden value (" + this.sortType + ") on element of AllianceSummaryRequestMessage.sortType.");
            }
            var _languagesFilterLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _languagesFilterLen; _i8++) {
                _val8 = input.readVarUhInt();
                if (_val8 < 0) {
                    throw new Error("Forbidden value (" + _val8 + ") on elements of languagesFilter.");
                }
                this.languagesFilter.push(_val8);
            }
            var _recruitmentTypeFilterLen = input.readUnsignedShort();
            for (var _i9 = 0; _i9 < _recruitmentTypeFilterLen; _i9++) {
                _val9 = input.readByte();
                if (_val9 < 0) {
                    throw new Error("Forbidden value (" + _val9 + ") on elements of recruitmentTypeFilter.");
                }
                this.recruitmentTypeFilter.push(_val9);
            }
            this.minPlayerLevelFilter = input.readShort();
            if (this.minPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.minPlayerLevelFilter + ") on element of AllianceSummaryRequestMessage.minPlayerLevelFilter.");
            }
            this.maxPlayerLevelFilter = input.readShort();
            if (this.maxPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.maxPlayerLevelFilter + ") on element of AllianceSummaryRequestMessage.maxPlayerLevelFilter.");
            }
        }
    }
    class AlmanachCalendarDateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.date = 0;
            this.ID = 271;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.date = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlmanachCalendarDateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlmanachCalendarDateMessage(input);
        }

        serializeAs_AlmanachCalendarDateMessage(ouput) {
            output.writeInt(this.date);
        }

        deserializeAs_AlmanachCalendarDateMessage(input) {
            this.date = input.readInt();
        }
    }
    class AccountCapabilitiesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accountId = 0;
            this.tutorialAvailable = false;
            this.status = -1;
            this.canCreateNewCharacter = false;
            this.ID = 1358;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
            this.tutorialAvailable = false;
            this.status = -1;
            this.canCreateNewCharacter = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccountCapabilitiesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountCapabilitiesMessage(input);
        }

        serializeAs_AccountCapabilitiesMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.tutorialAvailable);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canCreateNewCharacter);
            output.writeByte(_box0);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeByte(this.status);
        }

        deserializeAs_AccountCapabilitiesMessage(input) {
            var _box0 = input.readByte();
            this.tutorialAvailable = BooleanByteWrapper.getFlag(_box0, 0);
            this.canCreateNewCharacter = BooleanByteWrapper.getFlag(_box0, 1);
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of AccountCapabilitiesMessage.accountId.");
            }
            this.status = input.readByte();
        }
    }
    class AccountLoggingKickedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            this.ID = 3538;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccountLoggingKickedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountLoggingKickedMessage(input);
        }

        serializeAs_AccountLoggingKickedMessage(ouput) {
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element days.");
            }
            output.writeVarShort(this.days);
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element hours.");
            }
            output.writeByte(this.hours);
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element minutes.");
            }
            output.writeByte(this.minutes);
        }

        deserializeAs_AccountLoggingKickedMessage(input) {
            this.days = input.readVarUhShort();
            if (this.days < 0) {
                throw new Error("Forbidden value (" + this.days + ") on element of AccountLoggingKickedMessage.days.");
            }
            this.hours = input.readByte();
            if (this.hours < 0) {
                throw new Error("Forbidden value (" + this.hours + ") on element of AccountLoggingKickedMessage.hours.");
            }
            this.minutes = input.readByte();
            if (this.minutes < 0) {
                throw new Error("Forbidden value (" + this.minutes + ") on element of AccountLoggingKickedMessage.minutes.");
            }
        }
    }
    class AlreadyConnectedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2660;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlreadyConnectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlreadyConnectedMessage(input);
        }

        serializeAs_AlreadyConnectedMessage(ouput) {

        }

        deserializeAs_AlreadyConnectedMessage(input) {

        }
    }
    class AuthenticationTicketAcceptedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 170;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AuthenticationTicketAcceptedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AuthenticationTicketAcceptedMessage(input);
        }

        serializeAs_AuthenticationTicketAcceptedMessage(ouput) {

        }

        deserializeAs_AuthenticationTicketAcceptedMessage(input) {

        }
    }
    class AuthenticationTicketMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.lang = "";
            this.ticket = "";
            this.ID = 1775;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lang = "";
            this.ticket = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AuthenticationTicketMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AuthenticationTicketMessage(input);
        }

        serializeAs_AuthenticationTicketMessage(ouput) {
            output.writeUTF(this.lang);
            output.writeUTF(this.ticket);
        }

        deserializeAs_AuthenticationTicketMessage(input) {
            this.lang = input.readUTF();
            this.ticket = input.readUTF();
        }
    }
    class AuthenticationTicketRefusedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1235;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AuthenticationTicketRefusedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AuthenticationTicketRefusedMessage(input);
        }

        serializeAs_AuthenticationTicketRefusedMessage(ouput) {

        }

        deserializeAs_AuthenticationTicketRefusedMessage(input) {

        }
    }
    class HelloGameMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 858;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HelloGameMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HelloGameMessage(input);
        }

        serializeAs_HelloGameMessage(ouput) {

        }

        deserializeAs_HelloGameMessage(input) {

        }
    }
    class ReloginTokenRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8049;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ReloginTokenRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ReloginTokenRequestMessage(input);
        }

        serializeAs_ReloginTokenRequestMessage(ouput) {

        }

        deserializeAs_ReloginTokenRequestMessage(input) {

        }
    }
    class ReloginTokenStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.validToken = false;
            this.token = "";
            this.ID = 8771;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.validToken = false;
            this.token = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ReloginTokenStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ReloginTokenStatusMessage(input);
        }

        serializeAs_ReloginTokenStatusMessage(ouput) {
            output.writeBoolean(this.validToken);
            output.writeUTF(this.token);
        }

        deserializeAs_ReloginTokenStatusMessage(input) {
            this.validToken = input.readBoolean();
            this.token = input.readUTF();
        }
    }
    class ServerOptionalFeaturesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.features = [];
            this.ID = 9400;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.features = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServerOptionalFeaturesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerOptionalFeaturesMessage(input);
        }

        serializeAs_ServerOptionalFeaturesMessage(ouput) {
            output.writeShort(this.features.length);
            for (var _i1 = 0; _i1 < this.features.length; _i1++) {
                if (this.features[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.features[_i1] + ") on element 1 (starting at 1) of features.");
                }
                output.writeInt(this.features[_i1]);
            }
        }

        deserializeAs_ServerOptionalFeaturesMessage(input) {
            var _val1 = 0;
            var _featuresLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _featuresLen; _i1++) {
                _val1 = input.readInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of features.");
                }
                this.features.push(_val1);
            }
        }
    }
    class ServerSessionConstantsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.variables = [];
            this.ID = 9531;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.variables = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServerSessionConstantsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSessionConstantsMessage(input);
        }

        serializeAs_ServerSessionConstantsMessage(ouput) {
            output.writeShort(this.variables.length);
            for (var _i1 = 0; _i1 < this.variables.length; _i1++) {
                output.writeShort((this.variables[_i1]).getTypeId());
                (this.variables[_i1]).serialize(output);
            }
        }

        deserializeAs_ServerSessionConstantsMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _variablesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _variablesLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(ServerSessionConstant, _id1);
                _item1.deserialize(input);
                this.variables.push(_item1);
            }
        }
    }
    class ServerSettingsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.lang = "";
            this.community = 0;
            this.gameType = -1;
            this.isMonoAccount = false;
            this.arenaLeaveBanTime = 0;
            this.itemMaxLevel = 0;
            this.hasFreeAutopilot = false;
            this.ID = 8787;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lang = "";
            this.community = 0;
            this.gameType = -1;
            this.isMonoAccount = false;
            this.arenaLeaveBanTime = 0;
            this.itemMaxLevel = 0;
            this.hasFreeAutopilot = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServerSettingsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerSettingsMessage(input);
        }

        serializeAs_ServerSettingsMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isMonoAccount);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.hasFreeAutopilot);
            output.writeByte(_box0);
            output.writeUTF(this.lang);
            if (this.community < 0) {
                throw new Error("Forbidden value (" + this.community + ") on element community.");
            }
            output.writeByte(this.community);
            output.writeByte(this.gameType);
            if (this.arenaLeaveBanTime < 0) {
                throw new Error("Forbidden value (" + this.arenaLeaveBanTime + ") on element arenaLeaveBanTime.");
            }
            output.writeVarShort(this.arenaLeaveBanTime);
            if (this.itemMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.itemMaxLevel + ") on element itemMaxLevel.");
            }
            output.writeInt(this.itemMaxLevel);
        }

        deserializeAs_ServerSettingsMessage(input) {
            var _box0 = input.readByte();
            this.isMonoAccount = BooleanByteWrapper.getFlag(_box0, 0);
            this.hasFreeAutopilot = BooleanByteWrapper.getFlag(_box0, 1);
            this.lang = input.readUTF();
            this.community = input.readByte();
            if (this.community < 0) {
                throw new Error("Forbidden value (" + this.community + ") on element of ServerSettingsMessage.community.");
            }
            this.gameType = input.readByte();
            this.arenaLeaveBanTime = input.readVarUhShort();
            if (this.arenaLeaveBanTime < 0) {
                throw new Error("Forbidden value (" + this.arenaLeaveBanTime + ") on element of ServerSettingsMessage.arenaLeaveBanTime.");
            }
            this.itemMaxLevel = input.readInt();
            if (this.itemMaxLevel < 0) {
                throw new Error("Forbidden value (" + this.itemMaxLevel + ") on element of ServerSettingsMessage.itemMaxLevel.");
            }
        }
    }
    class AtlasPointInformationsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = new AtlasPointsInformations();
            this.ID = 2443;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = new AtlasPointsInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AtlasPointInformationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AtlasPointInformationsMessage(input);
        }

        serializeAs_AtlasPointInformationsMessage(ouput) {
            this.type.serializeAs_AtlasPointsInformations(output);
        }

        deserializeAs_AtlasPointInformationsMessage(input) {
            this.type = new AtlasPointsInformations();
            this.type.deserialize(input);
        }
    }
    class CompassResetMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.ID = 8704;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CompassResetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CompassResetMessage(input);
        }

        serializeAs_CompassResetMessage(ouput) {
            output.writeByte(this.type);
        }

        deserializeAs_CompassResetMessage(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CompassResetMessage.type.");
            }
        }
    }
    class CompassUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.coords = new MapCoordinates();
            this.ID = 110;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
            this.coords = new MapCoordinates();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CompassUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CompassUpdateMessage(input);
        }

        serializeAs_CompassUpdateMessage(ouput) {
            output.writeByte(this.type);
            output.writeShort(this.coords.getTypeId());
            this.coords.serialize(output);
        }

        deserializeAs_CompassUpdateMessage(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CompassUpdateMessage.type.");
            }
            var _id2 = input.readUnsignedShort();
            this.coords = ProtocolTypeManager.getInstance(MapCoordinates, _id2);
            this.coords.deserialize(input);
        }
    }
    class CompassUpdatePartyMemberMessage extends CompassUpdateMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.active = false;
            this.ID = 2901;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.active = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CompassUpdatePartyMemberMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CompassUpdatePartyMemberMessage(input);
        }

        serializeAs_CompassUpdatePartyMemberMessage(ouput) {
            this.serializeAs_CompassUpdateMessage.call(this, output);
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeBoolean(this.active);
        }

        deserializeAs_CompassUpdatePartyMemberMessage(input) {
            this.deserializeAs_CompassUpdateMessage.call(this, input);
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePartyMemberMessage.memberId.");
            }
            this.active = input.readBoolean();
        }
    }
    class CompassUpdatePvpSeekMessage extends CompassUpdateMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.memberName = "";
            this.ID = 210;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.memberName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CompassUpdatePvpSeekMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CompassUpdatePvpSeekMessage(input);
        }

        serializeAs_CompassUpdatePvpSeekMessage(ouput) {
            this.serializeAs_CompassUpdateMessage.call(this, output);
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeUTF(this.memberName);
        }

        deserializeAs_CompassUpdatePvpSeekMessage(input) {
            this.deserializeAs_CompassUpdateMessage.call(this, input);
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of CompassUpdatePvpSeekMessage.memberId.");
            }
            this.memberName = input.readUTF();
        }
    }
    class BasicAckMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.seq = 0;
            this.lastPacketId = 0;
            this.ID = 8309;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.seq = 0;
            this.lastPacketId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicAckMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicAckMessage(input);
        }

        serializeAs_BasicAckMessage(ouput) {
            if (this.seq < 0) {
                throw new Error("Forbidden value (" + this.seq + ") on element seq.");
            }
            output.writeVarInt(this.seq);
            if (this.lastPacketId < 0) {
                throw new Error("Forbidden value (" + this.lastPacketId + ") on element lastPacketId.");
            }
            output.writeVarShort(this.lastPacketId);
        }

        deserializeAs_BasicAckMessage(input) {
            this.seq = input.readVarUhInt();
            if (this.seq < 0) {
                throw new Error("Forbidden value (" + this.seq + ") on element of BasicAckMessage.seq.");
            }
            this.lastPacketId = input.readVarUhShort();
            if (this.lastPacketId < 0) {
                throw new Error("Forbidden value (" + this.lastPacketId + ") on element of BasicAckMessage.lastPacketId.");
            }
        }
    }
    class BasicDateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.day = 0;
            this.month = 0;
            this.year = 0;
            this.ID = 7835;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.day = 0;
            this.month = 0;
            this.year = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicDateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicDateMessage(input);
        }

        serializeAs_BasicDateMessage(ouput) {
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element day.");
            }
            output.writeByte(this.day);
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element month.");
            }
            output.writeByte(this.month);
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element year.");
            }
            output.writeShort(this.year);
        }

        deserializeAs_BasicDateMessage(input) {
            this.day = input.readByte();
            if (this.day < 0) {
                throw new Error("Forbidden value (" + this.day + ") on element of BasicDateMessage.day.");
            }
            this.month = input.readByte();
            if (this.month < 0) {
                throw new Error("Forbidden value (" + this.month + ") on element of BasicDateMessage.month.");
            }
            this.year = input.readShort();
            if (this.year < 0) {
                throw new Error("Forbidden value (" + this.year + ") on element of BasicDateMessage.year.");
            }
        }
    }
    class BasicLatencyStatsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.latency = 0;
            this.sampleCount = 0;
            this.max = 0;
            this.ID = 4022;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.latency = 0;
            this.sampleCount = 0;
            this.max = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicLatencyStatsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicLatencyStatsMessage(input);
        }

        serializeAs_BasicLatencyStatsMessage(ouput) {
            if (this.latency < 0 || this.latency > 65535) {
                throw new Error("Forbidden value (" + this.latency + ") on element latency.");
            }
            output.writeShort(this.latency);
            if (this.sampleCount < 0) {
                throw new Error("Forbidden value (" + this.sampleCount + ") on element sampleCount.");
            }
            output.writeVarShort(this.sampleCount);
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element max.");
            }
            output.writeVarShort(this.max);
        }

        deserializeAs_BasicLatencyStatsMessage(input) {
            this.latency = input.readUnsignedShort();
            if (this.latency < 0 || this.latency > 65535) {
                throw new Error("Forbidden value (" + this.latency + ") on element of BasicLatencyStatsMessage.latency.");
            }
            this.sampleCount = input.readVarUhShort();
            if (this.sampleCount < 0) {
                throw new Error("Forbidden value (" + this.sampleCount + ") on element of BasicLatencyStatsMessage.sampleCount.");
            }
            this.max = input.readVarUhShort();
            if (this.max < 0) {
                throw new Error("Forbidden value (" + this.max + ") on element of BasicLatencyStatsMessage.max.");
            }
        }
    }
    class BasicLatencyStatsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1102;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicLatencyStatsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicLatencyStatsRequestMessage(input);
        }

        serializeAs_BasicLatencyStatsRequestMessage(ouput) {

        }

        deserializeAs_BasicLatencyStatsRequestMessage(input) {

        }
    }
    class BasicNoOperationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2629;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicNoOperationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicNoOperationMessage(input);
        }

        serializeAs_BasicNoOperationMessage(ouput) {

        }

        deserializeAs_BasicNoOperationMessage(input) {

        }
    }
    class BasicTimeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.timestamp = 0;
            this.timezoneOffset = 0;
            this.ID = 489;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.timestamp = 0;
            this.timezoneOffset = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicTimeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicTimeMessage(input);
        }

        serializeAs_BasicTimeMessage(ouput) {
            if (this.timestamp < 0 || this.timestamp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeDouble(this.timestamp);
            output.writeShort(this.timezoneOffset);
        }

        deserializeAs_BasicTimeMessage(input) {
            this.timestamp = input.readDouble();
            if (this.timestamp < 0 || this.timestamp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of BasicTimeMessage.timestamp.");
            }
            this.timezoneOffset = input.readShort();
        }
    }
    class BasicWhoAmIRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.verbose = false;
            this.ID = 9342;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.verbose = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicWhoAmIRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicWhoAmIRequestMessage(input);
        }

        serializeAs_BasicWhoAmIRequestMessage(ouput) {
            output.writeBoolean(this.verbose);
        }

        deserializeAs_BasicWhoAmIRequestMessage(input) {
            this.verbose = input.readBoolean();
        }
    }
    class BasicWhoIsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.self = false;
            this.position = -1;
            this.accountTag = new AccountTagInformation();
            this.accountId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.areaId = 0;
            this.serverId = 0;
            this.originServerId = 0;
            this.socialGroups = [];
            this.verbose = false;
            this.playerState = 99;
            this.ID = 7264;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.self = false;
            this.position = -1;
            this.accountTag = new AccountTagInformation();
            this.accountId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.areaId = 0;
            this.serverId = 0;
            this.originServerId = 0;
            this.socialGroups = [];
            this.verbose = false;
            this.playerState = 99;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicWhoIsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicWhoIsMessage(input);
        }

        serializeAs_BasicWhoIsMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.self);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.verbose);
            output.writeByte(_box0);
            output.writeByte(this.position);
            this.accountTag.serializeAs_AccountTagInformation(output);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeUTF(this.playerName);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeShort(this.areaId);
            output.writeShort(this.serverId);
            output.writeShort(this.originServerId);
            output.writeShort(this.socialGroups.length);
            for (var _i10 = 0; _i10 < this.socialGroups.length; _i10++) {
                output.writeShort((this.socialGroups[_i10]).getTypeId());
                (this.socialGroups[_i10]).serialize(output);
            }
            output.writeByte(this.playerState);
        }

        deserializeAs_BasicWhoIsMessage(input) {
            var _id10 = 0;
            var _item10 = null;
            var _box0 = input.readByte();
            this.self = BooleanByteWrapper.getFlag(_box0, 0);
            this.verbose = BooleanByteWrapper.getFlag(_box0, 1);
            this.position = input.readByte();
            this.accountTag = new AccountTagInformation();
            this.accountTag.deserialize(input);
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of BasicWhoIsMessage.accountId.");
            }
            this.playerName = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of BasicWhoIsMessage.playerId.");
            }
            this.areaId = input.readShort();
            this.serverId = input.readShort();
            this.originServerId = input.readShort();
            var _socialGroupsLen = input.readUnsignedShort();
            for (var _i10 = 0; _i10 < _socialGroupsLen; _i10++) {
                _id10 = input.readUnsignedShort();
                _item10 = ProtocolTypeManager.getInstance(AbstractSocialGroupInfos, _id10);
                _item10.deserialize(input);
                this.socialGroups.push(_item10);
            }
            this.playerState = input.readByte();
            if (this.playerState < 0) {
                throw new Error("Forbidden value (" + this.playerState + ") on element of BasicWhoIsMessage.playerState.");
            }
        }
    }
    class BasicWhoIsNoMatchMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = new AbstractPlayerSearchInformation();
            this.ID = 821;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = new AbstractPlayerSearchInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicWhoIsNoMatchMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicWhoIsNoMatchMessage(input);
        }

        serializeAs_BasicWhoIsNoMatchMessage(ouput) {
            output.writeShort(this.target.getTypeId());
            this.target.serialize(output);
        }

        deserializeAs_BasicWhoIsNoMatchMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.target = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id1);
            this.target.deserialize(input);
        }
    }
    class BasicWhoIsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.verbose = false;
            this.target = new AbstractPlayerSearchInformation();
            this.ID = 2823;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.verbose = false;
            this.target = new AbstractPlayerSearchInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BasicWhoIsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BasicWhoIsRequestMessage(input);
        }

        serializeAs_BasicWhoIsRequestMessage(ouput) {
            output.writeBoolean(this.verbose);
            output.writeShort(this.target.getTypeId());
            this.target.serialize(output);
        }

        deserializeAs_BasicWhoIsRequestMessage(input) {
            this.verbose = input.readBoolean();
            var _id2 = input.readUnsignedShort();
            this.target = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id2);
            this.target.deserialize(input);
        }
    }
    class CurrentServerStatusUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.status = 1;
            this.ID = 1871;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.status = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CurrentServerStatusUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CurrentServerStatusUpdateMessage(input);
        }

        serializeAs_CurrentServerStatusUpdateMessage(ouput) {
            output.writeByte(this.status);
        }

        deserializeAs_CurrentServerStatusUpdateMessage(input) {
            this.status = input.readByte();
            if (this.status < 0) {
                throw new Error("Forbidden value (" + this.status + ") on element of CurrentServerStatusUpdateMessage.status.");
            }
        }
    }
    class NumericWhoIsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.accountId = 0;
            this.ID = 9630;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.accountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NumericWhoIsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NumericWhoIsMessage(input);
        }

        serializeAs_NumericWhoIsMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        }

        deserializeAs_NumericWhoIsMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsMessage.playerId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of NumericWhoIsMessage.accountId.");
            }
        }
    }
    class NumericWhoIsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 4981;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NumericWhoIsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NumericWhoIsRequestMessage(input);
        }

        serializeAs_NumericWhoIsRequestMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_NumericWhoIsRequestMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of NumericWhoIsRequestMessage.playerId.");
            }
        }
    }
    class SequenceNumberMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.number = 0;
            this.ID = 2099;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.number = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SequenceNumberMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SequenceNumberMessage(input);
        }

        serializeAs_SequenceNumberMessage(ouput) {
            if (this.number < 0 || this.number > 65535) {
                throw new Error("Forbidden value (" + this.number + ") on element number.");
            }
            output.writeShort(this.number);
        }

        deserializeAs_SequenceNumberMessage(input) {
            this.number = input.readUnsignedShort();
            if (this.number < 0 || this.number > 65535) {
                throw new Error("Forbidden value (" + this.number + ") on element of SequenceNumberMessage.number.");
            }
        }
    }
    class SequenceNumberRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5241;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SequenceNumberRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SequenceNumberRequestMessage(input);
        }

        serializeAs_SequenceNumberRequestMessage(ouput) {

        }

        deserializeAs_SequenceNumberRequestMessage(input) {

        }
    }
    class TextInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.msgType = 0;
            this.msgId = 0;
            this.parameters = [];
            this.ID = 1819;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.msgType = 0;
            this.msgId = 0;
            this.parameters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TextInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TextInformationMessage(input);
        }

        serializeAs_TextInformationMessage(ouput) {
            output.writeByte(this.msgType);
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            output.writeShort(this.parameters.length);
            for (var _i3 = 0; _i3 < this.parameters.length; _i3++) {
                output.writeUTF(this.parameters[_i3]);
            }
        }

        deserializeAs_TextInformationMessage(input) {
            var _val3 = null;
            this.msgType = input.readByte();
            if (this.msgType < 0) {
                throw new Error("Forbidden value (" + this.msgType + ") on element of TextInformationMessage.msgType.");
            }
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of TextInformationMessage.msgId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _parametersLen; _i3++) {
                _val3 = input.readUTF();
                this.parameters.push(_val3);
            }
        }
    }
    class AlignmentWarEffortDonatePreviewMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.xp = 0;
            this.ID = 8313;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.xp = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlignmentWarEffortDonatePreviewMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentWarEffortDonatePreviewMessage(input);
        }

        serializeAs_AlignmentWarEffortDonatePreviewMessage(ouput) {
            if (this.xp < -9007199254740992 || this.xp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.xp + ") on element xp.");
            }
            output.writeDouble(this.xp);
        }

        deserializeAs_AlignmentWarEffortDonatePreviewMessage(input) {
            this.xp = input.readDouble();
            if (this.xp < -9007199254740992 || this.xp > 9007199254740992) {
                throw new Error("Forbidden value (" + this.xp + ") on element of AlignmentWarEffortDonatePreviewMessage.xp.");
            }
        }
    }
    class AlignmentWarEffortDonateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.donation = 0;
            this.ID = 1453;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.donation = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlignmentWarEffortDonateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentWarEffortDonateRequestMessage(input);
        }

        serializeAs_AlignmentWarEffortDonateRequestMessage(ouput) {
            if (this.donation < 0 || this.donation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.donation + ") on element donation.");
            }
            output.writeVarLong(this.donation);
        }

        deserializeAs_AlignmentWarEffortDonateRequestMessage(input) {
            this.donation = input.readVarUhLong();
            if (this.donation < 0 || this.donation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.donation + ") on element of AlignmentWarEffortDonateRequestMessage.donation.");
            }
        }
    }
    class AlignmentWarEffortDonationResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 4;
            this.ID = 7579;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 4;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlignmentWarEffortDonationResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentWarEffortDonationResultMessage(input);
        }

        serializeAs_AlignmentWarEffortDonationResultMessage(ouput) {
            output.writeByte(this.result);
        }

        deserializeAs_AlignmentWarEffortDonationResultMessage(input) {
            this.result = input.readByte();
        }
    }
    class CharacterAlignmentWarEffortProgressionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alignmentWarEffortDailyLimit = 0;
            this.alignmentWarEffortDailyDonation = 0;
            this.alignmentWarEffortPersonalDonation = 0;
            this.ID = 1920;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alignmentWarEffortDailyLimit = 0;
            this.alignmentWarEffortDailyDonation = 0;
            this.alignmentWarEffortPersonalDonation = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterAlignmentWarEffortProgressionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterAlignmentWarEffortProgressionMessage(input);
        }

        serializeAs_CharacterAlignmentWarEffortProgressionMessage(ouput) {
            if (this.alignmentWarEffortDailyLimit < 0 || this.alignmentWarEffortDailyLimit > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyLimit + ") on element alignmentWarEffortDailyLimit.");
            }
            output.writeVarLong(this.alignmentWarEffortDailyLimit);
            if (this.alignmentWarEffortDailyDonation < 0 || this.alignmentWarEffortDailyDonation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyDonation + ") on element alignmentWarEffortDailyDonation.");
            }
            output.writeVarLong(this.alignmentWarEffortDailyDonation);
            if (this.alignmentWarEffortPersonalDonation < 0 || this.alignmentWarEffortPersonalDonation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortPersonalDonation + ") on element alignmentWarEffortPersonalDonation.");
            }
            output.writeVarLong(this.alignmentWarEffortPersonalDonation);
        }

        deserializeAs_CharacterAlignmentWarEffortProgressionMessage(input) {
            this.alignmentWarEffortDailyLimit = input.readVarUhLong();
            if (this.alignmentWarEffortDailyLimit < 0 || this.alignmentWarEffortDailyLimit > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyLimit + ") on element of CharacterAlignmentWarEffortProgressionMessage.alignmentWarEffortDailyLimit.");
            }
            this.alignmentWarEffortDailyDonation = input.readVarUhLong();
            if (this.alignmentWarEffortDailyDonation < 0 || this.alignmentWarEffortDailyDonation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortDailyDonation + ") on element of CharacterAlignmentWarEffortProgressionMessage.alignmentWarEffortDailyDonation.");
            }
            this.alignmentWarEffortPersonalDonation = input.readVarUhLong();
            if (this.alignmentWarEffortPersonalDonation < 0 || this.alignmentWarEffortPersonalDonation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.alignmentWarEffortPersonalDonation + ") on element of CharacterAlignmentWarEffortProgressionMessage.alignmentWarEffortPersonalDonation.");
            }
        }
    }
    class CharacterAlignmentWarEffortProgressionRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1350;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterAlignmentWarEffortProgressionRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterAlignmentWarEffortProgressionRequestMessage(input);
        }

        serializeAs_CharacterAlignmentWarEffortProgressionRequestMessage(ouput) {

        }

        deserializeAs_CharacterAlignmentWarEffortProgressionRequestMessage(input) {

        }
    }
    class AlterationAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alteration = new AlterationInfo();
            this.ID = 2990;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alteration = new AlterationInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlterationAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlterationAddedMessage(input);
        }

        serializeAs_AlterationAddedMessage(ouput) {
            this.alteration.serializeAs_AlterationInfo(output);
        }

        deserializeAs_AlterationAddedMessage(input) {
            this.alteration = new AlterationInfo();
            this.alteration.deserialize(input);
        }
    }
    class AlterationRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alteration = new AlterationInfo();
            this.ID = 660;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alteration = new AlterationInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlterationRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlterationRemovedMessage(input);
        }

        serializeAs_AlterationRemovedMessage(ouput) {
            this.alteration.serializeAs_AlterationInfo(output);
        }

        deserializeAs_AlterationRemovedMessage(input) {
            this.alteration = new AlterationInfo();
            this.alteration.deserialize(input);
        }
    }
    class AlterationsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alterations = [];
            this.ID = 3851;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alterations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlterationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlterationsMessage(input);
        }

        serializeAs_AlterationsMessage(ouput) {
            output.writeShort(this.alterations.length);
            for (var _i1 = 0; _i1 < this.alterations.length; _i1++) {
                (this.alterations[_i1]).serializeAs_AlterationInfo(output);
            }
        }

        deserializeAs_AlterationsMessage(input) {
            var _item1 = null;
            var _alterationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alterationsLen; _i1++) {
                _item1 = new AlterationInfo();
                _item1.deserialize(input);
                this.alterations.push(_item1);
            }
        }
    }
    class AlterationsUpdatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alterations = [];
            this.ID = 2645;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alterations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlterationsUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlterationsUpdatedMessage(input);
        }

        serializeAs_AlterationsUpdatedMessage(ouput) {
            output.writeShort(this.alterations.length);
            for (var _i1 = 0; _i1 < this.alterations.length; _i1++) {
                (this.alterations[_i1]).serializeAs_AlterationInfo(output);
            }
        }

        deserializeAs_AlterationsUpdatedMessage(input) {
            var _item1 = null;
            var _alterationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _alterationsLen; _i1++) {
                _item1 = new AlterationInfo();
                _item1.deserialize(input);
                this.alterations.push(_item1);
            }
        }
    }
    class CharacterSelectionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 7194;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterSelectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterSelectionMessage(input);
        }

        serializeAs_CharacterSelectionMessage(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        }

        deserializeAs_CharacterSelectionMessage(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of CharacterSelectionMessage.id.");
            }
        }
    }
    class CharacterFirstSelectionMessage extends CharacterSelectionMessage {
        constructor(_super) {
            super()
            this.doTutorial = false;
            this.ID = 567;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.doTutorial = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterFirstSelectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterFirstSelectionMessage(input);
        }

        serializeAs_CharacterFirstSelectionMessage(ouput) {
            this.serializeAs_CharacterSelectionMessage.call(this, output);
            output.writeBoolean(this.doTutorial);
        }

        deserializeAs_CharacterFirstSelectionMessage(input) {
            this.deserializeAs_CharacterSelectionMessage.call(this, input);
            this.doTutorial = input.readBoolean();
        }
    }
    class CharacterReplayRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.ID = 3908;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterReplayRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterReplayRequestMessage(input);
        }

        serializeAs_CharacterReplayRequestMessage(ouput) {
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        }

        deserializeAs_CharacterReplayRequestMessage(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterReplayRequestMessage.characterId.");
            }
        }
    }
    class CharacterReplayWithRemodelRequestMessage extends CharacterReplayRequestMessage {
        constructor(_super) {
            super()
            this.remodel = new RemodelingInformation();
            this.ID = 2258;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.remodel = new RemodelingInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterReplayWithRemodelRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterReplayWithRemodelRequestMessage(input);
        }

        serializeAs_CharacterReplayWithRemodelRequestMessage(ouput) {
            this.serializeAs_CharacterReplayRequestMessage.call(this, output);
            this.remodel.serializeAs_RemodelingInformation(output);
        }

        deserializeAs_CharacterReplayWithRemodelRequestMessage(input) {
            this.deserializeAs_CharacterReplayRequestMessage.call(this, input);
            this.remodel = new RemodelingInformation();
            this.remodel.deserialize(input);
        }
    }
    class CharacterSelectedErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6440;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterSelectedErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterSelectedErrorMessage(input);
        }

        serializeAs_CharacterSelectedErrorMessage(ouput) {

        }

        deserializeAs_CharacterSelectedErrorMessage(input) {

        }
    }
    class CharacterSelectedForceMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 9995;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterSelectedForceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterSelectedForceMessage(input);
        }

        serializeAs_CharacterSelectedForceMessage(ouput) {
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeInt(this.id);
        }

        deserializeAs_CharacterSelectedForceMessage(input) {
            this.id = input.readInt();
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error("Forbidden value (" + this.id + ") on element of CharacterSelectedForceMessage.id.");
            }
        }
    }
    class CharacterSelectedForceReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9079;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterSelectedForceReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterSelectedForceReadyMessage(input);
        }

        serializeAs_CharacterSelectedForceReadyMessage(ouput) {

        }

        deserializeAs_CharacterSelectedForceReadyMessage(input) {

        }
    }
    class CharacterSelectedSuccessMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.infos = new CharacterBaseInformations();
            this.isCollectingStats = false;
            this.ID = 2543;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.infos = new CharacterBaseInformations();
            this.isCollectingStats = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterSelectedSuccessMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterSelectedSuccessMessage(input);
        }

        serializeAs_CharacterSelectedSuccessMessage(ouput) {
            this.infos.serializeAs_CharacterBaseInformations(output);
            output.writeBoolean(this.isCollectingStats);
        }

        deserializeAs_CharacterSelectedSuccessMessage(input) {
            this.infos = new CharacterBaseInformations();
            this.infos.deserialize(input);
            this.isCollectingStats = input.readBoolean();
        }
    }
    class CharacterSelectionWithRemodelMessage extends CharacterSelectionMessage {
        constructor(_super) {
            super()
            this.remodel = new RemodelingInformation();
            this.ID = 772;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.remodel = new RemodelingInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterSelectionWithRemodelMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterSelectionWithRemodelMessage(input);
        }

        serializeAs_CharacterSelectionWithRemodelMessage(ouput) {
            this.serializeAs_CharacterSelectionMessage.call(this, output);
            this.remodel.serializeAs_RemodelingInformation(output);
        }

        deserializeAs_CharacterSelectionWithRemodelMessage(input) {
            this.deserializeAs_CharacterSelectionMessage.call(this, input);
            this.remodel = new RemodelingInformation();
            this.remodel.deserialize(input);
        }
    }
    class CharactersListErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5340;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharactersListErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharactersListErrorMessage(input);
        }

        serializeAs_CharactersListErrorMessage(ouput) {

        }

        deserializeAs_CharactersListErrorMessage(input) {

        }
    }
    class CharactersListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characters = [];
            this.ID = 3720;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharactersListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharactersListMessage(input);
        }

        serializeAs_CharactersListMessage(ouput) {
            output.writeShort(this.characters.length);
            for (var _i1 = 0; _i1 < this.characters.length; _i1++) {
                output.writeShort((this.characters[_i1]).getTypeId());
                (this.characters[_i1]).serialize(output);
            }
        }

        deserializeAs_CharactersListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _charactersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _charactersLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(CharacterBaseInformations, _id1);
                _item1.deserialize(input);
                this.characters.push(_item1);
            }
        }
    }
    class CharactersListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3965;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharactersListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharactersListRequestMessage(input);
        }

        serializeAs_CharactersListRequestMessage(ouput) {

        }

        deserializeAs_CharactersListRequestMessage(input) {

        }
    }
    class CharactersListWithRemodelingMessage extends CharactersListMessage {
        constructor(_super) {
            super()
            this.charactersToRemodel = [];
            this.ID = 2612;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.charactersToRemodel = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharactersListWithRemodelingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharactersListWithRemodelingMessage(input);
        }

        serializeAs_CharactersListWithRemodelingMessage(ouput) {
            this.serializeAs_CharactersListMessage.call(this, output);
            output.writeShort(this.charactersToRemodel.length);
            for (var _i1 = 0; _i1 < this.charactersToRemodel.length; _i1++) {
                (this.charactersToRemodel[_i1]).serializeAs_CharacterToRemodelInformations(output);
            }
        }

        deserializeAs_CharactersListWithRemodelingMessage(input) {
            var _item1 = null;
            this.deserializeAs_CharactersListMessage.call(this, input);
            var _charactersToRemodelLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _charactersToRemodelLen; _i1++) {
                _item1 = new CharacterToRemodelInformations();
                _item1.deserialize(input);
                this.charactersToRemodel.push(_item1);
            }
        }
    }
    class CharacterCanBeCreatedRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7257;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterCanBeCreatedRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCanBeCreatedRequestMessage(input);
        }

        serializeAs_CharacterCanBeCreatedRequestMessage(ouput) {

        }

        deserializeAs_CharacterCanBeCreatedRequestMessage(input) {

        }
    }
    class CharacterCanBeCreatedResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.yesYouCan = false;
            this.ID = 6725;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.yesYouCan = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterCanBeCreatedResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCanBeCreatedResultMessage(input);
        }

        serializeAs_CharacterCanBeCreatedResultMessage(ouput) {
            output.writeBoolean(this.yesYouCan);
        }

        deserializeAs_CharacterCanBeCreatedResultMessage(input) {
            this.yesYouCan = input.readBoolean();
        }
    }
    class CharacterCreationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.colors = [];
            this.cosmeticId = 0;
            this.ID = 7608;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.breed = 0;
            this.sex = false;
            this.colors = [];
            this.cosmeticId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterCreationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCreationRequestMessage(input);
        }

        serializeAs_CharacterCreationRequestMessage(ouput) {
            output.writeUTF(this.name);
            output.writeByte(this.breed);
            output.writeBoolean(this.sex);
            for (var _i4 = 0; _i4 < 5; _i4++) {
                output.writeInt(this.colors[_i4]);
            }
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element cosmeticId.");
            }
            output.writeVarShort(this.cosmeticId);
        }

        deserializeAs_CharacterCreationRequestMessage(input) {
            this.name = input.readUTF();
            this.breed = input.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Forgelance) {
                throw new Error("Forbidden value (" + this.breed + ") on element of CharacterCreationRequestMessage.breed.");
            }
            this.sex = input.readBoolean();
            for (var _i4 = 0; _i4 < 5; _i4++) {
                this.colors[_i4] = input.readInt();
            }
            this.cosmeticId = input.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error("Forbidden value (" + this.cosmeticId + ") on element of CharacterCreationRequestMessage.cosmeticId.");
            }
        }
    }
    class CharacterCreationResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 1;
            this.reason = 1;
            this.ID = 5976;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 1;
            this.reason = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterCreationResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCreationResultMessage(input);
        }

        serializeAs_CharacterCreationResultMessage(ouput) {
            output.writeByte(this.result);
            output.writeByte(this.reason);
        }

        deserializeAs_CharacterCreationResultMessage(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of CharacterCreationResultMessage.result.");
            }
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of CharacterCreationResultMessage.reason.");
            }
        }
    }
    class CharacterNameSuggestionFailureMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 1;
            this.ID = 3968;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterNameSuggestionFailureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterNameSuggestionFailureMessage(input);
        }

        serializeAs_CharacterNameSuggestionFailureMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_CharacterNameSuggestionFailureMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of CharacterNameSuggestionFailureMessage.reason.");
            }
        }
    }
    class CharacterNameSuggestionRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3929;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterNameSuggestionRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterNameSuggestionRequestMessage(input);
        }

        serializeAs_CharacterNameSuggestionRequestMessage(ouput) {

        }

        deserializeAs_CharacterNameSuggestionRequestMessage(input) {

        }
    }
    class CharacterNameSuggestionSuccessMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.suggestion = "";
            this.ID = 4972;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.suggestion = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterNameSuggestionSuccessMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterNameSuggestionSuccessMessage(input);
        }

        serializeAs_CharacterNameSuggestionSuccessMessage(ouput) {
            output.writeUTF(this.suggestion);
        }

        deserializeAs_CharacterNameSuggestionSuccessMessage(input) {
            this.suggestion = input.readUTF();
        }
    }
    class DebtsDeleteMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.debts = [];
            this.ID = 5718;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
            this.debts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DebtsDeleteMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DebtsDeleteMessage(input);
        }

        serializeAs_DebtsDeleteMessage(ouput) {
            output.writeByte(this.reason);
            output.writeShort(this.debts.length);
            for (var _i2 = 0; _i2 < this.debts.length; _i2++) {
                if (this.debts[_i2] < 0 || this.debts[_i2] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.debts[_i2] + ") on element 2 (starting at 1) of debts.");
                }
                output.writeDouble(this.debts[_i2]);
            }
        }

        deserializeAs_DebtsDeleteMessage(input) {
            var _val2 = NaN;
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of DebtsDeleteMessage.reason.");
            }
            var _debtsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _debtsLen; _i2++) {
                _val2 = input.readDouble();
                if (_val2 < 0 || _val2 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of debts.");
                }
                this.debts.push(_val2);
            }
        }
    }
    class DebtsUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.action = 0;
            this.debts = [];
            this.ID = 2498;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.action = 0;
            this.debts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DebtsUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DebtsUpdateMessage(input);
        }

        serializeAs_DebtsUpdateMessage(ouput) {
            output.writeByte(this.action);
            output.writeShort(this.debts.length);
            for (var _i2 = 0; _i2 < this.debts.length; _i2++) {
                output.writeShort((this.debts[_i2]).getTypeId());
                (this.debts[_i2]).serialize(output);
            }
        }

        deserializeAs_DebtsUpdateMessage(input) {
            var _id2 = 0;
            var _item2 = null;
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of DebtsUpdateMessage.action.");
            }
            var _debtsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _debtsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(DebtInformation, _id2);
                _item2.deserialize(input);
                this.debts.push(_item2);
            }
        }
    }
    class CharacterDeletionErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 1;
            this.ID = 8975;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterDeletionErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterDeletionErrorMessage(input);
        }

        serializeAs_CharacterDeletionErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_CharacterDeletionErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of CharacterDeletionErrorMessage.reason.");
            }
        }
    }
    class CharacterDeletionPrepareMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.characterName = "";
            this.secretQuestion = "";
            this.needSecretAnswer = false;
            this.ID = 6242;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
            this.characterName = "";
            this.secretQuestion = "";
            this.needSecretAnswer = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterDeletionPrepareMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterDeletionPrepareMessage(input);
        }

        serializeAs_CharacterDeletionPrepareMessage(ouput) {
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
            output.writeUTF(this.characterName);
            output.writeUTF(this.secretQuestion);
            output.writeBoolean(this.needSecretAnswer);
        }

        deserializeAs_CharacterDeletionPrepareMessage(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterDeletionPrepareMessage.characterId.");
            }
            this.characterName = input.readUTF();
            this.secretQuestion = input.readUTF();
            this.needSecretAnswer = input.readBoolean();
        }
    }
    class CharacterDeletionPrepareRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.ID = 5833;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterDeletionPrepareRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterDeletionPrepareRequestMessage(input);
        }

        serializeAs_CharacterDeletionPrepareRequestMessage(ouput) {
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        }

        deserializeAs_CharacterDeletionPrepareRequestMessage(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterDeletionPrepareRequestMessage.characterId.");
            }
        }
    }
    class CharacterDeletionRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.secretAnswerHash = "";
            this.ID = 2985;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
            this.secretAnswerHash = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterDeletionRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterDeletionRequestMessage(input);
        }

        serializeAs_CharacterDeletionRequestMessage(ouput) {
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
            output.writeUTF(this.secretAnswerHash);
        }

        deserializeAs_CharacterDeletionRequestMessage(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of CharacterDeletionRequestMessage.characterId.");
            }
            this.secretAnswerHash = input.readUTF();
        }
    }
    class ForgettableSpellClientActionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.action = 0;
            this.ID = 3179;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.action = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForgettableSpellClientActionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForgettableSpellClientActionMessage(input);
        }

        serializeAs_ForgettableSpellClientActionMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeInt(this.spellId);
            output.writeByte(this.action);
        }

        deserializeAs_ForgettableSpellClientActionMessage(input) {
            this.spellId = input.readInt();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of ForgettableSpellClientActionMessage.spellId.");
            }
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of ForgettableSpellClientActionMessage.action.");
            }
        }
    }
    class ForgettableSpellDeleteMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.spells = [];
            this.ID = 6931;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
            this.spells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForgettableSpellDeleteMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForgettableSpellDeleteMessage(input);
        }

        serializeAs_ForgettableSpellDeleteMessage(ouput) {
            output.writeByte(this.reason);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                if (this.spells[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.spells[_i2] + ") on element 2 (starting at 1) of spells.");
                }
                output.writeInt(this.spells[_i2]);
            }
        }

        deserializeAs_ForgettableSpellDeleteMessage(input) {
            var _val2 = 0;
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of ForgettableSpellDeleteMessage.reason.");
            }
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _val2 = input.readInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of spells.");
                }
                this.spells.push(_val2);
            }
        }
    }
    class ForgettableSpellEquipmentSlotsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quantity = 0;
            this.ID = 9647;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForgettableSpellEquipmentSlotsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForgettableSpellEquipmentSlotsMessage(input);
        }

        serializeAs_ForgettableSpellEquipmentSlotsMessage(ouput) {
            output.writeVarShort(this.quantity);
        }

        deserializeAs_ForgettableSpellEquipmentSlotsMessage(input) {
            this.quantity = input.readVarShort();
        }
    }
    class ForgettableSpellListUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.action = 0;
            this.spells = [];
            this.ID = 8558;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.action = 0;
            this.spells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ForgettableSpellListUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ForgettableSpellListUpdateMessage(input);
        }

        serializeAs_ForgettableSpellListUpdateMessage(ouput) {
            output.writeByte(this.action);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                (this.spells[_i2]).serializeAs_ForgettableSpellItem(output);
            }
        }

        deserializeAs_ForgettableSpellListUpdateMessage(input) {
            var _item2 = null;
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of ForgettableSpellListUpdateMessage.action.");
            }
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _item2 = new ForgettableSpellItem();
                _item2.deserialize(input);
                this.spells.push(_item2);
            }
        }
    }
    class ApplySpellModifierMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actorId = 0;
            this.modifier = new SpellModifierMessage();
            this.ID = 9665;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorId = 0;
            this.modifier = new SpellModifierMessage();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ApplySpellModifierMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ApplySpellModifierMessage(input);
        }

        serializeAs_ApplySpellModifierMessage(ouput) {
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            this.modifier.serializeAs_SpellModifierMessage(output);
        }

        deserializeAs_ApplySpellModifierMessage(input) {
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of ApplySpellModifierMessage.actorId.");
            }
            this.modifier = new SpellModifierMessage();
            this.modifier.deserialize(input);
        }
    }
    class RemoveSpellModifierMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actorId = 0;
            this.actionType = 0;
            this.modifierType = 0;
            this.spellId = 0;
            this.ID = 4699;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorId = 0;
            this.actionType = 0;
            this.modifierType = 0;
            this.spellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RemoveSpellModifierMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RemoveSpellModifierMessage(input);
        }

        serializeAs_RemoveSpellModifierMessage(ouput) {
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            output.writeByte(this.actionType);
            output.writeByte(this.modifierType);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        }

        deserializeAs_RemoveSpellModifierMessage(input) {
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of RemoveSpellModifierMessage.actorId.");
            }
            this.actionType = input.readByte();
            if (this.actionType < 0) {
                throw new Error("Forbidden value (" + this.actionType + ") on element of RemoveSpellModifierMessage.actionType.");
            }
            this.modifierType = input.readByte();
            if (this.modifierType < 0) {
                throw new Error("Forbidden value (" + this.modifierType + ") on element of RemoveSpellModifierMessage.modifierType.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of RemoveSpellModifierMessage.spellId.");
            }
        }
    }
    class CharacterExperienceGainMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.experienceCharacter = 0;
            this.experienceMount = 0;
            this.experienceGuild = 0;
            this.experienceIncarnation = 0;
            this.ID = 3140;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.experienceCharacter = 0;
            this.experienceMount = 0;
            this.experienceGuild = 0;
            this.experienceIncarnation = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterExperienceGainMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterExperienceGainMessage(input);
        }

        serializeAs_CharacterExperienceGainMessage(ouput) {
            if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceCharacter + ") on element experienceCharacter.");
            }
            output.writeVarLong(this.experienceCharacter);
            if (this.experienceMount < 0 || this.experienceMount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceMount + ") on element experienceMount.");
            }
            output.writeVarLong(this.experienceMount);
            if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceGuild + ") on element experienceGuild.");
            }
            output.writeVarLong(this.experienceGuild);
            if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceIncarnation + ") on element experienceIncarnation.");
            }
            output.writeVarLong(this.experienceIncarnation);
        }

        deserializeAs_CharacterExperienceGainMessage(input) {
            this.experienceCharacter = input.readVarUhLong();
            if (this.experienceCharacter < 0 || this.experienceCharacter > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceCharacter + ") on element of CharacterExperienceGainMessage.experienceCharacter.");
            }
            this.experienceMount = input.readVarUhLong();
            if (this.experienceMount < 0 || this.experienceMount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceMount + ") on element of CharacterExperienceGainMessage.experienceMount.");
            }
            this.experienceGuild = input.readVarUhLong();
            if (this.experienceGuild < 0 || this.experienceGuild > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceGuild + ") on element of CharacterExperienceGainMessage.experienceGuild.");
            }
            this.experienceIncarnation = input.readVarUhLong();
            if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experienceIncarnation + ") on element of CharacterExperienceGainMessage.experienceIncarnation.");
            }
        }
    }
    class CharacterLevelUpMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.newLevel = 0;
            this.ID = 2370;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.newLevel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterLevelUpMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterLevelUpMessage(input);
        }

        serializeAs_CharacterLevelUpMessage(ouput) {
            if (this.newLevel < 0) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
            }
            output.writeVarShort(this.newLevel);
        }

        deserializeAs_CharacterLevelUpMessage(input) {
            this.newLevel = input.readVarUhShort();
            if (this.newLevel < 0) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element of CharacterLevelUpMessage.newLevel.");
            }
        }
    }
    class CharacterLevelUpInformationMessage extends CharacterLevelUpMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.id = 0;
            this.ID = 5417;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterLevelUpInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterLevelUpInformationMessage(input);
        }

        serializeAs_CharacterLevelUpInformationMessage(ouput) {
            this.serializeAs_CharacterLevelUpMessage.call(this, output);
            output.writeUTF(this.name);
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        }

        deserializeAs_CharacterLevelUpInformationMessage(input) {
            this.deserializeAs_CharacterLevelUpMessage.call(this, input);
            this.name = input.readUTF();
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of CharacterLevelUpInformationMessage.id.");
            }
        }
    }
    class CharacterStatsListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.stats = new CharacterCharacteristicsInformations();
            this.ID = 4427;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stats = new CharacterCharacteristicsInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterStatsListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterStatsListMessage(input);
        }

        serializeAs_CharacterStatsListMessage(ouput) {
            this.stats.serializeAs_CharacterCharacteristicsInformations(output);
        }

        deserializeAs_CharacterStatsListMessage(input) {
            this.stats = new CharacterCharacteristicsInformations();
            this.stats.deserialize(input);
        }
    }
    class FighterStatsListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.stats = new CharacterCharacteristicsInformations();
            this.ID = 867;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stats = new CharacterCharacteristicsInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FighterStatsListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FighterStatsListMessage(input);
        }

        serializeAs_FighterStatsListMessage(ouput) {
            this.stats.serializeAs_CharacterCharacteristicsInformations(output);
        }

        deserializeAs_FighterStatsListMessage(input) {
            this.stats = new CharacterCharacteristicsInformations();
            this.stats.deserialize(input);
        }
    }
    class LifePointsRegenBeginMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.regenRate = 0;
            this.ID = 6745;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.regenRate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LifePointsRegenBeginMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LifePointsRegenBeginMessage(input);
        }

        serializeAs_LifePointsRegenBeginMessage(ouput) {
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
        }

        deserializeAs_LifePointsRegenBeginMessage(input) {
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of LifePointsRegenBeginMessage.regenRate.");
            }
        }
    }
    class UpdateLifePointsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.ID = 939;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateLifePointsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateLifePointsMessage(input);
        }

        serializeAs_UpdateLifePointsMessage(ouput) {
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
        }

        deserializeAs_UpdateLifePointsMessage(input) {
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of UpdateLifePointsMessage.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of UpdateLifePointsMessage.maxLifePoints.");
            }
        }
    }
    class LifePointsRegenEndMessage extends UpdateLifePointsMessage {
        constructor(_super) {
            super()
            this.lifePointsGained = 0;
            this.ID = 7099;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lifePointsGained = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LifePointsRegenEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LifePointsRegenEndMessage(input);
        }

        serializeAs_LifePointsRegenEndMessage(ouput) {
            this.serializeAs_UpdateLifePointsMessage.call(this, output);
            if (this.lifePointsGained < 0) {
                throw new Error("Forbidden value (" + this.lifePointsGained + ") on element lifePointsGained.");
            }
            output.writeVarInt(this.lifePointsGained);
        }

        deserializeAs_LifePointsRegenEndMessage(input) {
            this.deserializeAs_UpdateLifePointsMessage.call(this, input);
            this.lifePointsGained = input.readVarUhInt();
            if (this.lifePointsGained < 0) {
                throw new Error("Forbidden value (" + this.lifePointsGained + ") on element of LifePointsRegenEndMessage.lifePointsGained.");
            }
        }
    }
    class ResetCharacterStatsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4287;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ResetCharacterStatsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ResetCharacterStatsRequestMessage(input);
        }

        serializeAs_ResetCharacterStatsRequestMessage(ouput) {

        }

        deserializeAs_ResetCharacterStatsRequestMessage(input) {

        }
    }
    class PlayerStatusUpdateErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4470;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PlayerStatusUpdateErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerStatusUpdateErrorMessage(input);
        }

        serializeAs_PlayerStatusUpdateErrorMessage(ouput) {

        }

        deserializeAs_PlayerStatusUpdateErrorMessage(input) {

        }
    }
    class PlayerStatusUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accountId = 0;
            this.playerId = 0;
            this.status = new PlayerStatus();
            this.ID = 712;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
            this.playerId = 0;
            this.status = new PlayerStatus();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PlayerStatusUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerStatusUpdateMessage(input);
        }

        serializeAs_PlayerStatusUpdateMessage(ouput) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        }

        deserializeAs_PlayerStatusUpdateMessage(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of PlayerStatusUpdateMessage.accountId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PlayerStatusUpdateMessage.playerId.");
            }
            var _id3 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id3);
            this.status.deserialize(input);
        }
    }
    class PlayerStatusUpdateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.status = new PlayerStatus();
            this.ID = 1929;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.status = new PlayerStatus();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PlayerStatusUpdateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PlayerStatusUpdateRequestMessage(input);
        }

        serializeAs_PlayerStatusUpdateRequestMessage(ouput) {
            output.writeShort(this.status.getTypeId());
            this.status.serialize(output);
        }

        deserializeAs_PlayerStatusUpdateRequestMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.status = ProtocolTypeManager.getInstance(PlayerStatus, _id1);
            this.status.deserialize(input);
        }
    }
    class ChannelEnablingChangeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.channel = 0;
            this.enable = false;
            this.ID = 5330;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.channel = 0;
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChannelEnablingChangeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChannelEnablingChangeMessage(input);
        }

        serializeAs_ChannelEnablingChangeMessage(ouput) {
            output.writeByte(this.channel);
            output.writeBoolean(this.enable);
        }

        deserializeAs_ChannelEnablingChangeMessage(input) {
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChannelEnablingChangeMessage.channel.");
            }
            this.enable = input.readBoolean();
        }
    }
    class ChannelEnablingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.channel = 0;
            this.enable = false;
            this.ID = 3241;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.channel = 0;
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChannelEnablingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChannelEnablingMessage(input);
        }

        serializeAs_ChannelEnablingMessage(ouput) {
            output.writeByte(this.channel);
            output.writeBoolean(this.enable);
        }

        deserializeAs_ChannelEnablingMessage(input) {
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChannelEnablingMessage.channel.");
            }
            this.enable = input.readBoolean();
        }
    }
    class EnabledChannelsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.channels = [];
            this.disallowed = [];
            this.ID = 3860;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.channels = [];
            this.disallowed = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EnabledChannelsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EnabledChannelsMessage(input);
        }

        serializeAs_EnabledChannelsMessage(ouput) {
            output.writeShort(this.channels.length);
            for (var _i1 = 0; _i1 < this.channels.length; _i1++) {
                output.writeByte(this.channels[_i1]);
            }
            output.writeShort(this.disallowed.length);
            for (var _i2 = 0; _i2 < this.disallowed.length; _i2++) {
                output.writeByte(this.disallowed[_i2]);
            }
        }

        deserializeAs_EnabledChannelsMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _channelsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _channelsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of channels.");
                }
                this.channels.push(_val1);
            }
            var _disallowedLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _disallowedLen; _i2++) {
                _val2 = input.readByte();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of disallowed.");
                }
                this.disallowed.push(_val2);
            }
        }
    }
    class ChatAbstractClientMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.content = "";
            this.ID = 9384;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatAbstractClientMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatAbstractClientMessage(input);
        }

        serializeAs_ChatAbstractClientMessage(ouput) {
            output.writeUTF(this.content);
        }

        deserializeAs_ChatAbstractClientMessage(input) {
            this.content = input.readUTF();
        }
    }
    class ChatAbstractServerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.channel = 0;
            this.content = "";
            this.timestamp = 0;
            this.fingerprint = "";
            this.ID = 2850;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.channel = 0;
            this.content = "";
            this.timestamp = 0;
            this.fingerprint = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatAbstractServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatAbstractServerMessage(input);
        }

        serializeAs_ChatAbstractServerMessage(ouput) {
            output.writeByte(this.channel);
            output.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element timestamp.");
            }
            output.writeInt(this.timestamp);
            output.writeUTF(this.fingerprint);
        }

        deserializeAs_ChatAbstractServerMessage(input) {
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChatAbstractServerMessage.channel.");
            }
            this.content = input.readUTF();
            this.timestamp = input.readInt();
            if (this.timestamp < 0) {
                throw new Error("Forbidden value (" + this.timestamp + ") on element of ChatAbstractServerMessage.timestamp.");
            }
            this.fingerprint = input.readUTF();
        }
    }
    class ChatServerMessage extends ChatAbstractServerMessage {
        constructor(_super) {
            super()
            this.senderId = 0;
            this.senderName = "";
            this.prefix = "";
            this.senderAccountId = 0;
            this.ID = 2565;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.senderId = 0;
            this.senderName = "";
            this.prefix = "";
            this.senderAccountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatServerMessage(input);
        }

        serializeAs_ChatServerMessage(ouput) {
            this.serializeAs_ChatAbstractServerMessage.call(this, output);
            if (this.senderId < -9007199254740992 || this.senderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.senderId + ") on element senderId.");
            }
            output.writeDouble(this.senderId);
            output.writeUTF(this.senderName);
            output.writeUTF(this.prefix);
            if (this.senderAccountId < 0) {
                throw new Error("Forbidden value (" + this.senderAccountId + ") on element senderAccountId.");
            }
            output.writeInt(this.senderAccountId);
        }

        deserializeAs_ChatServerMessage(input) {
            this.deserializeAs_ChatAbstractServerMessage.call(this, input);
            this.senderId = input.readDouble();
            if (this.senderId < -9007199254740992 || this.senderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.senderId + ") on element of ChatServerMessage.senderId.");
            }
            this.senderName = input.readUTF();
            this.prefix = input.readUTF();
            this.senderAccountId = input.readInt();
            if (this.senderAccountId < 0) {
                throw new Error("Forbidden value (" + this.senderAccountId + ") on element of ChatServerMessage.senderAccountId.");
            }
        }
    }
    class ChatAdminServerMessage extends ChatServerMessage {
        constructor(_super) {
            super()

            this.ID = 4140;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatAdminServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatAdminServerMessage(input);
        }

        serializeAs_ChatAdminServerMessage(ouput) {
            this.serializeAs_ChatServerMessage.call(this, output);
        }

        deserializeAs_ChatAdminServerMessage(input) {
            this.deserializeAs_ChatServerMessage.call(this, input);
        }
    }
    class ChatClientMultiMessage extends ChatAbstractClientMessage {
        constructor(_super) {
            super()
            this.channel = 0;
            this.ID = 7429;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.channel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatClientMultiMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatClientMultiMessage(input);
        }

        serializeAs_ChatClientMultiMessage(ouput) {
            this.serializeAs_ChatAbstractClientMessage.call(this, output);
            output.writeByte(this.channel);
        }

        deserializeAs_ChatClientMultiMessage(input) {
            this.deserializeAs_ChatAbstractClientMessage.call(this, input);
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of ChatClientMultiMessage.channel.");
            }
        }
    }
    class ChatClientMultiWithObjectMessage extends ChatClientMultiMessage {
        constructor(_super) {
            super()
            this.objects = [];
            this.ID = 5939;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatClientMultiWithObjectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatClientMultiWithObjectMessage(input);
        }

        serializeAs_ChatClientMultiWithObjectMessage(ouput) {
            this.serializeAs_ChatClientMultiMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ChatClientMultiWithObjectMessage(input) {
            var _item1 = null;
            this.deserializeAs_ChatClientMultiMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        }
    }
    class ChatClientPrivateMessage extends ChatAbstractClientMessage {
        constructor(_super) {
            super()
            this.receiver = new AbstractPlayerSearchInformation();
            this.ID = 9553;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.receiver = new AbstractPlayerSearchInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatClientPrivateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatClientPrivateMessage(input);
        }

        serializeAs_ChatClientPrivateMessage(ouput) {
            this.serializeAs_ChatAbstractClientMessage.call(this, output);
            output.writeShort(this.receiver.getTypeId());
            this.receiver.serialize(output);
        }

        deserializeAs_ChatClientPrivateMessage(input) {
            this.deserializeAs_ChatAbstractClientMessage.call(this, input);
            var _id1 = input.readUnsignedShort();
            this.receiver = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id1);
            this.receiver.deserialize(input);
        }
    }
    class ChatClientPrivateWithObjectMessage extends ChatClientPrivateMessage {
        constructor(_super) {
            super()
            this.objects = [];
            this.ID = 7469;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatClientPrivateWithObjectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatClientPrivateWithObjectMessage(input);
        }

        serializeAs_ChatClientPrivateWithObjectMessage(ouput) {
            this.serializeAs_ChatClientPrivateMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ChatClientPrivateWithObjectMessage(input) {
            var _item1 = null;
            this.deserializeAs_ChatClientPrivateMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        }
    }
    class ChatErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 5864;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatErrorMessage(input);
        }

        serializeAs_ChatErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_ChatErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of ChatErrorMessage.reason.");
            }
        }
    }
    class ChatKolizeumServerMessage extends ChatServerMessage {
        constructor(_super) {
            super()
            this.originServerId = 0;
            this.ID = 4372;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.originServerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatKolizeumServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatKolizeumServerMessage(input);
        }

        serializeAs_ChatKolizeumServerMessage(ouput) {
            this.serializeAs_ChatServerMessage.call(this, output);
            output.writeShort(this.originServerId);
        }

        deserializeAs_ChatKolizeumServerMessage(input) {
            this.deserializeAs_ChatServerMessage.call(this, input);
            this.originServerId = input.readShort();
        }
    }
    class ChatServerCopyMessage extends ChatAbstractServerMessage {
        constructor(_super) {
            super()
            this.receiverId = 0;
            this.receiverName = "";
            this.ID = 7495;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.receiverId = 0;
            this.receiverName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatServerCopyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatServerCopyMessage(input);
        }

        serializeAs_ChatServerCopyMessage(ouput) {
            this.serializeAs_ChatAbstractServerMessage.call(this, output);
            if (this.receiverId < 0 || this.receiverId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.receiverId + ") on element receiverId.");
            }
            output.writeVarLong(this.receiverId);
            output.writeUTF(this.receiverName);
        }

        deserializeAs_ChatServerCopyMessage(input) {
            this.deserializeAs_ChatAbstractServerMessage.call(this, input);
            this.receiverId = input.readVarUhLong();
            if (this.receiverId < 0 || this.receiverId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.receiverId + ") on element of ChatServerCopyMessage.receiverId.");
            }
            this.receiverName = input.readUTF();
        }
    }
    class ChatServerCopyWithObjectMessage extends ChatServerCopyMessage {
        constructor(_super) {
            super()
            this.objects = [];
            this.ID = 2602;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatServerCopyWithObjectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatServerCopyWithObjectMessage(input);
        }

        serializeAs_ChatServerCopyWithObjectMessage(ouput) {
            this.serializeAs_ChatServerCopyMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ChatServerCopyWithObjectMessage(input) {
            var _item1 = null;
            this.deserializeAs_ChatServerCopyMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        }
    }
    class ChatServerWithObjectMessage extends ChatServerMessage {
        constructor(_super) {
            super()
            this.objects = [];
            this.ID = 8618;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatServerWithObjectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatServerWithObjectMessage(input);
        }

        serializeAs_ChatServerWithObjectMessage(ouput) {
            this.serializeAs_ChatServerMessage.call(this, output);
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ChatServerWithObjectMessage(input) {
            var _item1 = null;
            this.deserializeAs_ChatServerMessage.call(this, input);
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
        }
    }
    class ChatCommunityChannelCommunityMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.communityId = 0;
            this.ID = 1093;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.communityId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatCommunityChannelCommunityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatCommunityChannelCommunityMessage(input);
        }

        serializeAs_ChatCommunityChannelCommunityMessage(ouput) {
            output.writeShort(this.communityId);
        }

        deserializeAs_ChatCommunityChannelCommunityMessage(input) {
            this.communityId = input.readShort();
        }
    }
    class ChatCommunityChannelSetCommunityRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.communityId = 0;
            this.ID = 2195;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.communityId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatCommunityChannelSetCommunityRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatCommunityChannelSetCommunityRequestMessage(input);
        }

        serializeAs_ChatCommunityChannelSetCommunityRequestMessage(ouput) {
            output.writeShort(this.communityId);
        }

        deserializeAs_ChatCommunityChannelSetCommunityRequestMessage(input) {
            this.communityId = input.readShort();
        }
    }
    class ChatSmileyExtraPackListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.packIds = [];
            this.ID = 6914;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.packIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatSmileyExtraPackListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatSmileyExtraPackListMessage(input);
        }

        serializeAs_ChatSmileyExtraPackListMessage(ouput) {
            output.writeShort(this.packIds.length);
            for (var _i1 = 0; _i1 < this.packIds.length; _i1++) {
                if (this.packIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.packIds[_i1] + ") on element 1 (starting at 1) of packIds.");
                }
                output.writeByte(this.packIds[_i1]);
            }
        }

        deserializeAs_ChatSmileyExtraPackListMessage(input) {
            var _val1 = 0;
            var _packIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _packIdsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of packIds.");
                }
                this.packIds.push(_val1);
            }
        }
    }
    class ChatSmileyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.entityId = 0;
            this.smileyId = 0;
            this.accountId = 0;
            this.ID = 9440;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityId = 0;
            this.smileyId = 0;
            this.accountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatSmileyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatSmileyMessage(input);
        }

        serializeAs_ChatSmileyMessage(ouput) {
            if (this.entityId < -9007199254740992 || this.entityId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
            }
            output.writeDouble(this.entityId);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        }

        deserializeAs_ChatSmileyMessage(input) {
            this.entityId = input.readDouble();
            if (this.entityId < -9007199254740992 || this.entityId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.entityId + ") on element of ChatSmileyMessage.entityId.");
            }
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyMessage.smileyId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of ChatSmileyMessage.accountId.");
            }
        }
    }
    class ChatSmileyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.smileyId = 0;
            this.ID = 7880;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.smileyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChatSmileyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChatSmileyRequestMessage(input);
        }

        serializeAs_ChatSmileyRequestMessage(ouput) {
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        }

        deserializeAs_ChatSmileyRequestMessage(input) {
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of ChatSmileyRequestMessage.smileyId.");
            }
        }
    }
    class LocalizedChatSmileyMessage extends ChatSmileyMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.ID = 5044;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LocalizedChatSmileyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LocalizedChatSmileyMessage(input);
        }

        serializeAs_LocalizedChatSmileyMessage(ouput) {
            this.serializeAs_ChatSmileyMessage.call(this, output);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_LocalizedChatSmileyMessage(input) {
            this.deserializeAs_ChatSmileyMessage.call(this, input);
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of LocalizedChatSmileyMessage.cellId.");
            }
        }
    }
    class MoodSmileyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.smileyId = 0;
            this.ID = 5865;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.smileyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MoodSmileyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MoodSmileyRequestMessage(input);
        }

        serializeAs_MoodSmileyRequestMessage(ouput) {
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        }

        deserializeAs_MoodSmileyRequestMessage(input) {
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyRequestMessage.smileyId.");
            }
        }
    }
    class MoodSmileyResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.resultCode = 1;
            this.smileyId = 0;
            this.ID = 6617;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.resultCode = 1;
            this.smileyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MoodSmileyResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MoodSmileyResultMessage(input);
        }

        serializeAs_MoodSmileyResultMessage(ouput) {
            output.writeByte(this.resultCode);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        }

        deserializeAs_MoodSmileyResultMessage(input) {
            this.resultCode = input.readByte();
            if (this.resultCode < 0) {
                throw new Error("Forbidden value (" + this.resultCode + ") on element of MoodSmileyResultMessage.resultCode.");
            }
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyResultMessage.smileyId.");
            }
        }
    }
    class MoodSmileyUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accountId = 0;
            this.playerId = 0;
            this.smileyId = 0;
            this.ID = 2327;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
            this.playerId = 0;
            this.smileyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MoodSmileyUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MoodSmileyUpdateMessage(input);
        }

        serializeAs_MoodSmileyUpdateMessage(ouput) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element smileyId.");
            }
            output.writeVarShort(this.smileyId);
        }

        deserializeAs_MoodSmileyUpdateMessage(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of MoodSmileyUpdateMessage.accountId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of MoodSmileyUpdateMessage.playerId.");
            }
            this.smileyId = input.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error("Forbidden value (" + this.smileyId + ") on element of MoodSmileyUpdateMessage.smileyId.");
            }
        }
    }
    class AddTaxCollectorOrderedSpellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.spell = new TaxCollectorOrderedSpell();
            this.ID = 61;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
            this.spell = new TaxCollectorOrderedSpell();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AddTaxCollectorOrderedSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AddTaxCollectorOrderedSpellMessage(input);
        }

        serializeAs_AddTaxCollectorOrderedSpellMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
            this.spell.serializeAs_TaxCollectorOrderedSpell(output);
        }

        deserializeAs_AddTaxCollectorOrderedSpellMessage(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of AddTaxCollectorOrderedSpellMessage.taxCollectorId.");
            }
            this.spell = new TaxCollectorOrderedSpell();
            this.spell.deserialize(input);
        }
    }
    class AddTaxCollectorPresetSpellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = new Uuid();
            this.spell = new TaxCollectorOrderedSpell();
            this.ID = 2643;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = new Uuid();
            this.spell = new TaxCollectorOrderedSpell();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AddTaxCollectorPresetSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AddTaxCollectorPresetSpellMessage(input);
        }

        serializeAs_AddTaxCollectorPresetSpellMessage(ouput) {
            this.presetId.serializeAs_Uuid(output);
            this.spell.serializeAs_TaxCollectorOrderedSpell(output);
        }

        deserializeAs_AddTaxCollectorPresetSpellMessage(input) {
            this.presetId = new Uuid();
            this.presetId.deserialize(input);
            this.spell = new TaxCollectorOrderedSpell();
            this.spell.deserialize(input);
        }
    }
    class ConfirmationOfListeningTaxCollectorUpdatesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.information = new TaxCollectorInformations();
            this.ID = 7568;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.information = new TaxCollectorInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ConfirmationOfListeningTaxCollectorUpdatesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ConfirmationOfListeningTaxCollectorUpdatesMessage(input);
        }

        serializeAs_ConfirmationOfListeningTaxCollectorUpdatesMessage(ouput) {
            this.information.serializeAs_TaxCollectorInformations(output);
        }

        deserializeAs_ConfirmationOfListeningTaxCollectorUpdatesMessage(input) {
            this.information = new TaxCollectorInformations();
            this.information.deserialize(input);
        }
    }
    class GameRolePlayTaxCollectorFightRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5322;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayTaxCollectorFightRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(input);
        }

        serializeAs_GameRolePlayTaxCollectorFightRequestMessage(ouput) {

        }

        deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(input) {

        }
    }
    class MoveTaxCollectorOrderedSpellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.movedFrom = 0;
            this.movedTo = 0;
            this.ID = 234;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
            this.movedFrom = 0;
            this.movedTo = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MoveTaxCollectorOrderedSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MoveTaxCollectorOrderedSpellMessage(input);
        }

        serializeAs_MoveTaxCollectorOrderedSpellMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
            if (this.movedFrom < 0) {
                throw new Error("Forbidden value (" + this.movedFrom + ") on element movedFrom.");
            }
            output.writeByte(this.movedFrom);
            if (this.movedTo < 0) {
                throw new Error("Forbidden value (" + this.movedTo + ") on element movedTo.");
            }
            output.writeByte(this.movedTo);
        }

        deserializeAs_MoveTaxCollectorOrderedSpellMessage(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of MoveTaxCollectorOrderedSpellMessage.taxCollectorId.");
            }
            this.movedFrom = input.readByte();
            if (this.movedFrom < 0) {
                throw new Error("Forbidden value (" + this.movedFrom + ") on element of MoveTaxCollectorOrderedSpellMessage.movedFrom.");
            }
            this.movedTo = input.readByte();
            if (this.movedTo < 0) {
                throw new Error("Forbidden value (" + this.movedTo + ") on element of MoveTaxCollectorOrderedSpellMessage.movedTo.");
            }
        }
    }
    class MoveTaxCollectorPresetSpellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = new Uuid();
            this.movedFrom = 0;
            this.movedTo = 0;
            this.ID = 1282;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = new Uuid();
            this.movedFrom = 0;
            this.movedTo = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MoveTaxCollectorPresetSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MoveTaxCollectorPresetSpellMessage(input);
        }

        serializeAs_MoveTaxCollectorPresetSpellMessage(ouput) {
            this.presetId.serializeAs_Uuid(output);
            if (this.movedFrom < 0) {
                throw new Error("Forbidden value (" + this.movedFrom + ") on element movedFrom.");
            }
            output.writeByte(this.movedFrom);
            if (this.movedTo < 0) {
                throw new Error("Forbidden value (" + this.movedTo + ") on element movedTo.");
            }
            output.writeByte(this.movedTo);
        }

        deserializeAs_MoveTaxCollectorPresetSpellMessage(input) {
            this.presetId = new Uuid();
            this.presetId.deserialize(input);
            this.movedFrom = input.readByte();
            if (this.movedFrom < 0) {
                throw new Error("Forbidden value (" + this.movedFrom + ") on element of MoveTaxCollectorPresetSpellMessage.movedFrom.");
            }
            this.movedTo = input.readByte();
            if (this.movedTo < 0) {
                throw new Error("Forbidden value (" + this.movedTo + ") on element of MoveTaxCollectorPresetSpellMessage.movedTo.");
            }
        }
    }
    class RemoveTaxCollectorOrderedSpellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.slot = 0;
            this.ID = 1024;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
            this.slot = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RemoveTaxCollectorOrderedSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RemoveTaxCollectorOrderedSpellMessage(input);
        }

        serializeAs_RemoveTaxCollectorOrderedSpellMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
            if (this.slot < 0) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        }

        deserializeAs_RemoveTaxCollectorOrderedSpellMessage(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of RemoveTaxCollectorOrderedSpellMessage.taxCollectorId.");
            }
            this.slot = input.readByte();
            if (this.slot < 0) {
                throw new Error("Forbidden value (" + this.slot + ") on element of RemoveTaxCollectorOrderedSpellMessage.slot.");
            }
        }
    }
    class RemoveTaxCollectorPresetSpellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = new Uuid();
            this.slot = 0;
            this.ID = 2130;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = new Uuid();
            this.slot = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RemoveTaxCollectorPresetSpellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RemoveTaxCollectorPresetSpellMessage(input);
        }

        serializeAs_RemoveTaxCollectorPresetSpellMessage(ouput) {
            this.presetId.serializeAs_Uuid(output);
            if (this.slot < 0) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        }

        deserializeAs_RemoveTaxCollectorPresetSpellMessage(input) {
            this.presetId = new Uuid();
            this.presetId.deserialize(input);
            this.slot = input.readByte();
            if (this.slot < 0) {
                throw new Error("Forbidden value (" + this.slot + ") on element of RemoveTaxCollectorPresetSpellMessage.slot.");
            }
        }
    }
    class StartListenTaxCollectorPresetsUpdatesMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 276;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartListenTaxCollectorPresetsUpdatesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartListenTaxCollectorPresetsUpdatesMessage(input);
        }

        serializeAs_StartListenTaxCollectorPresetsUpdatesMessage(ouput) {

        }

        deserializeAs_StartListenTaxCollectorPresetsUpdatesMessage(input) {

        }
    }
    class StartListenTaxCollectorUpdatesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.ID = 8165;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartListenTaxCollectorUpdatesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartListenTaxCollectorUpdatesMessage(input);
        }

        serializeAs_StartListenTaxCollectorUpdatesMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
        }

        deserializeAs_StartListenTaxCollectorUpdatesMessage(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of StartListenTaxCollectorUpdatesMessage.taxCollectorId.");
            }
        }
    }
    class StopListenTaxCollectorPresetsUpdatesMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7995;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopListenTaxCollectorPresetsUpdatesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopListenTaxCollectorPresetsUpdatesMessage(input);
        }

        serializeAs_StopListenTaxCollectorPresetsUpdatesMessage(ouput) {

        }

        deserializeAs_StopListenTaxCollectorPresetsUpdatesMessage(input) {

        }
    }
    class StopListenTaxCollectorUpdatesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.ID = 9396;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopListenTaxCollectorUpdatesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopListenTaxCollectorUpdatesMessage(input);
        }

        serializeAs_StopListenTaxCollectorUpdatesMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
        }

        deserializeAs_StopListenTaxCollectorUpdatesMessage(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of StopListenTaxCollectorUpdatesMessage.taxCollectorId.");
            }
        }
    }
    class TaxCollectorAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.callerId = 0;
            this.description = new TaxCollectorInformations();
            this.ID = 832;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.callerId = 0;
            this.description = new TaxCollectorInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorAddedMessage(input);
        }

        serializeAs_TaxCollectorAddedMessage(ouput) {
            if (this.callerId < 0 || this.callerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.callerId + ") on element callerId.");
            }
            output.writeVarLong(this.callerId);
            output.writeShort(this.description.getTypeId());
            this.description.serialize(output);
        }

        deserializeAs_TaxCollectorAddedMessage(input) {
            this.callerId = input.readVarUhLong();
            if (this.callerId < 0 || this.callerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.callerId + ") on element of TaxCollectorAddedMessage.callerId.");
            }
            var _id2 = input.readUnsignedShort();
            this.description = ProtocolTypeManager.getInstance(TaxCollectorInformations, _id2);
            this.description.deserialize(input);
        }
    }
    class TaxCollectorAttackedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.alliance = new BasicAllianceInformations();
            this.ID = 1504;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.alliance = new BasicAllianceInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorAttackedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorAttackedMessage(input);
        }

        serializeAs_TaxCollectorAttackedMessage(ouput) {
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element firstNameId.");
            }
            output.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element lastNameId.");
            }
            output.writeVarShort(this.lastNameId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            this.alliance.serializeAs_BasicAllianceInformations(output);
        }

        deserializeAs_TaxCollectorAttackedMessage(input) {
            this.firstNameId = input.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error("Forbidden value (" + this.firstNameId + ") on element of TaxCollectorAttackedMessage.firstNameId.");
            }
            this.lastNameId = input.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error("Forbidden value (" + this.lastNameId + ") on element of TaxCollectorAttackedMessage.lastNameId.");
            }
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of TaxCollectorAttackedMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of TaxCollectorAttackedMessage.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TaxCollectorAttackedMessage.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of TaxCollectorAttackedMessage.subAreaId.");
            }
            this.alliance = new BasicAllianceInformations();
            this.alliance.deserialize(input);
        }
    }
    class TaxCollectorAttackedResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.deadOrAlive = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.alliance = new BasicAllianceInformations();
            this.ID = 7440;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.deadOrAlive = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.alliance = new BasicAllianceInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorAttackedResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorAttackedResultMessage(input);
        }

        serializeAs_TaxCollectorAttackedResultMessage(ouput) {
            output.writeBoolean(this.deadOrAlive);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(output);
            this.alliance.serializeAs_BasicAllianceInformations(output);
        }

        deserializeAs_TaxCollectorAttackedResultMessage(input) {
            this.deadOrAlive = input.readBoolean();
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(input);
            this.alliance = new BasicAllianceInformations();
            this.alliance.deserialize(input);
        }
    }
    class TaxCollectorErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 7539;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorErrorMessage(input);
        }

        serializeAs_TaxCollectorErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_TaxCollectorErrorMessage(input) {
            this.reason = input.readByte();
        }
    }
    class TaxCollectorHarvestedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.harvesterId = 0;
            this.harvesterName = "";
            this.ID = 9412;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
            this.harvesterId = 0;
            this.harvesterName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorHarvestedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorHarvestedMessage(input);
        }

        serializeAs_TaxCollectorHarvestedMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
            if (this.harvesterId < 0 || this.harvesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.harvesterId + ") on element harvesterId.");
            }
            output.writeVarLong(this.harvesterId);
            output.writeUTF(this.harvesterName);
        }

        deserializeAs_TaxCollectorHarvestedMessage(input) {
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of TaxCollectorHarvestedMessage.taxCollectorId.");
            }
            this.harvesterId = input.readVarUhLong();
            if (this.harvesterId < 0 || this.harvesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.harvesterId + ") on element of TaxCollectorHarvestedMessage.harvesterId.");
            }
            this.harvesterName = input.readUTF();
        }
    }
    class TaxCollectorMovementsOfflineMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.movements = [];
            this.ID = 7893;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.movements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorMovementsOfflineMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorMovementsOfflineMessage(input);
        }

        serializeAs_TaxCollectorMovementsOfflineMessage(ouput) {
            output.writeShort(this.movements.length);
            for (var _i1 = 0; _i1 < this.movements.length; _i1++) {
                (this.movements[_i1]).serializeAs_TaxCollectorMovement(output);
            }
        }

        deserializeAs_TaxCollectorMovementsOfflineMessage(input) {
            var _item1 = null;
            var _movementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _movementsLen; _i1++) {
                _item1 = new TaxCollectorMovement();
                _item1.deserialize(input);
                this.movements.push(_item1);
            }
        }
    }
    class TaxCollectorOrderedSpellUpdatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.taxCollectorId = 0;
            this.taxCollectorSpells = [];
            this.ID = 7681;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.taxCollectorId = 0;
            this.taxCollectorSpells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorOrderedSpellUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorOrderedSpellUpdatedMessage(input);
        }

        serializeAs_TaxCollectorOrderedSpellUpdatedMessage(ouput) {
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element taxCollectorId.");
            }
            output.writeDouble(this.taxCollectorId);
            output.writeShort(this.taxCollectorSpells.length);
            for (var _i2 = 0; _i2 < this.taxCollectorSpells.length; _i2++) {
                (this.taxCollectorSpells[_i2]).serializeAs_TaxCollectorOrderedSpell(output);
            }
        }

        deserializeAs_TaxCollectorOrderedSpellUpdatedMessage(input) {
            var _item2 = null;
            this.taxCollectorId = input.readDouble();
            if (this.taxCollectorId < 0 || this.taxCollectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.taxCollectorId + ") on element of TaxCollectorOrderedSpellUpdatedMessage.taxCollectorId.");
            }
            var _taxCollectorSpellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _taxCollectorSpellsLen; _i2++) {
                _item2 = new TaxCollectorOrderedSpell();
                _item2.deserialize(input);
                this.taxCollectorSpells.push(_item2);
            }
        }
    }
    class TaxCollectorPresetsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presets = [];
            this.ID = 8015;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presets = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorPresetsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorPresetsMessage(input);
        }

        serializeAs_TaxCollectorPresetsMessage(ouput) {
            output.writeShort(this.presets.length);
            for (var _i1 = 0; _i1 < this.presets.length; _i1++) {
                (this.presets[_i1]).serializeAs_TaxCollectorPreset(output);
            }
        }

        deserializeAs_TaxCollectorPresetsMessage(input) {
            var _item1 = null;
            var _presetsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetsLen; _i1++) {
                _item1 = new TaxCollectorPreset();
                _item1.deserialize(input);
                this.presets.push(_item1);
            }
        }
    }
    class TaxCollectorPresetSpellUpdatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = new Uuid();
            this.taxCollectorSpells = [];
            this.ID = 5819;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = new Uuid();
            this.taxCollectorSpells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorPresetSpellUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorPresetSpellUpdatedMessage(input);
        }

        serializeAs_TaxCollectorPresetSpellUpdatedMessage(ouput) {
            this.presetId.serializeAs_Uuid(output);
            output.writeShort(this.taxCollectorSpells.length);
            for (var _i2 = 0; _i2 < this.taxCollectorSpells.length; _i2++) {
                (this.taxCollectorSpells[_i2]).serializeAs_TaxCollectorOrderedSpell(output);
            }
        }

        deserializeAs_TaxCollectorPresetSpellUpdatedMessage(input) {
            var _item2 = null;
            this.presetId = new Uuid();
            this.presetId.deserialize(input);
            var _taxCollectorSpellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _taxCollectorSpellsLen; _i2++) {
                _item2 = new TaxCollectorOrderedSpell();
                _item2.deserialize(input);
                this.taxCollectorSpells.push(_item2);
            }
        }
    }
    class TaxCollectorRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.collectorId = 0;
            this.ID = 3362;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.collectorId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorRemovedMessage(input);
        }

        serializeAs_TaxCollectorRemovedMessage(ouput) {
            if (this.collectorId < 0 || this.collectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.collectorId + ") on element collectorId.");
            }
            output.writeDouble(this.collectorId);
        }

        deserializeAs_TaxCollectorRemovedMessage(input) {
            this.collectorId = input.readDouble();
            if (this.collectorId < 0 || this.collectorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.collectorId + ") on element of TaxCollectorRemovedMessage.collectorId.");
            }
        }
    }
    class TaxCollectorStateUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.uniqueId = 0;
            this.state = 0;
            this.ID = 9183;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uniqueId = 0;
            this.state = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorStateUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorStateUpdateMessage(input);
        }

        serializeAs_TaxCollectorStateUpdateMessage(ouput) {
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element uniqueId.");
            }
            output.writeDouble(this.uniqueId);
            output.writeByte(this.state);
        }

        deserializeAs_TaxCollectorStateUpdateMessage(input) {
            this.uniqueId = input.readDouble();
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element of TaxCollectorStateUpdateMessage.uniqueId.");
            }
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of TaxCollectorStateUpdateMessage.state.");
            }
        }
    }
    class TopTaxCollectorListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonTaxCollectorsInformation = [];
            this.worldTaxCollectorsInformation = [];
            this.ID = 2349;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonTaxCollectorsInformation = [];
            this.worldTaxCollectorsInformation = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TopTaxCollectorListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TopTaxCollectorListMessage(input);
        }

        serializeAs_TopTaxCollectorListMessage(ouput) {
            output.writeShort(this.dungeonTaxCollectorsInformation.length);
            for (var _i1 = 0; _i1 < this.dungeonTaxCollectorsInformation.length; _i1++) {
                output.writeShort((this.dungeonTaxCollectorsInformation[_i1]).getTypeId());
                (this.dungeonTaxCollectorsInformation[_i1]).serialize(output);
            }
            output.writeShort(this.worldTaxCollectorsInformation.length);
            for (var _i2 = 0; _i2 < this.worldTaxCollectorsInformation.length; _i2++) {
                output.writeShort((this.worldTaxCollectorsInformation[_i2]).getTypeId());
                (this.worldTaxCollectorsInformation[_i2]).serialize(output);
            }
        }

        deserializeAs_TopTaxCollectorListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _id2 = 0;
            var _item2 = null;
            var _dungeonTaxCollectorsInformationLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonTaxCollectorsInformationLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(TaxCollectorInformations, _id1);
                _item1.deserialize(input);
                this.dungeonTaxCollectorsInformation.push(_item1);
            }
            var _worldTaxCollectorsInformationLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _worldTaxCollectorsInformationLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(TaxCollectorInformations, _id2);
                _item2.deserialize(input);
                this.worldTaxCollectorsInformation.push(_item2);
            }
        }
    }
    class DisplayNumericalValuePaddockMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rideId = 0;
            this.value = 0;
            this.type = 0;
            this.ID = 4937;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rideId = 0;
            this.value = 0;
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DisplayNumericalValuePaddockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DisplayNumericalValuePaddockMessage(input);
        }

        serializeAs_DisplayNumericalValuePaddockMessage(ouput) {
            output.writeInt(this.rideId);
            output.writeInt(this.value);
            output.writeByte(this.type);
        }

        deserializeAs_DisplayNumericalValuePaddockMessage(input) {
            this.rideId = input.readInt();
            this.value = input.readInt();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of DisplayNumericalValuePaddockMessage.type.");
            }
        }
    }
    class DungeonKeyRingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.availables = [];
            this.unavailables = [];
            this.ID = 1665;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.availables = [];
            this.unavailables = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonKeyRingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonKeyRingMessage(input);
        }

        serializeAs_DungeonKeyRingMessage(ouput) {
            output.writeShort(this.availables.length);
            for (var _i1 = 0; _i1 < this.availables.length; _i1++) {
                if (this.availables[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.availables[_i1] + ") on element 1 (starting at 1) of availables.");
                }
                output.writeVarShort(this.availables[_i1]);
            }
            output.writeShort(this.unavailables.length);
            for (var _i2 = 0; _i2 < this.unavailables.length; _i2++) {
                if (this.unavailables[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.unavailables[_i2] + ") on element 2 (starting at 1) of unavailables.");
                }
                output.writeVarShort(this.unavailables[_i2]);
            }
        }

        deserializeAs_DungeonKeyRingMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _availablesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _availablesLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of availables.");
                }
                this.availables.push(_val1);
            }
            var _unavailablesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _unavailablesLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of unavailables.");
                }
                this.unavailables.push(_val2);
            }
        }
    }
    class DungeonKeyRingUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.available = false;
            this.ID = 3419;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.available = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonKeyRingUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonKeyRingUpdateMessage(input);
        }

        serializeAs_DungeonKeyRingUpdateMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeBoolean(this.available);
        }

        deserializeAs_DungeonKeyRingUpdateMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonKeyRingUpdateMessage.dungeonId.");
            }
            this.available = input.readBoolean();
        }
    }
    class ArenaFighterIdleMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9203;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ArenaFighterIdleMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ArenaFighterIdleMessage(input);
        }

        serializeAs_ArenaFighterIdleMessage(ouput) {

        }

        deserializeAs_ArenaFighterIdleMessage(input) {

        }
    }
    class ArenaFighterLeaveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.leaver = new CharacterBasicMinimalInformations();
            this.ID = 8380;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.leaver = new CharacterBasicMinimalInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ArenaFighterLeaveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ArenaFighterLeaveMessage(input);
        }

        serializeAs_ArenaFighterLeaveMessage(ouput) {
            this.leaver.serializeAs_CharacterBasicMinimalInformations(output);
        }

        deserializeAs_ArenaFighterLeaveMessage(input) {
            this.leaver = new CharacterBasicMinimalInformations();
            this.leaver.deserialize(input);
        }
    }
    class GameFightEndMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.duration = 0;
            this.rewardRate = 0;
            this.lootShareLimitMalus = 0;
            this.results = [];
            this.namedPartyTeamsOutcomes = [];
            this.ID = 1070;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.duration = 0;
            this.rewardRate = 0;
            this.lootShareLimitMalus = 0;
            this.results = [];
            this.namedPartyTeamsOutcomes = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightEndMessage(input);
        }

        serializeAs_GameFightEndMessage(ouput) {
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element duration.");
            }
            output.writeInt(this.duration);
            output.writeVarShort(this.rewardRate);
            output.writeShort(this.lootShareLimitMalus);
            output.writeShort(this.results.length);
            for (var _i4 = 0; _i4 < this.results.length; _i4++) {
                output.writeShort((this.results[_i4]).getTypeId());
                (this.results[_i4]).serialize(output);
            }
            output.writeShort(this.namedPartyTeamsOutcomes.length);
            for (var _i5 = 0; _i5 < this.namedPartyTeamsOutcomes.length; _i5++) {
                (this.namedPartyTeamsOutcomes[_i5]).serializeAs_NamedPartyTeamWithOutcome(output);
            }
        }

        deserializeAs_GameFightEndMessage(input) {
            var _id4 = 0;
            var _item4 = null;
            var _item5 = null;
            this.duration = input.readInt();
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element of GameFightEndMessage.duration.");
            }
            this.rewardRate = input.readVarShort();
            this.lootShareLimitMalus = input.readShort();
            var _resultsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _resultsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(FightResultListEntry, _id4);
                _item4.deserialize(input);
                this.results.push(_item4);
            }
            var _namedPartyTeamsOutcomesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _namedPartyTeamsOutcomesLen; _i5++) {
                _item5 = new NamedPartyTeamWithOutcome();
                _item5.deserialize(input);
                this.namedPartyTeamsOutcomes.push(_item5);
            }
        }
    }
    class BreachGameFightEndMessage extends GameFightEndMessage {
        constructor(_super) {
            super()
            this.budget = 0;
            this.ID = 3085;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.budget = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachGameFightEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachGameFightEndMessage(input);
        }

        serializeAs_BreachGameFightEndMessage(ouput) {
            this.serializeAs_GameFightEndMessage.call(this, output);
            output.writeInt(this.budget);
        }

        deserializeAs_BreachGameFightEndMessage(input) {
            this.deserializeAs_GameFightEndMessage.call(this, input);
            this.budget = input.readInt();
        }
    }
    class ChallengeAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeInformation = new ChallengeInformation();
            this.ID = 1910;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeInformation = new ChallengeInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeAddMessage(input);
        }

        serializeAs_ChallengeAddMessage(ouput) {
            this.challengeInformation.serializeAs_ChallengeInformation(output);
        }

        deserializeAs_ChallengeAddMessage(input) {
            this.challengeInformation = new ChallengeInformation();
            this.challengeInformation.deserialize(input);
        }
    }
    class ChallengeBonusChoiceMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeBonus = 0;
            this.ID = 588;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeBonus = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeBonusChoiceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeBonusChoiceMessage(input);
        }

        serializeAs_ChallengeBonusChoiceMessage(ouput) {
            output.writeByte(this.challengeBonus);
        }

        deserializeAs_ChallengeBonusChoiceMessage(input) {
            this.challengeBonus = input.readByte();
            if (this.challengeBonus < 0) {
                throw new Error("Forbidden value (" + this.challengeBonus + ") on element of ChallengeBonusChoiceMessage.challengeBonus.");
            }
        }
    }
    class ChallengeBonusChoiceSelectedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeBonus = 0;
            this.ID = 3796;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeBonus = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeBonusChoiceSelectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeBonusChoiceSelectedMessage(input);
        }

        serializeAs_ChallengeBonusChoiceSelectedMessage(ouput) {
            output.writeByte(this.challengeBonus);
        }

        deserializeAs_ChallengeBonusChoiceSelectedMessage(input) {
            this.challengeBonus = input.readByte();
            if (this.challengeBonus < 0) {
                throw new Error("Forbidden value (" + this.challengeBonus + ") on element of ChallengeBonusChoiceSelectedMessage.challengeBonus.");
            }
        }
    }
    class ChallengeListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengesInformation = [];
            this.ID = 6466;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengesInformation = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeListMessage(input);
        }

        serializeAs_ChallengeListMessage(ouput) {
            output.writeShort(this.challengesInformation.length);
            for (var _i1 = 0; _i1 < this.challengesInformation.length; _i1++) {
                (this.challengesInformation[_i1]).serializeAs_ChallengeInformation(output);
            }
        }

        deserializeAs_ChallengeListMessage(input) {
            var _item1 = null;
            var _challengesInformationLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _challengesInformationLen; _i1++) {
                _item1 = new ChallengeInformation();
                _item1.deserialize(input);
                this.challengesInformation.push(_item1);
            }
        }
    }
    class ChallengeModSelectedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeMod = 0;
            this.ID = 2631;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeMod = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeModSelectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeModSelectedMessage(input);
        }

        serializeAs_ChallengeModSelectedMessage(ouput) {
            output.writeByte(this.challengeMod);
        }

        deserializeAs_ChallengeModSelectedMessage(input) {
            this.challengeMod = input.readByte();
            if (this.challengeMod < 0) {
                throw new Error("Forbidden value (" + this.challengeMod + ") on element of ChallengeModSelectedMessage.challengeMod.");
            }
        }
    }
    class ChallengeModSelectMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeMod = 0;
            this.ID = 3759;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeMod = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeModSelectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeModSelectMessage(input);
        }

        serializeAs_ChallengeModSelectMessage(ouput) {
            output.writeByte(this.challengeMod);
        }

        deserializeAs_ChallengeModSelectMessage(input) {
            this.challengeMod = input.readByte();
            if (this.challengeMod < 0) {
                throw new Error("Forbidden value (" + this.challengeMod + ") on element of ChallengeModSelectMessage.challengeMod.");
            }
        }
    }
    class ChallengeNumberMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeNumber = 0;
            this.ID = 2139;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeNumber = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeNumberMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeNumberMessage(input);
        }

        serializeAs_ChallengeNumberMessage(ouput) {
            if (this.challengeNumber < 0) {
                throw new Error("Forbidden value (" + this.challengeNumber + ") on element challengeNumber.");
            }
            output.writeVarInt(this.challengeNumber);
        }

        deserializeAs_ChallengeNumberMessage(input) {
            this.challengeNumber = input.readVarUhInt();
            if (this.challengeNumber < 0) {
                throw new Error("Forbidden value (" + this.challengeNumber + ") on element of ChallengeNumberMessage.challengeNumber.");
            }
        }
    }
    class ChallengeProposalMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeProposals = [];
            this.timer = 0;
            this.ID = 1008;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeProposals = [];
            this.timer = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeProposalMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeProposalMessage(input);
        }

        serializeAs_ChallengeProposalMessage(ouput) {
            output.writeShort(this.challengeProposals.length);
            for (var _i1 = 0; _i1 < this.challengeProposals.length; _i1++) {
                (this.challengeProposals[_i1]).serializeAs_ChallengeInformation(output);
            }
            if (this.timer < 0 || this.timer > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timer + ") on element timer.");
            }
            output.writeDouble(this.timer);
        }

        deserializeAs_ChallengeProposalMessage(input) {
            var _item1 = null;
            var _challengeProposalsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _challengeProposalsLen; _i1++) {
                _item1 = new ChallengeInformation();
                _item1.deserialize(input);
                this.challengeProposals.push(_item1);
            }
            this.timer = input.readDouble();
            if (this.timer < 0 || this.timer > 9007199254740992) {
                throw new Error("Forbidden value (" + this.timer + ") on element of ChallengeProposalMessage.timer.");
            }
        }
    }
    class ChallengeReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeMod = 0;
            this.ID = 9312;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeMod = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeReadyMessage(input);
        }

        serializeAs_ChallengeReadyMessage(ouput) {
            output.writeByte(this.challengeMod);
        }

        deserializeAs_ChallengeReadyMessage(input) {
            this.challengeMod = input.readByte();
            if (this.challengeMod < 0) {
                throw new Error("Forbidden value (" + this.challengeMod + ") on element of ChallengeReadyMessage.challengeMod.");
            }
        }
    }
    class ChallengeResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeId = 0;
            this.success = false;
            this.ID = 6302;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeId = 0;
            this.success = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeResultMessage(input);
        }

        serializeAs_ChallengeResultMessage(ouput) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarInt(this.challengeId);
            output.writeBoolean(this.success);
        }

        deserializeAs_ChallengeResultMessage(input) {
            this.challengeId = input.readVarUhInt();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeResultMessage.challengeId.");
            }
            this.success = input.readBoolean();
        }
    }
    class ChallengeSelectedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeInformation = new ChallengeInformation();
            this.ID = 7816;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeInformation = new ChallengeInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeSelectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeSelectedMessage(input);
        }

        serializeAs_ChallengeSelectedMessage(ouput) {
            this.challengeInformation.serializeAs_ChallengeInformation(output);
        }

        deserializeAs_ChallengeSelectedMessage(input) {
            this.challengeInformation = new ChallengeInformation();
            this.challengeInformation.deserialize(input);
        }
    }
    class ChallengeSelectionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeId = 0;
            this.ID = 7424;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeSelectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeSelectionMessage(input);
        }

        serializeAs_ChallengeSelectionMessage(ouput) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarInt(this.challengeId);
        }

        deserializeAs_ChallengeSelectionMessage(input) {
            this.challengeId = input.readVarUhInt();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeSelectionMessage.challengeId.");
            }
        }
    }
    class ChallengeTargetsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeInformation = new ChallengeInformation();
            this.ID = 3251;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeInformation = new ChallengeInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeTargetsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeTargetsMessage(input);
        }

        serializeAs_ChallengeTargetsMessage(ouput) {
            this.challengeInformation.serializeAs_ChallengeInformation(output);
        }

        deserializeAs_ChallengeTargetsMessage(input) {
            this.challengeInformation = new ChallengeInformation();
            this.challengeInformation.deserialize(input);
        }
    }
    class ChallengeTargetsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeId = 0;
            this.ID = 4777;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeTargetsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeTargetsRequestMessage(input);
        }

        serializeAs_ChallengeTargetsRequestMessage(ouput) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarInt(this.challengeId);
        }

        deserializeAs_ChallengeTargetsRequestMessage(input) {
            this.challengeId = input.readVarUhInt();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeTargetsRequestMessage.challengeId.");
            }
        }
    }
    class ChallengeValidateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.challengeId = 0;
            this.ID = 248;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.challengeId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeValidateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeValidateMessage(input);
        }

        serializeAs_ChallengeValidateMessage(ouput) {
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element challengeId.");
            }
            output.writeVarInt(this.challengeId);
        }

        deserializeAs_ChallengeValidateMessage(input) {
            this.challengeId = input.readVarUhInt();
            if (this.challengeId < 0) {
                throw new Error("Forbidden value (" + this.challengeId + ") on element of ChallengeValidateMessage.challengeId.");
            }
        }
    }
    class GameFightRefreshFighterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.informations = new GameContextActorInformations();
            this.ID = 9672;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.informations = new GameContextActorInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightRefreshFighterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightRefreshFighterMessage(input);
        }

        serializeAs_GameFightRefreshFighterMessage(ouput) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        }

        deserializeAs_GameFightRefreshFighterMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameContextActorInformations, _id1);
            this.informations.deserialize(input);
        }
    }
    class GameFightShowFighterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.informations = new GameFightFighterInformations();
            this.ID = 3886;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.informations = new GameFightFighterInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightShowFighterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightShowFighterMessage(input);
        }

        serializeAs_GameFightShowFighterMessage(ouput) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        }

        deserializeAs_GameFightShowFighterMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameFightFighterInformations, _id1);
            this.informations.deserialize(input);
        }
    }
    class GameFightShowFighterRandomStaticPoseMessage extends GameFightShowFighterMessage {
        constructor(_super) {
            super()

            this.ID = 2392;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightShowFighterRandomStaticPoseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightShowFighterRandomStaticPoseMessage(input);
        }

        serializeAs_GameFightShowFighterRandomStaticPoseMessage(ouput) {
            this.serializeAs_GameFightShowFighterMessage.call(this, output);
        }

        deserializeAs_GameFightShowFighterRandomStaticPoseMessage(input) {
            this.deserializeAs_GameFightShowFighterMessage.call(this, input);
        }
    }
    class GameFightHumanReadyStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.isReady = false;
            this.ID = 8894;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
            this.isReady = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightHumanReadyStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightHumanReadyStateMessage(input);
        }

        serializeAs_GameFightHumanReadyStateMessage(ouput) {
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
            output.writeBoolean(this.isReady);
        }

        deserializeAs_GameFightHumanReadyStateMessage(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of GameFightHumanReadyStateMessage.characterId.");
            }
            this.isReady = input.readBoolean();
        }
    }
    class GameFightJoinMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isTeamPhase = false;
            this.canBeCancelled = false;
            this.canSayReady = false;
            this.isFightStarted = false;
            this.timeMaxBeforeFightStart = 0;
            this.fightType = 0;
            this.ID = 1680;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isTeamPhase = false;
            this.canBeCancelled = false;
            this.canSayReady = false;
            this.isFightStarted = false;
            this.timeMaxBeforeFightStart = 0;
            this.fightType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightJoinMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightJoinMessage(input);
        }

        serializeAs_GameFightJoinMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isTeamPhase);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canBeCancelled);
            _box0 = BooleanByteWrapper.setFlag(_box0, 2, this.canSayReady);
            _box0 = BooleanByteWrapper.setFlag(_box0, 3, this.isFightStarted);
            output.writeByte(_box0);
            if (this.timeMaxBeforeFightStart < 0) {
                throw new Error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element timeMaxBeforeFightStart.");
            }
            output.writeShort(this.timeMaxBeforeFightStart);
            output.writeByte(this.fightType);
        }

        deserializeAs_GameFightJoinMessage(input) {
            var _box0 = input.readByte();
            this.isTeamPhase = BooleanByteWrapper.getFlag(_box0, 0);
            this.canBeCancelled = BooleanByteWrapper.getFlag(_box0, 1);
            this.canSayReady = BooleanByteWrapper.getFlag(_box0, 2);
            this.isFightStarted = BooleanByteWrapper.getFlag(_box0, 3);
            this.timeMaxBeforeFightStart = input.readShort();
            if (this.timeMaxBeforeFightStart < 0) {
                throw new Error("Forbidden value (" + this.timeMaxBeforeFightStart + ") on element of GameFightJoinMessage.timeMaxBeforeFightStart.");
            }
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of GameFightJoinMessage.fightType.");
            }
        }
    }
    class GameFightJoinRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fighterId = 0;
            this.fightId = 0;
            this.ID = 2009;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fighterId = 0;
            this.fightId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightJoinRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightJoinRequestMessage(input);
        }

        serializeAs_GameFightJoinRequestMessage(ouput) {
            if (this.fighterId < -9007199254740992 || this.fighterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
            }
            output.writeDouble(this.fighterId);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
        }

        deserializeAs_GameFightJoinRequestMessage(input) {
            this.fighterId = input.readDouble();
            if (this.fighterId < -9007199254740992 || this.fighterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element of GameFightJoinRequestMessage.fighterId.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightJoinRequestMessage.fightId.");
            }
        }
    }
    class GameFightLeaveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.charId = 0;
            this.ID = 3124;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.charId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightLeaveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightLeaveMessage(input);
        }

        serializeAs_GameFightLeaveMessage(ouput) {
            if (this.charId < -9007199254740992 || this.charId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.charId + ") on element charId.");
            }
            output.writeDouble(this.charId);
        }

        deserializeAs_GameFightLeaveMessage(input) {
            this.charId = input.readDouble();
            if (this.charId < -9007199254740992 || this.charId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.charId + ") on element of GameFightLeaveMessage.charId.");
            }
        }
    }
    class GameFightNewRoundMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.roundNumber = 0;
            this.ID = 1322;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.roundNumber = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightNewRoundMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightNewRoundMessage(input);
        }

        serializeAs_GameFightNewRoundMessage(ouput) {
            if (this.roundNumber < 0) {
                throw new Error("Forbidden value (" + this.roundNumber + ") on element roundNumber.");
            }
            output.writeVarInt(this.roundNumber);
        }

        deserializeAs_GameFightNewRoundMessage(input) {
            this.roundNumber = input.readVarUhInt();
            if (this.roundNumber < 0) {
                throw new Error("Forbidden value (" + this.roundNumber + ") on element of GameFightNewRoundMessage.roundNumber.");
            }
        }
    }
    class GameFightNewWaveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.teamId = 2;
            this.nbTurnBeforeNextWave = 0;
            this.ID = 2439;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.teamId = 2;
            this.nbTurnBeforeNextWave = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightNewWaveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightNewWaveMessage(input);
        }

        serializeAs_GameFightNewWaveMessage(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeByte(this.id);
            output.writeByte(this.teamId);
            output.writeShort(this.nbTurnBeforeNextWave);
        }

        deserializeAs_GameFightNewWaveMessage(input) {
            this.id = input.readByte();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightNewWaveMessage.id.");
            }
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightNewWaveMessage.teamId.");
            }
            this.nbTurnBeforeNextWave = input.readShort();
        }
    }
    class GameFightOptionStateUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.teamId = 2;
            this.option = 3;
            this.state = false;
            this.ID = 448;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.teamId = 2;
            this.option = 3;
            this.state = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightOptionStateUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightOptionStateUpdateMessage(input);
        }

        serializeAs_GameFightOptionStateUpdateMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.teamId);
            output.writeByte(this.option);
            output.writeBoolean(this.state);
        }

        deserializeAs_GameFightOptionStateUpdateMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightOptionStateUpdateMessage.fightId.");
            }
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightOptionStateUpdateMessage.teamId.");
            }
            this.option = input.readByte();
            if (this.option < 0) {
                throw new Error("Forbidden value (" + this.option + ") on element of GameFightOptionStateUpdateMessage.option.");
            }
            this.state = input.readBoolean();
        }
    }
    class GameFightOptionToggleMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.option = 3;
            this.ID = 4020;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.option = 3;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightOptionToggleMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightOptionToggleMessage(input);
        }

        serializeAs_GameFightOptionToggleMessage(ouput) {
            output.writeByte(this.option);
        }

        deserializeAs_GameFightOptionToggleMessage(input) {
            this.option = input.readByte();
            if (this.option < 0) {
                throw new Error("Forbidden value (" + this.option + ") on element of GameFightOptionToggleMessage.option.");
            }
        }
    }
    class GameFightPauseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isPaused = false;
            this.ID = 5505;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isPaused = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPauseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPauseMessage(input);
        }

        serializeAs_GameFightPauseMessage(ouput) {
            output.writeBoolean(this.isPaused);
        }

        deserializeAs_GameFightPauseMessage(input) {
            this.isPaused = input.readBoolean();
        }
    }
    class GameFightPlacementPositionRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.ID = 8071;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementPositionRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementPositionRequestMessage(input);
        }

        serializeAs_GameFightPlacementPositionRequestMessage(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_GameFightPlacementPositionRequestMessage(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameFightPlacementPositionRequestMessage.cellId.");
            }
        }
    }
    class GameFightPlacementPossiblePositionsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.teamNumber = 2;
            this.ID = 8544;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.teamNumber = 2;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementPossiblePositionsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementPossiblePositionsMessage(input);
        }

        serializeAs_GameFightPlacementPossiblePositionsMessage(ouput) {
            output.writeShort(this.positionsForChallengers.length);
            for (var _i1 = 0; _i1 < this.positionsForChallengers.length; _i1++) {
                if (this.positionsForChallengers[_i1] < 0 || this.positionsForChallengers[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForChallengers[_i1] + ") on element 1 (starting at 1) of positionsForChallengers.");
                }
                output.writeVarShort(this.positionsForChallengers[_i1]);
            }
            output.writeShort(this.positionsForDefenders.length);
            for (var _i2 = 0; _i2 < this.positionsForDefenders.length; _i2++) {
                if (this.positionsForDefenders[_i2] < 0 || this.positionsForDefenders[_i2] > 559) {
                    throw new Error("Forbidden value (" + this.positionsForDefenders[_i2] + ") on element 2 (starting at 1) of positionsForDefenders.");
                }
                output.writeVarShort(this.positionsForDefenders[_i2]);
            }
            output.writeByte(this.teamNumber);
        }

        deserializeAs_GameFightPlacementPossiblePositionsMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _positionsForChallengersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _positionsForChallengersLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of positionsForChallengers.");
                }
                this.positionsForChallengers.push(_val1);
            }
            var _positionsForDefendersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _positionsForDefendersLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0 || _val2 > 559) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of positionsForDefenders.");
                }
                this.positionsForDefenders.push(_val2);
            }
            this.teamNumber = input.readByte();
            if (this.teamNumber < 0) {
                throw new Error("Forbidden value (" + this.teamNumber + ") on element of GameFightPlacementPossiblePositionsMessage.teamNumber.");
            }
        }
    }
    class GameFightPlacementSwapPositionsAcceptMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.ID = 9664;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsAcceptMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsAcceptMessage(ouput) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
        }

        deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsAcceptMessage.requestId.");
            }
        }
    }
    class GameFightPlacementSwapPositionsCancelledMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.cancellerId = 0;
            this.ID = 7121;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
            this.cancellerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsCancelledMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsCancelledMessage(ouput) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
            if (this.cancellerId < -9007199254740992 || this.cancellerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.cancellerId + ") on element cancellerId.");
            }
            output.writeDouble(this.cancellerId);
        }

        deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.requestId.");
            }
            this.cancellerId = input.readDouble();
            if (this.cancellerId < -9007199254740992 || this.cancellerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.cancellerId + ") on element of GameFightPlacementSwapPositionsCancelledMessage.cancellerId.");
            }
        }
    }
    class GameFightPlacementSwapPositionsCancelMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.ID = 1439;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsCancelMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsCancelMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsCancelMessage(ouput) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
        }

        deserializeAs_GameFightPlacementSwapPositionsCancelMessage(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsCancelMessage.requestId.");
            }
        }
    }
    class GameFightPlacementSwapPositionsErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9969;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsErrorMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsErrorMessage(ouput) {

        }

        deserializeAs_GameFightPlacementSwapPositionsErrorMessage(input) {

        }
    }
    class GameFightPlacementSwapPositionsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dispositions = [];
            this.ID = 4084;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dispositions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsMessage(ouput) {
            for (var _i1 = 0; _i1 < 2; _i1++) {
                this.dispositions[_i1].serializeAs_IdentifiedEntityDispositionInformations(output);
            }
        }

        deserializeAs_GameFightPlacementSwapPositionsMessage(input) {
            for (var _i1 = 0; _i1 < 2; _i1++) {
                this.dispositions[_i1] = new IdentifiedEntityDispositionInformations();
                this.dispositions[_i1].deserialize(input);
            }
        }
    }
    class GameFightPlacementSwapPositionsOfferMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.requesterId = 0;
            this.requesterCellId = 0;
            this.requestedId = 0;
            this.requestedCellId = 0;
            this.ID = 4399;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
            this.requesterId = 0;
            this.requesterCellId = 0;
            this.requestedId = 0;
            this.requestedCellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsOfferMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsOfferMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsOfferMessage(ouput) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeInt(this.requestId);
            if (this.requesterId < -9007199254740992 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeDouble(this.requesterId);
            if (this.requesterCellId < 0 || this.requesterCellId > 559) {
                throw new Error("Forbidden value (" + this.requesterCellId + ") on element requesterCellId.");
            }
            output.writeVarShort(this.requesterCellId);
            if (this.requestedId < -9007199254740992 || this.requestedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element requestedId.");
            }
            output.writeDouble(this.requestedId);
            if (this.requestedCellId < 0 || this.requestedCellId > 559) {
                throw new Error("Forbidden value (" + this.requestedCellId + ") on element requestedCellId.");
            }
            output.writeVarShort(this.requestedCellId);
        }

        deserializeAs_GameFightPlacementSwapPositionsOfferMessage(input) {
            this.requestId = input.readInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestId.");
            }
            this.requesterId = input.readDouble();
            if (this.requesterId < -9007199254740992 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterId.");
            }
            this.requesterCellId = input.readVarUhShort();
            if (this.requesterCellId < 0 || this.requesterCellId > 559) {
                throw new Error("Forbidden value (" + this.requesterCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterCellId.");
            }
            this.requestedId = input.readDouble();
            if (this.requestedId < -9007199254740992 || this.requestedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedId.");
            }
            this.requestedCellId = input.readVarUhShort();
            if (this.requestedCellId < 0 || this.requestedCellId > 559) {
                throw new Error("Forbidden value (" + this.requestedCellId + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedCellId.");
            }
        }
    }
    class GameFightPlacementSwapPositionsRequestMessage extends GameFightPlacementPositionRequestMessage {
        constructor(_super) {
            super()
            this.requestedId = 0;
            this.ID = 5094;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestedId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightPlacementSwapPositionsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightPlacementSwapPositionsRequestMessage(input);
        }

        serializeAs_GameFightPlacementSwapPositionsRequestMessage(ouput) {
            this.serializeAs_GameFightPlacementPositionRequestMessage.call(this, output);
            if (this.requestedId < -9007199254740992 || this.requestedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element requestedId.");
            }
            output.writeDouble(this.requestedId);
        }

        deserializeAs_GameFightPlacementSwapPositionsRequestMessage(input) {
            this.deserializeAs_GameFightPlacementPositionRequestMessage.call(this, input);
            this.requestedId = input.readDouble();
            if (this.requestedId < -9007199254740992 || this.requestedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requestedId + ") on element of GameFightPlacementSwapPositionsRequestMessage.requestedId.");
            }
        }
    }
    class GameFightReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isReady = false;
            this.ID = 5577;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isReady = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightReadyMessage(input);
        }

        serializeAs_GameFightReadyMessage(ouput) {
            output.writeBoolean(this.isReady);
        }

        deserializeAs_GameFightReadyMessage(input) {
            this.isReady = input.readBoolean();
        }
    }
    class GameFightRemoveTeamMemberMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.teamId = 2;
            this.charId = 0;
            this.ID = 2527;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.teamId = 2;
            this.charId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightRemoveTeamMemberMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightRemoveTeamMemberMessage(input);
        }

        serializeAs_GameFightRemoveTeamMemberMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeByte(this.teamId);
            if (this.charId < -9007199254740992 || this.charId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.charId + ") on element charId.");
            }
            output.writeDouble(this.charId);
        }

        deserializeAs_GameFightRemoveTeamMemberMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightRemoveTeamMemberMessage.fightId.");
            }
            this.teamId = input.readByte();
            if (this.teamId < 0) {
                throw new Error("Forbidden value (" + this.teamId + ") on element of GameFightRemoveTeamMemberMessage.teamId.");
            }
            this.charId = input.readDouble();
            if (this.charId < -9007199254740992 || this.charId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.charId + ") on element of GameFightRemoveTeamMemberMessage.charId.");
            }
        }
    }
    class GameFightSpectateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.effects = [];
            this.marks = [];
            this.gameTurn = 0;
            this.fightStart = 0;
            this.fxTriggerCounts = [];
            this.ID = 3448;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.effects = [];
            this.marks = [];
            this.gameTurn = 0;
            this.fightStart = 0;
            this.fxTriggerCounts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightSpectateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightSpectateMessage(input);
        }

        serializeAs_GameFightSpectateMessage(ouput) {
            output.writeShort(this.effects.length);
            for (var _i1 = 0; _i1 < this.effects.length; _i1++) {
                (this.effects[_i1]).serializeAs_FightDispellableEffectExtendedInformations(output);
            }
            output.writeShort(this.marks.length);
            for (var _i2 = 0; _i2 < this.marks.length; _i2++) {
                (this.marks[_i2]).serializeAs_GameActionMark(output);
            }
            if (this.gameTurn < 0) {
                throw new Error("Forbidden value (" + this.gameTurn + ") on element gameTurn.");
            }
            output.writeVarShort(this.gameTurn);
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element fightStart.");
            }
            output.writeInt(this.fightStart);
            output.writeShort(this.fxTriggerCounts.length);
            for (var _i5 = 0; _i5 < this.fxTriggerCounts.length; _i5++) {
                (this.fxTriggerCounts[_i5]).serializeAs_GameFightEffectTriggerCount(output);
            }
        }

        deserializeAs_GameFightSpectateMessage(input) {
            var _item1 = null;
            var _item2 = null;
            var _item5 = null;
            var _effectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _effectsLen; _i1++) {
                _item1 = new FightDispellableEffectExtendedInformations();
                _item1.deserialize(input);
                this.effects.push(_item1);
            }
            var _marksLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _marksLen; _i2++) {
                _item2 = new GameActionMark();
                _item2.deserialize(input);
                this.marks.push(_item2);
            }
            this.gameTurn = input.readVarUhShort();
            if (this.gameTurn < 0) {
                throw new Error("Forbidden value (" + this.gameTurn + ") on element of GameFightSpectateMessage.gameTurn.");
            }
            this.fightStart = input.readInt();
            if (this.fightStart < 0) {
                throw new Error("Forbidden value (" + this.fightStart + ") on element of GameFightSpectateMessage.fightStart.");
            }
            var _fxTriggerCountsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _fxTriggerCountsLen; _i5++) {
                _item5 = new GameFightEffectTriggerCount();
                _item5.deserialize(input);
                this.fxTriggerCounts.push(_item5);
            }
        }
    }
    class GameFightResumeMessage extends GameFightSpectateMessage {
        constructor(_super) {
            super()
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
            this.ID = 1829;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightResumeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightResumeMessage(input);
        }

        serializeAs_GameFightResumeMessage(ouput) {
            this.serializeAs_GameFightSpectateMessage.call(this, output);
            output.writeShort(this.spellCooldowns.length);
            for (var _i1 = 0; _i1 < this.spellCooldowns.length; _i1++) {
                (this.spellCooldowns[_i1]).serializeAs_GameFightSpellCooldown(output);
            }
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element summonCount.");
            }
            output.writeByte(this.summonCount);
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element bombCount.");
            }
            output.writeByte(this.bombCount);
        }

        deserializeAs_GameFightResumeMessage(input) {
            var _item1 = null;
            this.deserializeAs_GameFightSpectateMessage.call(this, input);
            var _spellCooldownsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _spellCooldownsLen; _i1++) {
                _item1 = new GameFightSpellCooldown();
                _item1.deserialize(input);
                this.spellCooldowns.push(_item1);
            }
            this.summonCount = input.readByte();
            if (this.summonCount < 0) {
                throw new Error("Forbidden value (" + this.summonCount + ") on element of GameFightResumeMessage.summonCount.");
            }
            this.bombCount = input.readByte();
            if (this.bombCount < 0) {
                throw new Error("Forbidden value (" + this.bombCount + ") on element of GameFightResumeMessage.bombCount.");
            }
        }
    }
    class GameFightResumeWithSlavesMessage extends GameFightResumeMessage {
        constructor(_super) {
            super()
            this.slavesInfo = [];
            this.ID = 7814;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.slavesInfo = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightResumeWithSlavesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightResumeWithSlavesMessage(input);
        }

        serializeAs_GameFightResumeWithSlavesMessage(ouput) {
            this.serializeAs_GameFightResumeMessage.call(this, output);
            output.writeShort(this.slavesInfo.length);
            for (var _i1 = 0; _i1 < this.slavesInfo.length; _i1++) {
                (this.slavesInfo[_i1]).serializeAs_GameFightResumeSlaveInfo(output);
            }
        }

        deserializeAs_GameFightResumeWithSlavesMessage(input) {
            var _item1 = null;
            this.deserializeAs_GameFightResumeMessage.call(this, input);
            var _slavesInfoLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _slavesInfoLen; _i1++) {
                _item1 = new GameFightResumeSlaveInfo();
                _item1.deserialize(input);
                this.slavesInfo.push(_item1);
            }
        }
    }
    class GameFightSpectatePlayerRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 5901;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightSpectatePlayerRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightSpectatePlayerRequestMessage(input);
        }

        serializeAs_GameFightSpectatePlayerRequestMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_GameFightSpectatePlayerRequestMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameFightSpectatePlayerRequestMessage.playerId.");
            }
        }
    }
    class GameFightSpectatorJoinMessage extends GameFightJoinMessage {
        constructor(_super) {
            super()
            this.namedPartyTeams = [];
            this.ID = 5315;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.namedPartyTeams = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightSpectatorJoinMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightSpectatorJoinMessage(input);
        }

        serializeAs_GameFightSpectatorJoinMessage(ouput) {
            this.serializeAs_GameFightJoinMessage.call(this, output);
            output.writeShort(this.namedPartyTeams.length);
            for (var _i1 = 0; _i1 < this.namedPartyTeams.length; _i1++) {
                (this.namedPartyTeams[_i1]).serializeAs_NamedPartyTeam(output);
            }
        }

        deserializeAs_GameFightSpectatorJoinMessage(input) {
            var _item1 = null;
            this.deserializeAs_GameFightJoinMessage.call(this, input);
            var _namedPartyTeamsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _namedPartyTeamsLen; _i1++) {
                _item1 = new NamedPartyTeam();
                _item1.deserialize(input);
                this.namedPartyTeams.push(_item1);
            }
        }
    }
    class GameFightStartingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightType = 0;
            this.fightId = 0;
            this.attackerId = 0;
            this.defenderId = 0;
            this.containsBoss = false;
            this.monsters = [];
            this.ID = 1962;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightType = 0;
            this.fightId = 0;
            this.attackerId = 0;
            this.defenderId = 0;
            this.containsBoss = false;
            this.monsters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightStartingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightStartingMessage(input);
        }

        serializeAs_GameFightStartingMessage(ouput) {
            output.writeByte(this.fightType);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.attackerId < -9007199254740992 || this.attackerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element attackerId.");
            }
            output.writeDouble(this.attackerId);
            if (this.defenderId < -9007199254740992 || this.defenderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element defenderId.");
            }
            output.writeDouble(this.defenderId);
            output.writeBoolean(this.containsBoss);
            output.writeShort(this.monsters.length);
            for (var _i6 = 0; _i6 < this.monsters.length; _i6++) {
                output.writeInt(this.monsters[_i6]);
            }
        }

        deserializeAs_GameFightStartingMessage(input) {
            var _val6 = 0;
            this.fightType = input.readByte();
            if (this.fightType < 0) {
                throw new Error("Forbidden value (" + this.fightType + ") on element of GameFightStartingMessage.fightType.");
            }
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightStartingMessage.fightId.");
            }
            this.attackerId = input.readDouble();
            if (this.attackerId < -9007199254740992 || this.attackerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element of GameFightStartingMessage.attackerId.");
            }
            this.defenderId = input.readDouble();
            if (this.defenderId < -9007199254740992 || this.defenderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element of GameFightStartingMessage.defenderId.");
            }
            this.containsBoss = input.readBoolean();
            var _monstersLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _monstersLen; _i6++) {
                _val6 = input.readInt();
                this.monsters.push(_val6);
            }
        }
    }
    class GameFightStartMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1844;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightStartMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightStartMessage(input);
        }

        serializeAs_GameFightStartMessage(ouput) {

        }

        deserializeAs_GameFightStartMessage(input) {

        }
    }
    class GameFightSynchronizeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fighters = [];
            this.ID = 4483;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fighters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightSynchronizeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightSynchronizeMessage(input);
        }

        serializeAs_GameFightSynchronizeMessage(ouput) {
            output.writeShort(this.fighters.length);
            for (var _i1 = 0; _i1 < this.fighters.length; _i1++) {
                output.writeShort((this.fighters[_i1]).getTypeId());
                (this.fighters[_i1]).serialize(output);
            }
        }

        deserializeAs_GameFightSynchronizeMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _fightersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _fightersLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameFightFighterInformations, _id1);
                _item1.deserialize(input);
                this.fighters.push(_item1);
            }
        }
    }
    class GameFightTurnEndMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 6718;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnEndMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnEndMessage(input);
        }

        serializeAs_GameFightTurnEndMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        }

        deserializeAs_GameFightTurnEndMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnEndMessage.id.");
            }
        }
    }
    class GameFightTurnFinishMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isAfk = false;
            this.ID = 7870;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isAfk = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnFinishMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnFinishMessage(input);
        }

        serializeAs_GameFightTurnFinishMessage(ouput) {
            output.writeBoolean(this.isAfk);
        }

        deserializeAs_GameFightTurnFinishMessage(input) {
            this.isAfk = input.readBoolean();
        }
    }
    class GameFightTurnListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ids = [];
            this.deadsIds = [];
            this.ID = 102;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ids = [];
            this.deadsIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnListMessage(input);
        }

        serializeAs_GameFightTurnListMessage(ouput) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < -9007199254740992 || this.ids[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeDouble(this.ids[_i1]);
            }
            output.writeShort(this.deadsIds.length);
            for (var _i2 = 0; _i2 < this.deadsIds.length; _i2++) {
                if (this.deadsIds[_i2] < -9007199254740992 || this.deadsIds[_i2] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.deadsIds[_i2] + ") on element 2 (starting at 1) of deadsIds.");
                }
                output.writeDouble(this.deadsIds[_i2]);
            }
        }

        deserializeAs_GameFightTurnListMessage(input) {
            var _val1 = NaN;
            var _val2 = NaN;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740992 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
            var _deadsIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _deadsIdsLen; _i2++) {
                _val2 = input.readDouble();
                if (_val2 < -9007199254740992 || _val2 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of deadsIds.");
                }
                this.deadsIds.push(_val2);
            }
        }
    }
    class GameFightTurnReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isReady = false;
            this.ID = 6559;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isReady = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnReadyMessage(input);
        }

        serializeAs_GameFightTurnReadyMessage(ouput) {
            output.writeBoolean(this.isReady);
        }

        deserializeAs_GameFightTurnReadyMessage(input) {
            this.isReady = input.readBoolean();
        }
    }
    class GameFightTurnReadyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 2866;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnReadyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnReadyRequestMessage(input);
        }

        serializeAs_GameFightTurnReadyRequestMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        }

        deserializeAs_GameFightTurnReadyRequestMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnReadyRequestMessage.id.");
            }
        }
    }
    class GameFightTurnStartMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.waitTime = 0;
            this.ID = 1987;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.waitTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnStartMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnStartMessage(input);
        }

        serializeAs_GameFightTurnStartMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.waitTime < 0) {
                throw new Error("Forbidden value (" + this.waitTime + ") on element waitTime.");
            }
            output.writeVarInt(this.waitTime);
        }

        deserializeAs_GameFightTurnStartMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameFightTurnStartMessage.id.");
            }
            this.waitTime = input.readVarUhInt();
            if (this.waitTime < 0) {
                throw new Error("Forbidden value (" + this.waitTime + ") on element of GameFightTurnStartMessage.waitTime.");
            }
        }
    }
    class GameFightTurnResumeMessage extends GameFightTurnStartMessage {
        constructor(_super) {
            super()
            this.remainingTime = 0;
            this.ID = 55;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.remainingTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnResumeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnResumeMessage(input);
        }

        serializeAs_GameFightTurnResumeMessage(ouput) {
            this.serializeAs_GameFightTurnStartMessage.call(this, output);
            if (this.remainingTime < 0) {
                throw new Error("Forbidden value (" + this.remainingTime + ") on element remainingTime.");
            }
            output.writeVarInt(this.remainingTime);
        }

        deserializeAs_GameFightTurnResumeMessage(input) {
            this.deserializeAs_GameFightTurnStartMessage.call(this, input);
            this.remainingTime = input.readVarUhInt();
            if (this.remainingTime < 0) {
                throw new Error("Forbidden value (" + this.remainingTime + ") on element of GameFightTurnResumeMessage.remainingTime.");
            }
        }
    }
    class GameFightTurnStartPlayingMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2368;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightTurnStartPlayingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightTurnStartPlayingMessage(input);
        }

        serializeAs_GameFightTurnStartPlayingMessage(ouput) {

        }

        deserializeAs_GameFightTurnStartPlayingMessage(input) {

        }
    }
    class GameFightUpdateTeamMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.team = new FightTeamInformations();
            this.ID = 9852;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.team = new FightTeamInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameFightUpdateTeamMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameFightUpdateTeamMessage(input);
        }

        serializeAs_GameFightUpdateTeamMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            this.team.serializeAs_FightTeamInformations(output);
        }

        deserializeAs_GameFightUpdateTeamMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameFightUpdateTeamMessage.fightId.");
            }
            this.team = new FightTeamInformations();
            this.team.deserialize(input);
        }
    }
    class RefreshCharacterStatsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fighterId = 0;
            this.stats = new GameFightCharacteristics();
            this.ID = 7193;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fighterId = 0;
            this.stats = new GameFightCharacteristics();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RefreshCharacterStatsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RefreshCharacterStatsMessage(input);
        }

        serializeAs_RefreshCharacterStatsMessage(ouput) {
            if (this.fighterId < -9007199254740992 || this.fighterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element fighterId.");
            }
            output.writeDouble(this.fighterId);
            this.stats.serializeAs_GameFightCharacteristics(output);
        }

        deserializeAs_RefreshCharacterStatsMessage(input) {
            this.fighterId = input.readDouble();
            if (this.fighterId < -9007199254740992 || this.fighterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fighterId + ") on element of RefreshCharacterStatsMessage.fighterId.");
            }
            this.stats = new GameFightCharacteristics();
            this.stats.deserialize(input);
        }
    }
    class SlaveNoLongerControledMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.masterId = 0;
            this.slaveId = 0;
            this.ID = 156;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.masterId = 0;
            this.slaveId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SlaveNoLongerControledMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SlaveNoLongerControledMessage(input);
        }

        serializeAs_SlaveNoLongerControledMessage(ouput) {
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
            if (this.slaveId < -9007199254740992 || this.slaveId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
            }
            output.writeDouble(this.slaveId);
        }

        deserializeAs_SlaveNoLongerControledMessage(input) {
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of SlaveNoLongerControledMessage.masterId.");
            }
            this.slaveId = input.readDouble();
            if (this.slaveId < -9007199254740992 || this.slaveId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element of SlaveNoLongerControledMessage.slaveId.");
            }
        }
    }
    class SlaveSwitchContextMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.masterId = 0;
            this.slaveId = 0;
            this.slaveTurn = 0;
            this.slaveSpells = [];
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.shortcuts = [];
            this.ID = 6145;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.masterId = 0;
            this.slaveId = 0;
            this.slaveTurn = 0;
            this.slaveSpells = [];
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.shortcuts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SlaveSwitchContextMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SlaveSwitchContextMessage(input);
        }

        serializeAs_SlaveSwitchContextMessage(ouput) {
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element masterId.");
            }
            output.writeDouble(this.masterId);
            if (this.slaveId < -9007199254740992 || this.slaveId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element slaveId.");
            }
            output.writeDouble(this.slaveId);
            if (this.slaveTurn < 0) {
                throw new Error("Forbidden value (" + this.slaveTurn + ") on element slaveTurn.");
            }
            output.writeVarShort(this.slaveTurn);
            output.writeShort(this.slaveSpells.length);
            for (var _i4 = 0; _i4 < this.slaveSpells.length; _i4++) {
                (this.slaveSpells[_i4]).serializeAs_SpellItem(output);
            }
            this.slaveStats.serializeAs_CharacterCharacteristicsInformations(output);
            output.writeShort(this.shortcuts.length);
            for (var _i6 = 0; _i6 < this.shortcuts.length; _i6++) {
                output.writeShort((this.shortcuts[_i6]).getTypeId());
                (this.shortcuts[_i6]).serialize(output);
            }
        }

        deserializeAs_SlaveSwitchContextMessage(input) {
            var _item4 = null;
            var _id6 = 0;
            var _item6 = null;
            this.masterId = input.readDouble();
            if (this.masterId < -9007199254740992 || this.masterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.masterId + ") on element of SlaveSwitchContextMessage.masterId.");
            }
            this.slaveId = input.readDouble();
            if (this.slaveId < -9007199254740992 || this.slaveId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.slaveId + ") on element of SlaveSwitchContextMessage.slaveId.");
            }
            this.slaveTurn = input.readVarUhShort();
            if (this.slaveTurn < 0) {
                throw new Error("Forbidden value (" + this.slaveTurn + ") on element of SlaveSwitchContextMessage.slaveTurn.");
            }
            var _slaveSpellsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _slaveSpellsLen; _i4++) {
                _item4 = new SpellItem();
                _item4.deserialize(input);
                this.slaveSpells.push(_item4);
            }
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.slaveStats.deserialize(input);
            var _shortcutsLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _shortcutsLen; _i6++) {
                _id6 = input.readUnsignedShort();
                _item6 = ProtocolTypeManager.getInstance(Shortcut, _id6);
                _item6.deserialize(input);
                this.shortcuts.push(_item6);
            }
        }
    }
    class GameMapMovementMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.keyMovements = [];
            this.forcedDirection = 0;
            this.actorId = 0;
            this.ID = 6174;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.keyMovements = [];
            this.forcedDirection = 0;
            this.actorId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapMovementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapMovementMessage(input);
        }

        serializeAs_GameMapMovementMessage(ouput) {
            output.writeShort(this.keyMovements.length);
            for (var _i1 = 0; _i1 < this.keyMovements.length; _i1++) {
                if (this.keyMovements[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.keyMovements[_i1] + ") on element 1 (starting at 1) of keyMovements.");
                }
                output.writeShort(this.keyMovements[_i1]);
            }
            output.writeShort(this.forcedDirection);
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
        }

        deserializeAs_GameMapMovementMessage(input) {
            var _val1 = 0;
            var _keyMovementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _keyMovementsLen; _i1++) {
                _val1 = input.readShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of keyMovements.");
                }
                this.keyMovements.push(_val1);
            }
            this.forcedDirection = input.readShort();
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of GameMapMovementMessage.actorId.");
            }
        }
    }
    class GameCautiousMapMovementMessage extends GameMapMovementMessage {
        constructor(_super) {
            super()

            this.ID = 4129;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameCautiousMapMovementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameCautiousMapMovementMessage(input);
        }

        serializeAs_GameCautiousMapMovementMessage(ouput) {
            this.serializeAs_GameMapMovementMessage.call(this, output);
        }

        deserializeAs_GameCautiousMapMovementMessage(input) {
            this.deserializeAs_GameMapMovementMessage.call(this, input);
        }
    }
    class GameMapMovementRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.keyMovements = [];
            this.mapId = 0;
            this.ID = 6639;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.keyMovements = [];
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapMovementRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapMovementRequestMessage(input);
        }

        serializeAs_GameMapMovementRequestMessage(ouput) {
            output.writeShort(this.keyMovements.length);
            for (var _i1 = 0; _i1 < this.keyMovements.length; _i1++) {
                if (this.keyMovements[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.keyMovements[_i1] + ") on element 1 (starting at 1) of keyMovements.");
                }
                output.writeShort(this.keyMovements[_i1]);
            }
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_GameMapMovementRequestMessage(input) {
            var _val1 = 0;
            var _keyMovementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _keyMovementsLen; _i1++) {
                _val1 = input.readShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of keyMovements.");
                }
                this.keyMovements.push(_val1);
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of GameMapMovementRequestMessage.mapId.");
            }
        }
    }
    class GameCautiousMapMovementRequestMessage extends GameMapMovementRequestMessage {
        constructor(_super) {
            super()

            this.ID = 7296;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameCautiousMapMovementRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameCautiousMapMovementRequestMessage(input);
        }

        serializeAs_GameCautiousMapMovementRequestMessage(ouput) {
            this.serializeAs_GameMapMovementRequestMessage.call(this, output);
        }

        deserializeAs_GameCautiousMapMovementRequestMessage(input) {
            this.deserializeAs_GameMapMovementRequestMessage.call(this, input);
        }
    }
    class GameContextCreateErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5580;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextCreateErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextCreateErrorMessage(input);
        }

        serializeAs_GameContextCreateErrorMessage(ouput) {

        }

        deserializeAs_GameContextCreateErrorMessage(input) {

        }
    }
    class GameContextCreateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.context = 1;
            this.ID = 6478;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.context = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextCreateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextCreateMessage(input);
        }

        serializeAs_GameContextCreateMessage(ouput) {
            output.writeByte(this.context);
        }

        deserializeAs_GameContextCreateMessage(input) {
            this.context = input.readByte();
            if (this.context < 0) {
                throw new Error("Forbidden value (" + this.context + ") on element of GameContextCreateMessage.context.");
            }
        }
    }
    class GameContextCreateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1530;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextCreateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextCreateRequestMessage(input);
        }

        serializeAs_GameContextCreateRequestMessage(ouput) {

        }

        deserializeAs_GameContextCreateRequestMessage(input) {

        }
    }
    class GameContextDestroyMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3704;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextDestroyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextDestroyMessage(input);
        }

        serializeAs_GameContextDestroyMessage(ouput) {

        }

        deserializeAs_GameContextDestroyMessage(input) {

        }
    }
    class GameContextKickMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 7588;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextKickMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextKickMessage(input);
        }

        serializeAs_GameContextKickMessage(ouput) {
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameContextKickMessage(input) {
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameContextKickMessage.targetId.");
            }
        }
    }
    class GameContextMoveElementMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.movement = new EntityMovementInformations();
            this.ID = 4094;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.movement = new EntityMovementInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextMoveElementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextMoveElementMessage(input);
        }

        serializeAs_GameContextMoveElementMessage(ouput) {
            this.movement.serializeAs_EntityMovementInformations(output);
        }

        deserializeAs_GameContextMoveElementMessage(input) {
            this.movement = new EntityMovementInformations();
            this.movement.deserialize(input);
        }
    }
    class GameContextMoveMultipleElementsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.movements = [];
            this.ID = 4072;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.movements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextMoveMultipleElementsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextMoveMultipleElementsMessage(input);
        }

        serializeAs_GameContextMoveMultipleElementsMessage(ouput) {
            output.writeShort(this.movements.length);
            for (var _i1 = 0; _i1 < this.movements.length; _i1++) {
                (this.movements[_i1]).serializeAs_EntityMovementInformations(output);
            }
        }

        deserializeAs_GameContextMoveMultipleElementsMessage(input) {
            var _item1 = null;
            var _movementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _movementsLen; _i1++) {
                _item1 = new EntityMovementInformations();
                _item1.deserialize(input);
                this.movements.push(_item1);
            }
        }
    }
    class GameContextQuitMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5896;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextQuitMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextQuitMessage(input);
        }

        serializeAs_GameContextQuitMessage(ouput) {

        }

        deserializeAs_GameContextQuitMessage(input) {

        }
    }
    class GameContextReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.ID = 4992;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextReadyMessage(input);
        }

        serializeAs_GameContextReadyMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_GameContextReadyMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of GameContextReadyMessage.mapId.");
            }
        }
    }
    class GameContextRefreshEntityLookMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.look = new EntityLook();
            this.ID = 7571;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.look = new EntityLook();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextRefreshEntityLookMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextRefreshEntityLookMessage(input);
        }

        serializeAs_GameContextRefreshEntityLookMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_GameContextRefreshEntityLookMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameContextRefreshEntityLookMessage.id.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class GameContextRemoveElementMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 738;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextRemoveElementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextRemoveElementMessage(input);
        }

        serializeAs_GameContextRemoveElementMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
        }

        deserializeAs_GameContextRemoveElementMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of GameContextRemoveElementMessage.id.");
            }
        }
    }
    class GameContextRemoveElementWithEventMessage extends GameContextRemoveElementMessage {
        constructor(_super) {
            super()
            this.elementEventId = 0;
            this.ID = 1879;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elementEventId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextRemoveElementWithEventMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextRemoveElementWithEventMessage(input);
        }

        serializeAs_GameContextRemoveElementWithEventMessage(ouput) {
            this.serializeAs_GameContextRemoveElementMessage.call(this, output);
            if (this.elementEventId < 0) {
                throw new Error("Forbidden value (" + this.elementEventId + ") on element elementEventId.");
            }
            output.writeByte(this.elementEventId);
        }

        deserializeAs_GameContextRemoveElementWithEventMessage(input) {
            this.deserializeAs_GameContextRemoveElementMessage.call(this, input);
            this.elementEventId = input.readByte();
            if (this.elementEventId < 0) {
                throw new Error("Forbidden value (" + this.elementEventId + ") on element of GameContextRemoveElementWithEventMessage.elementEventId.");
            }
        }
    }
    class GameContextRemoveMultipleElementsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.elementsIds = [];
            this.ID = 5186;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elementsIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextRemoveMultipleElementsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextRemoveMultipleElementsMessage(input);
        }

        serializeAs_GameContextRemoveMultipleElementsMessage(ouput) {
            output.writeShort(this.elementsIds.length);
            for (var _i1 = 0; _i1 < this.elementsIds.length; _i1++) {
                if (this.elementsIds[_i1] < -9007199254740992 || this.elementsIds[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.elementsIds[_i1] + ") on element 1 (starting at 1) of elementsIds.");
                }
                output.writeDouble(this.elementsIds[_i1]);
            }
        }

        deserializeAs_GameContextRemoveMultipleElementsMessage(input) {
            var _val1 = NaN;
            var _elementsIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _elementsIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740992 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of elementsIds.");
                }
                this.elementsIds.push(_val1);
            }
        }
    }
    class GameContextRemoveMultipleElementsWithEventsMessage extends GameContextRemoveMultipleElementsMessage {
        constructor(_super) {
            super()
            this.elementEventIds = [];
            this.ID = 9693;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elementEventIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(input);
        }

        serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(ouput) {
            this.serializeAs_GameContextRemoveMultipleElementsMessage.call(this, output);
            output.writeShort(this.elementEventIds.length);
            for (var _i1 = 0; _i1 < this.elementEventIds.length; _i1++) {
                if (this.elementEventIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.elementEventIds[_i1] + ") on element 1 (starting at 1) of elementEventIds.");
                }
                output.writeByte(this.elementEventIds[_i1]);
            }
        }

        deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(input) {
            var _val1 = 0;
            this.deserializeAs_GameContextRemoveMultipleElementsMessage.call(this, input);
            var _elementEventIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _elementEventIdsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of elementEventIds.");
                }
                this.elementEventIds.push(_val1);
            }
        }
    }
    class GameEntitiesDispositionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dispositions = [];
            this.ID = 1704;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dispositions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameEntitiesDispositionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameEntitiesDispositionMessage(input);
        }

        serializeAs_GameEntitiesDispositionMessage(ouput) {
            output.writeShort(this.dispositions.length);
            for (var _i1 = 0; _i1 < this.dispositions.length; _i1++) {
                (this.dispositions[_i1]).serializeAs_IdentifiedEntityDispositionInformations(output);
            }
        }

        deserializeAs_GameEntitiesDispositionMessage(input) {
            var _item1 = null;
            var _dispositionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dispositionsLen; _i1++) {
                _item1 = new IdentifiedEntityDispositionInformations();
                _item1.deserialize(input);
                this.dispositions.push(_item1);
            }
        }
    }
    class GameEntityDispositionErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4091;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameEntityDispositionErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameEntityDispositionErrorMessage(input);
        }

        serializeAs_GameEntityDispositionErrorMessage(ouput) {

        }

        deserializeAs_GameEntityDispositionErrorMessage(input) {

        }
    }
    class GameEntityDispositionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.disposition = new IdentifiedEntityDispositionInformations();
            this.ID = 2138;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.disposition = new IdentifiedEntityDispositionInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameEntityDispositionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameEntityDispositionMessage(input);
        }

        serializeAs_GameEntityDispositionMessage(ouput) {
            this.disposition.serializeAs_IdentifiedEntityDispositionInformations(output);
        }

        deserializeAs_GameEntityDispositionMessage(input) {
            this.disposition = new IdentifiedEntityDispositionInformations();
            this.disposition.deserialize(input);
        }
    }
    class GameMapChangeOrientationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.orientation = new ActorOrientation();
            this.ID = 4931;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.orientation = new ActorOrientation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapChangeOrientationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapChangeOrientationMessage(input);
        }

        serializeAs_GameMapChangeOrientationMessage(ouput) {
            this.orientation.serializeAs_ActorOrientation(output);
        }

        deserializeAs_GameMapChangeOrientationMessage(input) {
            this.orientation = new ActorOrientation();
            this.orientation.deserialize(input);
        }
    }
    class GameMapChangeOrientationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.direction = 1;
            this.ID = 7489;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.direction = 1;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapChangeOrientationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapChangeOrientationRequestMessage(input);
        }

        serializeAs_GameMapChangeOrientationRequestMessage(ouput) {
            output.writeByte(this.direction);
        }

        deserializeAs_GameMapChangeOrientationRequestMessage(input) {
            this.direction = input.readByte();
            if (this.direction < 0) {
                throw new Error("Forbidden value (" + this.direction + ") on element of GameMapChangeOrientationRequestMessage.direction.");
            }
        }
    }
    class GameMapChangeOrientationsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.orientations = [];
            this.ID = 6158;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.orientations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapChangeOrientationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapChangeOrientationsMessage(input);
        }

        serializeAs_GameMapChangeOrientationsMessage(ouput) {
            output.writeShort(this.orientations.length);
            for (var _i1 = 0; _i1 < this.orientations.length; _i1++) {
                (this.orientations[_i1]).serializeAs_ActorOrientation(output);
            }
        }

        deserializeAs_GameMapChangeOrientationsMessage(input) {
            var _item1 = null;
            var _orientationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _orientationsLen; _i1++) {
                _item1 = new ActorOrientation();
                _item1.deserialize(input);
                this.orientations.push(_item1);
            }
        }
    }
    class GameMapMovementCancelMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.ID = 8311;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapMovementCancelMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapMovementCancelMessage(input);
        }

        serializeAs_GameMapMovementCancelMessage(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_GameMapMovementCancelMessage(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameMapMovementCancelMessage.cellId.");
            }
        }
    }
    class GameMapMovementConfirmMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 302;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapMovementConfirmMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapMovementConfirmMessage(input);
        }

        serializeAs_GameMapMovementConfirmMessage(ouput) {

        }

        deserializeAs_GameMapMovementConfirmMessage(input) {

        }
    }
    class GameMapNoMovementMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellX = 0;
            this.cellY = 0;
            this.ID = 9225;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellX = 0;
            this.cellY = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameMapNoMovementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameMapNoMovementMessage(input);
        }

        serializeAs_GameMapNoMovementMessage(ouput) {
            output.writeShort(this.cellX);
            output.writeShort(this.cellY);
        }

        deserializeAs_GameMapNoMovementMessage(input) {
            this.cellX = input.readShort();
            this.cellY = input.readShort();
        }
    }
    class GameRefreshMonsterBoostsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.monsterBoosts = [];
            this.familyBoosts = [];
            this.ID = 385;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.monsterBoosts = [];
            this.familyBoosts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRefreshMonsterBoostsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRefreshMonsterBoostsMessage(input);
        }

        serializeAs_GameRefreshMonsterBoostsMessage(ouput) {
            output.writeShort(this.monsterBoosts.length);
            for (var _i1 = 0; _i1 < this.monsterBoosts.length; _i1++) {
                (this.monsterBoosts[_i1]).serializeAs_MonsterBoosts(output);
            }
            output.writeShort(this.familyBoosts.length);
            for (var _i2 = 0; _i2 < this.familyBoosts.length; _i2++) {
                (this.familyBoosts[_i2]).serializeAs_MonsterBoosts(output);
            }
        }

        deserializeAs_GameRefreshMonsterBoostsMessage(input) {
            var _item1 = null;
            var _item2 = null;
            var _monsterBoostsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _monsterBoostsLen; _i1++) {
                _item1 = new MonsterBoosts();
                _item1.deserialize(input);
                this.monsterBoosts.push(_item1);
            }
            var _familyBoostsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _familyBoostsLen; _i2++) {
                _item2 = new MonsterBoosts();
                _item2.deserialize(input);
                this.familyBoosts.push(_item2);
            }
        }
    }
    class GameDataPaddockObjectAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.paddockItemDescription = new PaddockItem();
            this.ID = 996;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockItemDescription = new PaddockItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameDataPaddockObjectAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameDataPaddockObjectAddMessage(input);
        }

        serializeAs_GameDataPaddockObjectAddMessage(ouput) {
            this.paddockItemDescription.serializeAs_PaddockItem(output);
        }

        deserializeAs_GameDataPaddockObjectAddMessage(input) {
            this.paddockItemDescription = new PaddockItem();
            this.paddockItemDescription.deserialize(input);
        }
    }
    class GameDataPaddockObjectListAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.paddockItemDescription = [];
            this.ID = 2735;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockItemDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameDataPaddockObjectListAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameDataPaddockObjectListAddMessage(input);
        }

        serializeAs_GameDataPaddockObjectListAddMessage(ouput) {
            output.writeShort(this.paddockItemDescription.length);
            for (var _i1 = 0; _i1 < this.paddockItemDescription.length; _i1++) {
                (this.paddockItemDescription[_i1]).serializeAs_PaddockItem(output);
            }
        }

        deserializeAs_GameDataPaddockObjectListAddMessage(input) {
            var _item1 = null;
            var _paddockItemDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _paddockItemDescriptionLen; _i1++) {
                _item1 = new PaddockItem();
                _item1.deserialize(input);
                this.paddockItemDescription.push(_item1);
            }
        }
    }
    class GameDataPaddockObjectRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.ID = 2233;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameDataPaddockObjectRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameDataPaddockObjectRemoveMessage(input);
        }

        serializeAs_GameDataPaddockObjectRemoveMessage(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_GameDataPaddockObjectRemoveMessage(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of GameDataPaddockObjectRemoveMessage.cellId.");
            }
        }
    }
    class MountDataErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 7915;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountDataErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountDataErrorMessage(input);
        }

        serializeAs_MountDataErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_MountDataErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of MountDataErrorMessage.reason.");
            }
        }
    }
    class MountDataMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountData = new MountClientData();
            this.ID = 7683;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountData = new MountClientData();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountDataMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountDataMessage(input);
        }

        serializeAs_MountDataMessage(ouput) {
            this.mountData.serializeAs_MountClientData(output);
        }

        deserializeAs_MountDataMessage(input) {
            this.mountData = new MountClientData();
            this.mountData.deserialize(input);
        }
    }
    class MountEmoteIconUsedOkMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountId = 0;
            this.reactionType = 0;
            this.ID = 4678;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountId = 0;
            this.reactionType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountEmoteIconUsedOkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountEmoteIconUsedOkMessage(input);
        }

        serializeAs_MountEmoteIconUsedOkMessage(ouput) {
            output.writeVarInt(this.mountId);
            if (this.reactionType < 0) {
                throw new Error("Forbidden value (" + this.reactionType + ") on element reactionType.");
            }
            output.writeByte(this.reactionType);
        }

        deserializeAs_MountEmoteIconUsedOkMessage(input) {
            this.mountId = input.readVarInt();
            this.reactionType = input.readByte();
            if (this.reactionType < 0) {
                throw new Error("Forbidden value (" + this.reactionType + ") on element of MountEmoteIconUsedOkMessage.reactionType.");
            }
        }
    }
    class MountEquipedErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.errorType = 0;
            this.ID = 3799;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.errorType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountEquipedErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountEquipedErrorMessage(input);
        }

        serializeAs_MountEquipedErrorMessage(ouput) {
            output.writeByte(this.errorType);
        }

        deserializeAs_MountEquipedErrorMessage(input) {
            this.errorType = input.readByte();
            if (this.errorType < 0) {
                throw new Error("Forbidden value (" + this.errorType + ") on element of MountEquipedErrorMessage.errorType.");
            }
        }
    }
    class MountFeedRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountUid = 0;
            this.mountLocation = 0;
            this.mountFoodUid = 0;
            this.quantity = 0;
            this.ID = 9146;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountUid = 0;
            this.mountLocation = 0;
            this.mountFoodUid = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountFeedRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountFeedRequestMessage(input);
        }

        serializeAs_MountFeedRequestMessage(ouput) {
            if (this.mountUid < 0) {
                throw new Error("Forbidden value (" + this.mountUid + ") on element mountUid.");
            }
            output.writeVarInt(this.mountUid);
            output.writeByte(this.mountLocation);
            if (this.mountFoodUid < 0) {
                throw new Error("Forbidden value (" + this.mountFoodUid + ") on element mountFoodUid.");
            }
            output.writeVarInt(this.mountFoodUid);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_MountFeedRequestMessage(input) {
            this.mountUid = input.readVarUhInt();
            if (this.mountUid < 0) {
                throw new Error("Forbidden value (" + this.mountUid + ") on element of MountFeedRequestMessage.mountUid.");
            }
            this.mountLocation = input.readByte();
            this.mountFoodUid = input.readVarUhInt();
            if (this.mountFoodUid < 0) {
                throw new Error("Forbidden value (" + this.mountFoodUid + ") on element of MountFeedRequestMessage.mountFoodUid.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of MountFeedRequestMessage.quantity.");
            }
        }
    }
    class MountHarnessColorsUpdateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.useHarnessColors = false;
            this.ID = 9721;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.useHarnessColors = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountHarnessColorsUpdateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountHarnessColorsUpdateRequestMessage(input);
        }

        serializeAs_MountHarnessColorsUpdateRequestMessage(ouput) {
            output.writeBoolean(this.useHarnessColors);
        }

        deserializeAs_MountHarnessColorsUpdateRequestMessage(input) {
            this.useHarnessColors = input.readBoolean();
        }
    }
    class MountHarnessDissociateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7514;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountHarnessDissociateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountHarnessDissociateRequestMessage(input);
        }

        serializeAs_MountHarnessDissociateRequestMessage(ouput) {

        }

        deserializeAs_MountHarnessDissociateRequestMessage(input) {

        }
    }
    class MountInformationInPaddockRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapRideId = 0;
            this.ID = 8244;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapRideId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountInformationInPaddockRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountInformationInPaddockRequestMessage(input);
        }

        serializeAs_MountInformationInPaddockRequestMessage(ouput) {
            output.writeVarInt(this.mapRideId);
        }

        deserializeAs_MountInformationInPaddockRequestMessage(input) {
            this.mapRideId = input.readVarInt();
        }
    }
    class MountInformationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.time = 0;
            this.ID = 1017;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.time = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountInformationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountInformationRequestMessage(input);
        }

        serializeAs_MountInformationRequestMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            if (this.time < -9007199254740992 || this.time > 9007199254740992) {
                throw new Error("Forbidden value (" + this.time + ") on element time.");
            }
            output.writeDouble(this.time);
        }

        deserializeAs_MountInformationRequestMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of MountInformationRequestMessage.id.");
            }
            this.time = input.readDouble();
            if (this.time < -9007199254740992 || this.time > 9007199254740992) {
                throw new Error("Forbidden value (" + this.time + ") on element of MountInformationRequestMessage.time.");
            }
        }
    }
    class MountReleasedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountId = 0;
            this.ID = 6651;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountReleasedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountReleasedMessage(input);
        }

        serializeAs_MountReleasedMessage(ouput) {
            output.writeVarInt(this.mountId);
        }

        deserializeAs_MountReleasedMessage(input) {
            this.mountId = input.readVarInt();
        }
    }
    class MountReleaseRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4873;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountReleaseRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountReleaseRequestMessage(input);
        }

        serializeAs_MountReleaseRequestMessage(ouput) {

        }

        deserializeAs_MountReleaseRequestMessage(input) {

        }
    }
    class MountRenamedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountId = 0;
            this.name = "";
            this.ID = 2577;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountId = 0;
            this.name = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountRenamedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountRenamedMessage(input);
        }

        serializeAs_MountRenamedMessage(ouput) {
            output.writeVarInt(this.mountId);
            output.writeUTF(this.name);
        }

        deserializeAs_MountRenamedMessage(input) {
            this.mountId = input.readVarInt();
            this.name = input.readUTF();
        }
    }
    class MountRenameRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.mountId = 0;
            this.ID = 5809;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.mountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountRenameRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountRenameRequestMessage(input);
        }

        serializeAs_MountRenameRequestMessage(ouput) {
            output.writeUTF(this.name);
            output.writeVarInt(this.mountId);
        }

        deserializeAs_MountRenameRequestMessage(input) {
            this.name = input.readUTF();
            this.mountId = input.readVarInt();
        }
    }
    class MountRidingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isRiding = false;
            this.isAutopilot = false;
            this.ID = 328;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isRiding = false;
            this.isAutopilot = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountRidingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountRidingMessage(input);
        }

        serializeAs_MountRidingMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.isRiding);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isAutopilot);
            output.writeByte(_box0);
        }

        deserializeAs_MountRidingMessage(input) {
            var _box0 = input.readByte();
            this.isRiding = BooleanByteWrapper.getFlag(_box0, 0);
            this.isAutopilot = BooleanByteWrapper.getFlag(_box0, 1);
        }
    }
    class MountSetMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountData = new MountClientData();
            this.ID = 7145;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountData = new MountClientData();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountSetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountSetMessage(input);
        }

        serializeAs_MountSetMessage(ouput) {
            this.mountData.serializeAs_MountClientData(output);
        }

        deserializeAs_MountSetMessage(input) {
            this.mountData = new MountClientData();
            this.mountData.deserialize(input);
        }
    }
    class MountSetXpRatioRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.xpRatio = 0;
            this.ID = 3546;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.xpRatio = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountSetXpRatioRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountSetXpRatioRequestMessage(input);
        }

        serializeAs_MountSetXpRatioRequestMessage(ouput) {
            if (this.xpRatio < 0) {
                throw new Error("Forbidden value (" + this.xpRatio + ") on element xpRatio.");
            }
            output.writeByte(this.xpRatio);
        }

        deserializeAs_MountSetXpRatioRequestMessage(input) {
            this.xpRatio = input.readByte();
            if (this.xpRatio < 0) {
                throw new Error("Forbidden value (" + this.xpRatio + ") on element of MountSetXpRatioRequestMessage.xpRatio.");
            }
        }
    }
    class MountSterilizedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountId = 0;
            this.ID = 5176;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountSterilizedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountSterilizedMessage(input);
        }

        serializeAs_MountSterilizedMessage(ouput) {
            output.writeVarInt(this.mountId);
        }

        deserializeAs_MountSterilizedMessage(input) {
            this.mountId = input.readVarInt();
        }
    }
    class MountSterilizeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3111;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountSterilizeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountSterilizeRequestMessage(input);
        }

        serializeAs_MountSterilizeRequestMessage(ouput) {

        }

        deserializeAs_MountSterilizeRequestMessage(input) {

        }
    }
    class MountToggleRidingRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5154;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountToggleRidingRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountToggleRidingRequestMessage(input);
        }

        serializeAs_MountToggleRidingRequestMessage(ouput) {

        }

        deserializeAs_MountToggleRidingRequestMessage(input) {

        }
    }
    class MountUnSetMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6291;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountUnSetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountUnSetMessage(input);
        }

        serializeAs_MountUnSetMessage(ouput) {

        }

        deserializeAs_MountUnSetMessage(input) {

        }
    }
    class MountXpRatioMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ratio = 0;
            this.ID = 2899;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ratio = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MountXpRatioMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MountXpRatioMessage(input);
        }

        serializeAs_MountXpRatioMessage(ouput) {
            if (this.ratio < 0) {
                throw new Error("Forbidden value (" + this.ratio + ") on element ratio.");
            }
            output.writeByte(this.ratio);
        }

        deserializeAs_MountXpRatioMessage(input) {
            this.ratio = input.readByte();
            if (this.ratio < 0) {
                throw new Error("Forbidden value (" + this.ratio + ") on element of MountXpRatioMessage.ratio.");
            }
        }
    }
    class PaddockBuyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.proposedPrice = 0;
            this.ID = 6206;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.proposedPrice = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockBuyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockBuyRequestMessage(input);
        }

        serializeAs_PaddockBuyRequestMessage(ouput) {
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
            }
            output.writeVarLong(this.proposedPrice);
        }

        deserializeAs_PaddockBuyRequestMessage(input) {
            this.proposedPrice = input.readVarUhLong();
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element of PaddockBuyRequestMessage.proposedPrice.");
            }
        }
    }
    class PaddockBuyResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.paddockId = 0;
            this.bought = false;
            this.realPrice = 0;
            this.ID = 765;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockId = 0;
            this.bought = false;
            this.realPrice = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockBuyResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockBuyResultMessage(input);
        }

        serializeAs_PaddockBuyResultMessage(ouput) {
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
            output.writeBoolean(this.bought);
            if (this.realPrice < 0 || this.realPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
            }
            output.writeVarLong(this.realPrice);
        }

        deserializeAs_PaddockBuyResultMessage(input) {
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of PaddockBuyResultMessage.paddockId.");
            }
            this.bought = input.readBoolean();
            this.realPrice = input.readVarUhLong();
            if (this.realPrice < 0 || this.realPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element of PaddockBuyResultMessage.realPrice.");
            }
        }
    }
    class PaddockMoveItemRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.oldCellId = 0;
            this.newCellId = 0;
            this.ID = 2761;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.oldCellId = 0;
            this.newCellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockMoveItemRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockMoveItemRequestMessage(input);
        }

        serializeAs_PaddockMoveItemRequestMessage(ouput) {
            if (this.oldCellId < 0 || this.oldCellId > 559) {
                throw new Error("Forbidden value (" + this.oldCellId + ") on element oldCellId.");
            }
            output.writeVarShort(this.oldCellId);
            if (this.newCellId < 0 || this.newCellId > 559) {
                throw new Error("Forbidden value (" + this.newCellId + ") on element newCellId.");
            }
            output.writeVarShort(this.newCellId);
        }

        deserializeAs_PaddockMoveItemRequestMessage(input) {
            this.oldCellId = input.readVarUhShort();
            if (this.oldCellId < 0 || this.oldCellId > 559) {
                throw new Error("Forbidden value (" + this.oldCellId + ") on element of PaddockMoveItemRequestMessage.oldCellId.");
            }
            this.newCellId = input.readVarUhShort();
            if (this.newCellId < 0 || this.newCellId > 559) {
                throw new Error("Forbidden value (" + this.newCellId + ") on element of PaddockMoveItemRequestMessage.newCellId.");
            }
        }
    }
    class PaddockRemoveItemRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.ID = 639;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockRemoveItemRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockRemoveItemRequestMessage(input);
        }

        serializeAs_PaddockRemoveItemRequestMessage(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_PaddockRemoveItemRequestMessage(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of PaddockRemoveItemRequestMessage.cellId.");
            }
        }
    }
    class PaddockSellRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.price = 0;
            this.forSale = false;
            this.ID = 1043;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.price = 0;
            this.forSale = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockSellRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockSellRequestMessage(input);
        }

        serializeAs_PaddockSellRequestMessage(ouput) {
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
            output.writeBoolean(this.forSale);
        }

        deserializeAs_PaddockSellRequestMessage(input) {
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockSellRequestMessage.price.");
            }
            this.forSale = input.readBoolean();
        }
    }
    class NotificationByServerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.parameters = [];
            this.forceOpen = false;
            this.ID = 8221;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.parameters = [];
            this.forceOpen = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NotificationByServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NotificationByServerMessage(input);
        }

        serializeAs_NotificationByServerMessage(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarShort(this.id);
            output.writeShort(this.parameters.length);
            for (var _i2 = 0; _i2 < this.parameters.length; _i2++) {
                output.writeUTF(this.parameters[_i2]);
            }
            output.writeBoolean(this.forceOpen);
        }

        deserializeAs_NotificationByServerMessage(input) {
            var _val2 = null;
            this.id = input.readVarUhShort();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of NotificationByServerMessage.id.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _parametersLen; _i2++) {
                _val2 = input.readUTF();
                this.parameters.push(_val2);
            }
            this.forceOpen = input.readBoolean();
        }
    }
    class NotificationListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.flags = [];
            this.ID = 6597;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.flags = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NotificationListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NotificationListMessage(input);
        }

        serializeAs_NotificationListMessage(ouput) {
            output.writeShort(this.flags.length);
            for (var _i1 = 0; _i1 < this.flags.length; _i1++) {
                output.writeVarInt(this.flags[_i1]);
            }
        }

        deserializeAs_NotificationListMessage(input) {
            var _val1 = 0;
            var _flagsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _flagsLen; _i1++) {
                _val1 = input.readVarInt();
                this.flags.push(_val1);
            }
        }
    }
    class NotificationResetMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9791;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NotificationResetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NotificationResetMessage(input);
        }

        serializeAs_NotificationResetMessage(ouput) {

        }

        deserializeAs_NotificationResetMessage(input) {

        }
    }
    class NotificationUpdateFlagMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.index = 0;
            this.ID = 6869;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.index = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NotificationUpdateFlagMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NotificationUpdateFlagMessage(input);
        }

        serializeAs_NotificationUpdateFlagMessage(ouput) {
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeVarShort(this.index);
        }

        deserializeAs_NotificationUpdateFlagMessage(input) {
            this.index = input.readVarUhShort();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of NotificationUpdateFlagMessage.index.");
            }
        }
    }
    class AlignmentWarEffortProgressionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.effortProgressions = [];
            this.ID = 8197;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.effortProgressions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlignmentWarEffortProgressionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentWarEffortProgressionMessage(input);
        }

        serializeAs_AlignmentWarEffortProgressionMessage(ouput) {
            output.writeShort(this.effortProgressions.length);
            for (var _i1 = 0; _i1 < this.effortProgressions.length; _i1++) {
                (this.effortProgressions[_i1]).serializeAs_AlignmentWarEffortInformation(output);
            }
        }

        deserializeAs_AlignmentWarEffortProgressionMessage(input) {
            var _item1 = null;
            var _effortProgressionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _effortProgressionsLen; _i1++) {
                _item1 = new AlignmentWarEffortInformation();
                _item1.deserialize(input);
                this.effortProgressions.push(_item1);
            }
        }
    }
    class AlignmentWarEffortProgressionRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9210;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlignmentWarEffortProgressionRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentWarEffortProgressionRequestMessage(input);
        }

        serializeAs_AlignmentWarEffortProgressionRequestMessage(ouput) {

        }

        deserializeAs_AlignmentWarEffortProgressionRequestMessage(input) {

        }
    }
    class AnomalyOpenedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subAreaId = 0;
            this.ID = 3377;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AnomalyOpenedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AnomalyOpenedMessage(input);
        }

        serializeAs_AnomalyOpenedMessage(ouput) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
        }

        deserializeAs_AnomalyOpenedMessage(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AnomalyOpenedMessage.subAreaId.");
            }
        }
    }
    class AnomalyStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subAreaId = 0;
            this.open = false;
            this.closingTime = 0;
            this.ID = 7651;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaId = 0;
            this.open = false;
            this.closingTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AnomalyStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AnomalyStateMessage(input);
        }

        serializeAs_AnomalyStateMessage(ouput) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeBoolean(this.open);
            if (this.closingTime < 0 || this.closingTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element closingTime.");
            }
            output.writeVarLong(this.closingTime);
        }

        deserializeAs_AnomalyStateMessage(input) {
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of AnomalyStateMessage.subAreaId.");
            }
            this.open = input.readBoolean();
            this.closingTime = input.readVarUhLong();
            if (this.closingTime < 0 || this.closingTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element of AnomalyStateMessage.closingTime.");
            }
        }
    }
    class MapComplementaryInformationsDataMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subAreaId = 0;
            this.mapId = 0;
            this.houses = [];
            this.actors = [];
            this.interactiveElements = [];
            this.statedElements = [];
            this.obstacles = [];
            this.fights = [];
            this.hasAggressiveMonsters = false;
            this.fightStartPositions = new FightStartingPositions();
            this.ID = 695;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaId = 0;
            this.mapId = 0;
            this.houses = [];
            this.actors = [];
            this.interactiveElements = [];
            this.statedElements = [];
            this.obstacles = [];
            this.fights = [];
            this.hasAggressiveMonsters = false;
            this.fightStartPositions = new FightStartingPositions();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapComplementaryInformationsDataMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapComplementaryInformationsDataMessage(input);
        }

        serializeAs_MapComplementaryInformationsDataMessage(ouput) {
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.houses.length);
            for (var _i3 = 0; _i3 < this.houses.length; _i3++) {
                output.writeShort((this.houses[_i3]).getTypeId());
                (this.houses[_i3]).serialize(output);
            }
            output.writeShort(this.actors.length);
            for (var _i4 = 0; _i4 < this.actors.length; _i4++) {
                output.writeShort((this.actors[_i4]).getTypeId());
                (this.actors[_i4]).serialize(output);
            }
            output.writeShort(this.interactiveElements.length);
            for (var _i5 = 0; _i5 < this.interactiveElements.length; _i5++) {
                output.writeShort((this.interactiveElements[_i5]).getTypeId());
                (this.interactiveElements[_i5]).serialize(output);
            }
            output.writeShort(this.statedElements.length);
            for (var _i6 = 0; _i6 < this.statedElements.length; _i6++) {
                (this.statedElements[_i6]).serializeAs_StatedElement(output);
            }
            output.writeShort(this.obstacles.length);
            for (var _i7 = 0; _i7 < this.obstacles.length; _i7++) {
                (this.obstacles[_i7]).serializeAs_MapObstacle(output);
            }
            output.writeShort(this.fights.length);
            for (var _i8 = 0; _i8 < this.fights.length; _i8++) {
                (this.fights[_i8]).serializeAs_FightCommonInformations(output);
            }
            output.writeBoolean(this.hasAggressiveMonsters);
            this.fightStartPositions.serializeAs_FightStartingPositions(output);
        }

        deserializeAs_MapComplementaryInformationsDataMessage(input) {
            var _id3 = 0;
            var _item3 = null;
            var _id4 = 0;
            var _item4 = null;
            var _id5 = 0;
            var _item5 = null;
            var _item6 = null;
            var _item7 = null;
            var _item8 = null;
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of MapComplementaryInformationsDataMessage.subAreaId.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapComplementaryInformationsDataMessage.mapId.");
            }
            var _housesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _housesLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(HouseInformations, _id3);
                _item3.deserialize(input);
                this.houses.push(_item3);
            }
            var _actorsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _actorsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _id4);
                _item4.deserialize(input);
                this.actors.push(_item4);
            }
            var _interactiveElementsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _interactiveElementsLen; _i5++) {
                _id5 = input.readUnsignedShort();
                _item5 = ProtocolTypeManager.getInstance(InteractiveElement, _id5);
                _item5.deserialize(input);
                this.interactiveElements.push(_item5);
            }
            var _statedElementsLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _statedElementsLen; _i6++) {
                _item6 = new StatedElement();
                _item6.deserialize(input);
                this.statedElements.push(_item6);
            }
            var _obstaclesLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _obstaclesLen; _i7++) {
                _item7 = new MapObstacle();
                _item7.deserialize(input);
                this.obstacles.push(_item7);
            }
            var _fightsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _fightsLen; _i8++) {
                _item8 = new FightCommonInformations();
                _item8.deserialize(input);
                this.fights.push(_item8);
            }
            this.hasAggressiveMonsters = input.readBoolean();
            this.fightStartPositions = new FightStartingPositions();
            this.fightStartPositions.deserialize(input);
        }
    }
    class MapComplementaryInformationsAnomalyMessage extends MapComplementaryInformationsDataMessage {
        constructor(_super) {
            super()
            this.level = 0;
            this.closingTime = 0;
            this.ID = 52;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.level = 0;
            this.closingTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapComplementaryInformationsAnomalyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapComplementaryInformationsAnomalyMessage(input);
        }

        serializeAs_MapComplementaryInformationsAnomalyMessage(ouput) {
            this.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeVarShort(this.level);
            if (this.closingTime < 0 || this.closingTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element closingTime.");
            }
            output.writeVarLong(this.closingTime);
        }

        deserializeAs_MapComplementaryInformationsAnomalyMessage(input) {
            this.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.level = input.readVarUhShort();
            if (this.level < 0) {
                throw new Error("Forbidden value (" + this.level + ") on element of MapComplementaryInformationsAnomalyMessage.level.");
            }
            this.closingTime = input.readVarUhLong();
            if (this.closingTime < 0 || this.closingTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.closingTime + ") on element of MapComplementaryInformationsAnomalyMessage.closingTime.");
            }
        }
    }
    class AnomalySubareaInformationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5036;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AnomalySubareaInformationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AnomalySubareaInformationRequestMessage(input);
        }

        serializeAs_AnomalySubareaInformationRequestMessage(ouput) {

        }

        deserializeAs_AnomalySubareaInformationRequestMessage(input) {

        }
    }
    class AnomalySubareaInformationResponseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subareas = [];
            this.ID = 9094;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subareas = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AnomalySubareaInformationResponseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AnomalySubareaInformationResponseMessage(input);
        }

        serializeAs_AnomalySubareaInformationResponseMessage(ouput) {
            output.writeShort(this.subareas.length);
            for (var _i1 = 0; _i1 < this.subareas.length; _i1++) {
                (this.subareas[_i1]).serializeAs_AnomalySubareaInformation(output);
            }
        }

        deserializeAs_AnomalySubareaInformationResponseMessage(input) {
            var _item1 = null;
            var _subareasLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _subareasLen; _i1++) {
                _item1 = new AnomalySubareaInformation();
                _item1.deserialize(input);
                this.subareas.push(_item1);
            }
        }
    }
    class BreachBranchesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.branches = [];
            this.ID = 8724;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.branches = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachBranchesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachBranchesMessage(input);
        }

        serializeAs_BreachBranchesMessage(ouput) {
            output.writeShort(this.branches.length);
            for (var _i1 = 0; _i1 < this.branches.length; _i1++) {
                output.writeShort((this.branches[_i1]).getTypeId());
                (this.branches[_i1]).serialize(output);
            }
        }

        deserializeAs_BreachBranchesMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _branchesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _branchesLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(ExtendedBreachBranch, _id1);
                _item1.deserialize(input);
                this.branches.push(_item1);
            }
        }
    }
    class BreachBonusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.bonus = new ObjectEffectInteger();
            this.ID = 4966;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bonus = new ObjectEffectInteger();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachBonusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachBonusMessage(input);
        }

        serializeAs_BreachBonusMessage(ouput) {
            this.bonus.serializeAs_ObjectEffectInteger(output);
        }

        deserializeAs_BreachBonusMessage(input) {
            this.bonus = new ObjectEffectInteger();
            this.bonus.deserialize(input);
        }
    }
    class BreachBudgetMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.bugdet = 0;
            this.ID = 7779;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bugdet = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachBudgetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachBudgetMessage(input);
        }

        serializeAs_BreachBudgetMessage(ouput) {
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element bugdet.");
            }
            output.writeVarInt(this.bugdet);
        }

        deserializeAs_BreachBudgetMessage(input) {
            this.bugdet = input.readVarUhInt();
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element of BreachBudgetMessage.bugdet.");
            }
        }
    }
    class BreachCharactersMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characters = [];
            this.ID = 2322;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachCharactersMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachCharactersMessage(input);
        }

        serializeAs_BreachCharactersMessage(ouput) {
            output.writeShort(this.characters.length);
            for (var _i1 = 0; _i1 < this.characters.length; _i1++) {
                if (this.characters[_i1] < 0 || this.characters[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.characters[_i1] + ") on element 1 (starting at 1) of characters.");
                }
                output.writeVarLong(this.characters[_i1]);
            }
        }

        deserializeAs_BreachCharactersMessage(input) {
            var _val1 = NaN;
            var _charactersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _charactersLen; _i1++) {
                _val1 = input.readVarUhLong();
                if (_val1 < 0 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of characters.");
                }
                this.characters.push(_val1);
            }
        }
    }
    class BreachEnterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.owner = 0;
            this.ID = 2338;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.owner = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachEnterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachEnterMessage(input);
        }

        serializeAs_BreachEnterMessage(ouput) {
            if (this.owner < 0 || this.owner > 9007199254740992) {
                throw new Error("Forbidden value (" + this.owner + ") on element owner.");
            }
            output.writeVarLong(this.owner);
        }

        deserializeAs_BreachEnterMessage(input) {
            this.owner = input.readVarUhLong();
            if (this.owner < 0 || this.owner > 9007199254740992) {
                throw new Error("Forbidden value (" + this.owner + ") on element of BreachEnterMessage.owner.");
            }
        }
    }
    class BreachExitRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7787;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachExitRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachExitRequestMessage(input);
        }

        serializeAs_BreachExitRequestMessage(ouput) {

        }

        deserializeAs_BreachExitRequestMessage(input) {

        }
    }
    class BreachExitResponseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.exited = false;
            this.ID = 8365;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.exited = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachExitResponseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachExitResponseMessage(input);
        }

        serializeAs_BreachExitResponseMessage(ouput) {
            output.writeBoolean(this.exited);
        }

        deserializeAs_BreachExitResponseMessage(input) {
            this.exited = input.readBoolean();
        }
    }
    class BreachRoomLockedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3579;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachRoomLockedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachRoomLockedMessage(input);
        }

        serializeAs_BreachRoomLockedMessage(ouput) {

        }

        deserializeAs_BreachRoomLockedMessage(input) {

        }
    }
    class BreachRoomUnlockRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.roomId = 0;
            this.ID = 7363;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.roomId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachRoomUnlockRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachRoomUnlockRequestMessage(input);
        }

        serializeAs_BreachRoomUnlockRequestMessage(ouput) {
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
        }

        deserializeAs_BreachRoomUnlockRequestMessage(input) {
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of BreachRoomUnlockRequestMessage.roomId.");
            }
        }
    }
    class BreachRoomUnlockResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.roomId = 0;
            this.result = 0;
            this.ID = 8037;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.roomId = 0;
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachRoomUnlockResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachRoomUnlockResultMessage(input);
        }

        serializeAs_BreachRoomUnlockResultMessage(ouput) {
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
            output.writeByte(this.result);
        }

        deserializeAs_BreachRoomUnlockResultMessage(input) {
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of BreachRoomUnlockResultMessage.roomId.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of BreachRoomUnlockResultMessage.result.");
            }
        }
    }
    class BreachSavedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.saved = false;
            this.ID = 5933;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.saved = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachSavedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachSavedMessage(input);
        }

        serializeAs_BreachSavedMessage(ouput) {
            output.writeBoolean(this.saved);
        }

        deserializeAs_BreachSavedMessage(input) {
            this.saved = input.readBoolean();
        }
    }
    class BreachStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.owner = new CharacterMinimalInformations();
            this.bonuses = [];
            this.bugdet = 0;
            this.saved = false;
            this.ID = 7262;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.owner = new CharacterMinimalInformations();
            this.bonuses = [];
            this.bugdet = 0;
            this.saved = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachStateMessage(input);
        }

        serializeAs_BreachStateMessage(ouput) {
            this.owner.serializeAs_CharacterMinimalInformations(output);
            output.writeShort(this.bonuses.length);
            for (var _i2 = 0; _i2 < this.bonuses.length; _i2++) {
                (this.bonuses[_i2]).serializeAs_ObjectEffectInteger(output);
            }
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element bugdet.");
            }
            output.writeVarInt(this.bugdet);
            output.writeBoolean(this.saved);
        }

        deserializeAs_BreachStateMessage(input) {
            var _item2 = null;
            this.owner = new CharacterMinimalInformations();
            this.owner.deserialize(input);
            var _bonusesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _bonusesLen; _i2++) {
                _item2 = new ObjectEffectInteger();
                _item2.deserialize(input);
                this.bonuses.push(_item2);
            }
            this.bugdet = input.readVarUhInt();
            if (this.bugdet < 0) {
                throw new Error("Forbidden value (" + this.bugdet + ") on element of BreachStateMessage.bugdet.");
            }
            this.saved = input.readBoolean();
        }
    }
    class BreachTeleportRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7242;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachTeleportRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachTeleportRequestMessage(input);
        }

        serializeAs_BreachTeleportRequestMessage(ouput) {

        }

        deserializeAs_BreachTeleportRequestMessage(input) {

        }
    }
    class BreachTeleportResponseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.teleported = false;
            this.ID = 4007;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.teleported = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachTeleportResponseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachTeleportResponseMessage(input);
        }

        serializeAs_BreachTeleportResponseMessage(ouput) {
            output.writeBoolean(this.teleported);
        }

        deserializeAs_BreachTeleportResponseMessage(input) {
            this.teleported = input.readBoolean();
        }
    }
    class MapComplementaryInformationsBreachMessage extends MapComplementaryInformationsDataMessage {
        constructor(_super) {
            super()
            this.floor = 0;
            this.room = 0;
            this.infinityMode = 0;
            this.branches = [];
            this.ID = 9740;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.floor = 0;
            this.room = 0;
            this.infinityMode = 0;
            this.branches = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapComplementaryInformationsBreachMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapComplementaryInformationsBreachMessage(input);
        }

        serializeAs_MapComplementaryInformationsBreachMessage(ouput) {
            this.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element floor.");
            }
            output.writeVarInt(this.floor);
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element room.");
            }
            output.writeByte(this.room);
            if (this.infinityMode < 0) {
                throw new Error("Forbidden value (" + this.infinityMode + ") on element infinityMode.");
            }
            output.writeShort(this.infinityMode);
            output.writeShort(this.branches.length);
            for (var _i4 = 0; _i4 < this.branches.length; _i4++) {
                output.writeShort((this.branches[_i4]).getTypeId());
                (this.branches[_i4]).serialize(output);
            }
        }

        deserializeAs_MapComplementaryInformationsBreachMessage(input) {
            var _id4 = 0;
            var _item4 = null;
            this.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.floor = input.readVarUhInt();
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element of MapComplementaryInformationsBreachMessage.floor.");
            }
            this.room = input.readByte();
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element of MapComplementaryInformationsBreachMessage.room.");
            }
            this.infinityMode = input.readShort();
            if (this.infinityMode < 0) {
                throw new Error("Forbidden value (" + this.infinityMode + ") on element of MapComplementaryInformationsBreachMessage.infinityMode.");
            }
            var _branchesLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _branchesLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(BreachBranch, _id4);
                _item4.deserialize(input);
                this.branches.push(_item4);
            }
        }
    }
    class BreachInvitationAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.ID = 40;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachInvitationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachInvitationAnswerMessage(input);
        }

        serializeAs_BreachInvitationAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
        }

        deserializeAs_BreachInvitationAnswerMessage(input) {
            this.accept = input.readBoolean();
        }
    }
    class BreachInvitationCloseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.host = new CharacterMinimalInformations();
            this.ID = 5347;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.host = new CharacterMinimalInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachInvitationCloseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachInvitationCloseMessage(input);
        }

        serializeAs_BreachInvitationCloseMessage(ouput) {
            this.host.serializeAs_CharacterMinimalInformations(output);
        }

        deserializeAs_BreachInvitationCloseMessage(input) {
            this.host = new CharacterMinimalInformations();
            this.host.deserialize(input);
        }
    }
    class BreachInvitationOfferMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.host = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
            this.ID = 9853;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.host = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachInvitationOfferMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachInvitationOfferMessage(input);
        }

        serializeAs_BreachInvitationOfferMessage(ouput) {
            this.host.serializeAs_CharacterMinimalInformations(output);
            if (this.timeLeftBeforeCancel < 0) {
                throw new Error("Forbidden value (" + this.timeLeftBeforeCancel + ") on element timeLeftBeforeCancel.");
            }
            output.writeVarInt(this.timeLeftBeforeCancel);
        }

        deserializeAs_BreachInvitationOfferMessage(input) {
            this.host = new CharacterMinimalInformations();
            this.host.deserialize(input);
            this.timeLeftBeforeCancel = input.readVarUhInt();
            if (this.timeLeftBeforeCancel < 0) {
                throw new Error("Forbidden value (" + this.timeLeftBeforeCancel + ") on element of BreachInvitationOfferMessage.timeLeftBeforeCancel.");
            }
        }
    }
    class BreachInvitationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guests = [];
            this.ID = 1657;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guests = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachInvitationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachInvitationRequestMessage(input);
        }

        serializeAs_BreachInvitationRequestMessage(ouput) {
            output.writeShort(this.guests.length);
            for (var _i1 = 0; _i1 < this.guests.length; _i1++) {
                if (this.guests[_i1] < 0 || this.guests[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.guests[_i1] + ") on element 1 (starting at 1) of guests.");
                }
                output.writeVarLong(this.guests[_i1]);
            }
        }

        deserializeAs_BreachInvitationRequestMessage(input) {
            var _val1 = NaN;
            var _guestsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _guestsLen; _i1++) {
                _val1 = input.readVarUhLong();
                if (_val1 < 0 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of guests.");
                }
                this.guests.push(_val1);
            }
        }
    }
    class BreachInvitationResponseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guest = new CharacterMinimalInformations();
            this.accept = false;
            this.ID = 9038;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guest = new CharacterMinimalInformations();
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachInvitationResponseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachInvitationResponseMessage(input);
        }

        serializeAs_BreachInvitationResponseMessage(ouput) {
            this.guest.serializeAs_CharacterMinimalInformations(output);
            output.writeBoolean(this.accept);
        }

        deserializeAs_BreachInvitationResponseMessage(input) {
            this.guest = new CharacterMinimalInformations();
            this.guest.deserialize(input);
            this.accept = input.readBoolean();
        }
    }
    class BreachKickRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = 0;
            this.ID = 7729;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachKickRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachKickRequestMessage(input);
        }

        serializeAs_BreachKickRequestMessage(ouput) {
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
        }

        deserializeAs_BreachKickRequestMessage(input) {
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element of BreachKickRequestMessage.target.");
            }
        }
    }
    class BreachKickResponseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = new CharacterMinimalInformations();
            this.kicked = false;
            this.ID = 8683;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = new CharacterMinimalInformations();
            this.kicked = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachKickResponseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachKickResponseMessage(input);
        }

        serializeAs_BreachKickResponseMessage(ouput) {
            this.target.serializeAs_CharacterMinimalInformations(output);
            output.writeBoolean(this.kicked);
        }

        deserializeAs_BreachKickResponseMessage(input) {
            this.target = new CharacterMinimalInformations();
            this.target.deserialize(input);
            this.kicked = input.readBoolean();
        }
    }
    class BreachRewardBoughtMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.bought = false;
            this.ID = 384;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.bought = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachRewardBoughtMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachRewardBoughtMessage(input);
        }

        serializeAs_BreachRewardBoughtMessage(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
            output.writeBoolean(this.bought);
        }

        deserializeAs_BreachRewardBoughtMessage(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of BreachRewardBoughtMessage.id.");
            }
            this.bought = input.readBoolean();
        }
    }
    class BreachRewardBuyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 9930;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachRewardBuyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachRewardBuyMessage(input);
        }

        serializeAs_BreachRewardBuyMessage(ouput) {
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarInt(this.id);
        }

        deserializeAs_BreachRewardBuyMessage(input) {
            this.id = input.readVarUhInt();
            if (this.id < 0) {
                throw new Error("Forbidden value (" + this.id + ") on element of BreachRewardBuyMessage.id.");
            }
        }
    }
    class BreachRewardsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rewards = [];
            this.ID = 9196;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rewards = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_BreachRewardsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_BreachRewardsMessage(input);
        }

        serializeAs_BreachRewardsMessage(ouput) {
            output.writeShort(this.rewards.length);
            for (var _i1 = 0; _i1 < this.rewards.length; _i1++) {
                (this.rewards[_i1]).serializeAs_BreachReward(output);
            }
        }

        deserializeAs_BreachRewardsMessage(input) {
            var _item1 = null;
            var _rewardsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _rewardsLen; _i1++) {
                _item1 = new BreachReward();
                _item1.deserialize(input);
                this.rewards.push(_item1);
            }
        }
    }
    class ChangeMapMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.autopilot = false;
            this.ID = 7054;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.autopilot = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChangeMapMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChangeMapMessage(input);
        }

        serializeAs_ChangeMapMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeBoolean(this.autopilot);
        }

        deserializeAs_ChangeMapMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ChangeMapMessage.mapId.");
            }
            this.autopilot = input.readBoolean();
        }
    }
    class CurrentMapMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.ID = 3145;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CurrentMapMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CurrentMapMessage(input);
        }

        serializeAs_CurrentMapMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_CurrentMapMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of CurrentMapMessage.mapId.");
            }
        }
    }
    class CurrentMapInstanceMessage extends CurrentMapMessage {
        constructor(_super) {
            super()
            this.instantiatedMapId = 0;
            this.ID = 2503;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.instantiatedMapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CurrentMapInstanceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CurrentMapInstanceMessage(input);
        }

        serializeAs_CurrentMapInstanceMessage(ouput) {
            this.serializeAs_CurrentMapMessage.call(this, output);
            if (this.instantiatedMapId < 0 || this.instantiatedMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.instantiatedMapId + ") on element instantiatedMapId.");
            }
            output.writeDouble(this.instantiatedMapId);
        }

        deserializeAs_CurrentMapInstanceMessage(input) {
            this.deserializeAs_CurrentMapMessage.call(this, input);
            this.instantiatedMapId = input.readDouble();
            if (this.instantiatedMapId < 0 || this.instantiatedMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.instantiatedMapId + ") on element of CurrentMapInstanceMessage.instantiatedMapId.");
            }
        }
    }
    class GameRolePlayFreeSoulRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8141;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayFreeSoulRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayFreeSoulRequestMessage(input);
        }

        serializeAs_GameRolePlayFreeSoulRequestMessage(ouput) {

        }

        deserializeAs_GameRolePlayFreeSoulRequestMessage(input) {

        }
    }
    class GameRolePlayGameOverMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6207;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayGameOverMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayGameOverMessage(input);
        }

        serializeAs_GameRolePlayGameOverMessage(ouput) {

        }

        deserializeAs_GameRolePlayGameOverMessage(input) {

        }
    }
    class GameRolePlayPlayerLifeStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.state = 0;
            this.phenixMapId = 0;
            this.ID = 9074;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.state = 0;
            this.phenixMapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPlayerLifeStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPlayerLifeStatusMessage(input);
        }

        serializeAs_GameRolePlayPlayerLifeStatusMessage(ouput) {
            output.writeByte(this.state);
            if (this.phenixMapId < 0 || this.phenixMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.phenixMapId + ") on element phenixMapId.");
            }
            output.writeDouble(this.phenixMapId);
        }

        deserializeAs_GameRolePlayPlayerLifeStatusMessage(input) {
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of GameRolePlayPlayerLifeStatusMessage.state.");
            }
            this.phenixMapId = input.readDouble();
            if (this.phenixMapId < 0 || this.phenixMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.phenixMapId + ") on element of GameRolePlayPlayerLifeStatusMessage.phenixMapId.");
            }
        }
    }
    class WarnOnPermaDeathMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 7659;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WarnOnPermaDeathMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WarnOnPermaDeathMessage(input);
        }

        serializeAs_WarnOnPermaDeathMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_WarnOnPermaDeathMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class GameRolePlayDelayedActionFinishedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.ID = 4342;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayDelayedActionFinishedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayDelayedActionFinishedMessage(input);
        }

        serializeAs_GameRolePlayDelayedActionFinishedMessage(ouput) {
            if (this.delayedCharacterId < -9007199254740992 || this.delayedCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
            }
            output.writeDouble(this.delayedCharacterId);
            output.writeByte(this.delayTypeId);
        }

        deserializeAs_GameRolePlayDelayedActionFinishedMessage(input) {
            this.delayedCharacterId = input.readDouble();
            if (this.delayedCharacterId < -9007199254740992 || this.delayedCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayedCharacterId.");
            }
            this.delayTypeId = input.readByte();
            if (this.delayTypeId < 0) {
                throw new Error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionFinishedMessage.delayTypeId.");
            }
        }
    }
    class GameRolePlayDelayedActionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.ID = 4763;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.delayEndTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayDelayedActionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayDelayedActionMessage(input);
        }

        serializeAs_GameRolePlayDelayedActionMessage(ouput) {
            if (this.delayedCharacterId < -9007199254740992 || this.delayedCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element delayedCharacterId.");
            }
            output.writeDouble(this.delayedCharacterId);
            output.writeByte(this.delayTypeId);
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element delayEndTime.");
            }
            output.writeDouble(this.delayEndTime);
        }

        deserializeAs_GameRolePlayDelayedActionMessage(input) {
            this.delayedCharacterId = input.readDouble();
            if (this.delayedCharacterId < -9007199254740992 || this.delayedCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayedCharacterId + ") on element of GameRolePlayDelayedActionMessage.delayedCharacterId.");
            }
            this.delayTypeId = input.readByte();
            if (this.delayTypeId < 0) {
                throw new Error("Forbidden value (" + this.delayTypeId + ") on element of GameRolePlayDelayedActionMessage.delayTypeId.");
            }
            this.delayEndTime = input.readDouble();
            if (this.delayEndTime < 0 || this.delayEndTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.delayEndTime + ") on element of GameRolePlayDelayedActionMessage.delayEndTime.");
            }
        }
    }
    class GameRolePlayDelayedObjectUseMessage extends GameRolePlayDelayedActionMessage {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.ID = 7965;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayDelayedObjectUseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayDelayedObjectUseMessage(input);
        }

        serializeAs_GameRolePlayDelayedObjectUseMessage(ouput) {
            this.serializeAs_GameRolePlayDelayedActionMessage.call(this, output);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
        }

        deserializeAs_GameRolePlayDelayedObjectUseMessage(input) {
            this.deserializeAs_GameRolePlayDelayedActionMessage.call(this, input);
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of GameRolePlayDelayedObjectUseMessage.objectGID.");
            }
        }
    }
    class DiceRollRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dice = 0;
            this.faces = 0;
            this.channel = 0;
            this.ID = 526;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dice = 0;
            this.faces = 0;
            this.channel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DiceRollRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DiceRollRequestMessage(input);
        }

        serializeAs_DiceRollRequestMessage(ouput) {
            if (this.dice < 0) {
                throw new Error("Forbidden value (" + this.dice + ") on element dice.");
            }
            output.writeVarInt(this.dice);
            if (this.faces < 0) {
                throw new Error("Forbidden value (" + this.faces + ") on element faces.");
            }
            output.writeVarInt(this.faces);
            output.writeByte(this.channel);
        }

        deserializeAs_DiceRollRequestMessage(input) {
            this.dice = input.readVarUhInt();
            if (this.dice < 0) {
                throw new Error("Forbidden value (" + this.dice + ") on element of DiceRollRequestMessage.dice.");
            }
            this.faces = input.readVarUhInt();
            if (this.faces < 0) {
                throw new Error("Forbidden value (" + this.faces + ") on element of DiceRollRequestMessage.faces.");
            }
            this.channel = input.readByte();
            if (this.channel < 0) {
                throw new Error("Forbidden value (" + this.channel + ") on element of DiceRollRequestMessage.channel.");
            }
        }
    }
    class DocumentReadingBeginMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.documentId = 0;
            this.ID = 556;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.documentId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DocumentReadingBeginMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DocumentReadingBeginMessage(input);
        }

        serializeAs_DocumentReadingBeginMessage(ouput) {
            if (this.documentId < 0) {
                throw new Error("Forbidden value (" + this.documentId + ") on element documentId.");
            }
            output.writeVarShort(this.documentId);
        }

        deserializeAs_DocumentReadingBeginMessage(input) {
            this.documentId = input.readVarUhShort();
            if (this.documentId < 0) {
                throw new Error("Forbidden value (" + this.documentId + ") on element of DocumentReadingBeginMessage.documentId.");
            }
        }
    }
    class OpenGuideBookMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.articleId = 0;
            this.ID = 3895;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.articleId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OpenGuideBookMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OpenGuideBookMessage(input);
        }

        serializeAs_OpenGuideBookMessage(ouput) {
            if (this.articleId < 0) {
                throw new Error("Forbidden value (" + this.articleId + ") on element articleId.");
            }
            output.writeVarShort(this.articleId);
        }

        deserializeAs_OpenGuideBookMessage(input) {
            this.articleId = input.readVarUhShort();
            if (this.articleId < 0) {
                throw new Error("Forbidden value (" + this.articleId + ") on element of OpenGuideBookMessage.articleId.");
            }
        }
    }
    class EmoteAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.ID = 9586;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmoteAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmoteAddMessage(input);
        }

        serializeAs_EmoteAddMessage(ouput) {
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
        }

        deserializeAs_EmoteAddMessage(input) {
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmoteAddMessage.emoteId.");
            }
        }
    }
    class EmoteListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.emoteIds = [];
            this.ID = 507;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmoteListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmoteListMessage(input);
        }

        serializeAs_EmoteListMessage(ouput) {
            output.writeShort(this.emoteIds.length);
            for (var _i1 = 0; _i1 < this.emoteIds.length; _i1++) {
                if (this.emoteIds[_i1] < 0 || this.emoteIds[_i1] > 65535) {
                    throw new Error("Forbidden value (" + this.emoteIds[_i1] + ") on element 1 (starting at 1) of emoteIds.");
                }
                output.writeShort(this.emoteIds[_i1]);
            }
        }

        deserializeAs_EmoteListMessage(input) {
            var _val1 = 0;
            var _emoteIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _emoteIdsLen; _i1++) {
                _val1 = input.readUnsignedShort();
                if (_val1 < 0 || _val1 > 65535) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of emoteIds.");
                }
                this.emoteIds.push(_val1);
            }
        }
    }
    class EmotePlayAbstractMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.emoteStartTime = 0;
            this.ID = 8348;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmotePlayAbstractMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmotePlayAbstractMessage(input);
        }

        serializeAs_EmotePlayAbstractMessage(ouput) {
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
            if (this.emoteStartTime < -9007199254740992 || this.emoteStartTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element emoteStartTime.");
            }
            output.writeDouble(this.emoteStartTime);
        }

        deserializeAs_EmotePlayAbstractMessage(input) {
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayAbstractMessage.emoteId.");
            }
            this.emoteStartTime = input.readDouble();
            if (this.emoteStartTime < -9007199254740992 || this.emoteStartTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.emoteStartTime + ") on element of EmotePlayAbstractMessage.emoteStartTime.");
            }
        }
    }
    class EmotePlayErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.ID = 8572;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmotePlayErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmotePlayErrorMessage(input);
        }

        serializeAs_EmotePlayErrorMessage(ouput) {
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
        }

        deserializeAs_EmotePlayErrorMessage(input) {
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayErrorMessage.emoteId.");
            }
        }
    }
    class EmotePlayMassiveMessage extends EmotePlayAbstractMessage {
        constructor(_super) {
            super()
            this.actorIds = [];
            this.ID = 5777;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmotePlayMassiveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmotePlayMassiveMessage(input);
        }

        serializeAs_EmotePlayMassiveMessage(ouput) {
            this.serializeAs_EmotePlayAbstractMessage.call(this, output);
            output.writeShort(this.actorIds.length);
            for (var _i1 = 0; _i1 < this.actorIds.length; _i1++) {
                if (this.actorIds[_i1] < -9007199254740992 || this.actorIds[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.actorIds[_i1] + ") on element 1 (starting at 1) of actorIds.");
                }
                output.writeDouble(this.actorIds[_i1]);
            }
        }

        deserializeAs_EmotePlayMassiveMessage(input) {
            var _val1 = NaN;
            this.deserializeAs_EmotePlayAbstractMessage.call(this, input);
            var _actorIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _actorIdsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < -9007199254740992 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of actorIds.");
                }
                this.actorIds.push(_val1);
            }
        }
    }
    class EmotePlayMessage extends EmotePlayAbstractMessage {
        constructor(_super) {
            super()
            this.actorId = 0;
            this.accountId = 0;
            this.ID = 3603;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorId = 0;
            this.accountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmotePlayMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmotePlayMessage(input);
        }

        serializeAs_EmotePlayMessage(ouput) {
            this.serializeAs_EmotePlayAbstractMessage.call(this, output);
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        }

        deserializeAs_EmotePlayMessage(input) {
            this.deserializeAs_EmotePlayAbstractMessage.call(this, input);
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of EmotePlayMessage.actorId.");
            }
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of EmotePlayMessage.accountId.");
            }
        }
    }
    class EmotePlayRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.ID = 4677;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmotePlayRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmotePlayRequestMessage(input);
        }

        serializeAs_EmotePlayRequestMessage(ouput) {
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
        }

        deserializeAs_EmotePlayRequestMessage(input) {
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmotePlayRequestMessage.emoteId.");
            }
        }
    }
    class EmoteRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.emoteId = 0;
            this.ID = 3592;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.emoteId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EmoteRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EmoteRemoveMessage(input);
        }

        serializeAs_EmoteRemoveMessage(ouput) {
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element emoteId.");
            }
            output.writeShort(this.emoteId);
        }

        deserializeAs_EmoteRemoveMessage(input) {
            this.emoteId = input.readUnsignedShort();
            if (this.emoteId < 0 || this.emoteId > 65535) {
                throw new Error("Forbidden value (" + this.emoteId + ") on element of EmoteRemoveMessage.emoteId.");
            }
        }
    }
    class ErrorMapNotFoundMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.ID = 9984;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ErrorMapNotFoundMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ErrorMapNotFoundMessage(input);
        }

        serializeAs_ErrorMapNotFoundMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_ErrorMapNotFoundMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ErrorMapNotFoundMessage.mapId.");
            }
        }
    }
    class GameRolePlayArenaFightAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.accept = false;
            this.ID = 9421;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaFightAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaFightAnswerMessage(input);
        }

        serializeAs_GameRolePlayArenaFightAnswerMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeBoolean(this.accept);
        }

        deserializeAs_GameRolePlayArenaFightAnswerMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFightAnswerMessage.fightId.");
            }
            this.accept = input.readBoolean();
        }
    }
    class GameRolePlayArenaFighterStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.playerId = 0;
            this.accepted = false;
            this.ID = 9985;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.playerId = 0;
            this.accepted = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaFighterStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaFighterStatusMessage(input);
        }

        serializeAs_GameRolePlayArenaFighterStatusMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeBoolean(this.accepted);
        }

        deserializeAs_GameRolePlayArenaFighterStatusMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFighterStatusMessage.fightId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameRolePlayArenaFighterStatusMessage.playerId.");
            }
            this.accepted = input.readBoolean();
        }
    }
    class GameRolePlayArenaFightPropositionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.alliesId = [];
            this.duration = 0;
            this.ID = 3409;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.alliesId = [];
            this.duration = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaFightPropositionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaFightPropositionMessage(input);
        }

        serializeAs_GameRolePlayArenaFightPropositionMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeShort(this.alliesId.length);
            for (var _i2 = 0; _i2 < this.alliesId.length; _i2++) {
                if (this.alliesId[_i2] < -9007199254740992 || this.alliesId[_i2] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.alliesId[_i2] + ") on element 2 (starting at 1) of alliesId.");
                }
                output.writeDouble(this.alliesId[_i2]);
            }
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element duration.");
            }
            output.writeVarShort(this.duration);
        }

        deserializeAs_GameRolePlayArenaFightPropositionMessage(input) {
            var _val2 = NaN;
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayArenaFightPropositionMessage.fightId.");
            }
            var _alliesIdLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _alliesIdLen; _i2++) {
                _val2 = input.readDouble();
                if (_val2 < -9007199254740992 || _val2 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of alliesId.");
                }
                this.alliesId.push(_val2);
            }
            this.duration = input.readVarUhShort();
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element of GameRolePlayArenaFightPropositionMessage.duration.");
            }
        }
    }
    class GameRolePlayArenaInvitationCandidatesAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.candidates = [];
            this.ID = 6700;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.candidates = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaInvitationCandidatesAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaInvitationCandidatesAnswerMessage(input);
        }

        serializeAs_GameRolePlayArenaInvitationCandidatesAnswerMessage(ouput) {
            output.writeShort(this.candidates.length);
            for (var _i1 = 0; _i1 < this.candidates.length; _i1++) {
                (this.candidates[_i1]).serializeAs_LeagueFriendInformations(output);
            }
        }

        deserializeAs_GameRolePlayArenaInvitationCandidatesAnswerMessage(input) {
            var _item1 = null;
            var _candidatesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _candidatesLen; _i1++) {
                _item1 = new LeagueFriendInformations();
                _item1.deserialize(input);
                this.candidates.push(_item1);
            }
        }
    }
    class GameRolePlayArenaLeagueRewardsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.seasonId = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.endSeasonReward = false;
            this.ID = 8806;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.seasonId = 0;
            this.leagueId = 0;
            this.ladderPosition = 0;
            this.endSeasonReward = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaLeagueRewardsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaLeagueRewardsMessage(input);
        }

        serializeAs_GameRolePlayArenaLeagueRewardsMessage(ouput) {
            if (this.seasonId < 0) {
                throw new Error("Forbidden value (" + this.seasonId + ") on element seasonId.");
            }
            output.writeVarShort(this.seasonId);
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element leagueId.");
            }
            output.writeVarShort(this.leagueId);
            output.writeInt(this.ladderPosition);
            output.writeBoolean(this.endSeasonReward);
        }

        deserializeAs_GameRolePlayArenaLeagueRewardsMessage(input) {
            this.seasonId = input.readVarUhShort();
            if (this.seasonId < 0) {
                throw new Error("Forbidden value (" + this.seasonId + ") on element of GameRolePlayArenaLeagueRewardsMessage.seasonId.");
            }
            this.leagueId = input.readVarUhShort();
            if (this.leagueId < 0) {
                throw new Error("Forbidden value (" + this.leagueId + ") on element of GameRolePlayArenaLeagueRewardsMessage.leagueId.");
            }
            this.ladderPosition = input.readInt();
            this.endSeasonReward = input.readBoolean();
        }
    }
    class GameRolePlayArenaPlayerBehavioursMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.flags = [];
            this.sanctions = [];
            this.banDuration = 0;
            this.ID = 7468;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.flags = [];
            this.sanctions = [];
            this.banDuration = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaPlayerBehavioursMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaPlayerBehavioursMessage(input);
        }

        serializeAs_GameRolePlayArenaPlayerBehavioursMessage(ouput) {
            output.writeShort(this.flags.length);
            for (var _i1 = 0; _i1 < this.flags.length; _i1++) {
                output.writeUTF(this.flags[_i1]);
            }
            output.writeShort(this.sanctions.length);
            for (var _i2 = 0; _i2 < this.sanctions.length; _i2++) {
                output.writeUTF(this.sanctions[_i2]);
            }
            if (this.banDuration < 0) {
                throw new Error("Forbidden value (" + this.banDuration + ") on element banDuration.");
            }
            output.writeInt(this.banDuration);
        }

        deserializeAs_GameRolePlayArenaPlayerBehavioursMessage(input) {
            var _val1 = null;
            var _val2 = null;
            var _flagsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _flagsLen; _i1++) {
                _val1 = input.readUTF();
                this.flags.push(_val1);
            }
            var _sanctionsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _sanctionsLen; _i2++) {
                _val2 = input.readUTF();
                this.sanctions.push(_val2);
            }
            this.banDuration = input.readInt();
            if (this.banDuration < 0) {
                throw new Error("Forbidden value (" + this.banDuration + ") on element of GameRolePlayArenaPlayerBehavioursMessage.banDuration.");
            }
        }
    }
    class GameRolePlayArenaRegisterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.battleMode = 3;
            this.ID = 888;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.battleMode = 3;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaRegisterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaRegisterMessage(input);
        }

        serializeAs_GameRolePlayArenaRegisterMessage(ouput) {
            output.writeInt(this.battleMode);
        }

        deserializeAs_GameRolePlayArenaRegisterMessage(input) {
            this.battleMode = input.readInt();
            if (this.battleMode < 0) {
                throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegisterMessage.battleMode.");
            }
        }
    }
    class GameRolePlayArenaRegistrationStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.registered = false;
            this.step = 0;
            this.battleMode = 3;
            this.ID = 6193;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.registered = false;
            this.step = 0;
            this.battleMode = 3;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaRegistrationStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaRegistrationStatusMessage(input);
        }

        serializeAs_GameRolePlayArenaRegistrationStatusMessage(ouput) {
            output.writeBoolean(this.registered);
            output.writeByte(this.step);
            output.writeInt(this.battleMode);
        }

        deserializeAs_GameRolePlayArenaRegistrationStatusMessage(input) {
            this.registered = input.readBoolean();
            this.step = input.readByte();
            if (this.step < 0) {
                throw new Error("Forbidden value (" + this.step + ") on element of GameRolePlayArenaRegistrationStatusMessage.step.");
            }
            this.battleMode = input.readInt();
            if (this.battleMode < 0) {
                throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegistrationStatusMessage.battleMode.");
            }
        }
    }
    class GameRolePlayArenaRegistrationWarningMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.battleMode = 3;
            this.ID = 4858;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.battleMode = 3;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaRegistrationWarningMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaRegistrationWarningMessage(input);
        }

        serializeAs_GameRolePlayArenaRegistrationWarningMessage(ouput) {
            output.writeInt(this.battleMode);
        }

        deserializeAs_GameRolePlayArenaRegistrationWarningMessage(input) {
            this.battleMode = input.readInt();
            if (this.battleMode < 0) {
                throw new Error("Forbidden value (" + this.battleMode + ") on element of GameRolePlayArenaRegistrationWarningMessage.battleMode.");
            }
        }
    }
    class GameRolePlayArenaSwitchToFightServerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.address = "";
            this.ports = [];
            this.token = "";
            this.ID = 1936;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.address = "";
            this.ports = [];
            this.token = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaSwitchToFightServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(input);
        }

        serializeAs_GameRolePlayArenaSwitchToFightServerMessage(ouput) {
            output.writeUTF(this.address);
            output.writeShort(this.ports.length);
            for (var _i2 = 0; _i2 < this.ports.length; _i2++) {
                if (this.ports[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.ports[_i2] + ") on element 2 (starting at 1) of ports.");
                }
                output.writeVarShort(this.ports[_i2]);
            }
            output.writeUTF(this.token);
        }

        deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(input) {
            var _val2 = 0;
            this.address = input.readUTF();
            var _portsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _portsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of ports.");
                }
                this.ports.push(_val2);
            }
            this.token = input.readUTF();
        }
    }
    class GameRolePlayArenaSwitchToGameServerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.validToken = false;
            this.token = "";
            this.homeServerId = 0;
            this.ID = 9037;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.validToken = false;
            this.token = "";
            this.homeServerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaSwitchToGameServerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(input);
        }

        serializeAs_GameRolePlayArenaSwitchToGameServerMessage(ouput) {
            output.writeBoolean(this.validToken);
            output.writeUTF(this.token);
            output.writeShort(this.homeServerId);
        }

        deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(input) {
            this.validToken = input.readBoolean();
            this.token = input.readUTF();
            this.homeServerId = input.readShort();
        }
    }
    class GameRolePlayArenaUnregisterMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2239;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaUnregisterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaUnregisterMessage(input);
        }

        serializeAs_GameRolePlayArenaUnregisterMessage(ouput) {

        }

        deserializeAs_GameRolePlayArenaUnregisterMessage(input) {

        }
    }
    class GameRolePlayArenaUpdatePlayerInfosMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.solo = new ArenaRankInfos();
            this.ID = 5977;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.solo = new ArenaRankInfos();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(input);
        }

        serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(ouput) {
            this.solo.serializeAs_ArenaRankInfos(output);
        }

        deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(input) {
            this.solo = new ArenaRankInfos();
            this.solo.deserialize(input);
        }
    }
    class GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage extends GameRolePlayArenaUpdatePlayerInfosMessage {
        constructor(_super) {
            super()
            this.team = new ArenaRankInfos();
            this.duel = new ArenaRankInfos();
            this.ID = 8232;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.team = new ArenaRankInfos();
            this.duel = new ArenaRankInfos();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(input);
        }

        serializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(ouput) {
            this.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage.call(this, output);
            this.team.serializeAs_ArenaRankInfos(output);
            this.duel.serializeAs_ArenaRankInfos(output);
        }

        deserializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(input) {
            this.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage.call(this, input);
            this.team = new ArenaRankInfos();
            this.team.deserialize(input);
            this.duel = new ArenaRankInfos();
            this.duel.deserialize(input);
        }
    }
    class GameRolePlayAggressionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.attackerId = 0;
            this.defenderId = 0;
            this.ID = 4453;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.attackerId = 0;
            this.defenderId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayAggressionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayAggressionMessage(input);
        }

        serializeAs_GameRolePlayAggressionMessage(ouput) {
            if (this.attackerId < 0 || this.attackerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element attackerId.");
            }
            output.writeVarLong(this.attackerId);
            if (this.defenderId < 0 || this.defenderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element defenderId.");
            }
            output.writeVarLong(this.defenderId);
        }

        deserializeAs_GameRolePlayAggressionMessage(input) {
            this.attackerId = input.readVarUhLong();
            if (this.attackerId < 0 || this.attackerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.attackerId + ") on element of GameRolePlayAggressionMessage.attackerId.");
            }
            this.defenderId = input.readVarUhLong();
            if (this.defenderId < 0 || this.defenderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.defenderId + ") on element of GameRolePlayAggressionMessage.defenderId.");
            }
        }
    }
    class GameRolePlayAttackMonsterRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.monsterGroupId = 0;
            this.ID = 1998;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.monsterGroupId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayAttackMonsterRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayAttackMonsterRequestMessage(input);
        }

        serializeAs_GameRolePlayAttackMonsterRequestMessage(ouput) {
            if (this.monsterGroupId < -9007199254740992 || this.monsterGroupId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
            }
            output.writeDouble(this.monsterGroupId);
        }

        deserializeAs_GameRolePlayAttackMonsterRequestMessage(input) {
            this.monsterGroupId = input.readDouble();
            if (this.monsterGroupId < -9007199254740992 || this.monsterGroupId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayAttackMonsterRequestMessage.monsterGroupId.");
            }
        }
    }
    class GameRolePlayFightRequestCanceledMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.ID = 2752;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayFightRequestCanceledMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayFightRequestCanceledMessage(input);
        }

        serializeAs_GameRolePlayFightRequestCanceledMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
        }

        deserializeAs_GameRolePlayFightRequestCanceledMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayFightRequestCanceledMessage.fightId.");
            }
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayFightRequestCanceledMessage.sourceId.");
            }
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayFightRequestCanceledMessage.targetId.");
            }
        }
    }
    class GameRolePlayMonsterAngryAtPlayerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.monsterGroupId = 0;
            this.angryStartTime = 0;
            this.attackTime = 0;
            this.ID = 8414;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.monsterGroupId = 0;
            this.angryStartTime = 0;
            this.attackTime = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayMonsterAngryAtPlayerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayMonsterAngryAtPlayerMessage(input);
        }

        serializeAs_GameRolePlayMonsterAngryAtPlayerMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.monsterGroupId < -9007199254740992 || this.monsterGroupId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
            }
            output.writeDouble(this.monsterGroupId);
            if (this.angryStartTime < 0 || this.angryStartTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.angryStartTime + ") on element angryStartTime.");
            }
            output.writeDouble(this.angryStartTime);
            if (this.attackTime < 0 || this.attackTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.attackTime + ") on element attackTime.");
            }
            output.writeDouble(this.attackTime);
        }

        deserializeAs_GameRolePlayMonsterAngryAtPlayerMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.playerId.");
            }
            this.monsterGroupId = input.readDouble();
            if (this.monsterGroupId < -9007199254740992 || this.monsterGroupId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.monsterGroupId.");
            }
            this.angryStartTime = input.readDouble();
            if (this.angryStartTime < 0 || this.angryStartTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.angryStartTime + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.angryStartTime.");
            }
            this.attackTime = input.readDouble();
            if (this.attackTime < 0 || this.attackTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.attackTime + ") on element of GameRolePlayMonsterAngryAtPlayerMessage.attackTime.");
            }
        }
    }
    class GameRolePlayMonsterNotAngryAtPlayerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.monsterGroupId = 0;
            this.ID = 6627;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.monsterGroupId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage(input);
        }

        serializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            if (this.monsterGroupId < -9007199254740992 || this.monsterGroupId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element monsterGroupId.");
            }
            output.writeDouble(this.monsterGroupId);
        }

        deserializeAs_GameRolePlayMonsterNotAngryAtPlayerMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GameRolePlayMonsterNotAngryAtPlayerMessage.playerId.");
            }
            this.monsterGroupId = input.readDouble();
            if (this.monsterGroupId < -9007199254740992 || this.monsterGroupId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.monsterGroupId + ") on element of GameRolePlayMonsterNotAngryAtPlayerMessage.monsterGroupId.");
            }
        }
    }
    class GameRolePlayPlayerFightFriendlyAnsweredMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.accept = false;
            this.ID = 1584;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(input);
        }

        serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.sourceId < 0 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeVarLong(this.sourceId);
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
            output.writeBoolean(this.accept);
        }

        deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.fightId.");
            }
            this.sourceId = input.readVarUhLong();
            if (this.sourceId < 0 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.sourceId.");
            }
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.targetId.");
            }
            this.accept = input.readBoolean();
        }
    }
    class GameRolePlayPlayerFightFriendlyAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.accept = false;
            this.ID = 5426;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(input);
        }

        serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeBoolean(this.accept);
        }

        deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyAnswerMessage.fightId.");
            }
            this.accept = input.readBoolean();
        }
    }
    class GameRolePlayPlayerFightFriendlyRequestedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.ID = 3018;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(input);
        }

        serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            if (this.sourceId < 0 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeVarLong(this.sourceId);
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        }

        deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.fightId.");
            }
            this.sourceId = input.readVarUhLong();
            if (this.sourceId < 0 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.sourceId.");
            }
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.targetId.");
            }
        }
    }
    class GameRolePlayPlayerFightRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.targetCellId = 0;
            this.friendly = false;
            this.ID = 1697;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.targetCellId = 0;
            this.friendly = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayPlayerFightRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayPlayerFightRequestMessage(input);
        }

        serializeAs_GameRolePlayPlayerFightRequestMessage(ouput) {
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
            }
            output.writeShort(this.targetCellId);
            output.writeBoolean(this.friendly);
        }

        deserializeAs_GameRolePlayPlayerFightRequestMessage(input) {
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GameRolePlayPlayerFightRequestMessage.targetId.");
            }
            this.targetCellId = input.readShort();
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlayPlayerFightRequestMessage.targetCellId.");
            }
            this.friendly = input.readBoolean();
        }
    }
    class GameRolePlayRemoveChallengeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.ID = 2463;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayRemoveChallengeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayRemoveChallengeMessage(input);
        }

        serializeAs_GameRolePlayRemoveChallengeMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
        }

        deserializeAs_GameRolePlayRemoveChallengeMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of GameRolePlayRemoveChallengeMessage.fightId.");
            }
        }
    }
    class GameRolePlayShowChallengeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.commonsInfos = new FightCommonInformations();
            this.ID = 1759;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.commonsInfos = new FightCommonInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayShowChallengeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayShowChallengeMessage(input);
        }

        serializeAs_GameRolePlayShowChallengeMessage(ouput) {
            this.commonsInfos.serializeAs_FightCommonInformations(output);
        }

        deserializeAs_GameRolePlayShowChallengeMessage(input) {
            this.commonsInfos = new FightCommonInformations();
            this.commonsInfos.deserialize(input);
        }
    }
    class GameRolePlayShowActorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.informations = new GameRolePlayActorInformations();
            this.ID = 3456;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.informations = new GameRolePlayActorInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayShowActorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayShowActorMessage(input);
        }

        serializeAs_GameRolePlayShowActorMessage(ouput) {
            output.writeShort(this.informations.getTypeId());
            this.informations.serialize(output);
        }

        deserializeAs_GameRolePlayShowActorMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.informations = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _id1);
            this.informations.deserialize(input);
        }
    }
    class GameRolePlayShowActorWithEventMessage extends GameRolePlayShowActorMessage {
        constructor(_super) {
            super()
            this.actorEventId = 0;
            this.ID = 3225;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorEventId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayShowActorWithEventMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayShowActorWithEventMessage(input);
        }

        serializeAs_GameRolePlayShowActorWithEventMessage(ouput) {
            this.serializeAs_GameRolePlayShowActorMessage.call(this, output);
            if (this.actorEventId < 0) {
                throw new Error("Forbidden value (" + this.actorEventId + ") on element actorEventId.");
            }
            output.writeByte(this.actorEventId);
        }

        deserializeAs_GameRolePlayShowActorWithEventMessage(input) {
            this.deserializeAs_GameRolePlayShowActorMessage.call(this, input);
            this.actorEventId = input.readByte();
            if (this.actorEventId < 0) {
                throw new Error("Forbidden value (" + this.actorEventId + ") on element of GameRolePlayShowActorWithEventMessage.actorEventId.");
            }
        }
    }
    class GameRolePlayShowMultipleActorsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.informationsList = [];
            this.ID = 959;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.informationsList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlayShowMultipleActorsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlayShowMultipleActorsMessage(input);
        }

        serializeAs_GameRolePlayShowMultipleActorsMessage(ouput) {
            output.writeShort(this.informationsList.length);
            for (var _i1 = 0; _i1 < this.informationsList.length; _i1++) {
                output.writeShort((this.informationsList[_i1]).getTypeId());
                (this.informationsList[_i1]).serialize(output);
            }
        }

        deserializeAs_GameRolePlayShowMultipleActorsMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _informationsListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _informationsListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _id1);
                _item1.deserialize(input);
                this.informationsList.push(_item1);
            }
        }
    }
    class ChangeHavenBagRoomRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.roomId = 0;
            this.ID = 2766;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.roomId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChangeHavenBagRoomRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChangeHavenBagRoomRequestMessage(input);
        }

        serializeAs_ChangeHavenBagRoomRequestMessage(ouput) {
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
        }

        deserializeAs_ChangeHavenBagRoomRequestMessage(input) {
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of ChangeHavenBagRoomRequestMessage.roomId.");
            }
        }
    }
    class ChangeThemeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.theme = 0;
            this.ID = 1629;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.theme = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChangeThemeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChangeThemeRequestMessage(input);
        }

        serializeAs_ChangeThemeRequestMessage(ouput) {
            output.writeByte(this.theme);
        }

        deserializeAs_ChangeThemeRequestMessage(input) {
            this.theme = input.readByte();
        }
    }
    class CloseHavenBagFurnitureSequenceRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9998;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CloseHavenBagFurnitureSequenceRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CloseHavenBagFurnitureSequenceRequestMessage(input);
        }

        serializeAs_CloseHavenBagFurnitureSequenceRequestMessage(ouput) {

        }

        deserializeAs_CloseHavenBagFurnitureSequenceRequestMessage(input) {

        }
    }
    class EditHavenBagCancelRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4669;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EditHavenBagCancelRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EditHavenBagCancelRequestMessage(input);
        }

        serializeAs_EditHavenBagCancelRequestMessage(ouput) {

        }

        deserializeAs_EditHavenBagCancelRequestMessage(input) {

        }
    }
    class EditHavenBagFinishedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2552;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EditHavenBagFinishedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EditHavenBagFinishedMessage(input);
        }

        serializeAs_EditHavenBagFinishedMessage(ouput) {

        }

        deserializeAs_EditHavenBagFinishedMessage(input) {

        }
    }
    class EditHavenBagRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 474;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EditHavenBagRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EditHavenBagRequestMessage(input);
        }

        serializeAs_EditHavenBagRequestMessage(ouput) {

        }

        deserializeAs_EditHavenBagRequestMessage(input) {

        }
    }
    class EditHavenBagStartMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7016;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EditHavenBagStartMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EditHavenBagStartMessage(input);
        }

        serializeAs_EditHavenBagStartMessage(ouput) {

        }

        deserializeAs_EditHavenBagStartMessage(input) {

        }
    }
    class EnterHavenBagRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.havenBagOwner = 0;
            this.ID = 4590;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.havenBagOwner = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EnterHavenBagRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EnterHavenBagRequestMessage(input);
        }

        serializeAs_EnterHavenBagRequestMessage(ouput) {
            if (this.havenBagOwner < 0 || this.havenBagOwner > 9007199254740992) {
                throw new Error("Forbidden value (" + this.havenBagOwner + ") on element havenBagOwner.");
            }
            output.writeVarLong(this.havenBagOwner);
        }

        deserializeAs_EnterHavenBagRequestMessage(input) {
            this.havenBagOwner = input.readVarUhLong();
            if (this.havenBagOwner < 0 || this.havenBagOwner > 9007199254740992) {
                throw new Error("Forbidden value (" + this.havenBagOwner + ") on element of EnterHavenBagRequestMessage.havenBagOwner.");
            }
        }
    }
    class ExitHavenBagRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4256;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExitHavenBagRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExitHavenBagRequestMessage(input);
        }

        serializeAs_ExitHavenBagRequestMessage(ouput) {

        }

        deserializeAs_ExitHavenBagRequestMessage(input) {

        }
    }
    class HavenBagDailyLoteryMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.returnType = 0;
            this.gameActionId = "";
            this.ID = 4338;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.returnType = 0;
            this.gameActionId = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagDailyLoteryMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagDailyLoteryMessage(input);
        }

        serializeAs_HavenBagDailyLoteryMessage(ouput) {
            output.writeByte(this.returnType);
            output.writeUTF(this.gameActionId);
        }

        deserializeAs_HavenBagDailyLoteryMessage(input) {
            this.returnType = input.readByte();
            if (this.returnType < 0) {
                throw new Error("Forbidden value (" + this.returnType + ") on element of HavenBagDailyLoteryMessage.returnType.");
            }
            this.gameActionId = input.readUTF();
        }
    }
    class HavenBagFurnituresMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.furnituresInfos = [];
            this.ID = 4362;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.furnituresInfos = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagFurnituresMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagFurnituresMessage(input);
        }

        serializeAs_HavenBagFurnituresMessage(ouput) {
            output.writeShort(this.furnituresInfos.length);
            for (var _i1 = 0; _i1 < this.furnituresInfos.length; _i1++) {
                (this.furnituresInfos[_i1]).serializeAs_HavenBagFurnitureInformation(output);
            }
        }

        deserializeAs_HavenBagFurnituresMessage(input) {
            var _item1 = null;
            var _furnituresInfosLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _furnituresInfosLen; _i1++) {
                _item1 = new HavenBagFurnitureInformation();
                _item1.deserialize(input);
                this.furnituresInfos.push(_item1);
            }
        }
    }
    class HavenBagFurnituresRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellIds = [];
            this.funitureIds = [];
            this.orientations = [];
            this.ID = 1830;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellIds = [];
            this.funitureIds = [];
            this.orientations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagFurnituresRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagFurnituresRequestMessage(input);
        }

        serializeAs_HavenBagFurnituresRequestMessage(ouput) {
            output.writeShort(this.cellIds.length);
            for (var _i1 = 0; _i1 < this.cellIds.length; _i1++) {
                if (this.cellIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.cellIds[_i1] + ") on element 1 (starting at 1) of cellIds.");
                }
                output.writeVarShort(this.cellIds[_i1]);
            }
            output.writeShort(this.funitureIds.length);
            for (var _i2 = 0; _i2 < this.funitureIds.length; _i2++) {
                output.writeInt(this.funitureIds[_i2]);
            }
            output.writeShort(this.orientations.length);
            for (var _i3 = 0; _i3 < this.orientations.length; _i3++) {
                if (this.orientations[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.orientations[_i3] + ") on element 3 (starting at 1) of orientations.");
                }
                output.writeByte(this.orientations[_i3]);
            }
        }

        deserializeAs_HavenBagFurnituresRequestMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _val3 = 0;
            var _cellIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cellIds.");
                }
                this.cellIds.push(_val1);
            }
            var _funitureIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _funitureIdsLen; _i2++) {
                _val2 = input.readInt();
                this.funitureIds.push(_val2);
            }
            var _orientationsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _orientationsLen; _i3++) {
                _val3 = input.readByte();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of orientations.");
                }
                this.orientations.push(_val3);
            }
        }
    }
    class HavenBagPackListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.packIds = [];
            this.ID = 4278;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.packIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagPackListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagPackListMessage(input);
        }

        serializeAs_HavenBagPackListMessage(ouput) {
            output.writeShort(this.packIds.length);
            for (var _i1 = 0; _i1 < this.packIds.length; _i1++) {
                output.writeByte(this.packIds[_i1]);
            }
        }

        deserializeAs_HavenBagPackListMessage(input) {
            var _val1 = 0;
            var _packIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _packIdsLen; _i1++) {
                _val1 = input.readByte();
                this.packIds.push(_val1);
            }
        }
    }
    class HavenBagRoomUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.action = 0;
            this.roomsPreview = [];
            this.ID = 9458;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.action = 0;
            this.roomsPreview = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagRoomUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagRoomUpdateMessage(input);
        }

        serializeAs_HavenBagRoomUpdateMessage(ouput) {
            output.writeByte(this.action);
            output.writeShort(this.roomsPreview.length);
            for (var _i2 = 0; _i2 < this.roomsPreview.length; _i2++) {
                (this.roomsPreview[_i2]).serializeAs_HavenBagRoomPreviewInformation(output);
            }
        }

        deserializeAs_HavenBagRoomUpdateMessage(input) {
            var _item2 = null;
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HavenBagRoomUpdateMessage.action.");
            }
            var _roomsPreviewLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _roomsPreviewLen; _i2++) {
                _item2 = new HavenBagRoomPreviewInformation();
                _item2.deserialize(input);
                this.roomsPreview.push(_item2);
            }
        }
    }
    class KickHavenBagRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guestId = 0;
            this.ID = 5696;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_KickHavenBagRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_KickHavenBagRequestMessage(input);
        }

        serializeAs_KickHavenBagRequestMessage(ouput) {
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        }

        deserializeAs_KickHavenBagRequestMessage(input) {
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of KickHavenBagRequestMessage.guestId.");
            }
        }
    }
    class HavenBagPermissionsUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.permissions = 0;
            this.ID = 1314;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.permissions = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagPermissionsUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagPermissionsUpdateMessage(input);
        }

        serializeAs_HavenBagPermissionsUpdateMessage(ouput) {
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element permissions.");
            }
            output.writeInt(this.permissions);
        }

        deserializeAs_HavenBagPermissionsUpdateMessage(input) {
            this.permissions = input.readInt();
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element of HavenBagPermissionsUpdateMessage.permissions.");
            }
        }
    }
    class HavenBagPermissionsUpdateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.permissions = 0;
            this.ID = 1368;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.permissions = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HavenBagPermissionsUpdateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HavenBagPermissionsUpdateRequestMessage(input);
        }

        serializeAs_HavenBagPermissionsUpdateRequestMessage(ouput) {
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element permissions.");
            }
            output.writeInt(this.permissions);
        }

        deserializeAs_HavenBagPermissionsUpdateRequestMessage(input) {
            this.permissions = input.readInt();
            if (this.permissions < 0) {
                throw new Error("Forbidden value (" + this.permissions + ") on element of HavenBagPermissionsUpdateRequestMessage.permissions.");
            }
        }
    }
    class InviteInHavenBagClosedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hostInformations = new CharacterMinimalInformations();
            this.ID = 6322;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hostInformations = new CharacterMinimalInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InviteInHavenBagClosedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InviteInHavenBagClosedMessage(input);
        }

        serializeAs_InviteInHavenBagClosedMessage(ouput) {
            this.hostInformations.serializeAs_CharacterMinimalInformations(output);
        }

        deserializeAs_InviteInHavenBagClosedMessage(input) {
            this.hostInformations = new CharacterMinimalInformations();
            this.hostInformations.deserialize(input);
        }
    }
    class InviteInHavenBagMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guestInformations = new CharacterMinimalInformations();
            this.accept = false;
            this.ID = 1881;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guestInformations = new CharacterMinimalInformations();
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InviteInHavenBagMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InviteInHavenBagMessage(input);
        }

        serializeAs_InviteInHavenBagMessage(ouput) {
            this.guestInformations.serializeAs_CharacterMinimalInformations(output);
            output.writeBoolean(this.accept);
        }

        deserializeAs_InviteInHavenBagMessage(input) {
            this.guestInformations = new CharacterMinimalInformations();
            this.guestInformations.deserialize(input);
            this.accept = input.readBoolean();
        }
    }
    class InviteInHavenBagOfferMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hostInformations = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
            this.ID = 4145;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hostInformations = new CharacterMinimalInformations();
            this.timeLeftBeforeCancel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InviteInHavenBagOfferMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InviteInHavenBagOfferMessage(input);
        }

        serializeAs_InviteInHavenBagOfferMessage(ouput) {
            this.hostInformations.serializeAs_CharacterMinimalInformations(output);
            output.writeVarInt(this.timeLeftBeforeCancel);
        }

        deserializeAs_InviteInHavenBagOfferMessage(input) {
            this.hostInformations = new CharacterMinimalInformations();
            this.hostInformations.deserialize(input);
            this.timeLeftBeforeCancel = input.readVarInt();
        }
    }
    class TeleportHavenBagAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.ID = 4689;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportHavenBagAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportHavenBagAnswerMessage(input);
        }

        serializeAs_TeleportHavenBagAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
        }

        deserializeAs_TeleportHavenBagAnswerMessage(input) {
            this.accept = input.readBoolean();
        }
    }
    class TeleportHavenBagRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guestId = 0;
            this.ID = 3182;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportHavenBagRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportHavenBagRequestMessage(input);
        }

        serializeAs_TeleportHavenBagRequestMessage(ouput) {
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        }

        deserializeAs_TeleportHavenBagRequestMessage(input) {
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of TeleportHavenBagRequestMessage.guestId.");
            }
        }
    }
    class OpenHavenBagFurnitureSequenceRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9397;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OpenHavenBagFurnitureSequenceRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OpenHavenBagFurnitureSequenceRequestMessage(input);
        }

        serializeAs_OpenHavenBagFurnitureSequenceRequestMessage(ouput) {

        }

        deserializeAs_OpenHavenBagFurnitureSequenceRequestMessage(input) {

        }
    }
    class AccountHouseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houses = [];
            this.ID = 2128;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houses = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccountHouseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountHouseMessage(input);
        }

        serializeAs_AccountHouseMessage(ouput) {
            output.writeShort(this.houses.length);
            for (var _i1 = 0; _i1 < this.houses.length; _i1++) {
                (this.houses[_i1]).serializeAs_AccountHouseInformations(output);
            }
        }

        deserializeAs_AccountHouseMessage(input) {
            var _item1 = null;
            var _housesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _housesLen; _i1++) {
                _item1 = new AccountHouseInformations();
                _item1.deserialize(input);
                this.houses.push(_item1);
            }
        }
    }
    class HouseGuildNoneMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.ID = 223;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseGuildNoneMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseGuildNoneMessage(input);
        }

        serializeAs_HouseGuildNoneMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
        }

        deserializeAs_HouseGuildNoneMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildNoneMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildNoneMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
        }
    }
    class HouseGuildRightsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.guildInfo = new GuildInformations();
            this.rights = 0;
            this.ID = 3919;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.guildInfo = new GuildInformations();
            this.rights = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseGuildRightsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseGuildRightsMessage(input);
        }

        serializeAs_HouseGuildRightsMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            this.guildInfo.serializeAs_GuildInformations(output);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeVarInt(this.rights);
        }

        deserializeAs_HouseGuildRightsMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildRightsMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.rights = input.readVarUhInt();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of HouseGuildRightsMessage.rights.");
            }
        }
    }
    class HouseGuildRightsViewMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.ID = 8381;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseGuildRightsViewMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseGuildRightsViewMessage(input);
        }

        serializeAs_HouseGuildRightsViewMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
        }

        deserializeAs_HouseGuildRightsViewMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildRightsViewMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildRightsViewMessage.instanceId.");
            }
        }
    }
    class HouseGuildShareRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.enable = false;
            this.rights = 0;
            this.ID = 8987;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.enable = false;
            this.rights = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseGuildShareRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseGuildShareRequestMessage(input);
        }

        serializeAs_HouseGuildShareRequestMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.enable);
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element rights.");
            }
            output.writeVarInt(this.rights);
        }

        deserializeAs_HouseGuildShareRequestMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseGuildShareRequestMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseGuildShareRequestMessage.instanceId.");
            }
            this.enable = input.readBoolean();
            this.rights = input.readVarUhInt();
            if (this.rights < 0) {
                throw new Error("Forbidden value (" + this.rights + ") on element of HouseGuildShareRequestMessage.rights.");
            }
        }
    }
    class HouseBuyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.proposedPrice = 0;
            this.ID = 597;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.proposedPrice = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseBuyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseBuyRequestMessage(input);
        }

        serializeAs_HouseBuyRequestMessage(ouput) {
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element proposedPrice.");
            }
            output.writeVarLong(this.proposedPrice);
        }

        deserializeAs_HouseBuyRequestMessage(input) {
            this.proposedPrice = input.readVarUhLong();
            if (this.proposedPrice < 0 || this.proposedPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.proposedPrice + ") on element of HouseBuyRequestMessage.proposedPrice.");
            }
        }
    }
    class HouseBuyResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.bought = false;
            this.realPrice = 0;
            this.ID = 4144;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.bought = false;
            this.realPrice = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseBuyResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseBuyResultMessage(input);
        }

        serializeAs_HouseBuyResultMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.secondHand);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.bought);
            output.writeByte(_box0);
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            if (this.realPrice < 0 || this.realPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
            }
            output.writeVarLong(this.realPrice);
        }

        deserializeAs_HouseBuyResultMessage(input) {
            var _box0 = input.readByte();
            this.secondHand = BooleanByteWrapper.getFlag(_box0, 0);
            this.bought = BooleanByteWrapper.getFlag(_box0, 1);
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseBuyResultMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseBuyResultMessage.instanceId.");
            }
            this.realPrice = input.readVarUhLong();
            if (this.realPrice < 0 || this.realPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element of HouseBuyResultMessage.realPrice.");
            }
        }
    }
    class HouseKickRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 6944;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseKickRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseKickRequestMessage(input);
        }

        serializeAs_HouseKickRequestMessage(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        }

        deserializeAs_HouseKickRequestMessage(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of HouseKickRequestMessage.id.");
            }
        }
    }
    class LockableChangeCodeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.code = "";
            this.ID = 4181;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.code = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableChangeCodeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableChangeCodeMessage(input);
        }

        serializeAs_LockableChangeCodeMessage(ouput) {
            output.writeUTF(this.code);
        }

        deserializeAs_LockableChangeCodeMessage(input) {
            this.code = input.readUTF();
        }
    }
    class HouseLockFromInsideRequestMessage extends LockableChangeCodeMessage {
        constructor(_super) {
            super()

            this.ID = 2788;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseLockFromInsideRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseLockFromInsideRequestMessage(input);
        }

        serializeAs_HouseLockFromInsideRequestMessage(ouput) {
            this.serializeAs_LockableChangeCodeMessage.call(this, output);
        }

        deserializeAs_HouseLockFromInsideRequestMessage(input) {
            this.deserializeAs_LockableChangeCodeMessage.call(this, input);
        }
    }
    class HousePropertiesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.doorsOnMap = [];
            this.properties = new HouseInstanceInformations();
            this.ID = 8296;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.doorsOnMap = [];
            this.properties = new HouseInstanceInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HousePropertiesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HousePropertiesMessage(input);
        }

        serializeAs_HousePropertiesMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            output.writeShort(this.doorsOnMap.length);
            for (var _i2 = 0; _i2 < this.doorsOnMap.length; _i2++) {
                if (this.doorsOnMap[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.doorsOnMap[_i2] + ") on element 2 (starting at 1) of doorsOnMap.");
                }
                output.writeInt(this.doorsOnMap[_i2]);
            }
            output.writeShort(this.properties.getTypeId());
            this.properties.serialize(output);
        }

        deserializeAs_HousePropertiesMessage(input) {
            var _val2 = 0;
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HousePropertiesMessage.houseId.");
            }
            var _doorsOnMapLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _doorsOnMapLen; _i2++) {
                _val2 = input.readInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of doorsOnMap.");
                }
                this.doorsOnMap.push(_val2);
            }
            var _id3 = input.readUnsignedShort();
            this.properties = ProtocolTypeManager.getInstance(HouseInstanceInformations, _id3);
            this.properties.deserialize(input);
        }
    }
    class HouseSellRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.instanceId = 0;
            this.amount = 0;
            this.forSale = false;
            this.ID = 722;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.instanceId = 0;
            this.amount = 0;
            this.forSale = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseSellRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseSellRequestMessage(input);
        }

        serializeAs_HouseSellRequestMessage(ouput) {
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
            output.writeBoolean(this.forSale);
        }

        deserializeAs_HouseSellRequestMessage(input) {
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseSellRequestMessage.instanceId.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element of HouseSellRequestMessage.amount.");
            }
            this.forSale = input.readBoolean();
        }
    }
    class HouseSellFromInsideRequestMessage extends HouseSellRequestMessage {
        constructor(_super) {
            super()

            this.ID = 5826;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseSellFromInsideRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseSellFromInsideRequestMessage(input);
        }

        serializeAs_HouseSellFromInsideRequestMessage(ouput) {
            this.serializeAs_HouseSellRequestMessage.call(this, output);
        }

        deserializeAs_HouseSellFromInsideRequestMessage(input) {
            this.deserializeAs_HouseSellRequestMessage.call(this, input);
        }
    }
    class HouseSellingUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.realPrice = 0;
            this.buyerTag = new AccountTagInformation();
            this.ID = 27;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.realPrice = 0;
            this.buyerTag = new AccountTagInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseSellingUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseSellingUpdateMessage(input);
        }

        serializeAs_HouseSellingUpdateMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
            if (this.realPrice < 0 || this.realPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element realPrice.");
            }
            output.writeVarLong(this.realPrice);
            this.buyerTag.serializeAs_AccountTagInformation(output);
        }

        deserializeAs_HouseSellingUpdateMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseSellingUpdateMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of HouseSellingUpdateMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
            this.realPrice = input.readVarUhLong();
            if (this.realPrice < 0 || this.realPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.realPrice + ") on element of HouseSellingUpdateMessage.realPrice.");
            }
            this.buyerTag = new AccountTagInformation();
            this.buyerTag.deserialize(input);
        }
    }
    class HouseToSellFilterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.areaId = 0;
            this.atLeastNbRoom = 0;
            this.atLeastNbChest = 0;
            this.skillRequested = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
            this.ID = 4073;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.areaId = 0;
            this.atLeastNbRoom = 0;
            this.atLeastNbChest = 0;
            this.skillRequested = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseToSellFilterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseToSellFilterMessage(input);
        }

        serializeAs_HouseToSellFilterMessage(ouput) {
            output.writeInt(this.areaId);
            if (this.atLeastNbRoom < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbRoom + ") on element atLeastNbRoom.");
            }
            output.writeByte(this.atLeastNbRoom);
            if (this.atLeastNbChest < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbChest + ") on element atLeastNbChest.");
            }
            output.writeByte(this.atLeastNbChest);
            if (this.skillRequested < 0) {
                throw new Error("Forbidden value (" + this.skillRequested + ") on element skillRequested.");
            }
            output.writeVarShort(this.skillRequested);
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
            }
            output.writeVarLong(this.maxPrice);
            output.writeByte(this.orderBy);
        }

        deserializeAs_HouseToSellFilterMessage(input) {
            this.areaId = input.readInt();
            this.atLeastNbRoom = input.readByte();
            if (this.atLeastNbRoom < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbRoom + ") on element of HouseToSellFilterMessage.atLeastNbRoom.");
            }
            this.atLeastNbChest = input.readByte();
            if (this.atLeastNbChest < 0) {
                throw new Error("Forbidden value (" + this.atLeastNbChest + ") on element of HouseToSellFilterMessage.atLeastNbChest.");
            }
            this.skillRequested = input.readVarUhShort();
            if (this.skillRequested < 0) {
                throw new Error("Forbidden value (" + this.skillRequested + ") on element of HouseToSellFilterMessage.skillRequested.");
            }
            this.maxPrice = input.readVarUhLong();
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element of HouseToSellFilterMessage.maxPrice.");
            }
            this.orderBy = input.readByte();
            if (this.orderBy < 0) {
                throw new Error("Forbidden value (" + this.orderBy + ") on element of HouseToSellFilterMessage.orderBy.");
            }
        }
    }
    class HouseToSellListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.pageIndex = 0;
            this.totalPage = 0;
            this.houseList = [];
            this.ID = 9263;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.houseList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseToSellListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseToSellListMessage(input);
        }

        serializeAs_HouseToSellListMessage(ouput) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element totalPage.");
            }
            output.writeVarShort(this.totalPage);
            output.writeShort(this.houseList.length);
            for (var _i3 = 0; _i3 < this.houseList.length; _i3++) {
                (this.houseList[_i3]).serializeAs_HouseInformationsForSell(output);
            }
        }

        deserializeAs_HouseToSellListMessage(input) {
            var _item3 = null;
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListMessage.pageIndex.");
            }
            this.totalPage = input.readVarUhShort();
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element of HouseToSellListMessage.totalPage.");
            }
            var _houseListLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _houseListLen; _i3++) {
                _item3 = new HouseInformationsForSell();
                _item3.deserialize(input);
                this.houseList.push(_item3);
            }
        }
    }
    class HouseToSellListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.pageIndex = 0;
            this.ID = 5271;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.pageIndex = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseToSellListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseToSellListRequestMessage(input);
        }

        serializeAs_HouseToSellListRequestMessage(ouput) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
        }

        deserializeAs_HouseToSellListRequestMessage(input) {
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of HouseToSellListRequestMessage.pageIndex.");
            }
        }
    }
    class JobAllowMultiCraftRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enabled = false;
            this.ID = 2314;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enabled = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobAllowMultiCraftRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobAllowMultiCraftRequestMessage(input);
        }

        serializeAs_JobAllowMultiCraftRequestMessage(ouput) {
            output.writeBoolean(this.enabled);
        }

        deserializeAs_JobAllowMultiCraftRequestMessage(input) {
            this.enabled = input.readBoolean();
        }
    }
    class JobBookSubscriptionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subscriptions = [];
            this.ID = 5452;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subscriptions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobBookSubscriptionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobBookSubscriptionMessage(input);
        }

        serializeAs_JobBookSubscriptionMessage(ouput) {
            output.writeShort(this.subscriptions.length);
            for (var _i1 = 0; _i1 < this.subscriptions.length; _i1++) {
                (this.subscriptions[_i1]).serializeAs_JobBookSubscription(output);
            }
        }

        deserializeAs_JobBookSubscriptionMessage(input) {
            var _item1 = null;
            var _subscriptionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _subscriptionsLen; _i1++) {
                _item1 = new JobBookSubscription();
                _item1.deserialize(input);
                this.subscriptions.push(_item1);
            }
        }
    }
    class JobCrafterDirectoryAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.listEntry = new JobCrafterDirectoryListEntry();
            this.ID = 2994;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.listEntry = new JobCrafterDirectoryListEntry();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryAddMessage(input);
        }

        serializeAs_JobCrafterDirectoryAddMessage(ouput) {
            this.listEntry.serializeAs_JobCrafterDirectoryListEntry(output);
        }

        deserializeAs_JobCrafterDirectoryAddMessage(input) {
            this.listEntry = new JobCrafterDirectoryListEntry();
            this.listEntry.deserialize(input);
        }
    }
    class JobCrafterDirectoryDefineSettingsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.settings = new JobCrafterDirectorySettings();
            this.ID = 8024;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.settings = new JobCrafterDirectorySettings();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryDefineSettingsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryDefineSettingsMessage(input);
        }

        serializeAs_JobCrafterDirectoryDefineSettingsMessage(ouput) {
            this.settings.serializeAs_JobCrafterDirectorySettings(output);
        }

        deserializeAs_JobCrafterDirectoryDefineSettingsMessage(input) {
            this.settings = new JobCrafterDirectorySettings();
            this.settings.deserialize(input);
        }
    }
    class JobCrafterDirectoryEntryMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfoList = [];
            this.playerLook = new EntityLook();
            this.ID = 389;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfoList = [];
            this.playerLook = new EntityLook();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryEntryMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryEntryMessage(input);
        }

        serializeAs_JobCrafterDirectoryEntryMessage(ouput) {
            this.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(output);
            output.writeShort(this.jobInfoList.length);
            for (var _i2 = 0; _i2 < this.jobInfoList.length; _i2++) {
                (this.jobInfoList[_i2]).serializeAs_JobCrafterDirectoryEntryJobInfo(output);
            }
            this.playerLook.serializeAs_EntityLook(output);
        }

        deserializeAs_JobCrafterDirectoryEntryMessage(input) {
            var _item2 = null;
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.playerInfo.deserialize(input);
            var _jobInfoListLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _jobInfoListLen; _i2++) {
                _item2 = new JobCrafterDirectoryEntryJobInfo();
                _item2.deserialize(input);
                this.jobInfoList.push(_item2);
            }
            this.playerLook = new EntityLook();
            this.playerLook.deserialize(input);
        }
    }
    class JobCrafterDirectoryEntryRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 2490;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryEntryRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryEntryRequestMessage(input);
        }

        serializeAs_JobCrafterDirectoryEntryRequestMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_JobCrafterDirectoryEntryRequestMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryEntryRequestMessage.playerId.");
            }
        }
    }
    class JobCrafterDirectoryListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.listEntries = [];
            this.ID = 3390;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.listEntries = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryListMessage(input);
        }

        serializeAs_JobCrafterDirectoryListMessage(ouput) {
            output.writeShort(this.listEntries.length);
            for (var _i1 = 0; _i1 < this.listEntries.length; _i1++) {
                (this.listEntries[_i1]).serializeAs_JobCrafterDirectoryListEntry(output);
            }
        }

        deserializeAs_JobCrafterDirectoryListMessage(input) {
            var _item1 = null;
            var _listEntriesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _listEntriesLen; _i1++) {
                _item1 = new JobCrafterDirectoryListEntry();
                _item1.deserialize(input);
                this.listEntries.push(_item1);
            }
        }
    }
    class JobCrafterDirectoryListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.jobId = 0;
            this.ID = 5761;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryListRequestMessage(input);
        }

        serializeAs_JobCrafterDirectoryListRequestMessage(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
        }

        deserializeAs_JobCrafterDirectoryListRequestMessage(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryListRequestMessage.jobId.");
            }
        }
    }
    class JobCrafterDirectoryRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.jobId = 0;
            this.playerId = 0;
            this.ID = 8338;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectoryRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectoryRemoveMessage(input);
        }

        serializeAs_JobCrafterDirectoryRemoveMessage(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_JobCrafterDirectoryRemoveMessage(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of JobCrafterDirectoryRemoveMessage.jobId.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobCrafterDirectoryRemoveMessage.playerId.");
            }
        }
    }
    class JobCrafterDirectorySettingsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.craftersSettings = [];
            this.ID = 6629;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.craftersSettings = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobCrafterDirectorySettingsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobCrafterDirectorySettingsMessage(input);
        }

        serializeAs_JobCrafterDirectorySettingsMessage(ouput) {
            output.writeShort(this.craftersSettings.length);
            for (var _i1 = 0; _i1 < this.craftersSettings.length; _i1++) {
                (this.craftersSettings[_i1]).serializeAs_JobCrafterDirectorySettings(output);
            }
        }

        deserializeAs_JobCrafterDirectorySettingsMessage(input) {
            var _item1 = null;
            var _craftersSettingsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _craftersSettingsLen; _i1++) {
                _item1 = new JobCrafterDirectorySettings();
                _item1.deserialize(input);
                this.craftersSettings.push(_item1);
            }
        }
    }
    class JobDescriptionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.jobsDescription = [];
            this.ID = 7435;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobsDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobDescriptionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobDescriptionMessage(input);
        }

        serializeAs_JobDescriptionMessage(ouput) {
            output.writeShort(this.jobsDescription.length);
            for (var _i1 = 0; _i1 < this.jobsDescription.length; _i1++) {
                (this.jobsDescription[_i1]).serializeAs_JobDescription(output);
            }
        }

        deserializeAs_JobDescriptionMessage(input) {
            var _item1 = null;
            var _jobsDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _jobsDescriptionLen; _i1++) {
                _item1 = new JobDescription();
                _item1.deserialize(input);
                this.jobsDescription.push(_item1);
            }
        }
    }
    class JobExperienceMultiUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.experiencesUpdate = [];
            this.ID = 7739;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.experiencesUpdate = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobExperienceMultiUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobExperienceMultiUpdateMessage(input);
        }

        serializeAs_JobExperienceMultiUpdateMessage(ouput) {
            output.writeShort(this.experiencesUpdate.length);
            for (var _i1 = 0; _i1 < this.experiencesUpdate.length; _i1++) {
                (this.experiencesUpdate[_i1]).serializeAs_JobExperience(output);
            }
        }

        deserializeAs_JobExperienceMultiUpdateMessage(input) {
            var _item1 = null;
            var _experiencesUpdateLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _experiencesUpdateLen; _i1++) {
                _item1 = new JobExperience();
                _item1.deserialize(input);
                this.experiencesUpdate.push(_item1);
            }
        }
    }
    class JobExperienceUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.experiencesUpdate = new JobExperience();
            this.ID = 1215;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.experiencesUpdate = new JobExperience();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobExperienceUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobExperienceUpdateMessage(input);
        }

        serializeAs_JobExperienceUpdateMessage(ouput) {
            this.experiencesUpdate.serializeAs_JobExperience(output);
        }

        deserializeAs_JobExperienceUpdateMessage(input) {
            this.experiencesUpdate = new JobExperience();
            this.experiencesUpdate.deserialize(input);
        }
    }
    class JobExperienceOtherPlayerUpdateMessage extends JobExperienceUpdateMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 1202;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobExperienceOtherPlayerUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobExperienceOtherPlayerUpdateMessage(input);
        }

        serializeAs_JobExperienceOtherPlayerUpdateMessage(ouput) {
            this.serializeAs_JobExperienceUpdateMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_JobExperienceOtherPlayerUpdateMessage(input) {
            this.deserializeAs_JobExperienceUpdateMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobExperienceOtherPlayerUpdateMessage.playerId.");
            }
        }
    }
    class JobLevelUpMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.newLevel = 0;
            this.jobsDescription = new JobDescription();
            this.ID = 2811;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.newLevel = 0;
            this.jobsDescription = new JobDescription();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobLevelUpMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobLevelUpMessage(input);
        }

        serializeAs_JobLevelUpMessage(ouput) {
            if (this.newLevel < 0 || this.newLevel > 255) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
            }
            output.writeByte(this.newLevel);
            this.jobsDescription.serializeAs_JobDescription(output);
        }

        deserializeAs_JobLevelUpMessage(input) {
            this.newLevel = input.readUnsignedByte();
            if (this.newLevel < 0 || this.newLevel > 255) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element of JobLevelUpMessage.newLevel.");
            }
            this.jobsDescription = new JobDescription();
            this.jobsDescription.deserialize(input);
        }
    }
    class JobMultiCraftAvailableSkillsMessage extends JobAllowMultiCraftRequestMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.skills = [];
            this.ID = 5141;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.skills = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobMultiCraftAvailableSkillsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobMultiCraftAvailableSkillsMessage(input);
        }

        serializeAs_JobMultiCraftAvailableSkillsMessage(ouput) {
            this.serializeAs_JobAllowMultiCraftRequestMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeShort(this.skills.length);
            for (var _i2 = 0; _i2 < this.skills.length; _i2++) {
                if (this.skills[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.skills[_i2] + ") on element 2 (starting at 1) of skills.");
                }
                output.writeVarShort(this.skills[_i2]);
            }
        }

        deserializeAs_JobMultiCraftAvailableSkillsMessage(input) {
            var _val2 = 0;
            this.deserializeAs_JobAllowMultiCraftRequestMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of JobMultiCraftAvailableSkillsMessage.playerId.");
            }
            var _skillsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _skillsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of skills.");
                }
                this.skills.push(_val2);
            }
        }
    }
    class LockableCodeResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.ID = 756;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableCodeResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableCodeResultMessage(input);
        }

        serializeAs_LockableCodeResultMessage(ouput) {
            output.writeByte(this.result);
        }

        deserializeAs_LockableCodeResultMessage(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of LockableCodeResultMessage.result.");
            }
        }
    }
    class LockableShowCodeDialogMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.changeOrUse = false;
            this.codeSize = 0;
            this.ID = 8686;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.changeOrUse = false;
            this.codeSize = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableShowCodeDialogMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableShowCodeDialogMessage(input);
        }

        serializeAs_LockableShowCodeDialogMessage(ouput) {
            output.writeBoolean(this.changeOrUse);
            if (this.codeSize < 0) {
                throw new Error("Forbidden value (" + this.codeSize + ") on element codeSize.");
            }
            output.writeByte(this.codeSize);
        }

        deserializeAs_LockableShowCodeDialogMessage(input) {
            this.changeOrUse = input.readBoolean();
            this.codeSize = input.readByte();
            if (this.codeSize < 0) {
                throw new Error("Forbidden value (" + this.codeSize + ") on element of LockableShowCodeDialogMessage.codeSize.");
            }
        }
    }
    class LockableStateUpdateAbstractMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.locked = false;
            this.ID = 6940;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.locked = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableStateUpdateAbstractMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableStateUpdateAbstractMessage(input);
        }

        serializeAs_LockableStateUpdateAbstractMessage(ouput) {
            output.writeBoolean(this.locked);
        }

        deserializeAs_LockableStateUpdateAbstractMessage(input) {
            this.locked = input.readBoolean();
        }
    }
    class LockableStateUpdateHouseDoorMessage extends LockableStateUpdateAbstractMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.ID = 2441;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableStateUpdateHouseDoorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableStateUpdateHouseDoorMessage(input);
        }

        serializeAs_LockableStateUpdateHouseDoorMessage(ouput) {
            this.serializeAs_LockableStateUpdateAbstractMessage.call(this, output);
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
        }

        deserializeAs_LockableStateUpdateHouseDoorMessage(input) {
            this.deserializeAs_LockableStateUpdateAbstractMessage.call(this, input);
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of LockableStateUpdateHouseDoorMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of LockableStateUpdateHouseDoorMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
        }
    }
    class LockableStateUpdateStorageMessage extends LockableStateUpdateAbstractMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.elementId = 0;
            this.ID = 491;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.elementId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableStateUpdateStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableStateUpdateStorageMessage(input);
        }

        serializeAs_LockableStateUpdateStorageMessage(ouput) {
            this.serializeAs_LockableStateUpdateAbstractMessage.call(this, output);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element elementId.");
            }
            output.writeVarInt(this.elementId);
        }

        deserializeAs_LockableStateUpdateStorageMessage(input) {
            this.deserializeAs_LockableStateUpdateAbstractMessage.call(this, input);
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of LockableStateUpdateStorageMessage.mapId.");
            }
            this.elementId = input.readVarUhInt();
            if (this.elementId < 0) {
                throw new Error("Forbidden value (" + this.elementId + ") on element of LockableStateUpdateStorageMessage.elementId.");
            }
        }
    }
    class LockableUseCodeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.code = "";
            this.ID = 2014;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.code = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LockableUseCodeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LockableUseCodeMessage(input);
        }

        serializeAs_LockableUseCodeMessage(ouput) {
            output.writeUTF(this.code);
        }

        deserializeAs_LockableUseCodeMessage(input) {
            this.code = input.readUTF();
        }
    }
    class MapComplementaryInformationsDataInHavenBagMessage extends MapComplementaryInformationsDataMessage {
        constructor(_super) {
            super()
            this.ownerInformations = new CharacterMinimalInformations();
            this.theme = 0;
            this.roomId = 0;
            this.maxRoomId = 0;
            this.ID = 5660;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ownerInformations = new CharacterMinimalInformations();
            this.theme = 0;
            this.roomId = 0;
            this.maxRoomId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapComplementaryInformationsDataInHavenBagMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapComplementaryInformationsDataInHavenBagMessage(input);
        }

        serializeAs_MapComplementaryInformationsDataInHavenBagMessage(ouput) {
            this.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            this.ownerInformations.serializeAs_CharacterMinimalInformations(output);
            output.writeByte(this.theme);
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element roomId.");
            }
            output.writeByte(this.roomId);
            if (this.maxRoomId < 0) {
                throw new Error("Forbidden value (" + this.maxRoomId + ") on element maxRoomId.");
            }
            output.writeByte(this.maxRoomId);
        }

        deserializeAs_MapComplementaryInformationsDataInHavenBagMessage(input) {
            this.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.ownerInformations = new CharacterMinimalInformations();
            this.ownerInformations.deserialize(input);
            this.theme = input.readByte();
            this.roomId = input.readByte();
            if (this.roomId < 0) {
                throw new Error("Forbidden value (" + this.roomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.roomId.");
            }
            this.maxRoomId = input.readByte();
            if (this.maxRoomId < 0) {
                throw new Error("Forbidden value (" + this.maxRoomId + ") on element of MapComplementaryInformationsDataInHavenBagMessage.maxRoomId.");
            }
        }
    }
    class MapComplementaryInformationsDataInHouseMessage extends MapComplementaryInformationsDataMessage {
        constructor(_super) {
            super()
            this.currentHouse = new HouseInformationsInside();
            this.ID = 2902;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.currentHouse = new HouseInformationsInside();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapComplementaryInformationsDataInHouseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapComplementaryInformationsDataInHouseMessage(input);
        }

        serializeAs_MapComplementaryInformationsDataInHouseMessage(ouput) {
            this.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            this.currentHouse.serializeAs_HouseInformationsInside(output);
        }

        deserializeAs_MapComplementaryInformationsDataInHouseMessage(input) {
            this.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.currentHouse = new HouseInformationsInside();
            this.currentHouse.deserialize(input);
        }
    }
    class MapComplementaryInformationsWithCoordsMessage extends MapComplementaryInformationsDataMessage {
        constructor(_super) {
            super()
            this.worldX = 0;
            this.worldY = 0;
            this.ID = 3302;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.worldX = 0;
            this.worldY = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapComplementaryInformationsWithCoordsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapComplementaryInformationsWithCoordsMessage(input);
        }

        serializeAs_MapComplementaryInformationsWithCoordsMessage(ouput) {
            this.serializeAs_MapComplementaryInformationsDataMessage.call(this, output);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
        }

        deserializeAs_MapComplementaryInformationsWithCoordsMessage(input) {
            this.deserializeAs_MapComplementaryInformationsDataMessage.call(this, input);
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of MapComplementaryInformationsWithCoordsMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of MapComplementaryInformationsWithCoordsMessage.worldY.");
            }
        }
    }
    class MapFightCountMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightCount = 0;
            this.ID = 14;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightCount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapFightCountMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapFightCountMessage(input);
        }

        serializeAs_MapFightCountMessage(ouput) {
            if (this.fightCount < 0) {
                throw new Error("Forbidden value (" + this.fightCount + ") on element fightCount.");
            }
            output.writeVarShort(this.fightCount);
        }

        deserializeAs_MapFightCountMessage(input) {
            this.fightCount = input.readVarUhShort();
            if (this.fightCount < 0) {
                throw new Error("Forbidden value (" + this.fightCount + ") on element of MapFightCountMessage.fightCount.");
            }
        }
    }
    class MapFightStartPositionsUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.fightStartPositions = new FightStartingPositions();
            this.ID = 3445;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.fightStartPositions = new FightStartingPositions();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapFightStartPositionsUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapFightStartPositionsUpdateMessage(input);
        }

        serializeAs_MapFightStartPositionsUpdateMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            this.fightStartPositions.serializeAs_FightStartingPositions(output);
        }

        deserializeAs_MapFightStartPositionsUpdateMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapFightStartPositionsUpdateMessage.mapId.");
            }
            this.fightStartPositions = new FightStartingPositions();
            this.fightStartPositions.deserialize(input);
        }
    }
    class MapInformationsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.ID = 9293;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapInformationsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapInformationsRequestMessage(input);
        }

        serializeAs_MapInformationsRequestMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_MapInformationsRequestMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of MapInformationsRequestMessage.mapId.");
            }
        }
    }
    class MapObstacleUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.obstacles = [];
            this.ID = 5033;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.obstacles = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapObstacleUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapObstacleUpdateMessage(input);
        }

        serializeAs_MapObstacleUpdateMessage(ouput) {
            output.writeShort(this.obstacles.length);
            for (var _i1 = 0; _i1 < this.obstacles.length; _i1++) {
                (this.obstacles[_i1]).serializeAs_MapObstacle(output);
            }
        }

        deserializeAs_MapObstacleUpdateMessage(input) {
            var _item1 = null;
            var _obstaclesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _obstaclesLen; _i1++) {
                _item1 = new MapObstacle();
                _item1.deserialize(input);
                this.obstacles.push(_item1);
            }
        }
    }
    class MapRunningFightDetailsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.attackers = [];
            this.defenders = [];
            this.ID = 2947;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
            this.attackers = [];
            this.defenders = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapRunningFightDetailsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapRunningFightDetailsMessage(input);
        }

        serializeAs_MapRunningFightDetailsMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeShort(this.attackers.length);
            for (var _i2 = 0; _i2 < this.attackers.length; _i2++) {
                output.writeShort((this.attackers[_i2]).getTypeId());
                (this.attackers[_i2]).serialize(output);
            }
            output.writeShort(this.defenders.length);
            for (var _i3 = 0; _i3 < this.defenders.length; _i3++) {
                output.writeShort((this.defenders[_i3]).getTypeId());
                (this.defenders[_i3]).serialize(output);
            }
        }

        deserializeAs_MapRunningFightDetailsMessage(input) {
            var _id2 = 0;
            var _item2 = null;
            var _id3 = 0;
            var _item3 = null;
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsMessage.fightId.");
            }
            var _attackersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _attackersLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _id2);
                _item2.deserialize(input);
                this.attackers.push(_item2);
            }
            var _defendersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _defendersLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _id3);
                _item3.deserialize(input);
                this.defenders.push(_item3);
            }
        }
    }
    class MapRunningFightDetailsExtendedMessage extends MapRunningFightDetailsMessage {
        constructor(_super) {
            super()
            this.namedPartyTeams = [];
            this.ID = 8625;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.namedPartyTeams = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapRunningFightDetailsExtendedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapRunningFightDetailsExtendedMessage(input);
        }

        serializeAs_MapRunningFightDetailsExtendedMessage(ouput) {
            this.serializeAs_MapRunningFightDetailsMessage.call(this, output);
            output.writeShort(this.namedPartyTeams.length);
            for (var _i1 = 0; _i1 < this.namedPartyTeams.length; _i1++) {
                (this.namedPartyTeams[_i1]).serializeAs_NamedPartyTeam(output);
            }
        }

        deserializeAs_MapRunningFightDetailsExtendedMessage(input) {
            var _item1 = null;
            this.deserializeAs_MapRunningFightDetailsMessage.call(this, input);
            var _namedPartyTeamsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _namedPartyTeamsLen; _i1++) {
                _item1 = new NamedPartyTeam();
                _item1.deserialize(input);
                this.namedPartyTeams.push(_item1);
            }
        }
    }
    class MapRunningFightDetailsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fightId = 0;
            this.ID = 3294;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapRunningFightDetailsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapRunningFightDetailsRequestMessage(input);
        }

        serializeAs_MapRunningFightDetailsRequestMessage(ouput) {
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
        }

        deserializeAs_MapRunningFightDetailsRequestMessage(input) {
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of MapRunningFightDetailsRequestMessage.fightId.");
            }
        }
    }
    class MapRunningFightListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.fights = [];
            this.ID = 6504;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fights = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapRunningFightListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapRunningFightListMessage(input);
        }

        serializeAs_MapRunningFightListMessage(ouput) {
            output.writeShort(this.fights.length);
            for (var _i1 = 0; _i1 < this.fights.length; _i1++) {
                (this.fights[_i1]).serializeAs_FightExternalInformations(output);
            }
        }

        deserializeAs_MapRunningFightListMessage(input) {
            var _item1 = null;
            var _fightsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _fightsLen; _i1++) {
                _item1 = new FightExternalInformations();
                _item1.deserialize(input);
                this.fights.push(_item1);
            }
        }
    }
    class MapRunningFightListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2782;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MapRunningFightListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MapRunningFightListRequestMessage(input);
        }

        serializeAs_MapRunningFightListRequestMessage(ouput) {

        }

        deserializeAs_MapRunningFightListRequestMessage(input) {

        }
    }
    class AlliancePrismDialogQuestionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8353;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlliancePrismDialogQuestionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlliancePrismDialogQuestionMessage(input);
        }

        serializeAs_AlliancePrismDialogQuestionMessage(ouput) {

        }

        deserializeAs_AlliancePrismDialogQuestionMessage(input) {

        }
    }
    class EntityTalkMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.entityId = 0;
            this.textId = 0;
            this.parameters = [];
            this.ID = 9057;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityId = 0;
            this.textId = 0;
            this.parameters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EntityTalkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EntityTalkMessage(input);
        }

        serializeAs_EntityTalkMessage(ouput) {
            if (this.entityId < -9007199254740992 || this.entityId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
            }
            output.writeDouble(this.entityId);
            if (this.textId < 0) {
                throw new Error("Forbidden value (" + this.textId + ") on element textId.");
            }
            output.writeVarShort(this.textId);
            output.writeShort(this.parameters.length);
            for (var _i3 = 0; _i3 < this.parameters.length; _i3++) {
                output.writeUTF(this.parameters[_i3]);
            }
        }

        deserializeAs_EntityTalkMessage(input) {
            var _val3 = null;
            this.entityId = input.readDouble();
            if (this.entityId < -9007199254740992 || this.entityId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.entityId + ") on element of EntityTalkMessage.entityId.");
            }
            this.textId = input.readVarUhShort();
            if (this.textId < 0) {
                throw new Error("Forbidden value (" + this.textId + ") on element of EntityTalkMessage.textId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _parametersLen; _i3++) {
                _val3 = input.readUTF();
                this.parameters.push(_val3);
            }
        }
    }
    class ListMapNpcsQuestStatusUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapInfo = [];
            this.ID = 6306;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapInfo = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ListMapNpcsQuestStatusUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ListMapNpcsQuestStatusUpdateMessage(input);
        }

        serializeAs_ListMapNpcsQuestStatusUpdateMessage(ouput) {
            output.writeShort(this.mapInfo.length);
            for (var _i1 = 0; _i1 < this.mapInfo.length; _i1++) {
                (this.mapInfo[_i1]).serializeAs_MapNpcQuestInfo(output);
            }
        }

        deserializeAs_ListMapNpcsQuestStatusUpdateMessage(input) {
            var _item1 = null;
            var _mapInfoLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mapInfoLen; _i1++) {
                _item1 = new MapNpcQuestInfo();
                _item1.deserialize(input);
                this.mapInfo.push(_item1);
            }
        }
    }
    class NpcDialogCreationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.npcId = 0;
            this.ID = 1724;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.npcId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NpcDialogCreationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NpcDialogCreationMessage(input);
        }

        serializeAs_NpcDialogCreationMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeInt(this.npcId);
        }

        deserializeAs_NpcDialogCreationMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of NpcDialogCreationMessage.mapId.");
            }
            this.npcId = input.readInt();
        }
    }
    class NpcDialogQuestionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.messageId = 0;
            this.dialogParams = [];
            this.visibleReplies = [];
            this.ID = 524;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.messageId = 0;
            this.dialogParams = [];
            this.visibleReplies = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NpcDialogQuestionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NpcDialogQuestionMessage(input);
        }

        serializeAs_NpcDialogQuestionMessage(ouput) {
            if (this.messageId < 0) {
                throw new Error("Forbidden value (" + this.messageId + ") on element messageId.");
            }
            output.writeVarInt(this.messageId);
            output.writeShort(this.dialogParams.length);
            for (var _i2 = 0; _i2 < this.dialogParams.length; _i2++) {
                output.writeUTF(this.dialogParams[_i2]);
            }
            output.writeShort(this.visibleReplies.length);
            for (var _i3 = 0; _i3 < this.visibleReplies.length; _i3++) {
                if (this.visibleReplies[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.visibleReplies[_i3] + ") on element 3 (starting at 1) of visibleReplies.");
                }
                output.writeVarInt(this.visibleReplies[_i3]);
            }
        }

        deserializeAs_NpcDialogQuestionMessage(input) {
            var _val2 = null;
            var _val3 = 0;
            this.messageId = input.readVarUhInt();
            if (this.messageId < 0) {
                throw new Error("Forbidden value (" + this.messageId + ") on element of NpcDialogQuestionMessage.messageId.");
            }
            var _dialogParamsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _dialogParamsLen; _i2++) {
                _val2 = input.readUTF();
                this.dialogParams.push(_val2);
            }
            var _visibleRepliesLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _visibleRepliesLen; _i3++) {
                _val3 = input.readVarUhInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of visibleReplies.");
                }
                this.visibleReplies.push(_val3);
            }
        }
    }
    class NpcDialogReplyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.replyId = 0;
            this.ID = 7517;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.replyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NpcDialogReplyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NpcDialogReplyMessage(input);
        }

        serializeAs_NpcDialogReplyMessage(ouput) {
            if (this.replyId < 0) {
                throw new Error("Forbidden value (" + this.replyId + ") on element replyId.");
            }
            output.writeVarInt(this.replyId);
        }

        deserializeAs_NpcDialogReplyMessage(input) {
            this.replyId = input.readVarUhInt();
            if (this.replyId < 0) {
                throw new Error("Forbidden value (" + this.replyId + ") on element of NpcDialogReplyMessage.replyId.");
            }
        }
    }
    class NpcGenericActionFailureMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2908;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NpcGenericActionFailureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NpcGenericActionFailureMessage(input);
        }

        serializeAs_NpcGenericActionFailureMessage(ouput) {

        }

        deserializeAs_NpcGenericActionFailureMessage(input) {

        }
    }
    class NpcGenericActionRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.npcId = 0;
            this.npcActionId = 0;
            this.npcMapId = 0;
            this.ID = 4675;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.npcId = 0;
            this.npcActionId = 0;
            this.npcMapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NpcGenericActionRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NpcGenericActionRequestMessage(input);
        }

        serializeAs_NpcGenericActionRequestMessage(ouput) {
            output.writeInt(this.npcId);
            if (this.npcActionId < 0) {
                throw new Error("Forbidden value (" + this.npcActionId + ") on element npcActionId.");
            }
            output.writeByte(this.npcActionId);
            if (this.npcMapId < 0 || this.npcMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.npcMapId + ") on element npcMapId.");
            }
            output.writeDouble(this.npcMapId);
        }

        deserializeAs_NpcGenericActionRequestMessage(input) {
            this.npcId = input.readInt();
            this.npcActionId = input.readByte();
            if (this.npcActionId < 0) {
                throw new Error("Forbidden value (" + this.npcActionId + ") on element of NpcGenericActionRequestMessage.npcActionId.");
            }
            this.npcMapId = input.readDouble();
            if (this.npcMapId < 0 || this.npcMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.npcMapId + ") on element of NpcGenericActionRequestMessage.npcMapId.");
            }
        }
    }
    class PortalDialogCreationMessage extends NpcDialogCreationMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.ID = 6077;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PortalDialogCreationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PortalDialogCreationMessage(input);
        }

        serializeAs_PortalDialogCreationMessage(ouput) {
            this.serializeAs_NpcDialogCreationMessage.call(this, output);
            output.writeInt(this.type);
        }

        deserializeAs_PortalDialogCreationMessage(input) {
            this.deserializeAs_NpcDialogCreationMessage.call(this, input);
            this.type = input.readInt();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of PortalDialogCreationMessage.type.");
            }
        }
    }
    class TaxCollectorDialogQuestionBasicMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allianceInfo = new BasicAllianceInformations();
            this.ID = 8033;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allianceInfo = new BasicAllianceInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorDialogQuestionBasicMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorDialogQuestionBasicMessage(input);
        }

        serializeAs_TaxCollectorDialogQuestionBasicMessage(ouput) {
            this.allianceInfo.serializeAs_BasicAllianceInformations(output);
        }

        deserializeAs_TaxCollectorDialogQuestionBasicMessage(input) {
            this.allianceInfo = new BasicAllianceInformations();
            this.allianceInfo.deserialize(input);
        }
    }
    class TaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionBasicMessage {
        constructor(_super) {
            super()
            this.maxPods = 0;
            this.prospecting = 0;
            this.alliance = new BasicNamedAllianceInformations();
            this.taxCollectorsCount = 0;
            this.taxCollectorAttack = 0;
            this.pods = 0;
            this.itemsValue = 0;
            this.ID = 6709;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.maxPods = 0;
            this.prospecting = 0;
            this.alliance = new BasicNamedAllianceInformations();
            this.taxCollectorsCount = 0;
            this.taxCollectorAttack = 0;
            this.pods = 0;
            this.itemsValue = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorDialogQuestionExtendedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorDialogQuestionExtendedMessage(input);
        }

        serializeAs_TaxCollectorDialogQuestionExtendedMessage(ouput) {
            this.serializeAs_TaxCollectorDialogQuestionBasicMessage.call(this, output);
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element maxPods.");
            }
            output.writeVarShort(this.maxPods);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarShort(this.prospecting);
            this.alliance.serializeAs_BasicNamedAllianceInformations(output);
            if (this.taxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element taxCollectorsCount.");
            }
            output.writeByte(this.taxCollectorsCount);
            output.writeInt(this.taxCollectorAttack);
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element pods.");
            }
            output.writeVarInt(this.pods);
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740992) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element itemsValue.");
            }
            output.writeVarLong(this.itemsValue);
        }

        deserializeAs_TaxCollectorDialogQuestionExtendedMessage(input) {
            this.deserializeAs_TaxCollectorDialogQuestionBasicMessage.call(this, input);
            this.maxPods = input.readVarUhShort();
            if (this.maxPods < 0) {
                throw new Error("Forbidden value (" + this.maxPods + ") on element of TaxCollectorDialogQuestionExtendedMessage.maxPods.");
            }
            this.prospecting = input.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of TaxCollectorDialogQuestionExtendedMessage.prospecting.");
            }
            this.alliance = new BasicNamedAllianceInformations();
            this.alliance.deserialize(input);
            this.taxCollectorsCount = input.readByte();
            if (this.taxCollectorsCount < 0) {
                throw new Error("Forbidden value (" + this.taxCollectorsCount + ") on element of TaxCollectorDialogQuestionExtendedMessage.taxCollectorsCount.");
            }
            this.taxCollectorAttack = input.readInt();
            this.pods = input.readVarUhInt();
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element of TaxCollectorDialogQuestionExtendedMessage.pods.");
            }
            this.itemsValue = input.readVarUhLong();
            if (this.itemsValue < 0 || this.itemsValue > 9007199254740992) {
                throw new Error("Forbidden value (" + this.itemsValue + ") on element of TaxCollectorDialogQuestionExtendedMessage.itemsValue.");
            }
        }
    }
    class ObjectGroundAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.objectGID = 0;
            this.ID = 595;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
            this.objectGID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectGroundAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectGroundAddedMessage(input);
        }

        serializeAs_ObjectGroundAddedMessage(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
        }

        deserializeAs_ObjectGroundAddedMessage(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ObjectGroundAddedMessage.cellId.");
            }
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ObjectGroundAddedMessage.objectGID.");
            }
        }
    }
    class ObjectGroundListAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cells = [];
            this.referenceIds = [];
            this.ID = 2845;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cells = [];
            this.referenceIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectGroundListAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectGroundListAddedMessage(input);
        }

        serializeAs_ObjectGroundListAddedMessage(ouput) {
            output.writeShort(this.cells.length);
            for (var _i1 = 0; _i1 < this.cells.length; _i1++) {
                if (this.cells[_i1] < 0 || this.cells[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.cells[_i1] + ") on element 1 (starting at 1) of cells.");
                }
                output.writeVarShort(this.cells[_i1]);
            }
            output.writeShort(this.referenceIds.length);
            for (var _i2 = 0; _i2 < this.referenceIds.length; _i2++) {
                if (this.referenceIds[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.referenceIds[_i2] + ") on element 2 (starting at 1) of referenceIds.");
                }
                output.writeVarInt(this.referenceIds[_i2]);
            }
        }

        deserializeAs_ObjectGroundListAddedMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _cellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cells.");
                }
                this.cells.push(_val1);
            }
            var _referenceIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _referenceIdsLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of referenceIds.");
                }
                this.referenceIds.push(_val2);
            }
        }
    }
    class ObjectGroundRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cell = 0;
            this.ID = 3534;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cell = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectGroundRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectGroundRemovedMessage(input);
        }

        serializeAs_ObjectGroundRemovedMessage(ouput) {
            if (this.cell < 0 || this.cell > 559) {
                throw new Error("Forbidden value (" + this.cell + ") on element cell.");
            }
            output.writeVarShort(this.cell);
        }

        deserializeAs_ObjectGroundRemovedMessage(input) {
            this.cell = input.readVarUhShort();
            if (this.cell < 0 || this.cell > 559) {
                throw new Error("Forbidden value (" + this.cell + ") on element of ObjectGroundRemovedMessage.cell.");
            }
        }
    }
    class ObjectGroundRemovedMultipleMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cells = [];
            this.ID = 823;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectGroundRemovedMultipleMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectGroundRemovedMultipleMessage(input);
        }

        serializeAs_ObjectGroundRemovedMultipleMessage(ouput) {
            output.writeShort(this.cells.length);
            for (var _i1 = 0; _i1 < this.cells.length; _i1++) {
                if (this.cells[_i1] < 0 || this.cells[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.cells[_i1] + ") on element 1 (starting at 1) of cells.");
                }
                output.writeVarShort(this.cells[_i1]);
            }
        }

        deserializeAs_ObjectGroundRemovedMultipleMessage(input) {
            var _val1 = 0;
            var _cellsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cells.");
                }
                this.cells.push(_val1);
            }
        }
    }
    class GameDataPlayFarmObjectAnimationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = [];
            this.ID = 9266;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameDataPlayFarmObjectAnimationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameDataPlayFarmObjectAnimationMessage(input);
        }

        serializeAs_GameDataPlayFarmObjectAnimationMessage(ouput) {
            output.writeShort(this.cellId.length);
            for (var _i1 = 0; _i1 < this.cellId.length; _i1++) {
                if (this.cellId[_i1] < 0 || this.cellId[_i1] > 559) {
                    throw new Error("Forbidden value (" + this.cellId[_i1] + ") on element 1 (starting at 1) of cellId.");
                }
                output.writeVarShort(this.cellId[_i1]);
            }
        }

        deserializeAs_GameDataPlayFarmObjectAnimationMessage(input) {
            var _val1 = 0;
            var _cellIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _cellIdLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0 || _val1 > 559) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of cellId.");
                }
                this.cellId.push(_val1);
            }
        }
    }
    class PaddockPropertiesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.properties = new PaddockInstancesInformations();
            this.ID = 5635;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.properties = new PaddockInstancesInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockPropertiesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockPropertiesMessage(input);
        }

        serializeAs_PaddockPropertiesMessage(ouput) {
            this.properties.serializeAs_PaddockInstancesInformations(output);
        }

        deserializeAs_PaddockPropertiesMessage(input) {
            this.properties = new PaddockInstancesInformations();
            this.properties.deserialize(input);
        }
    }
    class PaddockSellBuyDialogMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.bsell = false;
            this.ownerId = 0;
            this.price = 0;
            this.ID = 7797;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bsell = false;
            this.ownerId = 0;
            this.price = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockSellBuyDialogMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockSellBuyDialogMessage(input);
        }

        serializeAs_PaddockSellBuyDialogMessage(ouput) {
            output.writeBoolean(this.bsell);
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element ownerId.");
            }
            output.writeVarInt(this.ownerId);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_PaddockSellBuyDialogMessage(input) {
            this.bsell = input.readBoolean();
            this.ownerId = input.readVarUhInt();
            if (this.ownerId < 0) {
                throw new Error("Forbidden value (" + this.ownerId + ") on element of PaddockSellBuyDialogMessage.ownerId.");
            }
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of PaddockSellBuyDialogMessage.price.");
            }
        }
    }
    class PaddockToSellFilterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.areaId = 0;
            this.atLeastNbMount = 0;
            this.atLeastNbMachine = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
            this.ID = 1854;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.areaId = 0;
            this.atLeastNbMount = 0;
            this.atLeastNbMachine = 0;
            this.maxPrice = 0;
            this.orderBy = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockToSellFilterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockToSellFilterMessage(input);
        }

        serializeAs_PaddockToSellFilterMessage(ouput) {
            output.writeInt(this.areaId);
            output.writeByte(this.atLeastNbMount);
            output.writeByte(this.atLeastNbMachine);
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element maxPrice.");
            }
            output.writeVarLong(this.maxPrice);
            output.writeByte(this.orderBy);
        }

        deserializeAs_PaddockToSellFilterMessage(input) {
            this.areaId = input.readInt();
            this.atLeastNbMount = input.readByte();
            this.atLeastNbMachine = input.readByte();
            this.maxPrice = input.readVarUhLong();
            if (this.maxPrice < 0 || this.maxPrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.maxPrice + ") on element of PaddockToSellFilterMessage.maxPrice.");
            }
            this.orderBy = input.readByte();
            if (this.orderBy < 0) {
                throw new Error("Forbidden value (" + this.orderBy + ") on element of PaddockToSellFilterMessage.orderBy.");
            }
        }
    }
    class PaddockToSellListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.pageIndex = 0;
            this.totalPage = 0;
            this.paddockList = [];
            this.ID = 9204;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.paddockList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockToSellListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockToSellListMessage(input);
        }

        serializeAs_PaddockToSellListMessage(ouput) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element totalPage.");
            }
            output.writeVarShort(this.totalPage);
            output.writeShort(this.paddockList.length);
            for (var _i3 = 0; _i3 < this.paddockList.length; _i3++) {
                (this.paddockList[_i3]).serializeAs_PaddockInformationsForSell(output);
            }
        }

        deserializeAs_PaddockToSellListMessage(input) {
            var _item3 = null;
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListMessage.pageIndex.");
            }
            this.totalPage = input.readVarUhShort();
            if (this.totalPage < 0) {
                throw new Error("Forbidden value (" + this.totalPage + ") on element of PaddockToSellListMessage.totalPage.");
            }
            var _paddockListLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _paddockListLen; _i3++) {
                _item3 = new PaddockInformationsForSell();
                _item3.deserialize(input);
                this.paddockList.push(_item3);
            }
        }
    }
    class PaddockToSellListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.pageIndex = 0;
            this.ID = 9694;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.pageIndex = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PaddockToSellListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PaddockToSellListRequestMessage(input);
        }

        serializeAs_PaddockToSellListRequestMessage(ouput) {
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element pageIndex.");
            }
            output.writeVarShort(this.pageIndex);
        }

        deserializeAs_PaddockToSellListRequestMessage(input) {
            this.pageIndex = input.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error("Forbidden value (" + this.pageIndex + ") on element of PaddockToSellListRequestMessage.pageIndex.");
            }
        }
    }
    class AbstractPartyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.partyId = 0;
            this.ID = 6775;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AbstractPartyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractPartyMessage(input);
        }

        serializeAs_AbstractPartyMessage(ouput) {
            if (this.partyId < 0) {
                throw new Error("Forbidden value (" + this.partyId + ") on element partyId.");
            }
            output.writeVarInt(this.partyId);
        }

        deserializeAs_AbstractPartyMessage(input) {
            this.partyId = input.readVarUhInt();
            if (this.partyId < 0) {
                throw new Error("Forbidden value (" + this.partyId + ") on element of AbstractPartyMessage.partyId.");
            }
        }
    }
    class AbstractPartyEventMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 9359;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AbstractPartyEventMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractPartyEventMessage(input);
        }

        serializeAs_AbstractPartyEventMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_AbstractPartyEventMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class AbstractPartyMemberInFightMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.memberId = 0;
            this.memberAccountId = 0;
            this.memberName = "";
            this.fightId = 0;
            this.timeBeforeFightStart = 0;
            this.ID = 9489;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
            this.memberId = 0;
            this.memberAccountId = 0;
            this.memberName = "";
            this.fightId = 0;
            this.timeBeforeFightStart = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AbstractPartyMemberInFightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AbstractPartyMemberInFightMessage(input);
        }

        serializeAs_AbstractPartyMemberInFightMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.reason);
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            if (this.memberAccountId < 0) {
                throw new Error("Forbidden value (" + this.memberAccountId + ") on element memberAccountId.");
            }
            output.writeInt(this.memberAccountId);
            output.writeUTF(this.memberName);
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element fightId.");
            }
            output.writeVarShort(this.fightId);
            output.writeVarShort(this.timeBeforeFightStart);
        }

        deserializeAs_AbstractPartyMemberInFightMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of AbstractPartyMemberInFightMessage.reason.");
            }
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of AbstractPartyMemberInFightMessage.memberId.");
            }
            this.memberAccountId = input.readInt();
            if (this.memberAccountId < 0) {
                throw new Error("Forbidden value (" + this.memberAccountId + ") on element of AbstractPartyMemberInFightMessage.memberAccountId.");
            }
            this.memberName = input.readUTF();
            this.fightId = input.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error("Forbidden value (" + this.fightId + ") on element of AbstractPartyMemberInFightMessage.fightId.");
            }
            this.timeBeforeFightStart = input.readVarShort();
        }
    }
    class PartyMemberInBreachFightMessage extends AbstractPartyMemberInFightMessage {
        constructor(_super) {
            super()
            this.floor = 0;
            this.room = 0;
            this.ID = 101;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.floor = 0;
            this.room = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyMemberInBreachFightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberInBreachFightMessage(input);
        }

        serializeAs_PartyMemberInBreachFightMessage(ouput) {
            this.serializeAs_AbstractPartyMemberInFightMessage.call(this, output);
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element floor.");
            }
            output.writeVarInt(this.floor);
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element room.");
            }
            output.writeByte(this.room);
        }

        deserializeAs_PartyMemberInBreachFightMessage(input) {
            this.deserializeAs_AbstractPartyMemberInFightMessage.call(this, input);
            this.floor = input.readVarUhInt();
            if (this.floor < 0) {
                throw new Error("Forbidden value (" + this.floor + ") on element of PartyMemberInBreachFightMessage.floor.");
            }
            this.room = input.readByte();
            if (this.room < 0) {
                throw new Error("Forbidden value (" + this.room + ") on element of PartyMemberInBreachFightMessage.room.");
            }
        }
    }
    class DungeonPartyFinderAvailableDungeonsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonIds = [];
            this.ID = 1652;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderAvailableDungeonsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(input);
        }

        serializeAs_DungeonPartyFinderAvailableDungeonsMessage(ouput) {
            output.writeShort(this.dungeonIds.length);
            for (var _i1 = 0; _i1 < this.dungeonIds.length; _i1++) {
                if (this.dungeonIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.dungeonIds[_i1] + ") on element 1 (starting at 1) of dungeonIds.");
                }
                output.writeVarShort(this.dungeonIds[_i1]);
            }
        }

        deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(input) {
            var _val1 = 0;
            var _dungeonIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of dungeonIds.");
                }
                this.dungeonIds.push(_val1);
            }
        }
    }
    class DungeonPartyFinderAvailableDungeonsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4464;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(input);
        }

        serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(ouput) {

        }

        deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(input) {

        }
    }
    class DungeonPartyFinderListenErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.ID = 8513;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderListenErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderListenErrorMessage(input);
        }

        serializeAs_DungeonPartyFinderListenErrorMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        }

        deserializeAs_DungeonPartyFinderListenErrorMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenErrorMessage.dungeonId.");
            }
        }
    }
    class DungeonPartyFinderListenRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.ID = 9733;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderListenRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderListenRequestMessage(input);
        }

        serializeAs_DungeonPartyFinderListenRequestMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        }

        deserializeAs_DungeonPartyFinderListenRequestMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderListenRequestMessage.dungeonId.");
            }
        }
    }
    class DungeonPartyFinderRegisterErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8873;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderRegisterErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderRegisterErrorMessage(input);
        }

        serializeAs_DungeonPartyFinderRegisterErrorMessage(ouput) {

        }

        deserializeAs_DungeonPartyFinderRegisterErrorMessage(input) {

        }
    }
    class DungeonPartyFinderRegisterRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonIds = [];
            this.ID = 9338;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderRegisterRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderRegisterRequestMessage(input);
        }

        serializeAs_DungeonPartyFinderRegisterRequestMessage(ouput) {
            output.writeShort(this.dungeonIds.length);
            for (var _i1 = 0; _i1 < this.dungeonIds.length; _i1++) {
                if (this.dungeonIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.dungeonIds[_i1] + ") on element 1 (starting at 1) of dungeonIds.");
                }
                output.writeVarShort(this.dungeonIds[_i1]);
            }
        }

        deserializeAs_DungeonPartyFinderRegisterRequestMessage(input) {
            var _val1 = 0;
            var _dungeonIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of dungeonIds.");
                }
                this.dungeonIds.push(_val1);
            }
        }
    }
    class DungeonPartyFinderRegisterSuccessMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonIds = [];
            this.ID = 4458;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderRegisterSuccessMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderRegisterSuccessMessage(input);
        }

        serializeAs_DungeonPartyFinderRegisterSuccessMessage(ouput) {
            output.writeShort(this.dungeonIds.length);
            for (var _i1 = 0; _i1 < this.dungeonIds.length; _i1++) {
                if (this.dungeonIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.dungeonIds[_i1] + ") on element 1 (starting at 1) of dungeonIds.");
                }
                output.writeVarShort(this.dungeonIds[_i1]);
            }
        }

        deserializeAs_DungeonPartyFinderRegisterSuccessMessage(input) {
            var _val1 = 0;
            var _dungeonIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _dungeonIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of dungeonIds.");
                }
                this.dungeonIds.push(_val1);
            }
        }
    }
    class DungeonPartyFinderRoomContentMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.players = [];
            this.ID = 6025;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.players = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderRoomContentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderRoomContentMessage(input);
        }

        serializeAs_DungeonPartyFinderRoomContentMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeShort(this.players.length);
            for (var _i2 = 0; _i2 < this.players.length; _i2++) {
                (this.players[_i2]).serializeAs_DungeonPartyFinderPlayer(output);
            }
        }

        deserializeAs_DungeonPartyFinderRoomContentMessage(input) {
            var _item2 = null;
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentMessage.dungeonId.");
            }
            var _playersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _playersLen; _i2++) {
                _item2 = new DungeonPartyFinderPlayer();
                _item2.deserialize(input);
                this.players.push(_item2);
            }
        }
    }
    class DungeonPartyFinderRoomContentUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.addedPlayers = [];
            this.removedPlayersIds = [];
            this.ID = 4695;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.addedPlayers = [];
            this.removedPlayersIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DungeonPartyFinderRoomContentUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(input);
        }

        serializeAs_DungeonPartyFinderRoomContentUpdateMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeShort(this.addedPlayers.length);
            for (var _i2 = 0; _i2 < this.addedPlayers.length; _i2++) {
                (this.addedPlayers[_i2]).serializeAs_DungeonPartyFinderPlayer(output);
            }
            output.writeShort(this.removedPlayersIds.length);
            for (var _i3 = 0; _i3 < this.removedPlayersIds.length; _i3++) {
                if (this.removedPlayersIds[_i3] < 0 || this.removedPlayersIds[_i3] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.removedPlayersIds[_i3] + ") on element 3 (starting at 1) of removedPlayersIds.");
                }
                output.writeVarLong(this.removedPlayersIds[_i3]);
            }
        }

        deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(input) {
            var _item2 = null;
            var _val3 = NaN;
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of DungeonPartyFinderRoomContentUpdateMessage.dungeonId.");
            }
            var _addedPlayersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _addedPlayersLen; _i2++) {
                _item2 = new DungeonPartyFinderPlayer();
                _item2.deserialize(input);
                this.addedPlayers.push(_item2);
            }
            var _removedPlayersIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _removedPlayersIdsLen; _i3++) {
                _val3 = input.readVarUhLong();
                if (_val3 < 0 || _val3 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of removedPlayersIds.");
                }
                this.removedPlayersIds.push(_val3);
            }
        }
    }
    class PartyUpdateLightMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.ID = 4567;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyUpdateLightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyUpdateLightMessage(input);
        }

        serializeAs_PartyUpdateLightMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element lifePoints.");
            }
            output.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element maxLifePoints.");
            }
            output.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element prospecting.");
            }
            output.writeVarInt(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element regenRate.");
            }
            output.writeByte(this.regenRate);
        }

        deserializeAs_PartyUpdateLightMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of PartyUpdateLightMessage.id.");
            }
            this.lifePoints = input.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error("Forbidden value (" + this.lifePoints + ") on element of PartyUpdateLightMessage.lifePoints.");
            }
            this.maxLifePoints = input.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error("Forbidden value (" + this.maxLifePoints + ") on element of PartyUpdateLightMessage.maxLifePoints.");
            }
            this.prospecting = input.readVarUhInt();
            if (this.prospecting < 0) {
                throw new Error("Forbidden value (" + this.prospecting + ") on element of PartyUpdateLightMessage.prospecting.");
            }
            this.regenRate = input.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error("Forbidden value (" + this.regenRate + ") on element of PartyUpdateLightMessage.regenRate.");
            }
        }
    }
    class PartyEntityUpdateLightMessage extends PartyUpdateLightMessage {
        constructor(_super) {
            super()
            this.indexId = 0;
            this.ID = 3775;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.indexId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyEntityUpdateLightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyEntityUpdateLightMessage(input);
        }

        serializeAs_PartyEntityUpdateLightMessage(ouput) {
            this.serializeAs_PartyUpdateLightMessage.call(this, output);
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element indexId.");
            }
            output.writeByte(this.indexId);
        }

        deserializeAs_PartyEntityUpdateLightMessage(input) {
            this.deserializeAs_PartyUpdateLightMessage.call(this, input);
            this.indexId = input.readByte();
            if (this.indexId < 0) {
                throw new Error("Forbidden value (" + this.indexId + ") on element of PartyEntityUpdateLightMessage.indexId.");
            }
        }
    }
    class PartyAbdicateThroneMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 1919;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyAbdicateThroneMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyAbdicateThroneMessage(input);
        }

        serializeAs_PartyAbdicateThroneMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_PartyAbdicateThroneMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyAbdicateThroneMessage.playerId.");
            }
        }
    }
    class PartyAcceptInvitationMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 38;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyAcceptInvitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyAcceptInvitationMessage(input);
        }

        serializeAs_PartyAcceptInvitationMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyAcceptInvitationMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyCancelInvitationMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.guestId = 0;
            this.ID = 5476;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyCancelInvitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyCancelInvitationMessage(input);
        }

        serializeAs_PartyCancelInvitationMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        }

        deserializeAs_PartyCancelInvitationMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationMessage.guestId.");
            }
        }
    }
    class PartyCancelInvitationNotificationMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.cancelerId = 0;
            this.guestId = 0;
            this.ID = 5196;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cancelerId = 0;
            this.guestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyCancelInvitationNotificationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyCancelInvitationNotificationMessage(input);
        }

        serializeAs_PartyCancelInvitationNotificationMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
            }
            output.writeVarLong(this.cancelerId);
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        }

        deserializeAs_PartyCancelInvitationNotificationMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.cancelerId = input.readVarUhLong();
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element of PartyCancelInvitationNotificationMessage.cancelerId.");
            }
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyCancelInvitationNotificationMessage.guestId.");
            }
        }
    }
    class PartyCannotJoinErrorMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 3160;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyCannotJoinErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyCannotJoinErrorMessage(input);
        }

        serializeAs_PartyCannotJoinErrorMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.reason);
        }

        deserializeAs_PartyCannotJoinErrorMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of PartyCannotJoinErrorMessage.reason.");
            }
        }
    }
    class PartyDeletedMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 8798;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyDeletedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyDeletedMessage(input);
        }

        serializeAs_PartyDeletedMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyDeletedMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyFollowMemberRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 9807;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyFollowMemberRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyFollowMemberRequestMessage(input);
        }

        serializeAs_PartyFollowMemberRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_PartyFollowMemberRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyFollowMemberRequestMessage.playerId.");
            }
        }
    }
    class PartyFollowStatusUpdateMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.success = false;
            this.isFollowed = false;
            this.followedId = 0;
            this.ID = 4903;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.success = false;
            this.isFollowed = false;
            this.followedId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyFollowStatusUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyFollowStatusUpdateMessage(input);
        }

        serializeAs_PartyFollowStatusUpdateMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.success);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.isFollowed);
            output.writeByte(_box0);
            if (this.followedId < 0 || this.followedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.followedId + ") on element followedId.");
            }
            output.writeVarLong(this.followedId);
        }

        deserializeAs_PartyFollowStatusUpdateMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            var _box0 = input.readByte();
            this.success = BooleanByteWrapper.getFlag(_box0, 0);
            this.isFollowed = BooleanByteWrapper.getFlag(_box0, 1);
            this.followedId = input.readVarUhLong();
            if (this.followedId < 0 || this.followedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.followedId + ") on element of PartyFollowStatusUpdateMessage.followedId.");
            }
        }
    }
    class PartyFollowThisMemberRequestMessage extends PartyFollowMemberRequestMessage {
        constructor(_super) {
            super()
            this.enabled = false;
            this.ID = 5237;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enabled = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyFollowThisMemberRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyFollowThisMemberRequestMessage(input);
        }

        serializeAs_PartyFollowThisMemberRequestMessage(ouput) {
            this.serializeAs_PartyFollowMemberRequestMessage.call(this, output);
            output.writeBoolean(this.enabled);
        }

        deserializeAs_PartyFollowThisMemberRequestMessage(input) {
            this.deserializeAs_PartyFollowMemberRequestMessage.call(this, input);
            this.enabled = input.readBoolean();
        }
    }
    class PartyInvitationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = new AbstractPlayerSearchInformation();
            this.ID = 7376;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = new AbstractPlayerSearchInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationRequestMessage(input);
        }

        serializeAs_PartyInvitationRequestMessage(ouput) {
            output.writeShort(this.target.getTypeId());
            this.target.serialize(output);
        }

        deserializeAs_PartyInvitationRequestMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.target = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id1);
            this.target.deserialize(input);
        }
    }
    class PartyInvitationArenaRequestMessage extends PartyInvitationRequestMessage {
        constructor(_super) {
            super()

            this.ID = 5724;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationArenaRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationArenaRequestMessage(input);
        }

        serializeAs_PartyInvitationArenaRequestMessage(ouput) {
            this.serializeAs_PartyInvitationRequestMessage.call(this, output);
        }

        deserializeAs_PartyInvitationArenaRequestMessage(input) {
            this.deserializeAs_PartyInvitationRequestMessage.call(this, input);
        }
    }
    class PartyInvitationCancelledForGuestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.cancelerId = 0;
            this.ID = 6577;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cancelerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationCancelledForGuestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationCancelledForGuestMessage(input);
        }

        serializeAs_PartyInvitationCancelledForGuestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element cancelerId.");
            }
            output.writeVarLong(this.cancelerId);
        }

        deserializeAs_PartyInvitationCancelledForGuestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.cancelerId = input.readVarUhLong();
            if (this.cancelerId < 0 || this.cancelerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.cancelerId + ") on element of PartyInvitationCancelledForGuestMessage.cancelerId.");
            }
        }
    }
    class PartyInvitationDetailsMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.partyType = 0;
            this.partyName = "";
            this.fromId = 0;
            this.fromName = "";
            this.leaderId = 0;
            this.members = [];
            this.guests = [];
            this.ID = 7671;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyType = 0;
            this.partyName = "";
            this.fromId = 0;
            this.fromName = "";
            this.leaderId = 0;
            this.members = [];
            this.guests = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationDetailsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationDetailsMessage(input);
        }

        serializeAs_PartyInvitationDetailsMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.partyType);
            output.writeUTF(this.partyName);
            if (this.fromId < 0 || this.fromId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fromId + ") on element fromId.");
            }
            output.writeVarLong(this.fromId);
            output.writeUTF(this.fromName);
            if (this.leaderId < 0 || this.leaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element leaderId.");
            }
            output.writeVarLong(this.leaderId);
            output.writeShort(this.members.length);
            for (var _i6 = 0; _i6 < this.members.length; _i6++) {
                output.writeShort((this.members[_i6]).getTypeId());
                (this.members[_i6]).serialize(output);
            }
            output.writeShort(this.guests.length);
            for (var _i7 = 0; _i7 < this.guests.length; _i7++) {
                (this.guests[_i7]).serializeAs_PartyGuestInformations(output);
            }
        }

        deserializeAs_PartyInvitationDetailsMessage(input) {
            var _id6 = 0;
            var _item6 = null;
            var _item7 = null;
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyType = input.readByte();
            if (this.partyType < 0) {
                throw new Error("Forbidden value (" + this.partyType + ") on element of PartyInvitationDetailsMessage.partyType.");
            }
            this.partyName = input.readUTF();
            this.fromId = input.readVarUhLong();
            if (this.fromId < 0 || this.fromId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fromId + ") on element of PartyInvitationDetailsMessage.fromId.");
            }
            this.fromName = input.readUTF();
            this.leaderId = input.readVarUhLong();
            if (this.leaderId < 0 || this.leaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leaderId + ") on element of PartyInvitationDetailsMessage.leaderId.");
            }
            var _membersLen = input.readUnsignedShort();
            for (var _i6 = 0; _i6 < _membersLen; _i6++) {
                _id6 = input.readUnsignedShort();
                _item6 = ProtocolTypeManager.getInstance(PartyInvitationMemberInformations, _id6);
                _item6.deserialize(input);
                this.members.push(_item6);
            }
            var _guestsLen = input.readUnsignedShort();
            for (var _i7 = 0; _i7 < _guestsLen; _i7++) {
                _item7 = new PartyGuestInformations();
                _item7.deserialize(input);
                this.guests.push(_item7);
            }
        }
    }
    class PartyInvitationDetailsRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 4130;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationDetailsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationDetailsRequestMessage(input);
        }

        serializeAs_PartyInvitationDetailsRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyInvitationDetailsRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyInvitationDungeonDetailsMessage extends PartyInvitationDetailsMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.playersDungeonReady = [];
            this.ID = 8279;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.playersDungeonReady = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationDungeonDetailsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationDungeonDetailsMessage(input);
        }

        serializeAs_PartyInvitationDungeonDetailsMessage(ouput) {
            this.serializeAs_PartyInvitationDetailsMessage.call(this, output);
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            output.writeShort(this.playersDungeonReady.length);
            for (var _i2 = 0; _i2 < this.playersDungeonReady.length; _i2++) {
                output.writeBoolean(this.playersDungeonReady[_i2]);
            }
        }

        deserializeAs_PartyInvitationDungeonDetailsMessage(input) {
            var _val2 = false;
            this.deserializeAs_PartyInvitationDetailsMessage.call(this, input);
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonDetailsMessage.dungeonId.");
            }
            var _playersDungeonReadyLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _playersDungeonReadyLen; _i2++) {
                _val2 = input.readBoolean();
                this.playersDungeonReady.push(_val2);
            }
        }
    }
    class PartyInvitationMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.partyType = 0;
            this.partyName = "";
            this.maxParticipants = 0;
            this.fromId = 0;
            this.fromName = "";
            this.toId = 0;
            this.ID = 5425;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyType = 0;
            this.partyName = "";
            this.maxParticipants = 0;
            this.fromId = 0;
            this.fromName = "";
            this.toId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationMessage(input);
        }

        serializeAs_PartyInvitationMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.partyType);
            output.writeUTF(this.partyName);
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
            }
            output.writeByte(this.maxParticipants);
            if (this.fromId < 0 || this.fromId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fromId + ") on element fromId.");
            }
            output.writeVarLong(this.fromId);
            output.writeUTF(this.fromName);
            if (this.toId < 0 || this.toId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.toId + ") on element toId.");
            }
            output.writeVarLong(this.toId);
        }

        deserializeAs_PartyInvitationMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyType = input.readByte();
            if (this.partyType < 0) {
                throw new Error("Forbidden value (" + this.partyType + ") on element of PartyInvitationMessage.partyType.");
            }
            this.partyName = input.readUTF();
            this.maxParticipants = input.readByte();
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element of PartyInvitationMessage.maxParticipants.");
            }
            this.fromId = input.readVarUhLong();
            if (this.fromId < 0 || this.fromId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.fromId + ") on element of PartyInvitationMessage.fromId.");
            }
            this.fromName = input.readUTF();
            this.toId = input.readVarUhLong();
            if (this.toId < 0 || this.toId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.toId + ") on element of PartyInvitationMessage.toId.");
            }
        }
    }
    class PartyInvitationDungeonMessage extends PartyInvitationMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.ID = 8319;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationDungeonMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationDungeonMessage(input);
        }

        serializeAs_PartyInvitationDungeonMessage(ouput) {
            this.serializeAs_PartyInvitationMessage.call(this, output);
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        }

        deserializeAs_PartyInvitationDungeonMessage(input) {
            this.deserializeAs_PartyInvitationMessage.call(this, input);
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonMessage.dungeonId.");
            }
        }
    }
    class PartyInvitationDungeonRequestMessage extends PartyInvitationRequestMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.ID = 4625;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyInvitationDungeonRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyInvitationDungeonRequestMessage(input);
        }

        serializeAs_PartyInvitationDungeonRequestMessage(ouput) {
            this.serializeAs_PartyInvitationRequestMessage.call(this, output);
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        }

        deserializeAs_PartyInvitationDungeonRequestMessage(input) {
            this.deserializeAs_PartyInvitationRequestMessage.call(this, input);
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of PartyInvitationDungeonRequestMessage.dungeonId.");
            }
        }
    }
    class PartyJoinMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.partyType = 0;
            this.partyLeaderId = 0;
            this.maxParticipants = 0;
            this.members = [];
            this.guests = [];
            this.restricted = false;
            this.partyName = "";
            this.ID = 8785;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyType = 0;
            this.partyLeaderId = 0;
            this.maxParticipants = 0;
            this.members = [];
            this.guests = [];
            this.restricted = false;
            this.partyName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyJoinMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyJoinMessage(input);
        }

        serializeAs_PartyJoinMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.partyType);
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
            }
            output.writeVarLong(this.partyLeaderId);
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element maxParticipants.");
            }
            output.writeByte(this.maxParticipants);
            output.writeShort(this.members.length);
            for (var _i4 = 0; _i4 < this.members.length; _i4++) {
                output.writeShort((this.members[_i4]).getTypeId());
                (this.members[_i4]).serialize(output);
            }
            output.writeShort(this.guests.length);
            for (var _i5 = 0; _i5 < this.guests.length; _i5++) {
                (this.guests[_i5]).serializeAs_PartyGuestInformations(output);
            }
            output.writeBoolean(this.restricted);
            output.writeUTF(this.partyName);
        }

        deserializeAs_PartyJoinMessage(input) {
            var _id4 = 0;
            var _item4 = null;
            var _item5 = null;
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyType = input.readByte();
            if (this.partyType < 0) {
                throw new Error("Forbidden value (" + this.partyType + ") on element of PartyJoinMessage.partyType.");
            }
            this.partyLeaderId = input.readVarUhLong();
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element of PartyJoinMessage.partyLeaderId.");
            }
            this.maxParticipants = input.readByte();
            if (this.maxParticipants < 0) {
                throw new Error("Forbidden value (" + this.maxParticipants + ") on element of PartyJoinMessage.maxParticipants.");
            }
            var _membersLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _membersLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(PartyMemberInformations, _id4);
                _item4.deserialize(input);
                this.members.push(_item4);
            }
            var _guestsLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _guestsLen; _i5++) {
                _item5 = new PartyGuestInformations();
                _item5.deserialize(input);
                this.guests.push(_item5);
            }
            this.restricted = input.readBoolean();
            this.partyName = input.readUTF();
        }
    }
    class PartyKickedByMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.kickerId = 0;
            this.ID = 6033;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kickerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyKickedByMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyKickedByMessage(input);
        }

        serializeAs_PartyKickedByMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.kickerId < 0 || this.kickerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element kickerId.");
            }
            output.writeVarLong(this.kickerId);
        }

        deserializeAs_PartyKickedByMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.kickerId = input.readVarUhLong();
            if (this.kickerId < 0 || this.kickerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element of PartyKickedByMessage.kickerId.");
            }
        }
    }
    class PartyKickRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 6111;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyKickRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyKickRequestMessage(input);
        }

        serializeAs_PartyKickRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_PartyKickRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyKickRequestMessage.playerId.");
            }
        }
    }
    class PartyLeaderUpdateMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.partyLeaderId = 0;
            this.ID = 860;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyLeaderId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyLeaderUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyLeaderUpdateMessage(input);
        }

        serializeAs_PartyLeaderUpdateMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element partyLeaderId.");
            }
            output.writeVarLong(this.partyLeaderId);
        }

        deserializeAs_PartyLeaderUpdateMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.partyLeaderId = input.readVarUhLong();
            if (this.partyLeaderId < 0 || this.partyLeaderId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.partyLeaderId + ") on element of PartyLeaderUpdateMessage.partyLeaderId.");
            }
        }
    }
    class PartyLeaveMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 1026;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyLeaveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyLeaveMessage(input);
        }

        serializeAs_PartyLeaveMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyLeaveMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyLeaveRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 5980;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyLeaveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyLeaveRequestMessage(input);
        }

        serializeAs_PartyLeaveRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyLeaveRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyLocateMembersMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.geopositions = [];
            this.ID = 263;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.geopositions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyLocateMembersMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyLocateMembersMessage(input);
        }

        serializeAs_PartyLocateMembersMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeShort(this.geopositions.length);
            for (var _i1 = 0; _i1 < this.geopositions.length; _i1++) {
                (this.geopositions[_i1]).serializeAs_PartyMemberGeoPosition(output);
            }
        }

        deserializeAs_PartyLocateMembersMessage(input) {
            var _item1 = null;
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            var _geopositionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _geopositionsLen; _i1++) {
                _item1 = new PartyMemberGeoPosition();
                _item1.deserialize(input);
                this.geopositions.push(_item1);
            }
        }
    }
    class PartyLocateMembersRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 1037;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyLocateMembersRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyLocateMembersRequestMessage(input);
        }

        serializeAs_PartyLocateMembersRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyLocateMembersRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyLoyaltyStatusMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.loyal = false;
            this.ID = 1222;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.loyal = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyLoyaltyStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyLoyaltyStatusMessage(input);
        }

        serializeAs_PartyLoyaltyStatusMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.loyal);
        }

        deserializeAs_PartyLoyaltyStatusMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.loyal = input.readBoolean();
        }
    }
    class PartyMemberRemoveMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.leavingPlayerId = 0;
            this.ID = 6692;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.leavingPlayerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyMemberRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberRemoveMessage(input);
        }

        serializeAs_PartyMemberRemoveMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leavingPlayerId + ") on element leavingPlayerId.");
            }
            output.writeVarLong(this.leavingPlayerId);
        }

        deserializeAs_PartyMemberRemoveMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.leavingPlayerId = input.readVarUhLong();
            if (this.leavingPlayerId < 0 || this.leavingPlayerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.leavingPlayerId + ") on element of PartyMemberRemoveMessage.leavingPlayerId.");
            }
        }
    }
    class PartyMemberEjectedMessage extends PartyMemberRemoveMessage {
        constructor(_super) {
            super()
            this.kickerId = 0;
            this.ID = 6052;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kickerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyMemberEjectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberEjectedMessage(input);
        }

        serializeAs_PartyMemberEjectedMessage(ouput) {
            this.serializeAs_PartyMemberRemoveMessage.call(this, output);
            if (this.kickerId < 0 || this.kickerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element kickerId.");
            }
            output.writeVarLong(this.kickerId);
        }

        deserializeAs_PartyMemberEjectedMessage(input) {
            this.deserializeAs_PartyMemberRemoveMessage.call(this, input);
            this.kickerId = input.readVarUhLong();
            if (this.kickerId < 0 || this.kickerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickerId + ") on element of PartyMemberEjectedMessage.kickerId.");
            }
        }
    }
    class PartyMemberInStandardFightMessage extends AbstractPartyMemberInFightMessage {
        constructor(_super) {
            super()
            this.fightMap = new MapCoordinatesExtended();
            this.ID = 3094;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.fightMap = new MapCoordinatesExtended();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyMemberInStandardFightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyMemberInStandardFightMessage(input);
        }

        serializeAs_PartyMemberInStandardFightMessage(ouput) {
            this.serializeAs_AbstractPartyMemberInFightMessage.call(this, output);
            this.fightMap.serializeAs_MapCoordinatesExtended(output);
        }

        deserializeAs_PartyMemberInStandardFightMessage(input) {
            this.deserializeAs_AbstractPartyMemberInFightMessage.call(this, input);
            this.fightMap = new MapCoordinatesExtended();
            this.fightMap.deserialize(input);
        }
    }
    class PartyModifiableStatusMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.enabled = false;
            this.ID = 9490;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enabled = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyModifiableStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyModifiableStatusMessage(input);
        }

        serializeAs_PartyModifiableStatusMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.enabled);
        }

        deserializeAs_PartyModifiableStatusMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.enabled = input.readBoolean();
        }
    }
    class PartyNameSetErrorMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.ID = 7694;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyNameSetErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyNameSetErrorMessage(input);
        }

        serializeAs_PartyNameSetErrorMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeByte(this.result);
        }

        deserializeAs_PartyNameSetErrorMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of PartyNameSetErrorMessage.result.");
            }
        }
    }
    class PartyNameSetRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.partyName = "";
            this.ID = 9077;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyNameSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyNameSetRequestMessage(input);
        }

        serializeAs_PartyNameSetRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeUTF(this.partyName);
        }

        deserializeAs_PartyNameSetRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyName = input.readUTF();
        }
    }
    class PartyNameUpdateMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.partyName = "";
            this.ID = 7353;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.partyName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyNameUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyNameUpdateMessage(input);
        }

        serializeAs_PartyNameUpdateMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeUTF(this.partyName);
        }

        deserializeAs_PartyNameUpdateMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.partyName = input.readUTF();
        }
    }
    class PartyNewGuestMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.guest = new PartyGuestInformations();
            this.ID = 6462;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guest = new PartyGuestInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyNewGuestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyNewGuestMessage(input);
        }

        serializeAs_PartyNewGuestMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            this.guest.serializeAs_PartyGuestInformations(output);
        }

        deserializeAs_PartyNewGuestMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.guest = new PartyGuestInformations();
            this.guest.deserialize(input);
        }
    }
    class PartyUpdateMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.memberInformations = new PartyMemberInformations();
            this.ID = 4960;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberInformations = new PartyMemberInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyUpdateMessage(input);
        }

        serializeAs_PartyUpdateMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            output.writeShort(this.memberInformations.getTypeId());
            this.memberInformations.serialize(output);
        }

        deserializeAs_PartyUpdateMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            var _id1 = input.readUnsignedShort();
            this.memberInformations = ProtocolTypeManager.getInstance(PartyMemberInformations, _id1);
            this.memberInformations.deserialize(input);
        }
    }
    class PartyNewMemberMessage extends PartyUpdateMessage {
        constructor(_super) {
            super()

            this.ID = 9480;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyNewMemberMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyNewMemberMessage(input);
        }

        serializeAs_PartyNewMemberMessage(ouput) {
            this.serializeAs_PartyUpdateMessage.call(this, output);
        }

        deserializeAs_PartyNewMemberMessage(input) {
            this.deserializeAs_PartyUpdateMessage.call(this, input);
        }
    }
    class PartyPledgeLoyaltyRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.loyal = false;
            this.ID = 550;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.loyal = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyPledgeLoyaltyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyPledgeLoyaltyRequestMessage(input);
        }

        serializeAs_PartyPledgeLoyaltyRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.loyal);
        }

        deserializeAs_PartyPledgeLoyaltyRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.loyal = input.readBoolean();
        }
    }
    class PartyRefuseInvitationMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()

            this.ID = 3324;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyRefuseInvitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyRefuseInvitationMessage(input);
        }

        serializeAs_PartyRefuseInvitationMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
        }

        deserializeAs_PartyRefuseInvitationMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
        }
    }
    class PartyRefuseInvitationNotificationMessage extends AbstractPartyEventMessage {
        constructor(_super) {
            super()
            this.guestId = 0;
            this.ID = 9374;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyRefuseInvitationNotificationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyRefuseInvitationNotificationMessage(input);
        }

        serializeAs_PartyRefuseInvitationNotificationMessage(ouput) {
            this.serializeAs_AbstractPartyEventMessage.call(this, output);
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element guestId.");
            }
            output.writeVarLong(this.guestId);
        }

        deserializeAs_PartyRefuseInvitationNotificationMessage(input) {
            this.deserializeAs_AbstractPartyEventMessage.call(this, input);
            this.guestId = input.readVarUhLong();
            if (this.guestId < 0 || this.guestId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.guestId + ") on element of PartyRefuseInvitationNotificationMessage.guestId.");
            }
        }
    }
    class PartyRestrictedMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.restricted = false;
            this.ID = 1488;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.restricted = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyRestrictedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyRestrictedMessage(input);
        }

        serializeAs_PartyRestrictedMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            output.writeBoolean(this.restricted);
        }

        deserializeAs_PartyRestrictedMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.restricted = input.readBoolean();
        }
    }
    class PartyStopFollowRequestMessage extends AbstractPartyMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 4673;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PartyStopFollowRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PartyStopFollowRequestMessage(input);
        }

        serializeAs_PartyStopFollowRequestMessage(ouput) {
            this.serializeAs_AbstractPartyMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_PartyStopFollowRequestMessage(input) {
            this.deserializeAs_AbstractPartyMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of PartyStopFollowRequestMessage.playerId.");
            }
        }
    }
    class PurchasableDialogMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.buyOrSell = false;
            this.purchasableId = 0;
            this.purchasableInstanceId = 0;
            this.secondHand = false;
            this.price = 0;
            this.ID = 1096;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.buyOrSell = false;
            this.purchasableId = 0;
            this.purchasableInstanceId = 0;
            this.secondHand = false;
            this.price = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PurchasableDialogMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PurchasableDialogMessage(input);
        }

        serializeAs_PurchasableDialogMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.buyOrSell);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.secondHand);
            output.writeByte(_box0);
            if (this.purchasableId < 0 || this.purchasableId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.purchasableId + ") on element purchasableId.");
            }
            output.writeDouble(this.purchasableId);
            if (this.purchasableInstanceId < 0) {
                throw new Error("Forbidden value (" + this.purchasableInstanceId + ") on element purchasableInstanceId.");
            }
            output.writeInt(this.purchasableInstanceId);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_PurchasableDialogMessage(input) {
            var _box0 = input.readByte();
            this.buyOrSell = BooleanByteWrapper.getFlag(_box0, 0);
            this.secondHand = BooleanByteWrapper.getFlag(_box0, 1);
            this.purchasableId = input.readDouble();
            if (this.purchasableId < 0 || this.purchasableId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.purchasableId + ") on element of PurchasableDialogMessage.purchasableId.");
            }
            this.purchasableInstanceId = input.readInt();
            if (this.purchasableInstanceId < 0) {
                throw new Error("Forbidden value (" + this.purchasableInstanceId + ") on element of PurchasableDialogMessage.purchasableInstanceId.");
            }
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of PurchasableDialogMessage.price.");
            }
        }
    }
    class FollowedQuestsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quests = [];
            this.ID = 758;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quests = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FollowedQuestsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FollowedQuestsMessage(input);
        }

        serializeAs_FollowedQuestsMessage(ouput) {
            output.writeShort(this.quests.length);
            for (var _i1 = 0; _i1 < this.quests.length; _i1++) {
                (this.quests[_i1]).serializeAs_QuestActiveDetailedInformations(output);
            }
        }

        deserializeAs_FollowedQuestsMessage(input) {
            var _item1 = null;
            var _questsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _questsLen; _i1++) {
                _item1 = new QuestActiveDetailedInformations();
                _item1.deserialize(input);
                this.quests.push(_item1);
            }
        }
    }
    class FollowQuestObjectiveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.objectiveId = 0;
            this.ID = 1546;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
            this.objectiveId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FollowQuestObjectiveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FollowQuestObjectiveRequestMessage(input);
        }

        serializeAs_FollowQuestObjectiveRequestMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            output.writeShort(this.objectiveId);
        }

        deserializeAs_FollowQuestObjectiveRequestMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of FollowQuestObjectiveRequestMessage.questId.");
            }
            this.objectiveId = input.readShort();
        }
    }
    class GuidedModeQuitRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7391;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuidedModeQuitRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuidedModeQuitRequestMessage(input);
        }

        serializeAs_GuidedModeQuitRequestMessage(ouput) {

        }

        deserializeAs_GuidedModeQuitRequestMessage(input) {

        }
    }
    class GuidedModeReturnRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4746;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuidedModeReturnRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuidedModeReturnRequestMessage(input);
        }

        serializeAs_GuidedModeReturnRequestMessage(ouput) {

        }

        deserializeAs_GuidedModeReturnRequestMessage(input) {

        }
    }
    class QuestListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.finishedQuestsIds = [];
            this.finishedQuestsCounts = [];
            this.activeQuests = [];
            this.reinitDoneQuestsIds = [];
            this.ID = 6218;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.finishedQuestsIds = [];
            this.finishedQuestsCounts = [];
            this.activeQuests = [];
            this.reinitDoneQuestsIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestListMessage(input);
        }

        serializeAs_QuestListMessage(ouput) {
            output.writeShort(this.finishedQuestsIds.length);
            for (var _i1 = 0; _i1 < this.finishedQuestsIds.length; _i1++) {
                if (this.finishedQuestsIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.finishedQuestsIds[_i1] + ") on element 1 (starting at 1) of finishedQuestsIds.");
                }
                output.writeVarShort(this.finishedQuestsIds[_i1]);
            }
            output.writeShort(this.finishedQuestsCounts.length);
            for (var _i2 = 0; _i2 < this.finishedQuestsCounts.length; _i2++) {
                if (this.finishedQuestsCounts[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.finishedQuestsCounts[_i2] + ") on element 2 (starting at 1) of finishedQuestsCounts.");
                }
                output.writeVarShort(this.finishedQuestsCounts[_i2]);
            }
            output.writeShort(this.activeQuests.length);
            for (var _i3 = 0; _i3 < this.activeQuests.length; _i3++) {
                output.writeShort((this.activeQuests[_i3]).getTypeId());
                (this.activeQuests[_i3]).serialize(output);
            }
            output.writeShort(this.reinitDoneQuestsIds.length);
            for (var _i4 = 0; _i4 < this.reinitDoneQuestsIds.length; _i4++) {
                if (this.reinitDoneQuestsIds[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.reinitDoneQuestsIds[_i4] + ") on element 4 (starting at 1) of reinitDoneQuestsIds.");
                }
                output.writeVarShort(this.reinitDoneQuestsIds[_i4]);
            }
        }

        deserializeAs_QuestListMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _id3 = 0;
            var _item3 = null;
            var _val4 = 0;
            var _finishedQuestsIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _finishedQuestsIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of finishedQuestsIds.");
                }
                this.finishedQuestsIds.push(_val1);
            }
            var _finishedQuestsCountsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _finishedQuestsCountsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of finishedQuestsCounts.");
                }
                this.finishedQuestsCounts.push(_val2);
            }
            var _activeQuestsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _activeQuestsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(QuestActiveInformations, _id3);
                _item3.deserialize(input);
                this.activeQuests.push(_item3);
            }
            var _reinitDoneQuestsIdsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _reinitDoneQuestsIdsLen; _i4++) {
                _val4 = input.readVarUhShort();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of reinitDoneQuestsIds.");
                }
                this.reinitDoneQuestsIds.push(_val4);
            }
        }
    }
    class QuestListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 804;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestListRequestMessage(input);
        }

        serializeAs_QuestListRequestMessage(ouput) {

        }

        deserializeAs_QuestListRequestMessage(input) {

        }
    }
    class QuestObjectiveValidatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.objectiveId = 0;
            this.ID = 8772;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
            this.objectiveId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestObjectiveValidatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestObjectiveValidatedMessage(input);
        }

        serializeAs_QuestObjectiveValidatedMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
            }
            output.writeVarShort(this.objectiveId);
        }

        deserializeAs_QuestObjectiveValidatedMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidatedMessage.questId.");
            }
            this.objectiveId = input.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidatedMessage.objectiveId.");
            }
        }
    }
    class QuestObjectiveValidationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.objectiveId = 0;
            this.ID = 5927;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
            this.objectiveId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestObjectiveValidationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestObjectiveValidationMessage(input);
        }

        serializeAs_QuestObjectiveValidationMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element objectiveId.");
            }
            output.writeVarShort(this.objectiveId);
        }

        deserializeAs_QuestObjectiveValidationMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestObjectiveValidationMessage.questId.");
            }
            this.objectiveId = input.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error("Forbidden value (" + this.objectiveId + ") on element of QuestObjectiveValidationMessage.objectiveId.");
            }
        }
    }
    class QuestStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.ID = 1764;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestStartedMessage(input);
        }

        serializeAs_QuestStartedMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        }

        deserializeAs_QuestStartedMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStartedMessage.questId.");
            }
        }
    }
    class QuestStartRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.ID = 8923;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestStartRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestStartRequestMessage(input);
        }

        serializeAs_QuestStartRequestMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        }

        deserializeAs_QuestStartRequestMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStartRequestMessage.questId.");
            }
        }
    }
    class QuestStepInfoMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.infos = new QuestActiveInformations();
            this.ID = 1723;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.infos = new QuestActiveInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestStepInfoMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestStepInfoMessage(input);
        }

        serializeAs_QuestStepInfoMessage(ouput) {
            output.writeShort(this.infos.getTypeId());
            this.infos.serialize(output);
        }

        deserializeAs_QuestStepInfoMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.infos = ProtocolTypeManager.getInstance(QuestActiveInformations, _id1);
            this.infos.deserialize(input);
        }
    }
    class QuestStepInfoRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.ID = 896;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestStepInfoRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestStepInfoRequestMessage(input);
        }

        serializeAs_QuestStepInfoRequestMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        }

        deserializeAs_QuestStepInfoRequestMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepInfoRequestMessage.questId.");
            }
        }
    }
    class QuestStepStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.stepId = 0;
            this.ID = 9861;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
            this.stepId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestStepStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestStepStartedMessage(input);
        }

        serializeAs_QuestStepStartedMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
            }
            output.writeVarShort(this.stepId);
        }

        deserializeAs_QuestStepStartedMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepStartedMessage.questId.");
            }
            this.stepId = input.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element of QuestStepStartedMessage.stepId.");
            }
        }
    }
    class QuestStepValidatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.stepId = 0;
            this.ID = 9356;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
            this.stepId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestStepValidatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestStepValidatedMessage(input);
        }

        serializeAs_QuestStepValidatedMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element stepId.");
            }
            output.writeVarShort(this.stepId);
        }

        deserializeAs_QuestStepValidatedMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestStepValidatedMessage.questId.");
            }
            this.stepId = input.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error("Forbidden value (" + this.stepId + ") on element of QuestStepValidatedMessage.stepId.");
            }
        }
    }
    class QuestValidatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.ID = 1190;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QuestValidatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QuestValidatedMessage(input);
        }

        serializeAs_QuestValidatedMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
        }

        deserializeAs_QuestValidatedMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of QuestValidatedMessage.questId.");
            }
        }
    }
    class RefreshFollowedQuestsOrderRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quests = [];
            this.ID = 2132;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quests = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RefreshFollowedQuestsOrderRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RefreshFollowedQuestsOrderRequestMessage(input);
        }

        serializeAs_RefreshFollowedQuestsOrderRequestMessage(ouput) {
            output.writeShort(this.quests.length);
            for (var _i1 = 0; _i1 < this.quests.length; _i1++) {
                if (this.quests[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.quests[_i1] + ") on element 1 (starting at 1) of quests.");
                }
                output.writeVarShort(this.quests[_i1]);
            }
        }

        deserializeAs_RefreshFollowedQuestsOrderRequestMessage(input) {
            var _val1 = 0;
            var _questsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _questsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of quests.");
                }
                this.quests.push(_val1);
            }
        }
    }
    class UnfollowQuestObjectiveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questId = 0;
            this.objectiveId = 0;
            this.ID = 1306;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questId = 0;
            this.objectiveId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UnfollowQuestObjectiveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UnfollowQuestObjectiveRequestMessage(input);
        }

        serializeAs_UnfollowQuestObjectiveRequestMessage(ouput) {
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element questId.");
            }
            output.writeVarShort(this.questId);
            output.writeShort(this.objectiveId);
        }

        deserializeAs_UnfollowQuestObjectiveRequestMessage(input) {
            this.questId = input.readVarUhShort();
            if (this.questId < 0) {
                throw new Error("Forbidden value (" + this.questId + ") on element of UnfollowQuestObjectiveRequestMessage.questId.");
            }
            this.objectiveId = input.readShort();
        }
    }
    class WatchQuestListMessage extends QuestListMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 1403;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WatchQuestListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WatchQuestListMessage(input);
        }

        serializeAs_WatchQuestListMessage(ouput) {
            this.serializeAs_QuestListMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_WatchQuestListMessage(input) {
            this.deserializeAs_QuestListMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of WatchQuestListMessage.playerId.");
            }
        }
    }
    class WatchQuestStepInfoMessage extends QuestStepInfoMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 5627;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WatchQuestStepInfoMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WatchQuestStepInfoMessage(input);
        }

        serializeAs_WatchQuestStepInfoMessage(ouput) {
            this.serializeAs_QuestStepInfoMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_WatchQuestStepInfoMessage(input) {
            this.deserializeAs_QuestStepInfoMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of WatchQuestStepInfoMessage.playerId.");
            }
        }
    }
    class WatchQuestStepInfoRequestMessage extends QuestStepInfoRequestMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 2567;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WatchQuestStepInfoRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WatchQuestStepInfoRequestMessage(input);
        }

        serializeAs_WatchQuestStepInfoRequestMessage(ouput) {
            this.serializeAs_QuestStepInfoRequestMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_WatchQuestStepInfoRequestMessage(input) {
            this.deserializeAs_QuestStepInfoRequestMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of WatchQuestStepInfoRequestMessage.playerId.");
            }
        }
    }
    class SpellVariantActivationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.result = false;
            this.ID = 2329;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
            this.result = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SpellVariantActivationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellVariantActivationMessage(input);
        }

        serializeAs_SpellVariantActivationMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            output.writeBoolean(this.result);
        }

        deserializeAs_SpellVariantActivationMessage(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellVariantActivationMessage.spellId.");
            }
            this.result = input.readBoolean();
        }
    }
    class SpellVariantActivationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.ID = 9578;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SpellVariantActivationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellVariantActivationRequestMessage(input);
        }

        serializeAs_SpellVariantActivationRequestMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
        }

        deserializeAs_SpellVariantActivationRequestMessage(input) {
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of SpellVariantActivationRequestMessage.spellId.");
            }
        }
    }
    class StatsUpgradeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.useAdditionnal = false;
            this.statId = 11;
            this.boostPoint = 0;
            this.ID = 6170;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.useAdditionnal = false;
            this.statId = 11;
            this.boostPoint = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StatsUpgradeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StatsUpgradeRequestMessage(input);
        }

        serializeAs_StatsUpgradeRequestMessage(ouput) {
            output.writeBoolean(this.useAdditionnal);
            output.writeByte(this.statId);
            if (this.boostPoint < 0) {
                throw new Error("Forbidden value (" + this.boostPoint + ") on element boostPoint.");
            }
            output.writeVarShort(this.boostPoint);
        }

        deserializeAs_StatsUpgradeRequestMessage(input) {
            this.useAdditionnal = input.readBoolean();
            this.statId = input.readByte();
            if (this.statId < 0) {
                throw new Error("Forbidden value (" + this.statId + ") on element of StatsUpgradeRequestMessage.statId.");
            }
            this.boostPoint = input.readVarUhShort();
            if (this.boostPoint < 0) {
                throw new Error("Forbidden value (" + this.boostPoint + ") on element of StatsUpgradeRequestMessage.boostPoint.");
            }
        }
    }
    class StatsUpgradeResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.nbCharacBoost = 0;
            this.ID = 7979;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
            this.nbCharacBoost = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StatsUpgradeResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StatsUpgradeResultMessage(input);
        }

        serializeAs_StatsUpgradeResultMessage(ouput) {
            output.writeByte(this.result);
            if (this.nbCharacBoost < 0) {
                throw new Error("Forbidden value (" + this.nbCharacBoost + ") on element nbCharacBoost.");
            }
            output.writeVarShort(this.nbCharacBoost);
        }

        deserializeAs_StatsUpgradeResultMessage(input) {
            this.result = input.readByte();
            this.nbCharacBoost = input.readVarUhShort();
            if (this.nbCharacBoost < 0) {
                throw new Error("Forbidden value (" + this.nbCharacBoost + ") on element of StatsUpgradeResultMessage.nbCharacBoost.");
            }
        }
    }
    class StopToListenRunningFightRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 445;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopToListenRunningFightRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopToListenRunningFightRequestMessage(input);
        }

        serializeAs_StopToListenRunningFightRequestMessage(ouput) {

        }

        deserializeAs_StopToListenRunningFightRequestMessage(input) {

        }
    }
    class SubareaRewardRateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subAreaRate = 0;
            this.ID = 5569;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subAreaRate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SubareaRewardRateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SubareaRewardRateMessage(input);
        }

        serializeAs_SubareaRewardRateMessage(ouput) {
            output.writeVarShort(this.subAreaRate);
        }

        deserializeAs_SubareaRewardRateMessage(input) {
            this.subAreaRate = input.readVarShort();
        }
    }
    class TeleportOnSameMapMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.cellId = 0;
            this.ID = 7355;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportOnSameMapMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportOnSameMapMessage(input);
        }

        serializeAs_TeleportOnSameMapMessage(ouput) {
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeDouble(this.targetId);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_TeleportOnSameMapMessage(input) {
            this.targetId = input.readDouble();
            if (this.targetId < -9007199254740992 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of TeleportOnSameMapMessage.targetId.");
            }
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of TeleportOnSameMapMessage.cellId.");
            }
        }
    }
    class PortalUseRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.portalId = 0;
            this.ID = 1836;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.portalId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PortalUseRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PortalUseRequestMessage(input);
        }

        serializeAs_PortalUseRequestMessage(ouput) {
            if (this.portalId < 0) {
                throw new Error("Forbidden value (" + this.portalId + ") on element portalId.");
            }
            output.writeVarInt(this.portalId);
        }

        deserializeAs_PortalUseRequestMessage(input) {
            this.portalId = input.readVarUhInt();
            if (this.portalId < 0) {
                throw new Error("Forbidden value (" + this.portalId + ") on element of PortalUseRequestMessage.portalId.");
            }
        }
    }
    class TreasureHuntAvailableRetryCountUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.availableRetryCount = 0;
            this.ID = 8373;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.availableRetryCount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(input);
        }

        serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(ouput) {
            output.writeByte(this.questType);
            output.writeInt(this.availableRetryCount);
        }

        deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntAvailableRetryCountUpdateMessage.questType.");
            }
            this.availableRetryCount = input.readInt();
        }
    }
    class TreasureHuntDigRequestAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.result = 0;
            this.ID = 617;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntDigRequestAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntDigRequestAnswerMessage(input);
        }

        serializeAs_TreasureHuntDigRequestAnswerMessage(ouput) {
            output.writeByte(this.questType);
            output.writeByte(this.result);
        }

        deserializeAs_TreasureHuntDigRequestAnswerMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestAnswerMessage.questType.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntDigRequestAnswerMessage.result.");
            }
        }
    }
    class TreasureHuntDigRequestAnswerFailedMessage extends TreasureHuntDigRequestAnswerMessage {
        constructor(_super) {
            super()
            this.wrongFlagCount = 0;
            this.ID = 3228;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.wrongFlagCount = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntDigRequestAnswerFailedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(input);
        }

        serializeAs_TreasureHuntDigRequestAnswerFailedMessage(ouput) {
            this.serializeAs_TreasureHuntDigRequestAnswerMessage.call(this, output);
            if (this.wrongFlagCount < 0) {
                throw new Error("Forbidden value (" + this.wrongFlagCount + ") on element wrongFlagCount.");
            }
            output.writeByte(this.wrongFlagCount);
        }

        deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(input) {
            this.deserializeAs_TreasureHuntDigRequestAnswerMessage.call(this, input);
            this.wrongFlagCount = input.readByte();
            if (this.wrongFlagCount < 0) {
                throw new Error("Forbidden value (" + this.wrongFlagCount + ") on element of TreasureHuntDigRequestAnswerFailedMessage.wrongFlagCount.");
            }
        }
    }
    class TreasureHuntDigRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.ID = 1139;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntDigRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntDigRequestMessage(input);
        }

        serializeAs_TreasureHuntDigRequestMessage(ouput) {
            output.writeByte(this.questType);
        }

        deserializeAs_TreasureHuntDigRequestMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntDigRequestMessage.questType.");
            }
        }
    }
    class TreasureHuntFinishedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.ID = 6113;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntFinishedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntFinishedMessage(input);
        }

        serializeAs_TreasureHuntFinishedMessage(ouput) {
            output.writeByte(this.questType);
        }

        deserializeAs_TreasureHuntFinishedMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFinishedMessage.questType.");
            }
        }
    }
    class TreasureHuntFlagRemoveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.index = 0;
            this.ID = 6564;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.index = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntFlagRemoveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntFlagRemoveRequestMessage(input);
        }

        serializeAs_TreasureHuntFlagRemoveRequestMessage(ouput) {
            output.writeByte(this.questType);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        }

        deserializeAs_TreasureHuntFlagRemoveRequestMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRemoveRequestMessage.questType.");
            }
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRemoveRequestMessage.index.");
            }
        }
    }
    class TreasureHuntFlagRequestAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.result = 0;
            this.index = 0;
            this.ID = 3593;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.result = 0;
            this.index = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntFlagRequestAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntFlagRequestAnswerMessage(input);
        }

        serializeAs_TreasureHuntFlagRequestAnswerMessage(ouput) {
            output.writeByte(this.questType);
            output.writeByte(this.result);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        }

        deserializeAs_TreasureHuntFlagRequestAnswerMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestAnswerMessage.questType.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntFlagRequestAnswerMessage.result.");
            }
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestAnswerMessage.index.");
            }
        }
    }
    class TreasureHuntFlagRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.index = 0;
            this.ID = 7554;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.index = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntFlagRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntFlagRequestMessage(input);
        }

        serializeAs_TreasureHuntFlagRequestMessage(ouput) {
            output.writeByte(this.questType);
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element index.");
            }
            output.writeByte(this.index);
        }

        deserializeAs_TreasureHuntFlagRequestMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntFlagRequestMessage.questType.");
            }
            this.index = input.readByte();
            if (this.index < 0) {
                throw new Error("Forbidden value (" + this.index + ") on element of TreasureHuntFlagRequestMessage.index.");
            }
        }
    }
    class TreasureHuntGiveUpRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.ID = 1081;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntGiveUpRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntGiveUpRequestMessage(input);
        }

        serializeAs_TreasureHuntGiveUpRequestMessage(ouput) {
            output.writeByte(this.questType);
        }

        deserializeAs_TreasureHuntGiveUpRequestMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntGiveUpRequestMessage.questType.");
            }
        }
    }
    class TreasureHuntLegendaryRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.legendaryId = 0;
            this.ID = 9834;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.legendaryId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntLegendaryRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntLegendaryRequestMessage(input);
        }

        serializeAs_TreasureHuntLegendaryRequestMessage(ouput) {
            if (this.legendaryId < 0) {
                throw new Error("Forbidden value (" + this.legendaryId + ") on element legendaryId.");
            }
            output.writeVarShort(this.legendaryId);
        }

        deserializeAs_TreasureHuntLegendaryRequestMessage(input) {
            this.legendaryId = input.readVarUhShort();
            if (this.legendaryId < 0) {
                throw new Error("Forbidden value (" + this.legendaryId + ") on element of TreasureHuntLegendaryRequestMessage.legendaryId.");
            }
        }
    }
    class TreasureHuntMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.startMapId = 0;
            this.knownStepsList = [];
            this.totalStepCount = 0;
            this.checkPointCurrent = 0;
            this.checkPointTotal = 0;
            this.availableRetryCount = 0;
            this.flags = [];
            this.ID = 2986;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.startMapId = 0;
            this.knownStepsList = [];
            this.totalStepCount = 0;
            this.checkPointCurrent = 0;
            this.checkPointTotal = 0;
            this.availableRetryCount = 0;
            this.flags = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntMessage(input);
        }

        serializeAs_TreasureHuntMessage(ouput) {
            output.writeByte(this.questType);
            if (this.startMapId < 0 || this.startMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.startMapId + ") on element startMapId.");
            }
            output.writeDouble(this.startMapId);
            output.writeShort(this.knownStepsList.length);
            for (var _i3 = 0; _i3 < this.knownStepsList.length; _i3++) {
                output.writeShort((this.knownStepsList[_i3]).getTypeId());
                (this.knownStepsList[_i3]).serialize(output);
            }
            if (this.totalStepCount < 0) {
                throw new Error("Forbidden value (" + this.totalStepCount + ") on element totalStepCount.");
            }
            output.writeByte(this.totalStepCount);
            if (this.checkPointCurrent < 0) {
                throw new Error("Forbidden value (" + this.checkPointCurrent + ") on element checkPointCurrent.");
            }
            output.writeVarInt(this.checkPointCurrent);
            if (this.checkPointTotal < 0) {
                throw new Error("Forbidden value (" + this.checkPointTotal + ") on element checkPointTotal.");
            }
            output.writeVarInt(this.checkPointTotal);
            output.writeInt(this.availableRetryCount);
            output.writeShort(this.flags.length);
            for (var _i8 = 0; _i8 < this.flags.length; _i8++) {
                (this.flags[_i8]).serializeAs_TreasureHuntFlag(output);
            }
        }

        deserializeAs_TreasureHuntMessage(input) {
            var _id3 = 0;
            var _item3 = null;
            var _item8 = null;
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntMessage.questType.");
            }
            this.startMapId = input.readDouble();
            if (this.startMapId < 0 || this.startMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.startMapId + ") on element of TreasureHuntMessage.startMapId.");
            }
            var _knownStepsListLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _knownStepsListLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(TreasureHuntStep, _id3);
                _item3.deserialize(input);
                this.knownStepsList.push(_item3);
            }
            this.totalStepCount = input.readByte();
            if (this.totalStepCount < 0) {
                throw new Error("Forbidden value (" + this.totalStepCount + ") on element of TreasureHuntMessage.totalStepCount.");
            }
            this.checkPointCurrent = input.readVarUhInt();
            if (this.checkPointCurrent < 0) {
                throw new Error("Forbidden value (" + this.checkPointCurrent + ") on element of TreasureHuntMessage.checkPointCurrent.");
            }
            this.checkPointTotal = input.readVarUhInt();
            if (this.checkPointTotal < 0) {
                throw new Error("Forbidden value (" + this.checkPointTotal + ") on element of TreasureHuntMessage.checkPointTotal.");
            }
            this.availableRetryCount = input.readInt();
            var _flagsLen = input.readUnsignedShort();
            for (var _i8 = 0; _i8 < _flagsLen; _i8++) {
                _item8 = new TreasureHuntFlag();
                _item8.deserialize(input);
                this.flags.push(_item8);
            }
        }
    }
    class TreasureHuntRequestAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.questType = 0;
            this.result = 0;
            this.ID = 6903;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.questType = 0;
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntRequestAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntRequestAnswerMessage(input);
        }

        serializeAs_TreasureHuntRequestAnswerMessage(ouput) {
            output.writeByte(this.questType);
            output.writeByte(this.result);
        }

        deserializeAs_TreasureHuntRequestAnswerMessage(input) {
            this.questType = input.readByte();
            if (this.questType < 0) {
                throw new Error("Forbidden value (" + this.questType + ") on element of TreasureHuntRequestAnswerMessage.questType.");
            }
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of TreasureHuntRequestAnswerMessage.result.");
            }
        }
    }
    class TreasureHuntShowLegendaryUIMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.availableLegendaryIds = [];
            this.ID = 8078;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.availableLegendaryIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TreasureHuntShowLegendaryUIMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TreasureHuntShowLegendaryUIMessage(input);
        }

        serializeAs_TreasureHuntShowLegendaryUIMessage(ouput) {
            output.writeShort(this.availableLegendaryIds.length);
            for (var _i1 = 0; _i1 < this.availableLegendaryIds.length; _i1++) {
                if (this.availableLegendaryIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.availableLegendaryIds[_i1] + ") on element 1 (starting at 1) of availableLegendaryIds.");
                }
                output.writeVarShort(this.availableLegendaryIds[_i1]);
            }
        }

        deserializeAs_TreasureHuntShowLegendaryUIMessage(input) {
            var _val1 = 0;
            var _availableLegendaryIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _availableLegendaryIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of availableLegendaryIds.");
                }
                this.availableLegendaryIds.push(_val1);
            }
        }
    }
    class GameRolePlaySpellAnimMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.casterId = 0;
            this.targetCellId = 0;
            this.spellId = 0;
            this.spellLevel = 0;
            this.direction = 0;
            this.ID = 8624;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.casterId = 0;
            this.targetCellId = 0;
            this.spellId = 0;
            this.spellLevel = 0;
            this.direction = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameRolePlaySpellAnimMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameRolePlaySpellAnimMessage(input);
        }

        serializeAs_GameRolePlaySpellAnimMessage(ouput) {
            if (this.casterId < 0 || this.casterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.casterId + ") on element casterId.");
            }
            output.writeVarLong(this.casterId);
            if (this.targetCellId < 0 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element targetCellId.");
            }
            output.writeVarShort(this.targetCellId);
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element spellLevel.");
            }
            output.writeShort(this.spellLevel);
            if (this.direction < -1 || this.direction > 8) {
                throw new Error("Forbidden value (" + this.direction + ") on element direction.");
            }
            output.writeShort(this.direction);
        }

        deserializeAs_GameRolePlaySpellAnimMessage(input) {
            this.casterId = input.readVarUhLong();
            if (this.casterId < 0 || this.casterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.casterId + ") on element of GameRolePlaySpellAnimMessage.casterId.");
            }
            this.targetCellId = input.readVarUhShort();
            if (this.targetCellId < 0 || this.targetCellId > 559) {
                throw new Error("Forbidden value (" + this.targetCellId + ") on element of GameRolePlaySpellAnimMessage.targetCellId.");
            }
            this.spellId = input.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GameRolePlaySpellAnimMessage.spellId.");
            }
            this.spellLevel = input.readShort();
            if (this.spellLevel < 1 || this.spellLevel > 32767) {
                throw new Error("Forbidden value (" + this.spellLevel + ") on element of GameRolePlaySpellAnimMessage.spellLevel.");
            }
            this.direction = input.readShort();
            if (this.direction < -1 || this.direction > 8) {
                throw new Error("Forbidden value (" + this.direction + ") on element of GameRolePlaySpellAnimMessage.direction.");
            }
        }
    }
    class ShowCellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.sourceId = 0;
            this.cellId = 0;
            this.ID = 9767;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sourceId = 0;
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShowCellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShowCellMessage(input);
        }

        serializeAs_ShowCellMessage(ouput) {
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element sourceId.");
            }
            output.writeDouble(this.sourceId);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_ShowCellMessage(input) {
            this.sourceId = input.readDouble();
            if (this.sourceId < -9007199254740992 || this.sourceId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.sourceId + ") on element of ShowCellMessage.sourceId.");
            }
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ShowCellMessage.cellId.");
            }
        }
    }
    class ShowCellRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cellId = 0;
            this.ID = 2880;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShowCellRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShowCellRequestMessage(input);
        }

        serializeAs_ShowCellRequestMessage(ouput) {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element cellId.");
            }
            output.writeVarShort(this.cellId);
        }

        deserializeAs_ShowCellRequestMessage(input) {
            this.cellId = input.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error("Forbidden value (" + this.cellId + ") on element of ShowCellRequestMessage.cellId.");
            }
        }
    }
    class ShowCellSpectatorMessage extends ShowCellMessage {
        constructor(_super) {
            super()
            this.playerName = "";
            this.ID = 7844;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShowCellSpectatorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShowCellSpectatorMessage(input);
        }

        serializeAs_ShowCellSpectatorMessage(ouput) {
            this.serializeAs_ShowCellMessage.call(this, output);
            output.writeUTF(this.playerName);
        }

        deserializeAs_ShowCellSpectatorMessage(input) {
            this.deserializeAs_ShowCellMessage.call(this, input);
            this.playerName = input.readUTF();
        }
    }
    class LeaveDialogMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dialogType = 0;
            this.ID = 3110;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dialogType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LeaveDialogMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LeaveDialogMessage(input);
        }

        serializeAs_LeaveDialogMessage(ouput) {
            output.writeByte(this.dialogType);
        }

        deserializeAs_LeaveDialogMessage(input) {
            this.dialogType = input.readByte();
            if (this.dialogType < 0) {
                throw new Error("Forbidden value (" + this.dialogType + ") on element of LeaveDialogMessage.dialogType.");
            }
        }
    }
    class LeaveDialogRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9511;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LeaveDialogRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LeaveDialogRequestMessage(input);
        }

        serializeAs_LeaveDialogRequestMessage(ouput) {

        }

        deserializeAs_LeaveDialogRequestMessage(input) {

        }
    }
    class PauseDialogMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dialogType = 0;
            this.ID = 1886;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dialogType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PauseDialogMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PauseDialogMessage(input);
        }

        serializeAs_PauseDialogMessage(ouput) {
            output.writeByte(this.dialogType);
        }

        deserializeAs_PauseDialogMessage(input) {
            this.dialogType = input.readByte();
            if (this.dialogType < 0) {
                throw new Error("Forbidden value (" + this.dialogType + ") on element of PauseDialogMessage.dialogType.");
            }
        }
    }
    class EntitiesInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.entities = [];
            this.ID = 6656;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entities = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EntitiesInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EntitiesInformationMessage(input);
        }

        serializeAs_EntitiesInformationMessage(ouput) {
            output.writeShort(this.entities.length);
            for (var _i1 = 0; _i1 < this.entities.length; _i1++) {
                (this.entities[_i1]).serializeAs_EntityInformation(output);
            }
        }

        deserializeAs_EntitiesInformationMessage(input) {
            var _item1 = null;
            var _entitiesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _entitiesLen; _i1++) {
                _item1 = new EntityInformation();
                _item1.deserialize(input);
                this.entities.push(_item1);
            }
        }
    }
    class EntityInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.entity = new EntityInformation();
            this.ID = 7132;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entity = new EntityInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EntityInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EntityInformationMessage(input);
        }

        serializeAs_EntityInformationMessage(ouput) {
            this.entity.serializeAs_EntityInformation(output);
        }

        deserializeAs_EntityInformationMessage(input) {
            this.entity = new EntityInformation();
            this.entity.deserialize(input);
        }
    }
    class ObjectFeedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.meal = [];
            this.ID = 5075;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.meal = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectFeedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectFeedMessage(input);
        }

        serializeAs_ObjectFeedMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeShort(this.meal.length);
            for (var _i2 = 0; _i2 < this.meal.length; _i2++) {
                (this.meal[_i2]).serializeAs_ObjectItemQuantity(output);
            }
        }

        deserializeAs_ObjectFeedMessage(input) {
            var _item2 = null;
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectFeedMessage.objectUID.");
            }
            var _mealLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _mealLen; _i2++) {
                _item2 = new ObjectItemQuantity();
                _item2.deserialize(input);
                this.meal.push(_item2);
            }
        }
    }
    class FinishMoveListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.finishMoves = [];
            this.ID = 6002;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.finishMoves = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FinishMoveListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FinishMoveListMessage(input);
        }

        serializeAs_FinishMoveListMessage(ouput) {
            output.writeShort(this.finishMoves.length);
            for (var _i1 = 0; _i1 < this.finishMoves.length; _i1++) {
                (this.finishMoves[_i1]).serializeAs_FinishMoveInformations(output);
            }
        }

        deserializeAs_FinishMoveListMessage(input) {
            var _item1 = null;
            var _finishMovesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _finishMovesLen; _i1++) {
                _item1 = new FinishMoveInformations();
                _item1.deserialize(input);
                this.finishMoves.push(_item1);
            }
        }
    }
    class FinishMoveListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 935;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FinishMoveListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FinishMoveListRequestMessage(input);
        }

        serializeAs_FinishMoveListRequestMessage(ouput) {

        }

        deserializeAs_FinishMoveListRequestMessage(input) {

        }
    }
    class FinishMoveSetRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.finishMoveId = 0;
            this.finishMoveState = false;
            this.ID = 3539;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.finishMoveId = 0;
            this.finishMoveState = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FinishMoveSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FinishMoveSetRequestMessage(input);
        }

        serializeAs_FinishMoveSetRequestMessage(ouput) {
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element finishMoveId.");
            }
            output.writeInt(this.finishMoveId);
            output.writeBoolean(this.finishMoveState);
        }

        deserializeAs_FinishMoveSetRequestMessage(input) {
            this.finishMoveId = input.readInt();
            if (this.finishMoveId < 0) {
                throw new Error("Forbidden value (" + this.finishMoveId + ") on element of FinishMoveSetRequestMessage.finishMoveId.");
            }
            this.finishMoveState = input.readBoolean();
        }
    }
    class AcquaintanceAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.acquaintanceAdded = new AcquaintanceInformation();
            this.ID = 7829;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.acquaintanceAdded = new AcquaintanceInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AcquaintanceAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintanceAddedMessage(input);
        }

        serializeAs_AcquaintanceAddedMessage(ouput) {
            output.writeShort(this.acquaintanceAdded.getTypeId());
            this.acquaintanceAdded.serialize(output);
        }

        deserializeAs_AcquaintanceAddedMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.acquaintanceAdded = ProtocolTypeManager.getInstance(AcquaintanceInformation, _id1);
            this.acquaintanceAdded.deserialize(input);
        }
    }
    class AcquaintancesGetListMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8067;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AcquaintancesGetListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintancesGetListMessage(input);
        }

        serializeAs_AcquaintancesGetListMessage(ouput) {

        }

        deserializeAs_AcquaintancesGetListMessage(input) {

        }
    }
    class AcquaintancesListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.acquaintanceList = [];
            this.ID = 6451;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.acquaintanceList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AcquaintancesListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AcquaintancesListMessage(input);
        }

        serializeAs_AcquaintancesListMessage(ouput) {
            output.writeShort(this.acquaintanceList.length);
            for (var _i1 = 0; _i1 < this.acquaintanceList.length; _i1++) {
                output.writeShort((this.acquaintanceList[_i1]).getTypeId());
                (this.acquaintanceList[_i1]).serialize(output);
            }
        }

        deserializeAs_AcquaintancesListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _acquaintanceListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _acquaintanceListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(AcquaintanceInformation, _id1);
                _item1.deserialize(input);
                this.acquaintanceList.push(_item1);
            }
        }
    }
    class ContactAddFailureMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 792;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ContactAddFailureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ContactAddFailureMessage(input);
        }

        serializeAs_ContactAddFailureMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_ContactAddFailureMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of ContactAddFailureMessage.reason.");
            }
        }
    }
    class FriendAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.friendAdded = new FriendInformations();
            this.ID = 1551;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.friendAdded = new FriendInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendAddedMessage(input);
        }

        serializeAs_FriendAddedMessage(ouput) {
            output.writeShort(this.friendAdded.getTypeId());
            this.friendAdded.serialize(output);
        }

        deserializeAs_FriendAddedMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.friendAdded = ProtocolTypeManager.getInstance(FriendInformations, _id1);
            this.friendAdded.deserialize(input);
        }
    }
    class FriendAddFailureMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 8282;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendAddFailureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendAddFailureMessage(input);
        }

        serializeAs_FriendAddFailureMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_FriendAddFailureMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of FriendAddFailureMessage.reason.");
            }
        }
    }
    class FriendAddRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = new AbstractPlayerSearchInformation();
            this.ID = 6143;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = new AbstractPlayerSearchInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendAddRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendAddRequestMessage(input);
        }

        serializeAs_FriendAddRequestMessage(ouput) {
            output.writeShort(this.target.getTypeId());
            this.target.serialize(output);
        }

        deserializeAs_FriendAddRequestMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.target = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id1);
            this.target.deserialize(input);
        }
    }
    class FriendDeleteRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accountId = 0;
            this.ID = 7180;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendDeleteRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendDeleteRequestMessage(input);
        }

        serializeAs_FriendDeleteRequestMessage(ouput) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
        }

        deserializeAs_FriendDeleteRequestMessage(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of FriendDeleteRequestMessage.accountId.");
            }
        }
    }
    class FriendDeleteResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.success = false;
            this.tag = new AccountTagInformation();
            this.ID = 5708;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.success = false;
            this.tag = new AccountTagInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendDeleteResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendDeleteResultMessage(input);
        }

        serializeAs_FriendDeleteResultMessage(ouput) {
            output.writeBoolean(this.success);
            this.tag.serializeAs_AccountTagInformation(output);
        }

        deserializeAs_FriendDeleteResultMessage(input) {
            this.success = input.readBoolean();
            this.tag = new AccountTagInformation();
            this.tag.deserialize(input);
        }
    }
    class FriendJoinRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = new AbstractPlayerSearchInformation();
            this.ID = 7472;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = new AbstractPlayerSearchInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendJoinRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendJoinRequestMessage(input);
        }

        serializeAs_FriendJoinRequestMessage(ouput) {
            output.writeShort(this.target.getTypeId());
            this.target.serialize(output);
        }

        deserializeAs_FriendJoinRequestMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.target = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id1);
            this.target.deserialize(input);
        }
    }
    class FriendSetStatusShareMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.share = false;
            this.ID = 4131;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.share = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendSetStatusShareMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSetStatusShareMessage(input);
        }

        serializeAs_FriendSetStatusShareMessage(ouput) {
            output.writeBoolean(this.share);
        }

        deserializeAs_FriendSetStatusShareMessage(input) {
            this.share = input.readBoolean();
        }
    }
    class FriendSetWarnOnConnectionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 1511;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendSetWarnOnConnectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSetWarnOnConnectionMessage(input);
        }

        serializeAs_FriendSetWarnOnConnectionMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendSetWarnOnConnectionMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class FriendSetWarnOnLevelGainMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 7677;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendSetWarnOnLevelGainMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSetWarnOnLevelGainMessage(input);
        }

        serializeAs_FriendSetWarnOnLevelGainMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendSetWarnOnLevelGainMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class FriendsGetListMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3554;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendsGetListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendsGetListMessage(input);
        }

        serializeAs_FriendsGetListMessage(ouput) {

        }

        deserializeAs_FriendsGetListMessage(input) {

        }
    }
    class FriendsListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.friendsList = [];
            this.ID = 1452;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.friendsList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendsListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendsListMessage(input);
        }

        serializeAs_FriendsListMessage(ouput) {
            output.writeShort(this.friendsList.length);
            for (var _i1 = 0; _i1 < this.friendsList.length; _i1++) {
                output.writeShort((this.friendsList[_i1]).getTypeId());
                (this.friendsList[_i1]).serialize(output);
            }
        }

        deserializeAs_FriendsListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _friendsListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _friendsListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(FriendInformations, _id1);
                _item1.deserialize(input);
                this.friendsList.push(_item1);
            }
        }
    }
    class FriendSpouseFollowWithCompassRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 199;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendSpouseFollowWithCompassRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSpouseFollowWithCompassRequestMessage(input);
        }

        serializeAs_FriendSpouseFollowWithCompassRequestMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendSpouseFollowWithCompassRequestMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class FriendSpouseJoinRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8233;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendSpouseJoinRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendSpouseJoinRequestMessage(input);
        }

        serializeAs_FriendSpouseJoinRequestMessage(ouput) {

        }

        deserializeAs_FriendSpouseJoinRequestMessage(input) {

        }
    }
    class FriendStatusShareStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.share = false;
            this.ID = 7408;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.share = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendStatusShareStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendStatusShareStateMessage(input);
        }

        serializeAs_FriendStatusShareStateMessage(ouput) {
            output.writeBoolean(this.share);
        }

        deserializeAs_FriendStatusShareStateMessage(input) {
            this.share = input.readBoolean();
        }
    }
    class FriendUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.friendUpdated = new FriendInformations();
            this.ID = 3423;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.friendUpdated = new FriendInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendUpdateMessage(input);
        }

        serializeAs_FriendUpdateMessage(ouput) {
            output.writeShort(this.friendUpdated.getTypeId());
            this.friendUpdated.serialize(output);
        }

        deserializeAs_FriendUpdateMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.friendUpdated = ProtocolTypeManager.getInstance(FriendInformations, _id1);
            this.friendUpdated.deserialize(input);
        }
    }
    class FriendWarnOnConnectionStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 4506;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendWarnOnConnectionStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendWarnOnConnectionStateMessage(input);
        }

        serializeAs_FriendWarnOnConnectionStateMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendWarnOnConnectionStateMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class FriendWarnOnLevelGainStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 7621;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FriendWarnOnLevelGainStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FriendWarnOnLevelGainStateMessage(input);
        }

        serializeAs_FriendWarnOnLevelGainStateMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_FriendWarnOnLevelGainStateMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class IgnoredAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ignoreAdded = new IgnoredInformations();
            this.session = false;
            this.ID = 3429;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ignoreAdded = new IgnoredInformations();
            this.session = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredAddedMessage(input);
        }

        serializeAs_IgnoredAddedMessage(ouput) {
            output.writeShort(this.ignoreAdded.getTypeId());
            this.ignoreAdded.serialize(output);
            output.writeBoolean(this.session);
        }

        deserializeAs_IgnoredAddedMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.ignoreAdded = ProtocolTypeManager.getInstance(IgnoredInformations, _id1);
            this.ignoreAdded.deserialize(input);
            this.session = input.readBoolean();
        }
    }
    class IgnoredAddFailureMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 6611;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredAddFailureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredAddFailureMessage(input);
        }

        serializeAs_IgnoredAddFailureMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_IgnoredAddFailureMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of IgnoredAddFailureMessage.reason.");
            }
        }
    }
    class IgnoredAddRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.target = new AbstractPlayerSearchInformation();
            this.session = false;
            this.ID = 1284;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = new AbstractPlayerSearchInformation();
            this.session = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredAddRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredAddRequestMessage(input);
        }

        serializeAs_IgnoredAddRequestMessage(ouput) {
            output.writeShort(this.target.getTypeId());
            this.target.serialize(output);
            output.writeBoolean(this.session);
        }

        deserializeAs_IgnoredAddRequestMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.target = ProtocolTypeManager.getInstance(AbstractPlayerSearchInformation, _id1);
            this.target.deserialize(input);
            this.session = input.readBoolean();
        }
    }
    class IgnoredDeleteRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accountId = 0;
            this.session = false;
            this.ID = 9406;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accountId = 0;
            this.session = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredDeleteRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredDeleteRequestMessage(input);
        }

        serializeAs_IgnoredDeleteRequestMessage(ouput) {
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element accountId.");
            }
            output.writeInt(this.accountId);
            output.writeBoolean(this.session);
        }

        deserializeAs_IgnoredDeleteRequestMessage(input) {
            this.accountId = input.readInt();
            if (this.accountId < 0) {
                throw new Error("Forbidden value (" + this.accountId + ") on element of IgnoredDeleteRequestMessage.accountId.");
            }
            this.session = input.readBoolean();
        }
    }
    class IgnoredDeleteResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.success = false;
            this.tag = new AccountTagInformation();
            this.session = false;
            this.ID = 5106;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.success = false;
            this.tag = new AccountTagInformation();
            this.session = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredDeleteResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredDeleteResultMessage(input);
        }

        serializeAs_IgnoredDeleteResultMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.success);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.session);
            output.writeByte(_box0);
            this.tag.serializeAs_AccountTagInformation(output);
        }

        deserializeAs_IgnoredDeleteResultMessage(input) {
            var _box0 = input.readByte();
            this.success = BooleanByteWrapper.getFlag(_box0, 0);
            this.session = BooleanByteWrapper.getFlag(_box0, 1);
            this.tag = new AccountTagInformation();
            this.tag.deserialize(input);
        }
    }
    class IgnoredGetListMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9176;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredGetListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredGetListMessage(input);
        }

        serializeAs_IgnoredGetListMessage(ouput) {

        }

        deserializeAs_IgnoredGetListMessage(input) {

        }
    }
    class IgnoredListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ignoredList = [];
            this.ID = 6361;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ignoredList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IgnoredListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IgnoredListMessage(input);
        }

        serializeAs_IgnoredListMessage(ouput) {
            output.writeShort(this.ignoredList.length);
            for (var _i1 = 0; _i1 < this.ignoredList.length; _i1++) {
                output.writeShort((this.ignoredList[_i1]).getTypeId());
                (this.ignoredList[_i1]).serialize(output);
            }
        }

        deserializeAs_IgnoredListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _ignoredListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ignoredListLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(IgnoredInformations, _id1);
                _item1.deserialize(input);
                this.ignoredList.push(_item1);
            }
        }
    }
    class SpouseGetInformationsMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7971;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SpouseGetInformationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpouseGetInformationsMessage(input);
        }

        serializeAs_SpouseGetInformationsMessage(ouput) {

        }

        deserializeAs_SpouseGetInformationsMessage(input) {

        }
    }
    class SpouseInformationsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spouse = new FriendSpouseInformations();
            this.ID = 9828;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spouse = new FriendSpouseInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SpouseInformationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpouseInformationsMessage(input);
        }

        serializeAs_SpouseInformationsMessage(ouput) {
            output.writeShort(this.spouse.getTypeId());
            this.spouse.serialize(output);
        }

        deserializeAs_SpouseInformationsMessage(input) {
            var _id1 = input.readUnsignedShort();
            this.spouse = ProtocolTypeManager.getInstance(FriendSpouseInformations, _id1);
            this.spouse.deserialize(input);
        }
    }
    class SpouseStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hasSpouse = false;
            this.ID = 6714;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hasSpouse = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SpouseStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpouseStatusMessage(input);
        }

        serializeAs_SpouseStatusMessage(ouput) {
            output.writeBoolean(this.hasSpouse);
        }

        deserializeAs_SpouseStatusMessage(input) {
            this.hasSpouse = input.readBoolean();
        }
    }
    class WarnOnPermaDeathStateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 2751;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WarnOnPermaDeathStateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WarnOnPermaDeathStateMessage(input);
        }

        serializeAs_WarnOnPermaDeathStateMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_WarnOnPermaDeathStateMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class GuestLimitationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 7497;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuestLimitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuestLimitationMessage(input);
        }

        serializeAs_GuestLimitationMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_GuestLimitationMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of GuestLimitationMessage.reason.");
            }
        }
    }
    class GuestModeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.active = false;
            this.ID = 9281;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.active = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuestModeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuestModeMessage(input);
        }

        serializeAs_GuestModeMessage(ouput) {
            output.writeBoolean(this.active);
        }

        deserializeAs_GuestModeMessage(input) {
            this.active = input.readBoolean();
        }
    }
    class GuildApplicationAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accepted = false;
            this.playerId = 0;
            this.ID = 5583;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accepted = false;
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildApplicationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildApplicationAnswerMessage(input);
        }

        serializeAs_GuildApplicationAnswerMessage(ouput) {
            output.writeBoolean(this.accepted);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_GuildApplicationAnswerMessage(input) {
            this.accepted = input.readBoolean();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildApplicationAnswerMessage.playerId.");
            }
        }
    }
    class GuildApplicationDeletedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.deleted = false;
            this.ID = 6357;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.deleted = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildApplicationDeletedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildApplicationDeletedMessage(input);
        }

        serializeAs_GuildApplicationDeletedMessage(ouput) {
            output.writeBoolean(this.deleted);
        }

        deserializeAs_GuildApplicationDeletedMessage(input) {
            this.deleted = input.readBoolean();
        }
    }
    class GuildApplicationIsAnsweredMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accepted = false;
            this.guildInformation = new GuildInformations();
            this.ID = 6248;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accepted = false;
            this.guildInformation = new GuildInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildApplicationIsAnsweredMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildApplicationIsAnsweredMessage(input);
        }

        serializeAs_GuildApplicationIsAnsweredMessage(ouput) {
            output.writeBoolean(this.accepted);
            this.guildInformation.serializeAs_GuildInformations(output);
        }

        deserializeAs_GuildApplicationIsAnsweredMessage(input) {
            this.accepted = input.readBoolean();
            this.guildInformation = new GuildInformations();
            this.guildInformation.deserialize(input);
        }
    }
    class GuildApplicationListenMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.listen = false;
            this.ID = 1821;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.listen = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildApplicationListenMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildApplicationListenMessage(input);
        }

        serializeAs_GuildApplicationListenMessage(ouput) {
            output.writeBoolean(this.listen);
        }

        deserializeAs_GuildApplicationListenMessage(input) {
            this.listen = input.readBoolean();
        }
    }
    class GuildApplicationPresenceMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.isApplication = false;
            this.ID = 3123;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.isApplication = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildApplicationPresenceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildApplicationPresenceMessage(input);
        }

        serializeAs_GuildApplicationPresenceMessage(ouput) {
            output.writeBoolean(this.isApplication);
        }

        deserializeAs_GuildApplicationPresenceMessage(input) {
            this.isApplication = input.readBoolean();
        }
    }
    class GuildApplicationReceivedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerName = "";
            this.playerId = 0;
            this.ID = 8112;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerName = "";
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildApplicationReceivedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildApplicationReceivedMessage(input);
        }

        serializeAs_GuildApplicationReceivedMessage(ouput) {
            output.writeUTF(this.playerName);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_GuildApplicationReceivedMessage(input) {
            this.playerName = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildApplicationReceivedMessage.playerId.");
            }
        }
    }
    class GuildDeleteApplicationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9302;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildDeleteApplicationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildDeleteApplicationRequestMessage(input);
        }

        serializeAs_GuildDeleteApplicationRequestMessage(ouput) {

        }

        deserializeAs_GuildDeleteApplicationRequestMessage(input) {

        }
    }
    class GuildGetPlayerApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6087;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildGetPlayerApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildGetPlayerApplicationMessage(input);
        }

        serializeAs_GuildGetPlayerApplicationMessage(ouput) {

        }

        deserializeAs_GuildGetPlayerApplicationMessage(input) {

        }
    }
    class GuildIsThereAnyApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1379;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildIsThereAnyApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildIsThereAnyApplicationMessage(input);
        }

        serializeAs_GuildIsThereAnyApplicationMessage(ouput) {

        }

        deserializeAs_GuildIsThereAnyApplicationMessage(input) {

        }
    }
    class GuildListApplicationAnswerMessage extends PaginationAnswerAbstractMessage {
        constructor(_super) {
            super()
            this.applies = [];
            this.ID = 1049;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.applies = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildListApplicationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildListApplicationAnswerMessage(input);
        }

        serializeAs_GuildListApplicationAnswerMessage(ouput) {
            this.serializeAs_PaginationAnswerAbstractMessage.call(this, output);
            output.writeShort(this.applies.length);
            for (var _i1 = 0; _i1 < this.applies.length; _i1++) {
                (this.applies[_i1]).serializeAs_SocialApplicationInformation(output);
            }
        }

        deserializeAs_GuildListApplicationAnswerMessage(input) {
            var _item1 = null;
            this.deserializeAs_PaginationAnswerAbstractMessage.call(this, input);
            var _appliesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _appliesLen; _i1++) {
                _item1 = new SocialApplicationInformation();
                _item1.deserialize(input);
                this.applies.push(_item1);
            }
        }
    }
    class GuildListApplicationModifiedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.apply = new SocialApplicationInformation();
            this.state = 0;
            this.playerId = 0;
            this.ID = 2316;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.apply = new SocialApplicationInformation();
            this.state = 0;
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildListApplicationModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildListApplicationModifiedMessage(input);
        }

        serializeAs_GuildListApplicationModifiedMessage(ouput) {
            this.apply.serializeAs_SocialApplicationInformation(output);
            output.writeByte(this.state);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_GuildListApplicationModifiedMessage(input) {
            this.apply = new SocialApplicationInformation();
            this.apply.deserialize(input);
            this.state = input.readByte();
            if (this.state < 0) {
                throw new Error("Forbidden value (" + this.state + ") on element of GuildListApplicationModifiedMessage.state.");
            }
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of GuildListApplicationModifiedMessage.playerId.");
            }
        }
    }
    class GuildListApplicationRequestMessage extends PaginationRequestAbstractMessage {
        constructor(_super) {
            super()

            this.ID = 2510;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildListApplicationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildListApplicationRequestMessage(input);
        }

        serializeAs_GuildListApplicationRequestMessage(ouput) {
            this.serializeAs_PaginationRequestAbstractMessage.call(this, output);
        }

        deserializeAs_GuildListApplicationRequestMessage(input) {
            this.deserializeAs_PaginationRequestAbstractMessage.call(this, input);
        }
    }
    class GuildPlayerApplicationAbstractMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2453;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildPlayerApplicationAbstractMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPlayerApplicationAbstractMessage(input);
        }

        serializeAs_GuildPlayerApplicationAbstractMessage(ouput) {

        }

        deserializeAs_GuildPlayerApplicationAbstractMessage(input) {

        }
    }
    class GuildPlayerApplicationInformationMessage extends GuildPlayerApplicationAbstractMessage {
        constructor(_super) {
            super()
            this.guildInformation = new GuildInformations();
            this.apply = new SocialApplicationInformation();
            this.ID = 5318;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildInformation = new GuildInformations();
            this.apply = new SocialApplicationInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildPlayerApplicationInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPlayerApplicationInformationMessage(input);
        }

        serializeAs_GuildPlayerApplicationInformationMessage(ouput) {
            this.serializeAs_GuildPlayerApplicationAbstractMessage.call(this, output);
            this.guildInformation.serializeAs_GuildInformations(output);
            this.apply.serializeAs_SocialApplicationInformation(output);
        }

        deserializeAs_GuildPlayerApplicationInformationMessage(input) {
            this.deserializeAs_GuildPlayerApplicationAbstractMessage.call(this, input);
            this.guildInformation = new GuildInformations();
            this.guildInformation.deserialize(input);
            this.apply = new SocialApplicationInformation();
            this.apply.deserialize(input);
        }
    }
    class GuildPlayerNoApplicationInformationMessage extends GuildPlayerApplicationAbstractMessage {
        constructor(_super) {
            super()

            this.ID = 933;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildPlayerNoApplicationInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPlayerNoApplicationInformationMessage(input);
        }

        serializeAs_GuildPlayerNoApplicationInformationMessage(ouput) {

        }

        deserializeAs_GuildPlayerNoApplicationInformationMessage(input) {

        }
    }
    class GuildSubmitApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.applyText = "";
            this.guildId = 0;
            this.timeSpent = 0;
            this.filterLanguage = "";
            this.filterAmbiance = "";
            this.filterPlaytime = "";
            this.filterInterest = "";
            this.filterMinMaxGuildLevel = "";
            this.filterRecruitmentType = "";
            this.filterMinMaxCharacterLevel = "";
            this.filterMinMaxAchievement = "";
            this.filterSearchName = "";
            this.filterLastSort = "";
            this.ID = 8897;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.applyText = "";
            this.guildId = 0;
            this.timeSpent = 0;
            this.filterLanguage = "";
            this.filterAmbiance = "";
            this.filterPlaytime = "";
            this.filterInterest = "";
            this.filterMinMaxGuildLevel = "";
            this.filterRecruitmentType = "";
            this.filterMinMaxCharacterLevel = "";
            this.filterMinMaxAchievement = "";
            this.filterSearchName = "";
            this.filterLastSort = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildSubmitApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildSubmitApplicationMessage(input);
        }

        serializeAs_GuildSubmitApplicationMessage(ouput) {
            output.writeUTF(this.applyText);
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
            if (this.timeSpent < 0) {
                throw new Error("Forbidden value (" + this.timeSpent + ") on element timeSpent.");
            }
            output.writeVarInt(this.timeSpent);
            output.writeUTF(this.filterLanguage);
            output.writeUTF(this.filterAmbiance);
            output.writeUTF(this.filterPlaytime);
            output.writeUTF(this.filterInterest);
            output.writeUTF(this.filterMinMaxGuildLevel);
            output.writeUTF(this.filterRecruitmentType);
            output.writeUTF(this.filterMinMaxCharacterLevel);
            output.writeUTF(this.filterMinMaxAchievement);
            output.writeUTF(this.filterSearchName);
            output.writeUTF(this.filterLastSort);
        }

        deserializeAs_GuildSubmitApplicationMessage(input) {
            this.applyText = input.readUTF();
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildSubmitApplicationMessage.guildId.");
            }
            this.timeSpent = input.readVarUhInt();
            if (this.timeSpent < 0) {
                throw new Error("Forbidden value (" + this.timeSpent + ") on element of GuildSubmitApplicationMessage.timeSpent.");
            }
            this.filterLanguage = input.readUTF();
            this.filterAmbiance = input.readUTF();
            this.filterPlaytime = input.readUTF();
            this.filterInterest = input.readUTF();
            this.filterMinMaxGuildLevel = input.readUTF();
            this.filterRecruitmentType = input.readUTF();
            this.filterMinMaxCharacterLevel = input.readUTF();
            this.filterMinMaxAchievement = input.readUTF();
            this.filterSearchName = input.readUTF();
            this.filterLastSort = input.readUTF();
        }
    }
    class GuildUpdateApplicationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.applyText = "";
            this.guildId = 0;
            this.ID = 3891;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.applyText = "";
            this.guildId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildUpdateApplicationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildUpdateApplicationMessage(input);
        }

        serializeAs_GuildUpdateApplicationMessage(ouput) {
            output.writeUTF(this.applyText);
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
        }

        deserializeAs_GuildUpdateApplicationMessage(input) {
            this.applyText = input.readUTF();
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildUpdateApplicationMessage.guildId.");
            }
        }
    }
    class GuildUpdateNoteMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.note = "";
            this.ID = 15;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.note = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildUpdateNoteMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildUpdateNoteMessage(input);
        }

        serializeAs_GuildUpdateNoteMessage(ouput) {
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeUTF(this.note);
        }

        deserializeAs_GuildUpdateNoteMessage(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildUpdateNoteMessage.memberId.");
            }
            this.note = input.readUTF();
        }
    }
    class ChallengeFightJoinRefusedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.reason = 0;
            this.ID = 9017;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ChallengeFightJoinRefusedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ChallengeFightJoinRefusedMessage(input);
        }

        serializeAs_ChallengeFightJoinRefusedMessage(ouput) {
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            output.writeByte(this.reason);
        }

        deserializeAs_ChallengeFightJoinRefusedMessage(input) {
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ChallengeFightJoinRefusedMessage.playerId.");
            }
            this.reason = input.readByte();
        }
    }
    class AddListenerOnSynchronizedStorageMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.player = "";
            this.ID = 8748;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.player = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AddListenerOnSynchronizedStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AddListenerOnSynchronizedStorageMessage(input);
        }

        serializeAs_AddListenerOnSynchronizedStorageMessage(ouput) {
            output.writeUTF(this.player);
        }

        deserializeAs_AddListenerOnSynchronizedStorageMessage(input) {
            this.player = input.readUTF();
        }
    }
    class ListenersOfSynchronizedStorageMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.players = [];
            this.ID = 4233;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.players = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ListenersOfSynchronizedStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ListenersOfSynchronizedStorageMessage(input);
        }

        serializeAs_ListenersOfSynchronizedStorageMessage(ouput) {
            output.writeShort(this.players.length);
            for (var _i1 = 0; _i1 < this.players.length; _i1++) {
                output.writeUTF(this.players[_i1]);
            }
        }

        deserializeAs_ListenersOfSynchronizedStorageMessage(input) {
            var _val1 = null;
            var _playersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _playersLen; _i1++) {
                _val1 = input.readUTF();
                this.players.push(_val1);
            }
        }
    }
    class RemoveListenerOnSynchronizedStorageMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.player = "";
            this.ID = 8548;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.player = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RemoveListenerOnSynchronizedStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RemoveListenerOnSynchronizedStorageMessage(input);
        }

        serializeAs_RemoveListenerOnSynchronizedStorageMessage(ouput) {
            output.writeUTF(this.player);
        }

        deserializeAs_RemoveListenerOnSynchronizedStorageMessage(input) {
            this.player = input.readUTF();
        }
    }
    class CreateGuildRankRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.parentRankId = 0;
            this.gfxId = 0;
            this.name = "";
            this.ID = 4614;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.parentRankId = 0;
            this.gfxId = 0;
            this.name = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CreateGuildRankRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CreateGuildRankRequestMessage(input);
        }

        serializeAs_CreateGuildRankRequestMessage(ouput) {
            if (this.parentRankId < 0) {
                throw new Error("Forbidden value (" + this.parentRankId + ") on element parentRankId.");
            }
            output.writeVarInt(this.parentRankId);
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element gfxId.");
            }
            output.writeVarInt(this.gfxId);
            output.writeUTF(this.name);
        }

        deserializeAs_CreateGuildRankRequestMessage(input) {
            this.parentRankId = input.readVarUhInt();
            if (this.parentRankId < 0) {
                throw new Error("Forbidden value (" + this.parentRankId + ") on element of CreateGuildRankRequestMessage.parentRankId.");
            }
            this.gfxId = input.readVarUhInt();
            if (this.gfxId < 0) {
                throw new Error("Forbidden value (" + this.gfxId + ") on element of CreateGuildRankRequestMessage.gfxId.");
            }
            this.name = input.readUTF();
        }
    }
    class GuildBulletinMessage extends BulletinMessage {
        constructor(_super) {
            super()

            this.ID = 7460;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildBulletinMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildBulletinMessage(input);
        }

        serializeAs_GuildBulletinMessage(ouput) {
            this.serializeAs_BulletinMessage.call(this, output);
        }

        deserializeAs_GuildBulletinMessage(input) {
            this.deserializeAs_BulletinMessage.call(this, input);
        }
    }
    class GuildBulletinSetErrorMessage extends SocialNoticeSetErrorMessage {
        constructor(_super) {
            super()

            this.ID = 4667;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildBulletinSetErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildBulletinSetErrorMessage(input);
        }

        serializeAs_GuildBulletinSetErrorMessage(ouput) {
            this.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        }

        deserializeAs_GuildBulletinSetErrorMessage(input) {
            this.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        }
    }
    class GuildBulletinSetRequestMessage extends SocialNoticeSetRequestMessage {
        constructor(_super) {
            super()
            this.content = "";
            this.ID = 9739;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildBulletinSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildBulletinSetRequestMessage(input);
        }

        serializeAs_GuildBulletinSetRequestMessage(ouput) {
            this.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
        }

        deserializeAs_GuildBulletinSetRequestMessage(input) {
            this.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
        }
    }
    class GuildChangeMemberParametersMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.rankId = 0;
            this.experienceGivenPercent = 0;
            this.ID = 1999;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.rankId = 0;
            this.experienceGivenPercent = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildChangeMemberParametersMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildChangeMemberParametersMessage(input);
        }

        serializeAs_GuildChangeMemberParametersMessage(ouput) {
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element experienceGivenPercent.");
            }
            output.writeByte(this.experienceGivenPercent);
        }

        deserializeAs_GuildChangeMemberParametersMessage(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildChangeMemberParametersMessage.memberId.");
            }
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of GuildChangeMemberParametersMessage.rankId.");
            }
            this.experienceGivenPercent = input.readByte();
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error("Forbidden value (" + this.experienceGivenPercent + ") on element of GuildChangeMemberParametersMessage.experienceGivenPercent.");
            }
        }
    }
    class GuildCharacsUpgradeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.charaTypeTarget = 0;
            this.ID = 3299;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.charaTypeTarget = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildCharacsUpgradeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildCharacsUpgradeRequestMessage(input);
        }

        serializeAs_GuildCharacsUpgradeRequestMessage(ouput) {
            output.writeByte(this.charaTypeTarget);
        }

        deserializeAs_GuildCharacsUpgradeRequestMessage(input) {
            this.charaTypeTarget = input.readByte();
            if (this.charaTypeTarget < 0) {
                throw new Error("Forbidden value (" + this.charaTypeTarget + ") on element of GuildCharacsUpgradeRequestMessage.charaTypeTarget.");
            }
        }
    }
    class GuildChestTabContributionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.tabNumber = 0;
            this.requiredAmount = 0;
            this.currentAmount = 0;
            this.chestContributionEnrollmentDelay = 0;
            this.chestContributionDelay = 0;
            this.ID = 7525;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tabNumber = 0;
            this.requiredAmount = 0;
            this.currentAmount = 0;
            this.chestContributionEnrollmentDelay = 0;
            this.chestContributionDelay = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildChestTabContributionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildChestTabContributionMessage(input);
        }

        serializeAs_GuildChestTabContributionMessage(ouput) {
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element tabNumber.");
            }
            output.writeVarInt(this.tabNumber);
            if (this.requiredAmount < 0 || this.requiredAmount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requiredAmount + ") on element requiredAmount.");
            }
            output.writeVarLong(this.requiredAmount);
            if (this.currentAmount < 0 || this.currentAmount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.currentAmount + ") on element currentAmount.");
            }
            output.writeVarLong(this.currentAmount);
            if (this.chestContributionEnrollmentDelay < 0 || this.chestContributionEnrollmentDelay > 9007199254740992) {
                throw new Error("Forbidden value (" + this.chestContributionEnrollmentDelay + ") on element chestContributionEnrollmentDelay.");
            }
            output.writeDouble(this.chestContributionEnrollmentDelay);
            if (this.chestContributionDelay < 0 || this.chestContributionDelay > 9007199254740992) {
                throw new Error("Forbidden value (" + this.chestContributionDelay + ") on element chestContributionDelay.");
            }
            output.writeDouble(this.chestContributionDelay);
        }

        deserializeAs_GuildChestTabContributionMessage(input) {
            this.tabNumber = input.readVarUhInt();
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element of GuildChestTabContributionMessage.tabNumber.");
            }
            this.requiredAmount = input.readVarUhLong();
            if (this.requiredAmount < 0 || this.requiredAmount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requiredAmount + ") on element of GuildChestTabContributionMessage.requiredAmount.");
            }
            this.currentAmount = input.readVarUhLong();
            if (this.currentAmount < 0 || this.currentAmount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.currentAmount + ") on element of GuildChestTabContributionMessage.currentAmount.");
            }
            this.chestContributionEnrollmentDelay = input.readDouble();
            if (this.chestContributionEnrollmentDelay < 0 || this.chestContributionEnrollmentDelay > 9007199254740992) {
                throw new Error("Forbidden value (" + this.chestContributionEnrollmentDelay + ") on element of GuildChestTabContributionMessage.chestContributionEnrollmentDelay.");
            }
            this.chestContributionDelay = input.readDouble();
            if (this.chestContributionDelay < 0 || this.chestContributionDelay > 9007199254740992) {
                throw new Error("Forbidden value (" + this.chestContributionDelay + ") on element of GuildChestTabContributionMessage.chestContributionDelay.");
            }
        }
    }
    class GuildChestTabContributionsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.contributions = [];
            this.ID = 4026;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.contributions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildChestTabContributionsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildChestTabContributionsMessage(input);
        }

        serializeAs_GuildChestTabContributionsMessage(ouput) {
            output.writeShort(this.contributions.length);
            for (var _i1 = 0; _i1 < this.contributions.length; _i1++) {
                (this.contributions[_i1]).serializeAs_Contribution(output);
            }
        }

        deserializeAs_GuildChestTabContributionsMessage(input) {
            var _item1 = null;
            var _contributionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _contributionsLen; _i1++) {
                _item1 = new Contribution();
                _item1.deserialize(input);
                this.contributions.push(_item1);
            }
        }
    }
    class GuildChestTabLastContributionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.lastContributionDate = 0;
            this.ID = 9676;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lastContributionDate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildChestTabLastContributionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildChestTabLastContributionMessage(input);
        }

        serializeAs_GuildChestTabLastContributionMessage(ouput) {
            if (this.lastContributionDate < 0 || this.lastContributionDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.lastContributionDate + ") on element lastContributionDate.");
            }
            output.writeDouble(this.lastContributionDate);
        }

        deserializeAs_GuildChestTabLastContributionMessage(input) {
            this.lastContributionDate = input.readDouble();
            if (this.lastContributionDate < 0 || this.lastContributionDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.lastContributionDate + ") on element of GuildChestTabLastContributionMessage.lastContributionDate.");
            }
        }
    }
    class GuildCreationResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.ID = 7399;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildCreationResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildCreationResultMessage(input);
        }

        serializeAs_GuildCreationResultMessage(ouput) {
            output.writeByte(this.result);
        }

        deserializeAs_GuildCreationResultMessage(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of GuildCreationResultMessage.result.");
            }
        }
    }
    class GuildCreationStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3789;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildCreationStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildCreationStartedMessage(input);
        }

        serializeAs_GuildCreationStartedMessage(ouput) {

        }

        deserializeAs_GuildCreationStartedMessage(input) {

        }
    }
    class GuildCreationValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildName = "";
            this.guildEmblem = new SocialEmblem();
            this.ID = 7219;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildName = "";
            this.guildEmblem = new SocialEmblem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildCreationValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildCreationValidMessage(input);
        }

        serializeAs_GuildCreationValidMessage(ouput) {
            output.writeUTF(this.guildName);
            this.guildEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_GuildCreationValidMessage(input) {
            this.guildName = input.readUTF();
            this.guildEmblem = new SocialEmblem();
            this.guildEmblem.deserialize(input);
        }
    }
    class GuildFactsErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildId = 0;
            this.ID = 205;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildFactsErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildFactsErrorMessage(input);
        }

        serializeAs_GuildFactsErrorMessage(ouput) {
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
        }

        deserializeAs_GuildFactsErrorMessage(input) {
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildFactsErrorMessage.guildId.");
            }
        }
    }
    class GuildFactsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.infos = new GuildFactSheetInformations();
            this.creationDate = 0;
            this.members = [];
            this.ID = 9389;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.infos = new GuildFactSheetInformations();
            this.creationDate = 0;
            this.members = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildFactsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildFactsMessage(input);
        }

        serializeAs_GuildFactsMessage(ouput) {
            output.writeShort(this.infos.getTypeId());
            this.infos.serialize(output);
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeInt(this.creationDate);
            output.writeShort(this.members.length);
            for (var _i3 = 0; _i3 < this.members.length; _i3++) {
                (this.members[_i3]).serializeAs_CharacterMinimalSocialPublicInformations(output);
            }
        }

        deserializeAs_GuildFactsMessage(input) {
            var _item3 = null;
            var _id1 = input.readUnsignedShort();
            this.infos = ProtocolTypeManager.getInstance(GuildFactSheetInformations, _id1);
            this.infos.deserialize(input);
            this.creationDate = input.readInt();
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of GuildFactsMessage.creationDate.");
            }
            var _membersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _membersLen; _i3++) {
                _item3 = new CharacterMinimalSocialPublicInformations();
                _item3.deserialize(input);
                this.members.push(_item3);
            }
        }
    }
    class GuildFactsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildId = 0;
            this.ID = 531;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildFactsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildFactsRequestMessage(input);
        }

        serializeAs_GuildFactsRequestMessage(ouput) {
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element guildId.");
            }
            output.writeVarInt(this.guildId);
        }

        deserializeAs_GuildFactsRequestMessage(input) {
            this.guildId = input.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error("Forbidden value (" + this.guildId + ") on element of GuildFactsRequestMessage.guildId.");
            }
        }
    }
    class GuildGetChestTabContributionsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9107;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildGetChestTabContributionsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildGetChestTabContributionsRequestMessage(input);
        }

        serializeAs_GuildGetChestTabContributionsRequestMessage(ouput) {

        }

        deserializeAs_GuildGetChestTabContributionsRequestMessage(input) {

        }
    }
    class GuildGetInformationsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.infoType = 0;
            this.ID = 5890;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.infoType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildGetInformationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildGetInformationsMessage(input);
        }

        serializeAs_GuildGetInformationsMessage(ouput) {
            output.writeByte(this.infoType);
        }

        deserializeAs_GuildGetInformationsMessage(input) {
            this.infoType = input.readByte();
            if (this.infoType < 0) {
                throw new Error("Forbidden value (" + this.infoType + ") on element of GuildGetInformationsMessage.infoType.");
            }
        }
    }
    class GuildHouseRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
            this.ID = 6841;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.instanceId = 0;
            this.secondHand = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildHouseRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildHouseRemoveMessage(input);
        }

        serializeAs_GuildHouseRemoveMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element instanceId.");
            }
            output.writeInt(this.instanceId);
            output.writeBoolean(this.secondHand);
        }

        deserializeAs_GuildHouseRemoveMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of GuildHouseRemoveMessage.houseId.");
            }
            this.instanceId = input.readInt();
            if (this.instanceId < 0) {
                throw new Error("Forbidden value (" + this.instanceId + ") on element of GuildHouseRemoveMessage.instanceId.");
            }
            this.secondHand = input.readBoolean();
        }
    }
    class GuildHousesInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.housesInformations = [];
            this.ID = 1134;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.housesInformations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildHousesInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildHousesInformationMessage(input);
        }

        serializeAs_GuildHousesInformationMessage(ouput) {
            output.writeShort(this.housesInformations.length);
            for (var _i1 = 0; _i1 < this.housesInformations.length; _i1++) {
                (this.housesInformations[_i1]).serializeAs_HouseInformationsForGuild(output);
            }
        }

        deserializeAs_GuildHousesInformationMessage(input) {
            var _item1 = null;
            var _housesInformationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _housesInformationsLen; _i1++) {
                _item1 = new HouseInformationsForGuild();
                _item1.deserialize(input);
                this.housesInformations.push(_item1);
            }
        }
    }
    class GuildHouseUpdateInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.housesInformations = new HouseInformationsForGuild();
            this.ID = 3816;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.housesInformations = new HouseInformationsForGuild();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildHouseUpdateInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildHouseUpdateInformationMessage(input);
        }

        serializeAs_GuildHouseUpdateInformationMessage(ouput) {
            this.housesInformations.serializeAs_HouseInformationsForGuild(output);
        }

        deserializeAs_GuildHouseUpdateInformationMessage(input) {
            this.housesInformations = new HouseInformationsForGuild();
            this.housesInformations.deserialize(input);
        }
    }
    class GuildInformationsGeneralMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.abandonnedPaddock = false;
            this.level = 0;
            this.expLevelFloor = 0;
            this.experience = 0;
            this.expNextLevelFloor = 0;
            this.creationDate = 0;
            this.ID = 4169;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.abandonnedPaddock = false;
            this.level = 0;
            this.expLevelFloor = 0;
            this.experience = 0;
            this.expNextLevelFloor = 0;
            this.creationDate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInformationsGeneralMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInformationsGeneralMessage(input);
        }

        serializeAs_GuildInformationsGeneralMessage(ouput) {
            output.writeBoolean(this.abandonnedPaddock);
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element level.");
            }
            output.writeByte(this.level);
            if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expLevelFloor + ") on element expLevelFloor.");
            }
            output.writeVarLong(this.expLevelFloor);
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element experience.");
            }
            output.writeVarLong(this.experience);
            if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expNextLevelFloor + ") on element expNextLevelFloor.");
            }
            output.writeVarLong(this.expNextLevelFloor);
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element creationDate.");
            }
            output.writeInt(this.creationDate);
        }

        deserializeAs_GuildInformationsGeneralMessage(input) {
            this.abandonnedPaddock = input.readBoolean();
            this.level = input.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error("Forbidden value (" + this.level + ") on element of GuildInformationsGeneralMessage.level.");
            }
            this.expLevelFloor = input.readVarUhLong();
            if (this.expLevelFloor < 0 || this.expLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expLevelFloor + ") on element of GuildInformationsGeneralMessage.expLevelFloor.");
            }
            this.experience = input.readVarUhLong();
            if (this.experience < 0 || this.experience > 9007199254740992) {
                throw new Error("Forbidden value (" + this.experience + ") on element of GuildInformationsGeneralMessage.experience.");
            }
            this.expNextLevelFloor = input.readVarUhLong();
            if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9007199254740992) {
                throw new Error("Forbidden value (" + this.expNextLevelFloor + ") on element of GuildInformationsGeneralMessage.expNextLevelFloor.");
            }
            this.creationDate = input.readInt();
            if (this.creationDate < 0) {
                throw new Error("Forbidden value (" + this.creationDate + ") on element of GuildInformationsGeneralMessage.creationDate.");
            }
        }
    }
    class GuildInformationsMembersMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.members = [];
            this.ID = 6600;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.members = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInformationsMembersMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInformationsMembersMessage(input);
        }

        serializeAs_GuildInformationsMembersMessage(ouput) {
            output.writeShort(this.members.length);
            for (var _i1 = 0; _i1 < this.members.length; _i1++) {
                (this.members[_i1]).serializeAs_GuildMemberInfo(output);
            }
        }

        deserializeAs_GuildInformationsMembersMessage(input) {
            var _item1 = null;
            var _membersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _membersLen; _i1++) {
                _item1 = new GuildMemberInfo();
                _item1.deserialize(input);
                this.members.push(_item1);
            }
        }
    }
    class GuildInformationsMemberUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.member = new GuildMemberInfo();
            this.ID = 2937;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.member = new GuildMemberInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInformationsMemberUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInformationsMemberUpdateMessage(input);
        }

        serializeAs_GuildInformationsMemberUpdateMessage(ouput) {
            this.member.serializeAs_GuildMemberInfo(output);
        }

        deserializeAs_GuildInformationsMemberUpdateMessage(input) {
            this.member = new GuildMemberInfo();
            this.member.deserialize(input);
        }
    }
    class GuildInformationsPaddocksMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.nbPaddockMax = 0;
            this.paddocksInformations = [];
            this.ID = 7863;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nbPaddockMax = 0;
            this.paddocksInformations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInformationsPaddocksMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInformationsPaddocksMessage(input);
        }

        serializeAs_GuildInformationsPaddocksMessage(ouput) {
            if (this.nbPaddockMax < 0) {
                throw new Error("Forbidden value (" + this.nbPaddockMax + ") on element nbPaddockMax.");
            }
            output.writeByte(this.nbPaddockMax);
            output.writeShort(this.paddocksInformations.length);
            for (var _i2 = 0; _i2 < this.paddocksInformations.length; _i2++) {
                (this.paddocksInformations[_i2]).serializeAs_PaddockContentInformations(output);
            }
        }

        deserializeAs_GuildInformationsPaddocksMessage(input) {
            var _item2 = null;
            this.nbPaddockMax = input.readByte();
            if (this.nbPaddockMax < 0) {
                throw new Error("Forbidden value (" + this.nbPaddockMax + ") on element of GuildInformationsPaddocksMessage.nbPaddockMax.");
            }
            var _paddocksInformationsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _paddocksInformationsLen; _i2++) {
                _item2 = new PaddockContentInformations();
                _item2.deserialize(input);
                this.paddocksInformations.push(_item2);
            }
        }
    }
    class GuildInvitationAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.ID = 3470;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInvitationAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInvitationAnswerMessage(input);
        }

        serializeAs_GuildInvitationAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
        }

        deserializeAs_GuildInvitationAnswerMessage(input) {
            this.accept = input.readBoolean();
        }
    }
    class GuildInvitationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.targetId = 0;
            this.ID = 8131;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.targetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInvitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInvitationMessage(input);
        }

        serializeAs_GuildInvitationMessage(ouput) {
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element targetId.");
            }
            output.writeVarLong(this.targetId);
        }

        deserializeAs_GuildInvitationMessage(input) {
            this.targetId = input.readVarUhLong();
            if (this.targetId < 0 || this.targetId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.targetId + ") on element of GuildInvitationMessage.targetId.");
            }
        }
    }
    class GuildInvitationStateRecrutedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.invitationState = 0;
            this.ID = 3782;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.invitationState = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInvitationStateRecrutedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInvitationStateRecrutedMessage(input);
        }

        serializeAs_GuildInvitationStateRecrutedMessage(ouput) {
            output.writeByte(this.invitationState);
        }

        deserializeAs_GuildInvitationStateRecrutedMessage(input) {
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecrutedMessage.invitationState.");
            }
        }
    }
    class GuildInvitationStateRecruterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recrutedName = "";
            this.invitationState = 0;
            this.ID = 3652;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recrutedName = "";
            this.invitationState = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInvitationStateRecruterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInvitationStateRecruterMessage(input);
        }

        serializeAs_GuildInvitationStateRecruterMessage(ouput) {
            output.writeUTF(this.recrutedName);
            output.writeByte(this.invitationState);
        }

        deserializeAs_GuildInvitationStateRecruterMessage(input) {
            this.recrutedName = input.readUTF();
            this.invitationState = input.readByte();
            if (this.invitationState < 0) {
                throw new Error("Forbidden value (" + this.invitationState + ") on element of GuildInvitationStateRecruterMessage.invitationState.");
            }
        }
    }
    class GuildInvitedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recruterName = "";
            this.guildInfo = new GuildInformations();
            this.ID = 296;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recruterName = "";
            this.guildInfo = new GuildInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildInvitedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildInvitedMessage(input);
        }

        serializeAs_GuildInvitedMessage(ouput) {
            output.writeUTF(this.recruterName);
            this.guildInfo.serializeAs_GuildInformations(output);
        }

        deserializeAs_GuildInvitedMessage(input) {
            this.recruterName = input.readUTF();
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
        }
    }
    class GuildJoinAutomaticallyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildId = 0;
            this.ID = 1067;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildJoinAutomaticallyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildJoinAutomaticallyRequestMessage(input);
        }

        serializeAs_GuildJoinAutomaticallyRequestMessage(ouput) {
            output.writeInt(this.guildId);
        }

        deserializeAs_GuildJoinAutomaticallyRequestMessage(input) {
            this.guildId = input.readInt();
        }
    }
    class GuildJoinedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildInfo = new GuildInformations();
            this.rankId = 0;
            this.ID = 984;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildInfo = new GuildInformations();
            this.rankId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildJoinedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildJoinedMessage(input);
        }

        serializeAs_GuildJoinedMessage(ouput) {
            this.guildInfo.serializeAs_GuildInformations(output);
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
        }

        deserializeAs_GuildJoinedMessage(input) {
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(input);
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of GuildJoinedMessage.rankId.");
            }
        }
    }
    class GuildKickRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kickedId = 0;
            this.ID = 4360;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kickedId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildKickRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildKickRequestMessage(input);
        }

        serializeAs_GuildKickRequestMessage(ouput) {
            if (this.kickedId < 0 || this.kickedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element kickedId.");
            }
            output.writeVarLong(this.kickedId);
        }

        deserializeAs_GuildKickRequestMessage(input) {
            this.kickedId = input.readVarUhLong();
            if (this.kickedId < 0 || this.kickedId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kickedId + ") on element of GuildKickRequestMessage.kickedId.");
            }
        }
    }
    class GuildLeftMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5908;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildLeftMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLeftMessage(input);
        }

        serializeAs_GuildLeftMessage(ouput) {

        }

        deserializeAs_GuildLeftMessage(input) {

        }
    }
    class GuildLevelUpMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.newLevel = 0;
            this.ID = 1713;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.newLevel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildLevelUpMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLevelUpMessage(input);
        }

        serializeAs_GuildLevelUpMessage(ouput) {
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element newLevel.");
            }
            output.writeByte(this.newLevel);
        }

        deserializeAs_GuildLevelUpMessage(input) {
            this.newLevel = input.readUnsignedByte();
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error("Forbidden value (" + this.newLevel + ") on element of GuildLevelUpMessage.newLevel.");
            }
        }
    }
    class GuildListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guilds = [];
            this.ID = 5122;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guilds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildListMessage(input);
        }

        serializeAs_GuildListMessage(ouput) {
            output.writeShort(this.guilds.length);
            for (var _i1 = 0; _i1 < this.guilds.length; _i1++) {
                (this.guilds[_i1]).serializeAs_GuildInformations(output);
            }
        }

        deserializeAs_GuildListMessage(input) {
            var _item1 = null;
            var _guildsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _guildsLen; _i1++) {
                _item1 = new GuildInformations();
                _item1.deserialize(input);
                this.guilds.push(_item1);
            }
        }
    }
    class GuildMemberLeavingMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kicked = false;
            this.memberId = 0;
            this.ID = 1501;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kicked = false;
            this.memberId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMemberLeavingMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMemberLeavingMessage(input);
        }

        serializeAs_GuildMemberLeavingMessage(ouput) {
            output.writeBoolean(this.kicked);
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
        }

        deserializeAs_GuildMemberLeavingMessage(input) {
            this.kicked = input.readBoolean();
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildMemberLeavingMessage.memberId.");
            }
        }
    }
    class GuildMemberOnlineStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.memberId = 0;
            this.online = false;
            this.ID = 214;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.memberId = 0;
            this.online = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMemberOnlineStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMemberOnlineStatusMessage(input);
        }

        serializeAs_GuildMemberOnlineStatusMessage(ouput) {
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element memberId.");
            }
            output.writeVarLong(this.memberId);
            output.writeBoolean(this.online);
        }

        deserializeAs_GuildMemberOnlineStatusMessage(input) {
            this.memberId = input.readVarUhLong();
            if (this.memberId < 0 || this.memberId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.memberId + ") on element of GuildMemberOnlineStatusMessage.memberId.");
            }
            this.online = input.readBoolean();
        }
    }
    class GuildMembershipMessage extends GuildJoinedMessage {
        constructor(_super) {
            super()

            this.ID = 189;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMembershipMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMembershipMessage(input);
        }

        serializeAs_GuildMembershipMessage(ouput) {
            this.serializeAs_GuildJoinedMessage.call(this, output);
        }

        deserializeAs_GuildMembershipMessage(input) {
            this.deserializeAs_GuildJoinedMessage.call(this, input);
        }
    }
    class GuildMemberStartWarnOnConnectionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 239;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMemberStartWarnOnConnectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMemberStartWarnOnConnectionMessage(input);
        }

        serializeAs_GuildMemberStartWarnOnConnectionMessage(ouput) {

        }

        deserializeAs_GuildMemberStartWarnOnConnectionMessage(input) {

        }
    }
    class GuildMemberStopWarnOnConnectionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2325;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMemberStopWarnOnConnectionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMemberStopWarnOnConnectionMessage(input);
        }

        serializeAs_GuildMemberStopWarnOnConnectionMessage(ouput) {

        }

        deserializeAs_GuildMemberStopWarnOnConnectionMessage(input) {

        }
    }
    class GuildModificationEmblemValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildEmblem = new SocialEmblem();
            this.ID = 6290;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildEmblem = new SocialEmblem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildModificationEmblemValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildModificationEmblemValidMessage(input);
        }

        serializeAs_GuildModificationEmblemValidMessage(ouput) {
            this.guildEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_GuildModificationEmblemValidMessage(input) {
            this.guildEmblem = new SocialEmblem();
            this.guildEmblem.deserialize(input);
        }
    }
    class GuildModificationNameValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildName = "";
            this.ID = 4859;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildModificationNameValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildModificationNameValidMessage(input);
        }

        serializeAs_GuildModificationNameValidMessage(ouput) {
            output.writeUTF(this.guildName);
        }

        deserializeAs_GuildModificationNameValidMessage(input) {
            this.guildName = input.readUTF();
        }
    }
    class GuildModificationResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = 0;
            this.ID = 295;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildModificationResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildModificationResultMessage(input);
        }

        serializeAs_GuildModificationResultMessage(ouput) {
            output.writeByte(this.result);
        }

        deserializeAs_GuildModificationResultMessage(input) {
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of GuildModificationResultMessage.result.");
            }
        }
    }
    class GuildModificationStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.canChangeName = false;
            this.canChangeEmblem = false;
            this.ID = 2410;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.canChangeName = false;
            this.canChangeEmblem = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildModificationStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildModificationStartedMessage(input);
        }

        serializeAs_GuildModificationStartedMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.canChangeName);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.canChangeEmblem);
            output.writeByte(_box0);
        }

        deserializeAs_GuildModificationStartedMessage(input) {
            var _box0 = input.readByte();
            this.canChangeName = BooleanByteWrapper.getFlag(_box0, 0);
            this.canChangeEmblem = BooleanByteWrapper.getFlag(_box0, 1);
        }
    }
    class GuildModificationValidMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildName = "";
            this.guildEmblem = new SocialEmblem();
            this.ID = 1705;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildName = "";
            this.guildEmblem = new SocialEmblem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildModificationValidMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildModificationValidMessage(input);
        }

        serializeAs_GuildModificationValidMessage(ouput) {
            output.writeUTF(this.guildName);
            this.guildEmblem.serializeAs_SocialEmblem(output);
        }

        deserializeAs_GuildModificationValidMessage(input) {
            this.guildName = input.readUTF();
            this.guildEmblem = new SocialEmblem();
            this.guildEmblem.deserialize(input);
        }
    }
    class GuildMotdMessage extends SocialNoticeMessage {
        constructor(_super) {
            super()

            this.ID = 5087;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMotdMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMotdMessage(input);
        }

        serializeAs_GuildMotdMessage(ouput) {
            this.serializeAs_SocialNoticeMessage.call(this, output);
        }

        deserializeAs_GuildMotdMessage(input) {
            this.deserializeAs_SocialNoticeMessage.call(this, input);
        }
    }
    class GuildMotdSetErrorMessage extends SocialNoticeSetErrorMessage {
        constructor(_super) {
            super()

            this.ID = 3887;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMotdSetErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMotdSetErrorMessage(input);
        }

        serializeAs_GuildMotdSetErrorMessage(ouput) {
            this.serializeAs_SocialNoticeSetErrorMessage.call(this, output);
        }

        deserializeAs_GuildMotdSetErrorMessage(input) {
            this.deserializeAs_SocialNoticeSetErrorMessage.call(this, input);
        }
    }
    class GuildMotdSetRequestMessage extends SocialNoticeSetRequestMessage {
        constructor(_super) {
            super()
            this.content = "";
            this.ID = 7776;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildMotdSetRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildMotdSetRequestMessage(input);
        }

        serializeAs_GuildMotdSetRequestMessage(ouput) {
            this.serializeAs_SocialNoticeSetRequestMessage.call(this, output);
            output.writeUTF(this.content);
        }

        deserializeAs_GuildMotdSetRequestMessage(input) {
            this.deserializeAs_SocialNoticeSetRequestMessage.call(this, input);
            this.content = input.readUTF();
        }
    }
    class GuildPaddockBoughtMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.paddockInfo = new PaddockContentInformations();
            this.ID = 5692;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockInfo = new PaddockContentInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildPaddockBoughtMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPaddockBoughtMessage(input);
        }

        serializeAs_GuildPaddockBoughtMessage(ouput) {
            this.paddockInfo.serializeAs_PaddockContentInformations(output);
        }

        deserializeAs_GuildPaddockBoughtMessage(input) {
            this.paddockInfo = new PaddockContentInformations();
            this.paddockInfo.deserialize(input);
        }
    }
    class GuildPaddockRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.paddockId = 0;
            this.ID = 48;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildPaddockRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPaddockRemovedMessage(input);
        }

        serializeAs_GuildPaddockRemovedMessage(ouput) {
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
        }

        deserializeAs_GuildPaddockRemovedMessage(input) {
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of GuildPaddockRemovedMessage.paddockId.");
            }
        }
    }
    class GuildPaddockTeleportRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.paddockId = 0;
            this.ID = 7426;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildPaddockTeleportRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildPaddockTeleportRequestMessage(input);
        }

        serializeAs_GuildPaddockTeleportRequestMessage(ouput) {
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element paddockId.");
            }
            output.writeDouble(this.paddockId);
        }

        deserializeAs_GuildPaddockTeleportRequestMessage(input) {
            this.paddockId = input.readDouble();
            if (this.paddockId < 0 || this.paddockId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.paddockId + ") on element of GuildPaddockTeleportRequestMessage.paddockId.");
            }
        }
    }
    class GuildRanksMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ranks = [];
            this.ID = 8184;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ranks = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildRanksMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildRanksMessage(input);
        }

        serializeAs_GuildRanksMessage(ouput) {
            output.writeShort(this.ranks.length);
            for (var _i1 = 0; _i1 < this.ranks.length; _i1++) {
                (this.ranks[_i1]).serializeAs_RankInformation(output);
            }
        }

        deserializeAs_GuildRanksMessage(input) {
            var _item1 = null;
            var _ranksLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ranksLen; _i1++) {
                _item1 = new RankInformation();
                _item1.deserialize(input);
                this.ranks.push(_item1);
            }
        }
    }
    class GuildRanksRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1149;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildRanksRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildRanksRequestMessage(input);
        }

        serializeAs_GuildRanksRequestMessage(ouput) {

        }

        deserializeAs_GuildRanksRequestMessage(input) {

        }
    }
    class GuildSelectChestTabRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.tabNumber = 0;
            this.ID = 6176;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tabNumber = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildSelectChestTabRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildSelectChestTabRequestMessage(input);
        }

        serializeAs_GuildSelectChestTabRequestMessage(ouput) {
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element tabNumber.");
            }
            output.writeVarInt(this.tabNumber);
        }

        deserializeAs_GuildSelectChestTabRequestMessage(input) {
            this.tabNumber = input.readVarUhInt();
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element of GuildSelectChestTabRequestMessage.tabNumber.");
            }
        }
    }
    class GuildSpellUpgradeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellId = 0;
            this.ID = 4409;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildSpellUpgradeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildSpellUpgradeRequestMessage(input);
        }

        serializeAs_GuildSpellUpgradeRequestMessage(ouput) {
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element spellId.");
            }
            output.writeInt(this.spellId);
        }

        deserializeAs_GuildSpellUpgradeRequestMessage(input) {
            this.spellId = input.readInt();
            if (this.spellId < 0) {
                throw new Error("Forbidden value (" + this.spellId + ") on element of GuildSpellUpgradeRequestMessage.spellId.");
            }
        }
    }
    class GuildSummaryMessage extends PaginationAnswerAbstractMessage {
        constructor(_super) {
            super()
            this.guilds = [];
            this.ID = 7331;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guilds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildSummaryMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildSummaryMessage(input);
        }

        serializeAs_GuildSummaryMessage(ouput) {
            this.serializeAs_PaginationAnswerAbstractMessage.call(this, output);
            output.writeShort(this.guilds.length);
            for (var _i1 = 0; _i1 < this.guilds.length; _i1++) {
                (this.guilds[_i1]).serializeAs_GuildFactSheetInformations(output);
            }
        }

        deserializeAs_GuildSummaryMessage(input) {
            var _item1 = null;
            this.deserializeAs_PaginationAnswerAbstractMessage.call(this, input);
            var _guildsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _guildsLen; _i1++) {
                _item1 = new GuildFactSheetInformations();
                _item1.deserialize(input);
                this.guilds.push(_item1);
            }
        }
    }
    class GuildSummaryRequestMessage extends PaginationRequestAbstractMessage {
        constructor(_super) {
            super()
            this.nameFilter = "";
            this.hideFullFilter = false;
            this.criterionFilter = [];
            this.languagesFilter = [];
            this.recruitmentTypeFilter = [];
            this.minLevelFilter = 0;
            this.maxLevelFilter = 0;
            this.minPlayerLevelFilter = 0;
            this.maxPlayerLevelFilter = 0;
            this.minSuccessFilter = 0;
            this.maxSuccessFilter = 0;
            this.sortType = 0;
            this.sortDescending = false;
            this.ID = 8581;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nameFilter = "";
            this.hideFullFilter = false;
            this.criterionFilter = [];
            this.languagesFilter = [];
            this.recruitmentTypeFilter = [];
            this.minLevelFilter = 0;
            this.maxLevelFilter = 0;
            this.minPlayerLevelFilter = 0;
            this.maxPlayerLevelFilter = 0;
            this.minSuccessFilter = 0;
            this.maxSuccessFilter = 0;
            this.sortType = 0;
            this.sortDescending = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildSummaryRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildSummaryRequestMessage(input);
        }

        serializeAs_GuildSummaryRequestMessage(ouput) {
            this.serializeAs_PaginationRequestAbstractMessage.call(this, output);
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.hideFullFilter);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.sortDescending);
            output.writeByte(_box0);
            output.writeUTF(this.nameFilter);
            output.writeShort(this.criterionFilter.length);
            for (var _i3 = 0; _i3 < this.criterionFilter.length; _i3++) {
                if (this.criterionFilter[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.criterionFilter[_i3] + ") on element 3 (starting at 1) of criterionFilter.");
                }
                output.writeVarInt(this.criterionFilter[_i3]);
            }
            output.writeShort(this.languagesFilter.length);
            for (var _i4 = 0; _i4 < this.languagesFilter.length; _i4++) {
                if (this.languagesFilter[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.languagesFilter[_i4] + ") on element 4 (starting at 1) of languagesFilter.");
                }
                output.writeVarInt(this.languagesFilter[_i4]);
            }
            output.writeShort(this.recruitmentTypeFilter.length);
            for (var _i5 = 0; _i5 < this.recruitmentTypeFilter.length; _i5++) {
                output.writeByte(this.recruitmentTypeFilter[_i5]);
            }
            if (this.minLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.minLevelFilter + ") on element minLevelFilter.");
            }
            output.writeShort(this.minLevelFilter);
            if (this.maxLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.maxLevelFilter + ") on element maxLevelFilter.");
            }
            output.writeShort(this.maxLevelFilter);
            if (this.minPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.minPlayerLevelFilter + ") on element minPlayerLevelFilter.");
            }
            output.writeShort(this.minPlayerLevelFilter);
            if (this.maxPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.maxPlayerLevelFilter + ") on element maxPlayerLevelFilter.");
            }
            output.writeShort(this.maxPlayerLevelFilter);
            if (this.minSuccessFilter < 0) {
                throw new Error("Forbidden value (" + this.minSuccessFilter + ") on element minSuccessFilter.");
            }
            output.writeVarInt(this.minSuccessFilter);
            if (this.maxSuccessFilter < 0) {
                throw new Error("Forbidden value (" + this.maxSuccessFilter + ") on element maxSuccessFilter.");
            }
            output.writeVarInt(this.maxSuccessFilter);
            output.writeByte(this.sortType);
        }

        deserializeAs_GuildSummaryRequestMessage(input) {
            var _val3 = 0;
            var _val4 = 0;
            var _val5 = 0;
            this.deserializeAs_PaginationRequestAbstractMessage.call(this, input);
            var _box0 = input.readByte();
            this.hideFullFilter = BooleanByteWrapper.getFlag(_box0, 0);
            this.sortDescending = BooleanByteWrapper.getFlag(_box0, 1);
            this.nameFilter = input.readUTF();
            var _criterionFilterLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _criterionFilterLen; _i3++) {
                _val3 = input.readVarUhInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of criterionFilter.");
                }
                this.criterionFilter.push(_val3);
            }
            var _languagesFilterLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _languagesFilterLen; _i4++) {
                _val4 = input.readVarUhInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of languagesFilter.");
                }
                this.languagesFilter.push(_val4);
            }
            var _recruitmentTypeFilterLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _recruitmentTypeFilterLen; _i5++) {
                _val5 = input.readByte();
                if (_val5 < 0) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of recruitmentTypeFilter.");
                }
                this.recruitmentTypeFilter.push(_val5);
            }
            this.minLevelFilter = input.readShort();
            if (this.minLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.minLevelFilter + ") on element of GuildSummaryRequestMessage.minLevelFilter.");
            }
            this.maxLevelFilter = input.readShort();
            if (this.maxLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.maxLevelFilter + ") on element of GuildSummaryRequestMessage.maxLevelFilter.");
            }
            this.minPlayerLevelFilter = input.readShort();
            if (this.minPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.minPlayerLevelFilter + ") on element of GuildSummaryRequestMessage.minPlayerLevelFilter.");
            }
            this.maxPlayerLevelFilter = input.readShort();
            if (this.maxPlayerLevelFilter < 0) {
                throw new Error("Forbidden value (" + this.maxPlayerLevelFilter + ") on element of GuildSummaryRequestMessage.maxPlayerLevelFilter.");
            }
            this.minSuccessFilter = input.readVarUhInt();
            if (this.minSuccessFilter < 0) {
                throw new Error("Forbidden value (" + this.minSuccessFilter + ") on element of GuildSummaryRequestMessage.minSuccessFilter.");
            }
            this.maxSuccessFilter = input.readVarUhInt();
            if (this.maxSuccessFilter < 0) {
                throw new Error("Forbidden value (" + this.maxSuccessFilter + ") on element of GuildSummaryRequestMessage.maxSuccessFilter.");
            }
            this.sortType = input.readByte();
            if (this.sortType < 0) {
                throw new Error("Forbidden value (" + this.sortType + ") on element of GuildSummaryRequestMessage.sortType.");
            }
        }
    }
    class GuildUpdateChestTabRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.tab = new UpdatedStorageTabInformation();
            this.ID = 9795;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tab = new UpdatedStorageTabInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildUpdateChestTabRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildUpdateChestTabRequestMessage(input);
        }

        serializeAs_GuildUpdateChestTabRequestMessage(ouput) {
            this.tab.serializeAs_UpdatedStorageTabInformation(output);
        }

        deserializeAs_GuildUpdateChestTabRequestMessage(input) {
            this.tab = new UpdatedStorageTabInformation();
            this.tab.deserialize(input);
        }
    }
    class GuildLogbookInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.globalActivities = [];
            this.chestActivities = [];
            this.ID = 9456;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.globalActivities = [];
            this.chestActivities = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildLogbookInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLogbookInformationMessage(input);
        }

        serializeAs_GuildLogbookInformationMessage(ouput) {
            output.writeShort(this.globalActivities.length);
            for (var _i1 = 0; _i1 < this.globalActivities.length; _i1++) {
                output.writeShort((this.globalActivities[_i1]).getTypeId());
                (this.globalActivities[_i1]).serialize(output);
            }
            output.writeShort(this.chestActivities.length);
            for (var _i2 = 0; _i2 < this.chestActivities.length; _i2++) {
                output.writeShort((this.chestActivities[_i2]).getTypeId());
                (this.chestActivities[_i2]).serialize(output);
            }
        }

        deserializeAs_GuildLogbookInformationMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _id2 = 0;
            var _item2 = null;
            var _globalActivitiesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _globalActivitiesLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(GuildLogbookEntryBasicInformation, _id1);
                _item1.deserialize(input);
                this.globalActivities.push(_item1);
            }
            var _chestActivitiesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _chestActivitiesLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(GuildLogbookEntryBasicInformation, _id2);
                _item2.deserialize(input);
                this.chestActivities.push(_item2);
            }
        }
    }
    class GuildLogbookInformationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7560;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildLogbookInformationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildLogbookInformationRequestMessage(input);
        }

        serializeAs_GuildLogbookInformationRequestMessage(ouput) {

        }

        deserializeAs_GuildLogbookInformationRequestMessage(input) {

        }
    }
    class GuildRecruitmentInvalidateMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1620;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GuildRecruitmentInvalidateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GuildRecruitmentInvalidateMessage(input);
        }

        serializeAs_GuildRecruitmentInvalidateMessage(ouput) {

        }

        deserializeAs_GuildRecruitmentInvalidateMessage(input) {

        }
    }
    class RecruitmentInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recruitmentData = new GuildRecruitmentInformation();
            this.ID = 5839;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recruitmentData = new GuildRecruitmentInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RecruitmentInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RecruitmentInformationMessage(input);
        }

        serializeAs_RecruitmentInformationMessage(ouput) {
            this.recruitmentData.serializeAs_GuildRecruitmentInformation(output);
        }

        deserializeAs_RecruitmentInformationMessage(input) {
            this.recruitmentData = new GuildRecruitmentInformation();
            this.recruitmentData.deserialize(input);
        }
    }
    class UpdateRecruitmentInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recruitmentData = new GuildRecruitmentInformation();
            this.ID = 7658;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recruitmentData = new GuildRecruitmentInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateRecruitmentInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateRecruitmentInformationMessage(input);
        }

        serializeAs_UpdateRecruitmentInformationMessage(ouput) {
            this.recruitmentData.serializeAs_GuildRecruitmentInformation(output);
        }

        deserializeAs_UpdateRecruitmentInformationMessage(input) {
            this.recruitmentData = new GuildRecruitmentInformation();
            this.recruitmentData.deserialize(input);
        }
    }
    class RemoveGuildRankRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rankId = 0;
            this.newRankId = 0;
            this.ID = 6527;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rankId = 0;
            this.newRankId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RemoveGuildRankRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RemoveGuildRankRequestMessage(input);
        }

        serializeAs_RemoveGuildRankRequestMessage(ouput) {
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
            if (this.newRankId < 0) {
                throw new Error("Forbidden value (" + this.newRankId + ") on element newRankId.");
            }
            output.writeVarInt(this.newRankId);
        }

        deserializeAs_RemoveGuildRankRequestMessage(input) {
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of RemoveGuildRankRequestMessage.rankId.");
            }
            this.newRankId = input.readVarUhInt();
            if (this.newRankId < 0) {
                throw new Error("Forbidden value (" + this.newRankId + ") on element of RemoveGuildRankRequestMessage.newRankId.");
            }
        }
    }
    class StartGuildChestContributionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3909;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartGuildChestContributionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartGuildChestContributionMessage(input);
        }

        serializeAs_StartGuildChestContributionMessage(ouput) {

        }

        deserializeAs_StartGuildChestContributionMessage(input) {

        }
    }
    class StartListenGuildChestStructureMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3185;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartListenGuildChestStructureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartListenGuildChestStructureMessage(input);
        }

        serializeAs_StartListenGuildChestStructureMessage(ouput) {

        }

        deserializeAs_StartListenGuildChestStructureMessage(input) {

        }
    }
    class StopGuildChestContributionMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9562;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopGuildChestContributionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopGuildChestContributionMessage(input);
        }

        serializeAs_StopGuildChestContributionMessage(ouput) {

        }

        deserializeAs_StopGuildChestContributionMessage(input) {

        }
    }
    class StopListenGuildChestStructureMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4831;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopListenGuildChestStructureMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopListenGuildChestStructureMessage(input);
        }

        serializeAs_StopListenGuildChestStructureMessage(ouput) {

        }

        deserializeAs_StopListenGuildChestStructureMessage(input) {

        }
    }
    class TaxCollectorEquipmentUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.uniqueId = 0;
            this.object = new ObjectItem();
            this.added = false;
            this.characteristics = new CharacterCharacteristics();
            this.ID = 5895;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uniqueId = 0;
            this.object = new ObjectItem();
            this.added = false;
            this.characteristics = new CharacterCharacteristics();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TaxCollectorEquipmentUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TaxCollectorEquipmentUpdateMessage(input);
        }

        serializeAs_TaxCollectorEquipmentUpdateMessage(ouput) {
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element uniqueId.");
            }
            output.writeDouble(this.uniqueId);
            this.object.serializeAs_ObjectItem(output);
            output.writeBoolean(this.added);
            this.characteristics.serializeAs_CharacterCharacteristics(output);
        }

        deserializeAs_TaxCollectorEquipmentUpdateMessage(input) {
            this.uniqueId = input.readDouble();
            if (this.uniqueId < 0 || this.uniqueId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uniqueId + ") on element of TaxCollectorEquipmentUpdateMessage.uniqueId.");
            }
            this.object = new ObjectItem();
            this.object.deserialize(input);
            this.added = input.readBoolean();
            this.characteristics = new CharacterCharacteristics();
            this.characteristics.deserialize(input);
        }
    }
    class UpdateAllGuildRankRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ranks = [];
            this.ID = 8535;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ranks = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateAllGuildRankRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateAllGuildRankRequestMessage(input);
        }

        serializeAs_UpdateAllGuildRankRequestMessage(ouput) {
            output.writeShort(this.ranks.length);
            for (var _i1 = 0; _i1 < this.ranks.length; _i1++) {
                (this.ranks[_i1]).serializeAs_RankInformation(output);
            }
        }

        deserializeAs_UpdateAllGuildRankRequestMessage(input) {
            var _item1 = null;
            var _ranksLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _ranksLen; _i1++) {
                _item1 = new RankInformation();
                _item1.deserialize(input);
                this.ranks.push(_item1);
            }
        }
    }
    class UpdateGuildRankRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rank = new RankInformation();
            this.ID = 9794;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rank = new RankInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateGuildRankRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateGuildRankRequestMessage(input);
        }

        serializeAs_UpdateGuildRankRequestMessage(ouput) {
            this.rank.serializeAs_RankInformation(output);
        }

        deserializeAs_UpdateGuildRankRequestMessage(input) {
            this.rank = new RankInformation();
            this.rank.deserialize(input);
        }
    }
    class UpdateGuildRightsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rankId = 0;
            this.rights = [];
            this.ID = 2656;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rankId = 0;
            this.rights = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateGuildRightsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateGuildRightsMessage(input);
        }

        serializeAs_UpdateGuildRightsMessage(ouput) {
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element rankId.");
            }
            output.writeVarInt(this.rankId);
            output.writeShort(this.rights.length);
            for (var _i2 = 0; _i2 < this.rights.length; _i2++) {
                if (this.rights[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.rights[_i2] + ") on element 2 (starting at 1) of rights.");
                }
                output.writeVarInt(this.rights[_i2]);
            }
        }

        deserializeAs_UpdateGuildRightsMessage(input) {
            var _val2 = 0;
            this.rankId = input.readVarUhInt();
            if (this.rankId < 0) {
                throw new Error("Forbidden value (" + this.rankId + ") on element of UpdateGuildRightsMessage.rankId.");
            }
            var _rightsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _rightsLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of rights.");
                }
                this.rights.push(_val2);
            }
        }
    }
    class HouseTeleportRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.houseId = 0;
            this.houseInstanceId = 0;
            this.ID = 8613;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.houseId = 0;
            this.houseInstanceId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HouseTeleportRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HouseTeleportRequestMessage(input);
        }

        serializeAs_HouseTeleportRequestMessage(ouput) {
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element houseId.");
            }
            output.writeVarInt(this.houseId);
            if (this.houseInstanceId < 0) {
                throw new Error("Forbidden value (" + this.houseInstanceId + ") on element houseInstanceId.");
            }
            output.writeInt(this.houseInstanceId);
        }

        deserializeAs_HouseTeleportRequestMessage(input) {
            this.houseId = input.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error("Forbidden value (" + this.houseId + ") on element of HouseTeleportRequestMessage.houseId.");
            }
            this.houseInstanceId = input.readInt();
            if (this.houseInstanceId < 0) {
                throw new Error("Forbidden value (" + this.houseInstanceId + ") on element of HouseTeleportRequestMessage.houseInstanceId.");
            }
        }
    }
    class CharacterCapabilitiesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.guildEmblemSymbolCategories = 0;
            this.ID = 1333;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.guildEmblemSymbolCategories = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterCapabilitiesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterCapabilitiesMessage(input);
        }

        serializeAs_CharacterCapabilitiesMessage(ouput) {
            if (this.guildEmblemSymbolCategories < 0) {
                throw new Error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element guildEmblemSymbolCategories.");
            }
            output.writeVarInt(this.guildEmblemSymbolCategories);
        }

        deserializeAs_CharacterCapabilitiesMessage(input) {
            this.guildEmblemSymbolCategories = input.readVarUhInt();
            if (this.guildEmblemSymbolCategories < 0) {
                throw new Error("Forbidden value (" + this.guildEmblemSymbolCategories + ") on element of CharacterCapabilitiesMessage.guildEmblemSymbolCategories.");
            }
        }
    }
    class CharacterLoadingCompleteMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5077;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CharacterLoadingCompleteMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CharacterLoadingCompleteMessage(input);
        }

        serializeAs_CharacterLoadingCompleteMessage(ouput) {

        }

        deserializeAs_CharacterLoadingCompleteMessage(input) {

        }
    }
    class OnConnectionEventMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.eventType = 0;
            this.ID = 6178;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.eventType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OnConnectionEventMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OnConnectionEventMessage(input);
        }

        serializeAs_OnConnectionEventMessage(ouput) {
            output.writeByte(this.eventType);
        }

        deserializeAs_OnConnectionEventMessage(input) {
            this.eventType = input.readByte();
            if (this.eventType < 0) {
                throw new Error("Forbidden value (" + this.eventType + ") on element of OnConnectionEventMessage.eventType.");
            }
        }
    }
    class ServerExperienceModificatorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.experiencePercent = 0;
            this.ID = 4584;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.experiencePercent = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ServerExperienceModificatorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ServerExperienceModificatorMessage(input);
        }

        serializeAs_ServerExperienceModificatorMessage(ouput) {
            if (this.experiencePercent < 0) {
                throw new Error("Forbidden value (" + this.experiencePercent + ") on element experiencePercent.");
            }
            output.writeVarShort(this.experiencePercent);
        }

        deserializeAs_ServerExperienceModificatorMessage(input) {
            this.experiencePercent = input.readVarUhShort();
            if (this.experiencePercent < 0) {
                throw new Error("Forbidden value (" + this.experiencePercent + ") on element of ServerExperienceModificatorMessage.experiencePercent.");
            }
        }
    }
    class SetCharacterRestrictionsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actorId = 0;
            this.restrictions = new ActorRestrictionsInformations();
            this.ID = 8088;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actorId = 0;
            this.restrictions = new ActorRestrictionsInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SetCharacterRestrictionsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SetCharacterRestrictionsMessage(input);
        }

        serializeAs_SetCharacterRestrictionsMessage(ouput) {
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element actorId.");
            }
            output.writeDouble(this.actorId);
            this.restrictions.serializeAs_ActorRestrictionsInformations(output);
        }

        deserializeAs_SetCharacterRestrictionsMessage(input) {
            this.actorId = input.readDouble();
            if (this.actorId < -9007199254740992 || this.actorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.actorId + ") on element of SetCharacterRestrictionsMessage.actorId.");
            }
            this.restrictions = new ActorRestrictionsInformations();
            this.restrictions.deserialize(input);
        }
    }
    class InteractiveElementUpdatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.interactiveElement = new InteractiveElement();
            this.ID = 8718;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.interactiveElement = new InteractiveElement();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveElementUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveElementUpdatedMessage(input);
        }

        serializeAs_InteractiveElementUpdatedMessage(ouput) {
            this.interactiveElement.serializeAs_InteractiveElement(output);
        }

        deserializeAs_InteractiveElementUpdatedMessage(input) {
            this.interactiveElement = new InteractiveElement();
            this.interactiveElement.deserialize(input);
        }
    }
    class InteractiveMapUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.interactiveElements = [];
            this.ID = 2157;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.interactiveElements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveMapUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveMapUpdateMessage(input);
        }

        serializeAs_InteractiveMapUpdateMessage(ouput) {
            output.writeShort(this.interactiveElements.length);
            for (var _i1 = 0; _i1 < this.interactiveElements.length; _i1++) {
                output.writeShort((this.interactiveElements[_i1]).getTypeId());
                (this.interactiveElements[_i1]).serialize(output);
            }
        }

        deserializeAs_InteractiveMapUpdateMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _interactiveElementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _interactiveElementsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(InteractiveElement, _id1);
                _item1.deserialize(input);
                this.interactiveElements.push(_item1);
            }
        }
    }
    class InteractiveUsedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.entityId = 0;
            this.elemId = 0;
            this.skillId = 0;
            this.duration = 0;
            this.canMove = false;
            this.ID = 8940;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.entityId = 0;
            this.elemId = 0;
            this.skillId = 0;
            this.duration = 0;
            this.canMove = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveUsedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveUsedMessage(input);
        }

        serializeAs_InteractiveUsedMessage(ouput) {
            if (this.entityId < 0 || this.entityId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.entityId + ") on element entityId.");
            }
            output.writeVarLong(this.entityId);
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element duration.");
            }
            output.writeVarShort(this.duration);
            output.writeBoolean(this.canMove);
        }

        deserializeAs_InteractiveUsedMessage(input) {
            this.entityId = input.readVarUhLong();
            if (this.entityId < 0 || this.entityId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.entityId + ") on element of InteractiveUsedMessage.entityId.");
            }
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUsedMessage.elemId.");
            }
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveUsedMessage.skillId.");
            }
            this.duration = input.readVarUhShort();
            if (this.duration < 0) {
                throw new Error("Forbidden value (" + this.duration + ") on element of InteractiveUsedMessage.duration.");
            }
            this.canMove = input.readBoolean();
        }
    }
    class InteractiveUseEndedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.elemId = 0;
            this.skillId = 0;
            this.ID = 5459;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elemId = 0;
            this.skillId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveUseEndedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveUseEndedMessage(input);
        }

        serializeAs_InteractiveUseEndedMessage(ouput) {
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarShort(this.skillId);
        }

        deserializeAs_InteractiveUseEndedMessage(input) {
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseEndedMessage.elemId.");
            }
            this.skillId = input.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of InteractiveUseEndedMessage.skillId.");
            }
        }
    }
    class InteractiveUseErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.elemId = 0;
            this.skillInstanceUid = 0;
            this.ID = 5734;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveUseErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveUseErrorMessage(input);
        }

        serializeAs_InteractiveUseErrorMessage(ouput) {
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
            }
            output.writeVarInt(this.skillInstanceUid);
        }

        deserializeAs_InteractiveUseErrorMessage(input) {
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseErrorMessage.elemId.");
            }
            this.skillInstanceUid = input.readVarUhInt();
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseErrorMessage.skillInstanceUid.");
            }
        }
    }
    class InteractiveUseRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.elemId = 0;
            this.skillInstanceUid = 0;
            this.ID = 6295;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveUseRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveUseRequestMessage(input);
        }

        serializeAs_InteractiveUseRequestMessage(ouput) {
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element elemId.");
            }
            output.writeVarInt(this.elemId);
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element skillInstanceUid.");
            }
            output.writeVarInt(this.skillInstanceUid);
        }

        deserializeAs_InteractiveUseRequestMessage(input) {
            this.elemId = input.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error("Forbidden value (" + this.elemId + ") on element of InteractiveUseRequestMessage.elemId.");
            }
            this.skillInstanceUid = input.readVarUhInt();
            if (this.skillInstanceUid < 0) {
                throw new Error("Forbidden value (" + this.skillInstanceUid + ") on element of InteractiveUseRequestMessage.skillInstanceUid.");
            }
        }
    }
    class GroupTeleportPlayerAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.requesterId = 0;
            this.ID = 5764;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
            this.requesterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GroupTeleportPlayerAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GroupTeleportPlayerAnswerMessage(input);
        }

        serializeAs_GroupTeleportPlayerAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeVarLong(this.requesterId);
        }

        deserializeAs_GroupTeleportPlayerAnswerMessage(input) {
            this.accept = input.readBoolean();
            this.requesterId = input.readVarUhLong();
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of GroupTeleportPlayerAnswerMessage.requesterId.");
            }
        }
    }
    class GroupTeleportPlayerCloseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.requesterId = 0;
            this.ID = 8093;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.requesterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GroupTeleportPlayerCloseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GroupTeleportPlayerCloseMessage(input);
        }

        serializeAs_GroupTeleportPlayerCloseMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeVarLong(this.requesterId);
        }

        deserializeAs_GroupTeleportPlayerCloseMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of GroupTeleportPlayerCloseMessage.mapId.");
            }
            this.requesterId = input.readVarUhLong();
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of GroupTeleportPlayerCloseMessage.requesterId.");
            }
        }
    }
    class GroupTeleportPlayerOfferMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.timeLeft = 0;
            this.requesterId = 0;
            this.requesterName = "";
            this.ID = 9570;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.timeLeft = 0;
            this.requesterId = 0;
            this.requesterName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GroupTeleportPlayerOfferMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GroupTeleportPlayerOfferMessage(input);
        }

        serializeAs_GroupTeleportPlayerOfferMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeShort(this.worldX);
            output.writeShort(this.worldY);
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element timeLeft.");
            }
            output.writeVarInt(this.timeLeft);
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeVarLong(this.requesterId);
            output.writeUTF(this.requesterName);
        }

        deserializeAs_GroupTeleportPlayerOfferMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of GroupTeleportPlayerOfferMessage.mapId.");
            }
            this.worldX = input.readShort();
            this.worldY = input.readShort();
            this.timeLeft = input.readVarUhInt();
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element of GroupTeleportPlayerOfferMessage.timeLeft.");
            }
            this.requesterId = input.readVarUhLong();
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of GroupTeleportPlayerOfferMessage.requesterId.");
            }
            this.requesterName = input.readUTF();
        }
    }
    class TeleportBuddiesAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.ID = 9243;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportBuddiesAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportBuddiesAnswerMessage(input);
        }

        serializeAs_TeleportBuddiesAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
        }

        deserializeAs_TeleportBuddiesAnswerMessage(input) {
            this.accept = input.readBoolean();
        }
    }
    class TeleportBuddiesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.ID = 5207;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportBuddiesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportBuddiesMessage(input);
        }

        serializeAs_TeleportBuddiesMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
        }

        deserializeAs_TeleportBuddiesMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesMessage.dungeonId.");
            }
        }
    }
    class TeleportBuddiesRequestedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.inviterId = 0;
            this.invalidBuddiesIds = [];
            this.ID = 9327;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.inviterId = 0;
            this.invalidBuddiesIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportBuddiesRequestedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportBuddiesRequestedMessage(input);
        }

        serializeAs_TeleportBuddiesRequestedMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.inviterId < 0 || this.inviterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.inviterId + ") on element inviterId.");
            }
            output.writeVarLong(this.inviterId);
            output.writeShort(this.invalidBuddiesIds.length);
            for (var _i3 = 0; _i3 < this.invalidBuddiesIds.length; _i3++) {
                if (this.invalidBuddiesIds[_i3] < 0 || this.invalidBuddiesIds[_i3] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.invalidBuddiesIds[_i3] + ") on element 3 (starting at 1) of invalidBuddiesIds.");
                }
                output.writeVarLong(this.invalidBuddiesIds[_i3]);
            }
        }

        deserializeAs_TeleportBuddiesRequestedMessage(input) {
            var _val3 = NaN;
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportBuddiesRequestedMessage.dungeonId.");
            }
            this.inviterId = input.readVarUhLong();
            if (this.inviterId < 0 || this.inviterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.inviterId + ") on element of TeleportBuddiesRequestedMessage.inviterId.");
            }
            var _invalidBuddiesIdsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _invalidBuddiesIdsLen; _i3++) {
                _val3 = input.readVarUhLong();
                if (_val3 < 0 || _val3 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of invalidBuddiesIds.");
                }
                this.invalidBuddiesIds.push(_val3);
            }
        }
    }
    class TeleportPlayerAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.accept = false;
            this.requesterId = 0;
            this.ID = 8212;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.accept = false;
            this.requesterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportPlayerAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportPlayerAnswerMessage(input);
        }

        serializeAs_TeleportPlayerAnswerMessage(ouput) {
            output.writeBoolean(this.accept);
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeVarLong(this.requesterId);
        }

        deserializeAs_TeleportPlayerAnswerMessage(input) {
            this.accept = input.readBoolean();
            this.requesterId = input.readVarUhLong();
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of TeleportPlayerAnswerMessage.requesterId.");
            }
        }
    }
    class TeleportPlayerCloseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.requesterId = 0;
            this.ID = 6790;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.requesterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportPlayerCloseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportPlayerCloseMessage(input);
        }

        serializeAs_TeleportPlayerCloseMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeVarLong(this.requesterId);
        }

        deserializeAs_TeleportPlayerCloseMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportPlayerCloseMessage.mapId.");
            }
            this.requesterId = input.readVarUhLong();
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of TeleportPlayerCloseMessage.requesterId.");
            }
        }
    }
    class TeleportPlayerOfferMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.message = "";
            this.timeLeft = 0;
            this.requesterId = 0;
            this.ID = 1064;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
            this.message = "";
            this.timeLeft = 0;
            this.requesterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportPlayerOfferMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportPlayerOfferMessage(input);
        }

        serializeAs_TeleportPlayerOfferMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            output.writeUTF(this.message);
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element timeLeft.");
            }
            output.writeVarInt(this.timeLeft);
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element requesterId.");
            }
            output.writeVarLong(this.requesterId);
        }

        deserializeAs_TeleportPlayerOfferMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportPlayerOfferMessage.mapId.");
            }
            this.message = input.readUTF();
            this.timeLeft = input.readVarUhInt();
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element of TeleportPlayerOfferMessage.timeLeft.");
            }
            this.requesterId = input.readVarUhLong();
            if (this.requesterId < 0 || this.requesterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.requesterId + ") on element of TeleportPlayerOfferMessage.requesterId.");
            }
        }
    }
    class TeleportToBuddyAnswerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.buddyId = 0;
            this.accept = false;
            this.ID = 5795;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.accept = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportToBuddyAnswerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportToBuddyAnswerMessage(input);
        }

        serializeAs_TeleportToBuddyAnswerMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.buddyId < 0 || this.buddyId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
            }
            output.writeVarLong(this.buddyId);
            output.writeBoolean(this.accept);
        }

        deserializeAs_TeleportToBuddyAnswerMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyAnswerMessage.dungeonId.");
            }
            this.buddyId = input.readVarUhLong();
            if (this.buddyId < 0 || this.buddyId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyAnswerMessage.buddyId.");
            }
            this.accept = input.readBoolean();
        }
    }
    class TeleportToBuddyCloseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.buddyId = 0;
            this.ID = 5873;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.buddyId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportToBuddyCloseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportToBuddyCloseMessage(input);
        }

        serializeAs_TeleportToBuddyCloseMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.buddyId < 0 || this.buddyId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
            }
            output.writeVarLong(this.buddyId);
        }

        deserializeAs_TeleportToBuddyCloseMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyCloseMessage.dungeonId.");
            }
            this.buddyId = input.readVarUhLong();
            if (this.buddyId < 0 || this.buddyId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyCloseMessage.buddyId.");
            }
        }
    }
    class TeleportToBuddyOfferMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.dungeonId = 0;
            this.buddyId = 0;
            this.timeLeft = 0;
            this.ID = 8992;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.timeLeft = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportToBuddyOfferMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportToBuddyOfferMessage(input);
        }

        serializeAs_TeleportToBuddyOfferMessage(ouput) {
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element dungeonId.");
            }
            output.writeVarShort(this.dungeonId);
            if (this.buddyId < 0 || this.buddyId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element buddyId.");
            }
            output.writeVarLong(this.buddyId);
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element timeLeft.");
            }
            output.writeVarInt(this.timeLeft);
        }

        deserializeAs_TeleportToBuddyOfferMessage(input) {
            this.dungeonId = input.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error("Forbidden value (" + this.dungeonId + ") on element of TeleportToBuddyOfferMessage.dungeonId.");
            }
            this.buddyId = input.readVarUhLong();
            if (this.buddyId < 0 || this.buddyId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.buddyId + ") on element of TeleportToBuddyOfferMessage.buddyId.");
            }
            this.timeLeft = input.readVarUhInt();
            if (this.timeLeft < 0) {
                throw new Error("Forbidden value (" + this.timeLeft + ") on element of TeleportToBuddyOfferMessage.timeLeft.");
            }
        }
    }
    class InteractiveUseWithParamRequestMessage extends InteractiveUseRequestMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 7125;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InteractiveUseWithParamRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InteractiveUseWithParamRequestMessage(input);
        }

        serializeAs_InteractiveUseWithParamRequestMessage(ouput) {
            this.serializeAs_InteractiveUseRequestMessage.call(this, output);
            output.writeInt(this.id);
        }

        deserializeAs_InteractiveUseWithParamRequestMessage(input) {
            this.deserializeAs_InteractiveUseRequestMessage.call(this, input);
            this.id = input.readInt();
        }
    }
    class StatedElementUpdatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.statedElement = new StatedElement();
            this.ID = 5787;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.statedElement = new StatedElement();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StatedElementUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StatedElementUpdatedMessage(input);
        }

        serializeAs_StatedElementUpdatedMessage(ouput) {
            this.statedElement.serializeAs_StatedElement(output);
        }

        deserializeAs_StatedElementUpdatedMessage(input) {
            this.statedElement = new StatedElement();
            this.statedElement.deserialize(input);
        }
    }
    class StatedMapUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.statedElements = [];
            this.ID = 8533;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.statedElements = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StatedMapUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StatedMapUpdateMessage(input);
        }

        serializeAs_StatedMapUpdateMessage(ouput) {
            output.writeShort(this.statedElements.length);
            for (var _i1 = 0; _i1 < this.statedElements.length; _i1++) {
                (this.statedElements[_i1]).serializeAs_StatedElement(output);
            }
        }

        deserializeAs_StatedMapUpdateMessage(input) {
            var _item1 = null;
            var _statedElementsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _statedElementsLen; _i1++) {
                _item1 = new StatedElement();
                _item1.deserialize(input);
                this.statedElements.push(_item1);
            }
        }
    }
    class KnownZaapListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.destinations = [];
            this.ID = 7664;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.destinations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_KnownZaapListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_KnownZaapListMessage(input);
        }

        serializeAs_KnownZaapListMessage(ouput) {
            output.writeShort(this.destinations.length);
            for (var _i1 = 0; _i1 < this.destinations.length; _i1++) {
                if (this.destinations[_i1] < 0 || this.destinations[_i1] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.destinations[_i1] + ") on element 1 (starting at 1) of destinations.");
                }
                output.writeDouble(this.destinations[_i1]);
            }
        }

        deserializeAs_KnownZaapListMessage(input) {
            var _val1 = NaN;
            var _destinationsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _destinationsLen; _i1++) {
                _val1 = input.readDouble();
                if (_val1 < 0 || _val1 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of destinations.");
                }
                this.destinations.push(_val1);
            }
        }
    }
    class TeleportDestinationsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.destinations = [];
            this.ID = 1074;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
            this.destinations = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportDestinationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportDestinationsMessage(input);
        }

        serializeAs_TeleportDestinationsMessage(ouput) {
            output.writeByte(this.type);
            output.writeShort(this.destinations.length);
            for (var _i2 = 0; _i2 < this.destinations.length; _i2++) {
                (this.destinations[_i2]).serializeAs_TeleportDestination(output);
            }
        }

        deserializeAs_TeleportDestinationsMessage(input) {
            var _item2 = null;
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of TeleportDestinationsMessage.type.");
            }
            var _destinationsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _destinationsLen; _i2++) {
                _item2 = new TeleportDestination();
                _item2.deserialize(input);
                this.destinations.push(_item2);
            }
        }
    }
    class TeleportRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.sourceType = 0;
            this.destinationType = 0;
            this.mapId = 0;
            this.ID = 7168;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sourceType = 0;
            this.destinationType = 0;
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TeleportRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TeleportRequestMessage(input);
        }

        serializeAs_TeleportRequestMessage(ouput) {
            output.writeByte(this.sourceType);
            output.writeByte(this.destinationType);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_TeleportRequestMessage(input) {
            this.sourceType = input.readByte();
            if (this.sourceType < 0) {
                throw new Error("Forbidden value (" + this.sourceType + ") on element of TeleportRequestMessage.sourceType.");
            }
            this.destinationType = input.readByte();
            if (this.destinationType < 0) {
                throw new Error("Forbidden value (" + this.destinationType + ") on element of TeleportRequestMessage.destinationType.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of TeleportRequestMessage.mapId.");
            }
        }
    }
    class ZaapDestinationsMessage extends TeleportDestinationsMessage {
        constructor(_super) {
            super()
            this.spawnMapId = 0;
            this.ID = 6758;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spawnMapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ZaapDestinationsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ZaapDestinationsMessage(input);
        }

        serializeAs_ZaapDestinationsMessage(ouput) {
            this.serializeAs_TeleportDestinationsMessage.call(this, output);
            if (this.spawnMapId < 0 || this.spawnMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.spawnMapId + ") on element spawnMapId.");
            }
            output.writeDouble(this.spawnMapId);
        }

        deserializeAs_ZaapDestinationsMessage(input) {
            this.deserializeAs_TeleportDestinationsMessage.call(this, input);
            this.spawnMapId = input.readDouble();
            if (this.spawnMapId < 0 || this.spawnMapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.spawnMapId + ") on element of ZaapDestinationsMessage.spawnMapId.");
            }
        }
    }
    class ZaapRespawnSaveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 153;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ZaapRespawnSaveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ZaapRespawnSaveRequestMessage(input);
        }

        serializeAs_ZaapRespawnSaveRequestMessage(ouput) {

        }

        deserializeAs_ZaapRespawnSaveRequestMessage(input) {

        }
    }
    class ZaapRespawnUpdatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mapId = 0;
            this.ID = 9309;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mapId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ZaapRespawnUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ZaapRespawnUpdatedMessage(input);
        }

        serializeAs_ZaapRespawnUpdatedMessage(ouput) {
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
        }

        deserializeAs_ZaapRespawnUpdatedMessage(input) {
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ZaapRespawnUpdatedMessage.mapId.");
            }
        }
    }
    class DecraftResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.results = [];
            this.ID = 951;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.results = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_DecraftResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_DecraftResultMessage(input);
        }

        serializeAs_DecraftResultMessage(ouput) {
            output.writeShort(this.results.length);
            for (var _i1 = 0; _i1 < this.results.length; _i1++) {
                (this.results[_i1]).serializeAs_DecraftedItemStackInfo(output);
            }
        }

        deserializeAs_DecraftResultMessage(input) {
            var _item1 = null;
            var _resultsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _resultsLen; _i1++) {
                _item1 = new DecraftedItemStackInfo();
                _item1.deserialize(input);
                this.results.push(_item1);
            }
        }
    }
    class EvolutiveObjectRecycleResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.recycledItems = [];
            this.ID = 9860;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.recycledItems = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_EvolutiveObjectRecycleResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_EvolutiveObjectRecycleResultMessage(input);
        }

        serializeAs_EvolutiveObjectRecycleResultMessage(ouput) {
            output.writeShort(this.recycledItems.length);
            for (var _i1 = 0; _i1 < this.recycledItems.length; _i1++) {
                (this.recycledItems[_i1]).serializeAs_RecycledItem(output);
            }
        }

        deserializeAs_EvolutiveObjectRecycleResultMessage(input) {
            var _item1 = null;
            var _recycledItemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _recycledItemsLen; _i1++) {
                _item1 = new RecycledItem();
                _item1.deserialize(input);
                this.recycledItems.push(_item1);
            }
        }
    }
    class ExchangeAcceptMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5828;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeAcceptMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeAcceptMessage(input);
        }

        serializeAs_ExchangeAcceptMessage(ouput) {

        }

        deserializeAs_ExchangeAcceptMessage(input) {

        }
    }
    class ExchangeBidHouseBuyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.uid = 0;
            this.qty = 0;
            this.price = 0;
            this.ID = 7228;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uid = 0;
            this.qty = 0;
            this.price = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseBuyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseBuyMessage(input);
        }

        serializeAs_ExchangeBidHouseBuyMessage(ouput) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
            if (this.qty < 0) {
                throw new Error("Forbidden value (" + this.qty + ") on element qty.");
            }
            output.writeVarInt(this.qty);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_ExchangeBidHouseBuyMessage(input) {
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyMessage.uid.");
            }
            this.qty = input.readVarUhInt();
            if (this.qty < 0) {
                throw new Error("Forbidden value (" + this.qty + ") on element of ExchangeBidHouseBuyMessage.qty.");
            }
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of ExchangeBidHouseBuyMessage.price.");
            }
        }
    }
    class ExchangeBidHouseBuyResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.uid = 0;
            this.bought = false;
            this.ID = 7405;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uid = 0;
            this.bought = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseBuyResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseBuyResultMessage(input);
        }

        serializeAs_ExchangeBidHouseBuyResultMessage(ouput) {
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
            output.writeBoolean(this.bought);
        }

        deserializeAs_ExchangeBidHouseBuyResultMessage(input) {
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of ExchangeBidHouseBuyResultMessage.uid.");
            }
            this.bought = input.readBoolean();
        }
    }
    class ExchangeBidHouseGenericItemAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objGenericId = 0;
            this.ID = 4014;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objGenericId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseGenericItemAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseGenericItemAddedMessage(input);
        }

        serializeAs_ExchangeBidHouseGenericItemAddedMessage(ouput) {
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
            }
            output.writeVarInt(this.objGenericId);
        }

        deserializeAs_ExchangeBidHouseGenericItemAddedMessage(input) {
            this.objGenericId = input.readVarUhInt();
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemAddedMessage.objGenericId.");
            }
        }
    }
    class ExchangeBidHouseGenericItemRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objGenericId = 0;
            this.ID = 1069;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objGenericId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseGenericItemRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(input);
        }

        serializeAs_ExchangeBidHouseGenericItemRemovedMessage(ouput) {
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element objGenericId.");
            }
            output.writeVarInt(this.objGenericId);
        }

        deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(input) {
            this.objGenericId = input.readVarUhInt();
            if (this.objGenericId < 0) {
                throw new Error("Forbidden value (" + this.objGenericId + ") on element of ExchangeBidHouseGenericItemRemovedMessage.objGenericId.");
            }
        }
    }
    class ExchangeBidHouseInListAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
            this.ID = 1990;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.effects = [];
            this.prices = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseInListAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseInListAddedMessage(input);
        }

        serializeAs_ExchangeBidHouseInListAddedMessage(ouput) {
            output.writeInt(this.itemUID);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.effects.length);
            for (var _i4 = 0; _i4 < this.effects.length; _i4++) {
                output.writeShort((this.effects[_i4]).getTypeId());
                (this.effects[_i4]).serialize(output);
            }
            output.writeShort(this.prices.length);
            for (var _i5 = 0; _i5 < this.prices.length; _i5++) {
                if (this.prices[_i5] < 0 || this.prices[_i5] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.prices[_i5] + ") on element 5 (starting at 1) of prices.");
                }
                output.writeVarLong(this.prices[_i5]);
            }
        }

        deserializeAs_ExchangeBidHouseInListAddedMessage(input) {
            var _id4 = 0;
            var _item4 = null;
            var _val5 = NaN;
            this.itemUID = input.readInt();
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHouseInListAddedMessage.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeBidHouseInListAddedMessage.objectType.");
            }
            var _effectsLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _effectsLen; _i4++) {
                _id4 = input.readUnsignedShort();
                _item4 = ProtocolTypeManager.getInstance(ObjectEffect, _id4);
                _item4.deserialize(input);
                this.effects.push(_item4);
            }
            var _pricesLen = input.readUnsignedShort();
            for (var _i5 = 0; _i5 < _pricesLen; _i5++) {
                _val5 = input.readVarUhLong();
                if (_val5 < 0 || _val5 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val5 + ") on elements of prices.");
                }
                this.prices.push(_val5);
            }
        }
    }
    class ExchangeBidHouseInListRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
            this.ID = 3590;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.itemUID = 0;
            this.objectGID = 0;
            this.objectType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseInListRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseInListRemovedMessage(input);
        }

        serializeAs_ExchangeBidHouseInListRemovedMessage(ouput) {
            output.writeInt(this.itemUID);
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
        }

        deserializeAs_ExchangeBidHouseInListRemovedMessage(input) {
            this.itemUID = input.readInt();
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHouseInListRemovedMessage.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeBidHouseInListRemovedMessage.objectType.");
            }
        }
    }
    class ExchangeBidHouseInListUpdatedMessage extends ExchangeBidHouseInListAddedMessage {
        constructor(_super) {
            super()

            this.ID = 6092;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseInListUpdatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseInListUpdatedMessage(input);
        }

        serializeAs_ExchangeBidHouseInListUpdatedMessage(ouput) {
            this.serializeAs_ExchangeBidHouseInListAddedMessage.call(this, output);
        }

        deserializeAs_ExchangeBidHouseInListUpdatedMessage(input) {
            this.deserializeAs_ExchangeBidHouseInListAddedMessage.call(this, input);
        }
    }
    class ExchangeBidHouseItemAddOkMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.itemInfo = new ObjectItemToSellInBid();
            this.ID = 6413;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.itemInfo = new ObjectItemToSellInBid();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseItemAddOkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseItemAddOkMessage(input);
        }

        serializeAs_ExchangeBidHouseItemAddOkMessage(ouput) {
            this.itemInfo.serializeAs_ObjectItemToSellInBid(output);
        }

        deserializeAs_ExchangeBidHouseItemAddOkMessage(input) {
            this.itemInfo = new ObjectItemToSellInBid();
            this.itemInfo.deserialize(input);
        }
    }
    class ExchangeBidHouseItemRemoveOkMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.sellerId = 0;
            this.ID = 7081;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sellerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseItemRemoveOkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseItemRemoveOkMessage(input);
        }

        serializeAs_ExchangeBidHouseItemRemoveOkMessage(ouput) {
            output.writeInt(this.sellerId);
        }

        deserializeAs_ExchangeBidHouseItemRemoveOkMessage(input) {
            this.sellerId = input.readInt();
        }
    }
    class ExchangeBidHouseListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.follow = false;
            this.ID = 8418;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.follow = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseListMessage(input);
        }

        serializeAs_ExchangeBidHouseListMessage(ouput) {
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            output.writeBoolean(this.follow);
        }

        deserializeAs_ExchangeBidHouseListMessage(input) {
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHouseListMessage.objectGID.");
            }
            this.follow = input.readBoolean();
        }
    }
    class ExchangeBidHousePriceMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.ID = 8009;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHousePriceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHousePriceMessage(input);
        }

        serializeAs_ExchangeBidHousePriceMessage(ouput) {
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
        }

        deserializeAs_ExchangeBidHousePriceMessage(input) {
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHousePriceMessage.objectGID.");
            }
        }
    }
    class ExchangeBidHouseSearchMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.follow = false;
            this.ID = 1214;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.follow = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseSearchMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseSearchMessage(input);
        }

        serializeAs_ExchangeBidHouseSearchMessage(ouput) {
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            output.writeBoolean(this.follow);
        }

        deserializeAs_ExchangeBidHouseSearchMessage(input) {
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeBidHouseSearchMessage.objectGID.");
            }
            this.follow = input.readBoolean();
        }
    }
    class ExchangeBidHouseTypeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.follow = false;
            this.ID = 7879;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
            this.follow = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseTypeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseTypeMessage(input);
        }

        serializeAs_ExchangeBidHouseTypeMessage(ouput) {
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element type.");
            }
            output.writeVarInt(this.type);
            output.writeBoolean(this.follow);
        }

        deserializeAs_ExchangeBidHouseTypeMessage(input) {
            this.type = input.readVarUhInt();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of ExchangeBidHouseTypeMessage.type.");
            }
            this.follow = input.readBoolean();
        }
    }
    class ExchangeBidHouseUnsoldItemsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.items = [];
            this.ID = 6665;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.items = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidHouseUnsoldItemsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidHouseUnsoldItemsMessage(input);
        }

        serializeAs_ExchangeBidHouseUnsoldItemsMessage(ouput) {
            output.writeShort(this.items.length);
            for (var _i1 = 0; _i1 < this.items.length; _i1++) {
                (this.items[_i1]).serializeAs_ObjectItemGenericQuantity(output);
            }
        }

        deserializeAs_ExchangeBidHouseUnsoldItemsMessage(input) {
            var _item1 = null;
            var _itemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _itemsLen; _i1++) {
                _item1 = new ObjectItemGenericQuantity();
                _item1.deserialize(input);
                this.items.push(_item1);
            }
        }
    }
    class ExchangeBidPriceMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.genericId = 0;
            this.averagePrice = 0;
            this.ID = 9764;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.genericId = 0;
            this.averagePrice = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidPriceMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidPriceMessage(input);
        }

        serializeAs_ExchangeBidPriceMessage(ouput) {
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element genericId.");
            }
            output.writeVarInt(this.genericId);
            if (this.averagePrice < -9007199254740992 || this.averagePrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.averagePrice + ") on element averagePrice.");
            }
            output.writeVarLong(this.averagePrice);
        }

        deserializeAs_ExchangeBidPriceMessage(input) {
            this.genericId = input.readVarUhInt();
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element of ExchangeBidPriceMessage.genericId.");
            }
            this.averagePrice = input.readVarLong();
            if (this.averagePrice < -9007199254740992 || this.averagePrice > 9007199254740992) {
                throw new Error("Forbidden value (" + this.averagePrice + ") on element of ExchangeBidPriceMessage.averagePrice.");
            }
        }
    }
    class ExchangeBidPriceForSellerMessage extends ExchangeBidPriceMessage {
        constructor(_super) {
            super()
            this.allIdentical = false;
            this.minimalPrices = [];
            this.ID = 7196;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allIdentical = false;
            this.minimalPrices = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidPriceForSellerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidPriceForSellerMessage(input);
        }

        serializeAs_ExchangeBidPriceForSellerMessage(ouput) {
            this.serializeAs_ExchangeBidPriceMessage.call(this, output);
            output.writeBoolean(this.allIdentical);
            output.writeShort(this.minimalPrices.length);
            for (var _i2 = 0; _i2 < this.minimalPrices.length; _i2++) {
                if (this.minimalPrices[_i2] < 0 || this.minimalPrices[_i2] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.minimalPrices[_i2] + ") on element 2 (starting at 1) of minimalPrices.");
                }
                output.writeVarLong(this.minimalPrices[_i2]);
            }
        }

        deserializeAs_ExchangeBidPriceForSellerMessage(input) {
            var _val2 = NaN;
            this.deserializeAs_ExchangeBidPriceMessage.call(this, input);
            this.allIdentical = input.readBoolean();
            var _minimalPricesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _minimalPricesLen; _i2++) {
                _val2 = input.readVarUhLong();
                if (_val2 < 0 || _val2 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of minimalPrices.");
                }
                this.minimalPrices.push(_val2);
            }
        }
    }
    class ExchangeBidSearchOkMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5585;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBidSearchOkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBidSearchOkMessage(input);
        }

        serializeAs_ExchangeBidSearchOkMessage(ouput) {

        }

        deserializeAs_ExchangeBidSearchOkMessage(input) {

        }
    }
    class ExchangeBuyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectToBuyId = 0;
            this.quantity = 0;
            this.ID = 4160;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectToBuyId = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBuyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBuyMessage(input);
        }

        serializeAs_ExchangeBuyMessage(ouput) {
            if (this.objectToBuyId < 0) {
                throw new Error("Forbidden value (" + this.objectToBuyId + ") on element objectToBuyId.");
            }
            output.writeVarInt(this.objectToBuyId);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ExchangeBuyMessage(input) {
            this.objectToBuyId = input.readVarUhInt();
            if (this.objectToBuyId < 0) {
                throw new Error("Forbidden value (" + this.objectToBuyId + ") on element of ExchangeBuyMessage.objectToBuyId.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeBuyMessage.quantity.");
            }
        }
    }
    class ExchangeBuyOkMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1649;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeBuyOkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeBuyOkMessage(input);
        }

        serializeAs_ExchangeBuyOkMessage(ouput) {

        }

        deserializeAs_ExchangeBuyOkMessage(input) {

        }
    }
    class ExchangeCraftCountModifiedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.count = 0;
            this.ID = 6783;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.count = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftCountModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftCountModifiedMessage(input);
        }

        serializeAs_ExchangeCraftCountModifiedMessage(ouput) {
            output.writeVarInt(this.count);
        }

        deserializeAs_ExchangeCraftCountModifiedMessage(input) {
            this.count = input.readVarInt();
        }
    }
    class ExchangeCraftCountRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.count = 0;
            this.ID = 4941;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.count = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftCountRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftCountRequestMessage(input);
        }

        serializeAs_ExchangeCraftCountRequestMessage(ouput) {
            output.writeVarInt(this.count);
        }

        deserializeAs_ExchangeCraftCountRequestMessage(input) {
            this.count = input.readVarInt();
        }
    }
    class ExchangeCrafterJobLevelupMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.crafterJobLevel = 0;
            this.ID = 4924;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.crafterJobLevel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCrafterJobLevelupMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCrafterJobLevelupMessage(input);
        }

        serializeAs_ExchangeCrafterJobLevelupMessage(ouput) {
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
            }
            output.writeByte(this.crafterJobLevel);
        }

        deserializeAs_ExchangeCrafterJobLevelupMessage(input) {
            this.crafterJobLevel = input.readUnsignedByte();
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeCrafterJobLevelupMessage.crafterJobLevel.");
            }
        }
    }
    class ExchangeCraftPaymentModificationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quantity = 0;
            this.ID = 4312;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftPaymentModificationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftPaymentModificationRequestMessage(input);
        }

        serializeAs_ExchangeCraftPaymentModificationRequestMessage(ouput) {
            if (this.quantity < 0 || this.quantity > 9007199254740992) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarLong(this.quantity);
        }

        deserializeAs_ExchangeCraftPaymentModificationRequestMessage(input) {
            this.quantity = input.readVarUhLong();
            if (this.quantity < 0 || this.quantity > 9007199254740992) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeCraftPaymentModificationRequestMessage.quantity.");
            }
        }
    }
    class ExchangeCraftPaymentModifiedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.goldSum = 0;
            this.ID = 2288;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.goldSum = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftPaymentModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftPaymentModifiedMessage(input);
        }

        serializeAs_ExchangeCraftPaymentModifiedMessage(ouput) {
            if (this.goldSum < 0 || this.goldSum > 9007199254740992) {
                throw new Error("Forbidden value (" + this.goldSum + ") on element goldSum.");
            }
            output.writeVarLong(this.goldSum);
        }

        deserializeAs_ExchangeCraftPaymentModifiedMessage(input) {
            this.goldSum = input.readVarUhLong();
            if (this.goldSum < 0 || this.goldSum > 9007199254740992) {
                throw new Error("Forbidden value (" + this.goldSum + ") on element of ExchangeCraftPaymentModifiedMessage.goldSum.");
            }
        }
    }
    class ExchangeCraftResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.craftResult = 0;
            this.ID = 67;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.craftResult = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftResultMessage(input);
        }

        serializeAs_ExchangeCraftResultMessage(ouput) {
            output.writeByte(this.craftResult);
        }

        deserializeAs_ExchangeCraftResultMessage(input) {
            this.craftResult = input.readByte();
            if (this.craftResult < 0) {
                throw new Error("Forbidden value (" + this.craftResult + ") on element of ExchangeCraftResultMessage.craftResult.");
            }
        }
    }
    class ExchangeCraftResultWithObjectDescMessage extends ExchangeCraftResultMessage {
        constructor(_super) {
            super()
            this.objectInfo = new ObjectItemNotInContainer();
            this.ID = 3999;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectInfo = new ObjectItemNotInContainer();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftResultWithObjectDescMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftResultWithObjectDescMessage(input);
        }

        serializeAs_ExchangeCraftResultWithObjectDescMessage(ouput) {
            this.serializeAs_ExchangeCraftResultMessage.call(this, output);
            this.objectInfo.serializeAs_ObjectItemNotInContainer(output);
        }

        deserializeAs_ExchangeCraftResultWithObjectDescMessage(input) {
            this.deserializeAs_ExchangeCraftResultMessage.call(this, input);
            this.objectInfo = new ObjectItemNotInContainer();
            this.objectInfo.deserialize(input);
        }
    }
    class ExchangeCraftResultMagicWithObjectDescMessage extends ExchangeCraftResultWithObjectDescMessage {
        constructor(_super) {
            super()
            this.magicPoolStatus = 0;
            this.ID = 1948;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.magicPoolStatus = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(input);
        }

        serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(ouput) {
            this.serializeAs_ExchangeCraftResultWithObjectDescMessage.call(this, output);
            output.writeByte(this.magicPoolStatus);
        }

        deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(input) {
            this.deserializeAs_ExchangeCraftResultWithObjectDescMessage.call(this, input);
            this.magicPoolStatus = input.readByte();
        }
    }
    class ExchangeCraftResultWithObjectIdMessage extends ExchangeCraftResultMessage {
        constructor(_super) {
            super()
            this.objectGenericId = 0;
            this.ID = 280;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGenericId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeCraftResultWithObjectIdMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeCraftResultWithObjectIdMessage(input);
        }

        serializeAs_ExchangeCraftResultWithObjectIdMessage(ouput) {
            this.serializeAs_ExchangeCraftResultMessage.call(this, output);
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
            }
            output.writeVarInt(this.objectGenericId);
        }

        deserializeAs_ExchangeCraftResultWithObjectIdMessage(input) {
            this.deserializeAs_ExchangeCraftResultMessage.call(this, input);
            this.objectGenericId = input.readVarUhInt();
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element of ExchangeCraftResultWithObjectIdMessage.objectGenericId.");
            }
        }
    }
    class ExchangeErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.errorType = 0;
            this.ID = 8310;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.errorType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeErrorMessage(input);
        }

        serializeAs_ExchangeErrorMessage(ouput) {
            output.writeByte(this.errorType);
        }

        deserializeAs_ExchangeErrorMessage(input) {
            this.errorType = input.readByte();
        }
    }
    class ExchangeHandleMountsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actionType = 0;
            this.ridesId = [];
            this.ID = 3813;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actionType = 0;
            this.ridesId = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeHandleMountsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeHandleMountsMessage(input);
        }

        serializeAs_ExchangeHandleMountsMessage(ouput) {
            output.writeByte(this.actionType);
            output.writeShort(this.ridesId.length);
            for (var _i2 = 0; _i2 < this.ridesId.length; _i2++) {
                if (this.ridesId[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.ridesId[_i2] + ") on element 2 (starting at 1) of ridesId.");
                }
                output.writeVarInt(this.ridesId[_i2]);
            }
        }

        deserializeAs_ExchangeHandleMountsMessage(input) {
            var _val2 = 0;
            this.actionType = input.readByte();
            var _ridesIdLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _ridesIdLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of ridesId.");
                }
                this.ridesId.push(_val2);
            }
        }
    }
    class ExchangeIsReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ready = false;
            this.ID = 5230;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.ready = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeIsReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeIsReadyMessage(input);
        }

        serializeAs_ExchangeIsReadyMessage(ouput) {
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeDouble(this.id);
            output.writeBoolean(this.ready);
        }

        deserializeAs_ExchangeIsReadyMessage(input) {
            this.id = input.readDouble();
            if (this.id < -9007199254740992 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of ExchangeIsReadyMessage.id.");
            }
            this.ready = input.readBoolean();
        }
    }
    class ExchangeItemAutoCraftStopedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 3953;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeItemAutoCraftStopedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeItemAutoCraftStopedMessage(input);
        }

        serializeAs_ExchangeItemAutoCraftStopedMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_ExchangeItemAutoCraftStopedMessage(input) {
            this.reason = input.readByte();
        }
    }
    class ExchangeLeaveMessage extends LeaveDialogMessage {
        constructor(_super) {
            super()
            this.success = false;
            this.ID = 9150;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.success = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeLeaveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeLeaveMessage(input);
        }

        serializeAs_ExchangeLeaveMessage(ouput) {
            this.serializeAs_LeaveDialogMessage.call(this, output);
            output.writeBoolean(this.success);
        }

        deserializeAs_ExchangeLeaveMessage(input) {
            this.deserializeAs_LeaveDialogMessage.call(this, input);
            this.success = input.readBoolean();
        }
    }
    class ExchangeMoneyMovementInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.limit = 0;
            this.ID = 2513;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.limit = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMoneyMovementInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMoneyMovementInformationMessage(input);
        }

        serializeAs_ExchangeMoneyMovementInformationMessage(ouput) {
            if (this.limit < 0 || this.limit > 9007199254740992) {
                throw new Error("Forbidden value (" + this.limit + ") on element limit.");
            }
            output.writeVarLong(this.limit);
        }

        deserializeAs_ExchangeMoneyMovementInformationMessage(input) {
            this.limit = input.readVarUhLong();
            if (this.limit < 0 || this.limit > 9007199254740992) {
                throw new Error("Forbidden value (" + this.limit + ") on element of ExchangeMoneyMovementInformationMessage.limit.");
            }
        }
    }
    class ExchangeMountFreeFromPaddockMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.liberator = "";
            this.ID = 5574;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.liberator = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountFreeFromPaddockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountFreeFromPaddockMessage(input);
        }

        serializeAs_ExchangeMountFreeFromPaddockMessage(ouput) {
            output.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            output.writeUTF(this.liberator);
        }

        deserializeAs_ExchangeMountFreeFromPaddockMessage(input) {
            this.name = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountFreeFromPaddockMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountFreeFromPaddockMessage.worldY.");
            }
            this.liberator = input.readUTF();
        }
    }
    class ExchangeMountsPaddockAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountDescription = [];
            this.ID = 2097;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountsPaddockAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountsPaddockAddMessage(input);
        }

        serializeAs_ExchangeMountsPaddockAddMessage(ouput) {
            output.writeShort(this.mountDescription.length);
            for (var _i1 = 0; _i1 < this.mountDescription.length; _i1++) {
                (this.mountDescription[_i1]).serializeAs_MountClientData(output);
            }
        }

        deserializeAs_ExchangeMountsPaddockAddMessage(input) {
            var _item1 = null;
            var _mountDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.mountDescription.push(_item1);
            }
        }
    }
    class ExchangeMountsPaddockRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountsId = [];
            this.ID = 8227;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountsId = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountsPaddockRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountsPaddockRemoveMessage(input);
        }

        serializeAs_ExchangeMountsPaddockRemoveMessage(ouput) {
            output.writeShort(this.mountsId.length);
            for (var _i1 = 0; _i1 < this.mountsId.length; _i1++) {
                output.writeVarInt(this.mountsId[_i1]);
            }
        }

        deserializeAs_ExchangeMountsPaddockRemoveMessage(input) {
            var _val1 = 0;
            var _mountsIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountsIdLen; _i1++) {
                _val1 = input.readVarInt();
                this.mountsId.push(_val1);
            }
        }
    }
    class ExchangeMountsStableAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountDescription = [];
            this.ID = 5703;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountsStableAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountsStableAddMessage(input);
        }

        serializeAs_ExchangeMountsStableAddMessage(ouput) {
            output.writeShort(this.mountDescription.length);
            for (var _i1 = 0; _i1 < this.mountDescription.length; _i1++) {
                (this.mountDescription[_i1]).serializeAs_MountClientData(output);
            }
        }

        deserializeAs_ExchangeMountsStableAddMessage(input) {
            var _item1 = null;
            var _mountDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.mountDescription.push(_item1);
            }
        }
    }
    class ExchangeMountsStableBornAddMessage extends ExchangeMountsStableAddMessage {
        constructor(_super) {
            super()

            this.ID = 2979;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountsStableBornAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountsStableBornAddMessage(input);
        }

        serializeAs_ExchangeMountsStableBornAddMessage(ouput) {
            this.serializeAs_ExchangeMountsStableAddMessage.call(this, output);
        }

        deserializeAs_ExchangeMountsStableBornAddMessage(input) {
            this.deserializeAs_ExchangeMountsStableAddMessage.call(this, input);
        }
    }
    class ExchangeMountsStableRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.mountsId = [];
            this.ID = 1534;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.mountsId = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountsStableRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountsStableRemoveMessage(input);
        }

        serializeAs_ExchangeMountsStableRemoveMessage(ouput) {
            output.writeShort(this.mountsId.length);
            for (var _i1 = 0; _i1 < this.mountsId.length; _i1++) {
                output.writeVarInt(this.mountsId[_i1]);
            }
        }

        deserializeAs_ExchangeMountsStableRemoveMessage(input) {
            var _val1 = 0;
            var _mountsIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _mountsIdLen; _i1++) {
                _val1 = input.readVarInt();
                this.mountsId.push(_val1);
            }
        }
    }
    class ExchangeMountStableErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4915;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountStableErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountStableErrorMessage(input);
        }

        serializeAs_ExchangeMountStableErrorMessage(ouput) {

        }

        deserializeAs_ExchangeMountStableErrorMessage(input) {

        }
    }
    class ExchangeMountsTakenFromPaddockMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.ownername = "";
            this.ID = 4122;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.ownername = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountsTakenFromPaddockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountsTakenFromPaddockMessage(input);
        }

        serializeAs_ExchangeMountsTakenFromPaddockMessage(ouput) {
            output.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            output.writeUTF(this.ownername);
        }

        deserializeAs_ExchangeMountsTakenFromPaddockMessage(input) {
            this.name = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountsTakenFromPaddockMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountsTakenFromPaddockMessage.worldY.");
            }
            this.ownername = input.readUTF();
        }
    }
    class ExchangeMountSterilizeFromPaddockMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.sterilizator = "";
            this.ID = 5529;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.worldX = 0;
            this.worldY = 0;
            this.sterilizator = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMountSterilizeFromPaddockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMountSterilizeFromPaddockMessage(input);
        }

        serializeAs_ExchangeMountSterilizeFromPaddockMessage(ouput) {
            output.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            output.writeUTF(this.sterilizator);
        }

        deserializeAs_ExchangeMountSterilizeFromPaddockMessage(input) {
            this.name = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldY.");
            }
            this.sterilizator = input.readUTF();
        }
    }
    class ExchangeObjectMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.remote = false;
            this.ID = 8438;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.remote = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectMessage(input);
        }

        serializeAs_ExchangeObjectMessage(ouput) {
            output.writeBoolean(this.remote);
        }

        deserializeAs_ExchangeObjectMessage(input) {
            this.remote = input.readBoolean();
        }
    }
    class ExchangeObjectAddedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.ID = 3343;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectAddedMessage(input);
        }

        serializeAs_ExchangeObjectAddedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        }

        deserializeAs_ExchangeObjectAddedMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        }
    }
    class ExchangeObjectMoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 1343;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectMoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectMoveMessage(input);
        }

        serializeAs_ExchangeObjectMoveMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ExchangeObjectMoveMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectMoveMessage.objectUID.");
            }
            this.quantity = input.readVarInt();
        }
    }
    class ExchangeObjectMovePricedMessage extends ExchangeObjectMoveMessage {
        constructor(_super) {
            super()
            this.price = 0;
            this.ID = 1233;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.price = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectMovePricedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectMovePricedMessage(input);
        }

        serializeAs_ExchangeObjectMovePricedMessage(ouput) {
            this.serializeAs_ExchangeObjectMoveMessage.call(this, output);
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element price.");
            }
            output.writeVarLong(this.price);
        }

        deserializeAs_ExchangeObjectMovePricedMessage(input) {
            this.deserializeAs_ExchangeObjectMoveMessage.call(this, input);
            this.price = input.readVarUhLong();
            if (this.price < 0 || this.price > 9007199254740992) {
                throw new Error("Forbidden value (" + this.price + ") on element of ExchangeObjectMovePricedMessage.price.");
            }
        }
    }
    class ExchangeObjectModifyPricedMessage extends ExchangeObjectMovePricedMessage {
        constructor(_super) {
            super()

            this.ID = 5202;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectModifyPricedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectModifyPricedMessage(input);
        }

        serializeAs_ExchangeObjectModifyPricedMessage(ouput) {
            this.serializeAs_ExchangeObjectMovePricedMessage.call(this, output);
        }

        deserializeAs_ExchangeObjectModifyPricedMessage(input) {
            this.deserializeAs_ExchangeObjectMovePricedMessage.call(this, input);
        }
    }
    class ExchangeObjectMoveKamaMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.quantity = 0;
            this.ID = 9588;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectMoveKamaMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectMoveKamaMessage(input);
        }

        serializeAs_ExchangeObjectMoveKamaMessage(ouput) {
            if (this.quantity < -9007199254740992 || this.quantity > 9007199254740992) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarLong(this.quantity);
        }

        deserializeAs_ExchangeObjectMoveKamaMessage(input) {
            this.quantity = input.readVarLong();
            if (this.quantity < -9007199254740992 || this.quantity > 9007199254740992) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeObjectMoveKamaMessage.quantity.");
            }
        }
    }
    class ExchangeObjectMoveToTabMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.tabNumber = 0;
            this.ID = 5263;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
            this.tabNumber = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectMoveToTabMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectMoveToTabMessage(input);
        }

        serializeAs_ExchangeObjectMoveToTabMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeVarInt(this.quantity);
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element tabNumber.");
            }
            output.writeVarInt(this.tabNumber);
        }

        deserializeAs_ExchangeObjectMoveToTabMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectMoveToTabMessage.objectUID.");
            }
            this.quantity = input.readVarInt();
            this.tabNumber = input.readVarUhInt();
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element of ExchangeObjectMoveToTabMessage.tabNumber.");
            }
        }
    }
    class ExchangeObjectsAddedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.object = [];
            this.ID = 7120;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectsAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectsAddedMessage(input);
        }

        serializeAs_ExchangeObjectsAddedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            output.writeShort(this.object.length);
            for (var _i1 = 0; _i1 < this.object.length; _i1++) {
                (this.object[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ExchangeObjectsAddedMessage(input) {
            var _item1 = null;
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            var _objectLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.object.push(_item1);
            }
        }
    }
    class ExchangeObjectTransfertAllFromInvMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5560;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertAllFromInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertAllFromInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertAllFromInvMessage(ouput) {

        }

        deserializeAs_ExchangeObjectTransfertAllFromInvMessage(input) {

        }
    }
    class ExchangeObjectTransfertAllToInvMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4489;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertAllToInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertAllToInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertAllToInvMessage(ouput) {

        }

        deserializeAs_ExchangeObjectTransfertAllToInvMessage(input) {

        }
    }
    class ExchangeObjectTransfertExistingFromInvMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4358;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertExistingFromInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertExistingFromInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertExistingFromInvMessage(ouput) {

        }

        deserializeAs_ExchangeObjectTransfertExistingFromInvMessage(input) {

        }
    }
    class ExchangeObjectTransfertExistingToInvMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2383;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertExistingToInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertExistingToInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertExistingToInvMessage(ouput) {

        }

        deserializeAs_ExchangeObjectTransfertExistingToInvMessage(input) {

        }
    }
    class ExchangeObjectTransfertListFromInvMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ids = [];
            this.ID = 8586;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ids = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertListFromInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertListFromInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertListFromInvMessage(ouput) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
        }

        deserializeAs_ExchangeObjectTransfertListFromInvMessage(input) {
            var _val1 = 0;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
        }
    }
    class ExchangeObjectTransfertListToInvMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ids = [];
            this.ID = 4345;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ids = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertListToInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertListToInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertListToInvMessage(ouput) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
        }

        deserializeAs_ExchangeObjectTransfertListToInvMessage(input) {
            var _val1 = 0;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
        }
    }
    class ExchangeObjectTransfertListWithQuantityToInvMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ids = [];
            this.qtys = [];
            this.ID = 7368;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ids = [];
            this.qtys = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(input);
        }

        serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(ouput) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
            output.writeShort(this.qtys.length);
            for (var _i2 = 0; _i2 < this.qtys.length; _i2++) {
                if (this.qtys[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.qtys[_i2] + ") on element 2 (starting at 1) of qtys.");
                }
                output.writeVarInt(this.qtys[_i2]);
            }
        }

        deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
            var _qtysLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _qtysLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of qtys.");
                }
                this.qtys.push(_val2);
            }
        }
    }
    class ExchangeObjectUseInWorkshopMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 1523;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectUseInWorkshopMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectUseInWorkshopMessage(input);
        }

        serializeAs_ExchangeObjectUseInWorkshopMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ExchangeObjectUseInWorkshopMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectUseInWorkshopMessage.objectUID.");
            }
            this.quantity = input.readVarInt();
        }
    }
    class ExchangeOfflineSoldItemsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.bidHouseItems = [];
            this.ID = 4016;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bidHouseItems = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeOfflineSoldItemsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeOfflineSoldItemsMessage(input);
        }

        serializeAs_ExchangeOfflineSoldItemsMessage(ouput) {
            output.writeShort(this.bidHouseItems.length);
            for (var _i1 = 0; _i1 < this.bidHouseItems.length; _i1++) {
                (this.bidHouseItems[_i1]).serializeAs_ObjectItemQuantityPriceDateEffects(output);
            }
        }

        deserializeAs_ExchangeOfflineSoldItemsMessage(input) {
            var _item1 = null;
            var _bidHouseItemsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _bidHouseItemsLen; _i1++) {
                _item1 = new ObjectItemQuantityPriceDateEffects();
                _item1.deserialize(input);
                this.bidHouseItems.push(_item1);
            }
        }
    }
    class ExchangeOkMultiCraftMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.initiatorId = 0;
            this.otherId = 0;
            this.role = 0;
            this.ID = 6648;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.initiatorId = 0;
            this.otherId = 0;
            this.role = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeOkMultiCraftMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeOkMultiCraftMessage(input);
        }

        serializeAs_ExchangeOkMultiCraftMessage(ouput) {
            if (this.initiatorId < 0 || this.initiatorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.initiatorId + ") on element initiatorId.");
            }
            output.writeVarLong(this.initiatorId);
            if (this.otherId < 0 || this.otherId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.otherId + ") on element otherId.");
            }
            output.writeVarLong(this.otherId);
            output.writeByte(this.role);
        }

        deserializeAs_ExchangeOkMultiCraftMessage(input) {
            this.initiatorId = input.readVarUhLong();
            if (this.initiatorId < 0 || this.initiatorId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.initiatorId + ") on element of ExchangeOkMultiCraftMessage.initiatorId.");
            }
            this.otherId = input.readVarUhLong();
            if (this.otherId < 0 || this.otherId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.otherId + ") on element of ExchangeOkMultiCraftMessage.otherId.");
            }
            this.role = input.readByte();
        }
    }
    class ExchangeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.exchangeType = 0;
            this.ID = 2858;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.exchangeType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeRequestMessage(input);
        }

        serializeAs_ExchangeRequestMessage(ouput) {
            output.writeByte(this.exchangeType);
        }

        deserializeAs_ExchangeRequestMessage(input) {
            this.exchangeType = input.readByte();
        }
    }
    class ExchangePlayerMultiCraftRequestMessage extends ExchangeRequestMessage {
        constructor(_super) {
            super()
            this.target = 0;
            this.skillId = 0;
            this.ID = 7760;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = 0;
            this.skillId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangePlayerMultiCraftRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangePlayerMultiCraftRequestMessage(input);
        }

        serializeAs_ExchangePlayerMultiCraftRequestMessage(ouput) {
            this.serializeAs_ExchangeRequestMessage.call(this, output);
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
        }

        deserializeAs_ExchangePlayerMultiCraftRequestMessage(input) {
            this.deserializeAs_ExchangeRequestMessage.call(this, input);
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element of ExchangePlayerMultiCraftRequestMessage.target.");
            }
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangePlayerMultiCraftRequestMessage.skillId.");
            }
        }
    }
    class ExchangePlayerRequestMessage extends ExchangeRequestMessage {
        constructor(_super) {
            super()
            this.target = 0;
            this.ID = 1592;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.target = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangePlayerRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangePlayerRequestMessage(input);
        }

        serializeAs_ExchangePlayerRequestMessage(ouput) {
            this.serializeAs_ExchangeRequestMessage.call(this, output);
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
        }

        deserializeAs_ExchangePlayerRequestMessage(input) {
            this.deserializeAs_ExchangeRequestMessage.call(this, input);
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element of ExchangePlayerRequestMessage.target.");
            }
        }
    }
    class ExchangeReadyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ready = false;
            this.step = 0;
            this.ID = 4758;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ready = false;
            this.step = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeReadyMessage(input);
        }

        serializeAs_ExchangeReadyMessage(ouput) {
            output.writeBoolean(this.ready);
            if (this.step < 0) {
                throw new Error("Forbidden value (" + this.step + ") on element step.");
            }
            output.writeVarShort(this.step);
        }

        deserializeAs_ExchangeReadyMessage(input) {
            this.ready = input.readBoolean();
            this.step = input.readVarUhShort();
            if (this.step < 0) {
                throw new Error("Forbidden value (" + this.step + ") on element of ExchangeReadyMessage.step.");
            }
        }
    }
    class ExchangeReplayStopMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8738;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeReplayStopMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeReplayStopMessage(input);
        }

        serializeAs_ExchangeReplayStopMessage(ouput) {

        }

        deserializeAs_ExchangeReplayStopMessage(input) {

        }
    }
    class ExchangeRequestedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.exchangeType = 0;
            this.ID = 6601;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.exchangeType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeRequestedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeRequestedMessage(input);
        }

        serializeAs_ExchangeRequestedMessage(ouput) {
            output.writeByte(this.exchangeType);
        }

        deserializeAs_ExchangeRequestedMessage(input) {
            this.exchangeType = input.readByte();
        }
    }
    class ExchangeRequestedTradeMessage extends ExchangeRequestedMessage {
        constructor(_super) {
            super()
            this.source = 0;
            this.target = 0;
            this.ID = 88;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.source = 0;
            this.target = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeRequestedTradeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeRequestedTradeMessage(input);
        }

        serializeAs_ExchangeRequestedTradeMessage(ouput) {
            this.serializeAs_ExchangeRequestedMessage.call(this, output);
            if (this.source < 0 || this.source > 9007199254740992) {
                throw new Error("Forbidden value (" + this.source + ") on element source.");
            }
            output.writeVarLong(this.source);
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element target.");
            }
            output.writeVarLong(this.target);
        }

        deserializeAs_ExchangeRequestedTradeMessage(input) {
            this.deserializeAs_ExchangeRequestedMessage.call(this, input);
            this.source = input.readVarUhLong();
            if (this.source < 0 || this.source > 9007199254740992) {
                throw new Error("Forbidden value (" + this.source + ") on element of ExchangeRequestedTradeMessage.source.");
            }
            this.target = input.readVarUhLong();
            if (this.target < 0 || this.target > 9007199254740992) {
                throw new Error("Forbidden value (" + this.target + ") on element of ExchangeRequestedTradeMessage.target.");
            }
        }
    }
    class ExchangeRequestOnMountStockMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9758;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeRequestOnMountStockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeRequestOnMountStockMessage(input);
        }

        serializeAs_ExchangeRequestOnMountStockMessage(ouput) {

        }

        deserializeAs_ExchangeRequestOnMountStockMessage(input) {

        }
    }
    class ExchangeRequestOnTaxCollectorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4495;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeRequestOnTaxCollectorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeRequestOnTaxCollectorMessage(input);
        }

        serializeAs_ExchangeRequestOnTaxCollectorMessage(ouput) {

        }

        deserializeAs_ExchangeRequestOnTaxCollectorMessage(input) {

        }
    }
    class ExchangeSellMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectToSellId = 0;
            this.quantity = 0;
            this.ID = 9007;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectToSellId = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeSellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeSellMessage(input);
        }

        serializeAs_ExchangeSellMessage(ouput) {
            if (this.objectToSellId < 0) {
                throw new Error("Forbidden value (" + this.objectToSellId + ") on element objectToSellId.");
            }
            output.writeVarInt(this.objectToSellId);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ExchangeSellMessage(input) {
            this.objectToSellId = input.readVarUhInt();
            if (this.objectToSellId < 0) {
                throw new Error("Forbidden value (" + this.objectToSellId + ") on element of ExchangeSellMessage.objectToSellId.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeSellMessage.quantity.");
            }
        }
    }
    class ExchangeSellOkMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8812;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeSellOkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeSellOkMessage(input);
        }

        serializeAs_ExchangeSellOkMessage(ouput) {

        }

        deserializeAs_ExchangeSellOkMessage(input) {

        }
    }
    class ExchangeSetCraftRecipeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.ID = 6900;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeSetCraftRecipeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeSetCraftRecipeMessage(input);
        }

        serializeAs_ExchangeSetCraftRecipeMessage(ouput) {
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
        }

        deserializeAs_ExchangeSetCraftRecipeMessage(input) {
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeSetCraftRecipeMessage.objectGID.");
            }
        }
    }
    class ExchangeStartedBidBuyerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.buyerDescriptor = new SellerBuyerDescriptor();
            this.ID = 2202;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.buyerDescriptor = new SellerBuyerDescriptor();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedBidBuyerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedBidBuyerMessage(input);
        }

        serializeAs_ExchangeStartedBidBuyerMessage(ouput) {
            this.buyerDescriptor.serializeAs_SellerBuyerDescriptor(output);
        }

        deserializeAs_ExchangeStartedBidBuyerMessage(input) {
            this.buyerDescriptor = new SellerBuyerDescriptor();
            this.buyerDescriptor.deserialize(input);
        }
    }
    class ExchangeStartedBidSellerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.objectsInfos = [];
            this.ID = 6402;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.objectsInfos = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedBidSellerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedBidSellerMessage(input);
        }

        serializeAs_ExchangeStartedBidSellerMessage(ouput) {
            this.sellerDescriptor.serializeAs_SellerBuyerDescriptor(output);
            output.writeShort(this.objectsInfos.length);
            for (var _i2 = 0; _i2 < this.objectsInfos.length; _i2++) {
                (this.objectsInfos[_i2]).serializeAs_ObjectItemToSellInBid(output);
            }
        }

        deserializeAs_ExchangeStartedBidSellerMessage(input) {
            var _item2 = null;
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.sellerDescriptor.deserialize(input);
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _objectsInfosLen; _i2++) {
                _item2 = new ObjectItemToSellInBid();
                _item2.deserialize(input);
                this.objectsInfos.push(_item2);
            }
        }
    }
    class ExchangeStartedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.exchangeType = 0;
            this.ID = 3414;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.exchangeType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedMessage(input);
        }

        serializeAs_ExchangeStartedMessage(ouput) {
            output.writeByte(this.exchangeType);
        }

        deserializeAs_ExchangeStartedMessage(input) {
            this.exchangeType = input.readByte();
        }
    }
    class ExchangeStartedMountStockMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectsInfos = [];
            this.ID = 3292;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectsInfos = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedMountStockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedMountStockMessage(input);
        }

        serializeAs_ExchangeStartedMountStockMessage(ouput) {
            output.writeShort(this.objectsInfos.length);
            for (var _i1 = 0; _i1 < this.objectsInfos.length; _i1++) {
                (this.objectsInfos[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ExchangeStartedMountStockMessage(input) {
            var _item1 = null;
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsInfosLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objectsInfos.push(_item1);
            }
        }
    }
    class ExchangeStartedTaxCollectorEquipmentMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.information = new TaxCollectorInformations();
            this.ID = 4235;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.information = new TaxCollectorInformations();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedTaxCollectorEquipmentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedTaxCollectorEquipmentMessage(input);
        }

        serializeAs_ExchangeStartedTaxCollectorEquipmentMessage(ouput) {
            this.information.serializeAs_TaxCollectorInformations(output);
        }

        deserializeAs_ExchangeStartedTaxCollectorEquipmentMessage(input) {
            this.information = new TaxCollectorInformations();
            this.information.deserialize(input);
        }
    }
    class ExchangeStartedTaxCollectorShopMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objects = [];
            this.kamas = 0;
            this.ID = 9349;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
            this.kamas = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedTaxCollectorShopMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedTaxCollectorShopMessage(input);
        }

        serializeAs_ExchangeStartedTaxCollectorShopMessage(ouput) {
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        }

        deserializeAs_ExchangeStartedTaxCollectorShopMessage(input) {
            var _item1 = null;
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of ExchangeStartedTaxCollectorShopMessage.kamas.");
            }
        }
    }
    class ExchangeStartedWithMultiTabStorageMessage extends ExchangeStartedMessage {
        constructor(_super) {
            super()
            this.storageMaxSlot = 0;
            this.tabNumber = 0;
            this.ID = 5725;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.storageMaxSlot = 0;
            this.tabNumber = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedWithMultiTabStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedWithMultiTabStorageMessage(input);
        }

        serializeAs_ExchangeStartedWithMultiTabStorageMessage(ouput) {
            this.serializeAs_ExchangeStartedMessage.call(this, output);
            if (this.storageMaxSlot < 0) {
                throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element storageMaxSlot.");
            }
            output.writeVarInt(this.storageMaxSlot);
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element tabNumber.");
            }
            output.writeVarInt(this.tabNumber);
        }

        deserializeAs_ExchangeStartedWithMultiTabStorageMessage(input) {
            this.deserializeAs_ExchangeStartedMessage.call(this, input);
            this.storageMaxSlot = input.readVarUhInt();
            if (this.storageMaxSlot < 0) {
                throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element of ExchangeStartedWithMultiTabStorageMessage.storageMaxSlot.");
            }
            this.tabNumber = input.readVarUhInt();
            if (this.tabNumber < 0) {
                throw new Error("Forbidden value (" + this.tabNumber + ") on element of ExchangeStartedWithMultiTabStorageMessage.tabNumber.");
            }
        }
    }
    class ExchangeStartedWithPodsMessage extends ExchangeStartedMessage {
        constructor(_super) {
            super()
            this.firstCharacterId = 0;
            this.firstCharacterCurrentWeight = 0;
            this.firstCharacterMaxWeight = 0;
            this.secondCharacterId = 0;
            this.secondCharacterCurrentWeight = 0;
            this.secondCharacterMaxWeight = 0;
            this.ID = 7482;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.firstCharacterId = 0;
            this.firstCharacterCurrentWeight = 0;
            this.firstCharacterMaxWeight = 0;
            this.secondCharacterId = 0;
            this.secondCharacterCurrentWeight = 0;
            this.secondCharacterMaxWeight = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedWithPodsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedWithPodsMessage(input);
        }

        serializeAs_ExchangeStartedWithPodsMessage(ouput) {
            this.serializeAs_ExchangeStartedMessage.call(this, output);
            if (this.firstCharacterId < -9007199254740992 || this.firstCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.firstCharacterId + ") on element firstCharacterId.");
            }
            output.writeDouble(this.firstCharacterId);
            if (this.firstCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element firstCharacterCurrentWeight.");
            }
            output.writeVarInt(this.firstCharacterCurrentWeight);
            if (this.firstCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element firstCharacterMaxWeight.");
            }
            output.writeVarInt(this.firstCharacterMaxWeight);
            if (this.secondCharacterId < -9007199254740992 || this.secondCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.secondCharacterId + ") on element secondCharacterId.");
            }
            output.writeDouble(this.secondCharacterId);
            if (this.secondCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element secondCharacterCurrentWeight.");
            }
            output.writeVarInt(this.secondCharacterCurrentWeight);
            if (this.secondCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element secondCharacterMaxWeight.");
            }
            output.writeVarInt(this.secondCharacterMaxWeight);
        }

        deserializeAs_ExchangeStartedWithPodsMessage(input) {
            this.deserializeAs_ExchangeStartedMessage.call(this, input);
            this.firstCharacterId = input.readDouble();
            if (this.firstCharacterId < -9007199254740992 || this.firstCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.firstCharacterId + ") on element of ExchangeStartedWithPodsMessage.firstCharacterId.");
            }
            this.firstCharacterCurrentWeight = input.readVarUhInt();
            if (this.firstCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterCurrentWeight.");
            }
            this.firstCharacterMaxWeight = input.readVarUhInt();
            if (this.firstCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.firstCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.firstCharacterMaxWeight.");
            }
            this.secondCharacterId = input.readDouble();
            if (this.secondCharacterId < -9007199254740992 || this.secondCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.secondCharacterId + ") on element of ExchangeStartedWithPodsMessage.secondCharacterId.");
            }
            this.secondCharacterCurrentWeight = input.readVarUhInt();
            if (this.secondCharacterCurrentWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterCurrentWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterCurrentWeight.");
            }
            this.secondCharacterMaxWeight = input.readVarUhInt();
            if (this.secondCharacterMaxWeight < 0) {
                throw new Error("Forbidden value (" + this.secondCharacterMaxWeight + ") on element of ExchangeStartedWithPodsMessage.secondCharacterMaxWeight.");
            }
        }
    }
    class ExchangeStartedWithStorageMessage extends ExchangeStartedMessage {
        constructor(_super) {
            super()
            this.storageMaxSlot = 0;
            this.ID = 8705;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.storageMaxSlot = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartedWithStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartedWithStorageMessage(input);
        }

        serializeAs_ExchangeStartedWithStorageMessage(ouput) {
            this.serializeAs_ExchangeStartedMessage.call(this, output);
            if (this.storageMaxSlot < 0) {
                throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element storageMaxSlot.");
            }
            output.writeVarInt(this.storageMaxSlot);
        }

        deserializeAs_ExchangeStartedWithStorageMessage(input) {
            this.deserializeAs_ExchangeStartedMessage.call(this, input);
            this.storageMaxSlot = input.readVarUhInt();
            if (this.storageMaxSlot < 0) {
                throw new Error("Forbidden value (" + this.storageMaxSlot + ") on element of ExchangeStartedWithStorageMessage.storageMaxSlot.");
            }
        }
    }
    class ExchangeStartOkCraftMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1786;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkCraftMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkCraftMessage(input);
        }

        serializeAs_ExchangeStartOkCraftMessage(ouput) {

        }

        deserializeAs_ExchangeStartOkCraftMessage(input) {

        }
    }
    class ExchangeStartOkCraftWithInformationMessage extends ExchangeStartOkCraftMessage {
        constructor(_super) {
            super()
            this.skillId = 0;
            this.ID = 9316;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.skillId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkCraftWithInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkCraftWithInformationMessage(input);
        }

        serializeAs_ExchangeStartOkCraftWithInformationMessage(ouput) {
            this.serializeAs_ExchangeStartOkCraftMessage.call(this, output);
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
        }

        deserializeAs_ExchangeStartOkCraftWithInformationMessage(input) {
            this.deserializeAs_ExchangeStartOkCraftMessage.call(this, input);
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkCraftWithInformationMessage.skillId.");
            }
        }
    }
    class ExchangeStartOkEvolutiveObjectRecycleTradeMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 5801;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage(input);
        }

        serializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage(ouput) {

        }

        deserializeAs_ExchangeStartOkEvolutiveObjectRecycleTradeMessage(input) {

        }
    }
    class ExchangeStartOkJobIndexMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.jobs = [];
            this.ID = 2386;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobs = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkJobIndexMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkJobIndexMessage(input);
        }

        serializeAs_ExchangeStartOkJobIndexMessage(ouput) {
            output.writeShort(this.jobs.length);
            for (var _i1 = 0; _i1 < this.jobs.length; _i1++) {
                if (this.jobs[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.jobs[_i1] + ") on element 1 (starting at 1) of jobs.");
                }
                output.writeVarInt(this.jobs[_i1]);
            }
        }

        deserializeAs_ExchangeStartOkJobIndexMessage(input) {
            var _val1 = 0;
            var _jobsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _jobsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of jobs.");
                }
                this.jobs.push(_val1);
            }
        }
    }
    class ExchangeStartOkMountWithOutPaddockMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.stabledMountsDescription = [];
            this.ID = 501;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.stabledMountsDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkMountWithOutPaddockMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(input);
        }

        serializeAs_ExchangeStartOkMountWithOutPaddockMessage(ouput) {
            output.writeShort(this.stabledMountsDescription.length);
            for (var _i1 = 0; _i1 < this.stabledMountsDescription.length; _i1++) {
                (this.stabledMountsDescription[_i1]).serializeAs_MountClientData(output);
            }
        }

        deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(input) {
            var _item1 = null;
            var _stabledMountsDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _stabledMountsDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.stabledMountsDescription.push(_item1);
            }
        }
    }
    class ExchangeStartOkMountMessage extends ExchangeStartOkMountWithOutPaddockMessage {
        constructor(_super) {
            super()
            this.paddockedMountsDescription = [];
            this.ID = 8655;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.paddockedMountsDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkMountMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkMountMessage(input);
        }

        serializeAs_ExchangeStartOkMountMessage(ouput) {
            this.serializeAs_ExchangeStartOkMountWithOutPaddockMessage.call(this, output);
            output.writeShort(this.paddockedMountsDescription.length);
            for (var _i1 = 0; _i1 < this.paddockedMountsDescription.length; _i1++) {
                (this.paddockedMountsDescription[_i1]).serializeAs_MountClientData(output);
            }
        }

        deserializeAs_ExchangeStartOkMountMessage(input) {
            var _item1 = null;
            this.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage.call(this, input);
            var _paddockedMountsDescriptionLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _paddockedMountsDescriptionLen; _i1++) {
                _item1 = new MountClientData();
                _item1.deserialize(input);
                this.paddockedMountsDescription.push(_item1);
            }
        }
    }
    class ExchangeStartOkMulticraftCrafterMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.skillId = 0;
            this.ID = 5320;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.skillId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkMulticraftCrafterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkMulticraftCrafterMessage(input);
        }

        serializeAs_ExchangeStartOkMulticraftCrafterMessage(ouput) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
        }

        deserializeAs_ExchangeStartOkMulticraftCrafterMessage(input) {
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCrafterMessage.skillId.");
            }
        }
    }
    class ExchangeStartOkMulticraftCustomerMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.skillId = 0;
            this.crafterJobLevel = 0;
            this.ID = 128;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.skillId = 0;
            this.crafterJobLevel = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkMulticraftCustomerMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkMulticraftCustomerMessage(input);
        }

        serializeAs_ExchangeStartOkMulticraftCustomerMessage(ouput) {
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element skillId.");
            }
            output.writeVarInt(this.skillId);
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element crafterJobLevel.");
            }
            output.writeByte(this.crafterJobLevel);
        }

        deserializeAs_ExchangeStartOkMulticraftCustomerMessage(input) {
            this.skillId = input.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error("Forbidden value (" + this.skillId + ") on element of ExchangeStartOkMulticraftCustomerMessage.skillId.");
            }
            this.crafterJobLevel = input.readUnsignedByte();
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error("Forbidden value (" + this.crafterJobLevel + ") on element of ExchangeStartOkMulticraftCustomerMessage.crafterJobLevel.");
            }
        }
    }
    class ExchangeStartOkNpcShopMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.npcSellerId = 0;
            this.tokenId = 0;
            this.objectsInfos = [];
            this.ID = 8657;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.npcSellerId = 0;
            this.tokenId = 0;
            this.objectsInfos = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkNpcShopMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkNpcShopMessage(input);
        }

        serializeAs_ExchangeStartOkNpcShopMessage(ouput) {
            if (this.npcSellerId < -9007199254740992 || this.npcSellerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.npcSellerId + ") on element npcSellerId.");
            }
            output.writeDouble(this.npcSellerId);
            if (this.tokenId < 0) {
                throw new Error("Forbidden value (" + this.tokenId + ") on element tokenId.");
            }
            output.writeVarInt(this.tokenId);
            output.writeShort(this.objectsInfos.length);
            for (var _i3 = 0; _i3 < this.objectsInfos.length; _i3++) {
                (this.objectsInfos[_i3]).serializeAs_ObjectItemToSellInNpcShop(output);
            }
        }

        deserializeAs_ExchangeStartOkNpcShopMessage(input) {
            var _item3 = null;
            this.npcSellerId = input.readDouble();
            if (this.npcSellerId < -9007199254740992 || this.npcSellerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.npcSellerId + ") on element of ExchangeStartOkNpcShopMessage.npcSellerId.");
            }
            this.tokenId = input.readVarUhInt();
            if (this.tokenId < 0) {
                throw new Error("Forbidden value (" + this.tokenId + ") on element of ExchangeStartOkNpcShopMessage.tokenId.");
            }
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _objectsInfosLen; _i3++) {
                _item3 = new ObjectItemToSellInNpcShop();
                _item3.deserialize(input);
                this.objectsInfos.push(_item3);
            }
        }
    }
    class ExchangeStartOkNpcTradeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.npcId = 0;
            this.ID = 1537;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.npcId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkNpcTradeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkNpcTradeMessage(input);
        }

        serializeAs_ExchangeStartOkNpcTradeMessage(ouput) {
            if (this.npcId < -9007199254740992 || this.npcId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.npcId + ") on element npcId.");
            }
            output.writeDouble(this.npcId);
        }

        deserializeAs_ExchangeStartOkNpcTradeMessage(input) {
            this.npcId = input.readDouble();
            if (this.npcId < -9007199254740992 || this.npcId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.npcId + ") on element of ExchangeStartOkNpcTradeMessage.npcId.");
            }
        }
    }
    class ExchangeStartOkRecycleTradeMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.percentToPrism = 0;
            this.percentToPlayer = 0;
            this.adjacentSubareaPossessed = [];
            this.adjacentSubareaUnpossessed = [];
            this.ID = 8048;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.percentToPrism = 0;
            this.percentToPlayer = 0;
            this.adjacentSubareaPossessed = [];
            this.adjacentSubareaUnpossessed = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkRecycleTradeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkRecycleTradeMessage(input);
        }

        serializeAs_ExchangeStartOkRecycleTradeMessage(ouput) {
            if (this.percentToPrism < 0) {
                throw new Error("Forbidden value (" + this.percentToPrism + ") on element percentToPrism.");
            }
            output.writeShort(this.percentToPrism);
            if (this.percentToPlayer < 0) {
                throw new Error("Forbidden value (" + this.percentToPlayer + ") on element percentToPlayer.");
            }
            output.writeShort(this.percentToPlayer);
            output.writeShort(this.adjacentSubareaPossessed.length);
            for (var _i3 = 0; _i3 < this.adjacentSubareaPossessed.length; _i3++) {
                if (this.adjacentSubareaPossessed[_i3] < 0) {
                    throw new Error("Forbidden value (" + this.adjacentSubareaPossessed[_i3] + ") on element 3 (starting at 1) of adjacentSubareaPossessed.");
                }
                output.writeInt(this.adjacentSubareaPossessed[_i3]);
            }
            output.writeShort(this.adjacentSubareaUnpossessed.length);
            for (var _i4 = 0; _i4 < this.adjacentSubareaUnpossessed.length; _i4++) {
                if (this.adjacentSubareaUnpossessed[_i4] < 0) {
                    throw new Error("Forbidden value (" + this.adjacentSubareaUnpossessed[_i4] + ") on element 4 (starting at 1) of adjacentSubareaUnpossessed.");
                }
                output.writeInt(this.adjacentSubareaUnpossessed[_i4]);
            }
        }

        deserializeAs_ExchangeStartOkRecycleTradeMessage(input) {
            var _val3 = 0;
            var _val4 = 0;
            this.percentToPrism = input.readShort();
            if (this.percentToPrism < 0) {
                throw new Error("Forbidden value (" + this.percentToPrism + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPrism.");
            }
            this.percentToPlayer = input.readShort();
            if (this.percentToPlayer < 0) {
                throw new Error("Forbidden value (" + this.percentToPlayer + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPlayer.");
            }
            var _adjacentSubareaPossessedLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _adjacentSubareaPossessedLen; _i3++) {
                _val3 = input.readInt();
                if (_val3 < 0) {
                    throw new Error("Forbidden value (" + _val3 + ") on elements of adjacentSubareaPossessed.");
                }
                this.adjacentSubareaPossessed.push(_val3);
            }
            var _adjacentSubareaUnpossessedLen = input.readUnsignedShort();
            for (var _i4 = 0; _i4 < _adjacentSubareaUnpossessedLen; _i4++) {
                _val4 = input.readInt();
                if (_val4 < 0) {
                    throw new Error("Forbidden value (" + _val4 + ") on elements of adjacentSubareaUnpossessed.");
                }
                this.adjacentSubareaUnpossessed.push(_val4);
            }
        }
    }
    class ExchangeStartOkRunesTradeMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9289;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStartOkRunesTradeMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStartOkRunesTradeMessage(input);
        }

        serializeAs_ExchangeStartOkRunesTradeMessage(ouput) {

        }

        deserializeAs_ExchangeStartOkRunesTradeMessage(input) {

        }
    }
    class ExchangeStoppedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.ID = 6256;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeStoppedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeStoppedMessage(input);
        }

        serializeAs_ExchangeStoppedMessage(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
        }

        deserializeAs_ExchangeStoppedMessage(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of ExchangeStoppedMessage.id.");
            }
        }
    }
    class ExchangeTaxCollectorGetMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.collectorName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.userName = "";
            this.callerId = 0;
            this.callerName = "";
            this.pods = 0;
            this.objectsInfos = [];
            this.look = new EntityLook();
            this.ID = 5477;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.collectorName = "";
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.userName = "";
            this.callerId = 0;
            this.callerName = "";
            this.pods = 0;
            this.objectsInfos = [];
            this.look = new EntityLook();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeTaxCollectorGetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeTaxCollectorGetMessage(input);
        }

        serializeAs_ExchangeTaxCollectorGetMessage(ouput) {
            output.writeUTF(this.collectorName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element worldX.");
            }
            output.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element worldY.");
            }
            output.writeShort(this.worldY);
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element mapId.");
            }
            output.writeDouble(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element subAreaId.");
            }
            output.writeVarShort(this.subAreaId);
            output.writeUTF(this.userName);
            if (this.callerId < 0 || this.callerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.callerId + ") on element callerId.");
            }
            output.writeVarLong(this.callerId);
            output.writeUTF(this.callerName);
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element pods.");
            }
            output.writeVarShort(this.pods);
            output.writeShort(this.objectsInfos.length);
            for (var _i10 = 0; _i10 < this.objectsInfos.length; _i10++) {
                (this.objectsInfos[_i10]).serializeAs_ObjectItemGenericQuantity(output);
            }
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_ExchangeTaxCollectorGetMessage(input) {
            var _item10 = null;
            this.collectorName = input.readUTF();
            this.worldX = input.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error("Forbidden value (" + this.worldX + ") on element of ExchangeTaxCollectorGetMessage.worldX.");
            }
            this.worldY = input.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error("Forbidden value (" + this.worldY + ") on element of ExchangeTaxCollectorGetMessage.worldY.");
            }
            this.mapId = input.readDouble();
            if (this.mapId < 0 || this.mapId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.mapId + ") on element of ExchangeTaxCollectorGetMessage.mapId.");
            }
            this.subAreaId = input.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error("Forbidden value (" + this.subAreaId + ") on element of ExchangeTaxCollectorGetMessage.subAreaId.");
            }
            this.userName = input.readUTF();
            this.callerId = input.readVarUhLong();
            if (this.callerId < 0 || this.callerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.callerId + ") on element of ExchangeTaxCollectorGetMessage.callerId.");
            }
            this.callerName = input.readUTF();
            this.pods = input.readVarUhShort();
            if (this.pods < 0) {
                throw new Error("Forbidden value (" + this.pods + ") on element of ExchangeTaxCollectorGetMessage.pods.");
            }
            var _objectsInfosLen = input.readUnsignedShort();
            for (var _i10 = 0; _i10 < _objectsInfosLen; _i10++) {
                _item10 = new ObjectItemGenericQuantity();
                _item10.deserialize(input);
                this.objectsInfos.push(_item10);
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class ExchangeTypesExchangerDescriptionForUserMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectType = 0;
            this.typeDescription = [];
            this.ID = 706;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectType = 0;
            this.typeDescription = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(input);
        }

        serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(ouput) {
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.typeDescription.length);
            for (var _i2 = 0; _i2 < this.typeDescription.length; _i2++) {
                if (this.typeDescription[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.typeDescription[_i2] + ") on element 2 (starting at 1) of typeDescription.");
                }
                output.writeVarInt(this.typeDescription[_i2]);
            }
        }

        deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(input) {
            var _val2 = 0;
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeTypesExchangerDescriptionForUserMessage.objectType.");
            }
            var _typeDescriptionLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _typeDescriptionLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of typeDescription.");
                }
                this.typeDescription.push(_val2);
            }
        }
    }
    class ExchangeTypesItemsExchangerDescriptionForUserMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectGID = 0;
            this.objectType = 0;
            this.itemTypeDescriptions = [];
            this.ID = 177;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectGID = 0;
            this.objectType = 0;
            this.itemTypeDescriptions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(input);
        }

        serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(ouput) {
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element objectGID.");
            }
            output.writeVarInt(this.objectGID);
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element objectType.");
            }
            output.writeInt(this.objectType);
            output.writeShort(this.itemTypeDescriptions.length);
            for (var _i3 = 0; _i3 < this.itemTypeDescriptions.length; _i3++) {
                (this.itemTypeDescriptions[_i3]).serializeAs_BidExchangerObjectInfo(output);
            }
        }

        deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(input) {
            var _item3 = null;
            this.objectGID = input.readVarUhInt();
            if (this.objectGID < 0) {
                throw new Error("Forbidden value (" + this.objectGID + ") on element of ExchangeTypesItemsExchangerDescriptionForUserMessage.objectGID.");
            }
            this.objectType = input.readInt();
            if (this.objectType < 0) {
                throw new Error("Forbidden value (" + this.objectType + ") on element of ExchangeTypesItemsExchangerDescriptionForUserMessage.objectType.");
            }
            var _itemTypeDescriptionsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _itemTypeDescriptionsLen; _i3++) {
                _item3 = new BidExchangerObjectInfo();
                _item3.deserialize(input);
                this.itemTypeDescriptions.push(_item3);
            }
        }
    }
    class ExchangeWaitingResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.bwait = false;
            this.ID = 2296;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bwait = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeWaitingResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeWaitingResultMessage(input);
        }

        serializeAs_ExchangeWaitingResultMessage(ouput) {
            output.writeBoolean(this.bwait);
        }

        deserializeAs_ExchangeWaitingResultMessage(input) {
            this.bwait = input.readBoolean();
        }
    }
    class ExchangeWeightMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.currentWeight = 0;
            this.maxWeight = 0;
            this.ID = 944;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.currentWeight = 0;
            this.maxWeight = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeWeightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeWeightMessage(input);
        }

        serializeAs_ExchangeWeightMessage(ouput) {
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
            }
            output.writeVarInt(this.currentWeight);
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
            }
            output.writeVarInt(this.maxWeight);
        }

        deserializeAs_ExchangeWeightMessage(input) {
            this.currentWeight = input.readVarUhInt();
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element of ExchangeWeightMessage.currentWeight.");
            }
            this.maxWeight = input.readVarUhInt();
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element of ExchangeWeightMessage.maxWeight.");
            }
        }
    }
    class FocusedExchangeReadyMessage extends ExchangeReadyMessage {
        constructor(_super) {
            super()
            this.focusActionId = 0;
            this.ID = 9025;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.focusActionId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_FocusedExchangeReadyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_FocusedExchangeReadyMessage(input);
        }

        serializeAs_FocusedExchangeReadyMessage(ouput) {
            this.serializeAs_ExchangeReadyMessage.call(this, output);
            if (this.focusActionId < 0) {
                throw new Error("Forbidden value (" + this.focusActionId + ") on element focusActionId.");
            }
            output.writeVarInt(this.focusActionId);
        }

        deserializeAs_FocusedExchangeReadyMessage(input) {
            this.deserializeAs_ExchangeReadyMessage.call(this, input);
            this.focusActionId = input.readVarUhInt();
            if (this.focusActionId < 0) {
                throw new Error("Forbidden value (" + this.focusActionId + ") on element of FocusedExchangeReadyMessage.focusActionId.");
            }
        }
    }
    class ItemNoMoreAvailableMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2274;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ItemNoMoreAvailableMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ItemNoMoreAvailableMessage(input);
        }

        serializeAs_ItemNoMoreAvailableMessage(ouput) {

        }

        deserializeAs_ItemNoMoreAvailableMessage(input) {

        }
    }
    class JobBookSubscribeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.jobIds = [];
            this.ID = 5373;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_JobBookSubscribeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_JobBookSubscribeRequestMessage(input);
        }

        serializeAs_JobBookSubscribeRequestMessage(ouput) {
            output.writeShort(this.jobIds.length);
            for (var _i1 = 0; _i1 < this.jobIds.length; _i1++) {
                if (this.jobIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.jobIds[_i1] + ") on element 1 (starting at 1) of jobIds.");
                }
                output.writeByte(this.jobIds[_i1]);
            }
        }

        deserializeAs_JobBookSubscribeRequestMessage(input) {
            var _val1 = 0;
            var _jobIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _jobIdsLen; _i1++) {
                _val1 = input.readByte();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of jobIds.");
                }
                this.jobIds.push(_val1);
            }
        }
    }
    class RecycleResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.nuggetsForPrism = 0;
            this.nuggetsForPlayer = 0;
            this.ID = 913;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nuggetsForPrism = 0;
            this.nuggetsForPlayer = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RecycleResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RecycleResultMessage(input);
        }

        serializeAs_RecycleResultMessage(ouput) {
            if (this.nuggetsForPrism < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPrism + ") on element nuggetsForPrism.");
            }
            output.writeVarInt(this.nuggetsForPrism);
            if (this.nuggetsForPlayer < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPlayer + ") on element nuggetsForPlayer.");
            }
            output.writeVarInt(this.nuggetsForPlayer);
        }

        deserializeAs_RecycleResultMessage(input) {
            this.nuggetsForPrism = input.readVarUhInt();
            if (this.nuggetsForPrism < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPrism + ") on element of RecycleResultMessage.nuggetsForPrism.");
            }
            this.nuggetsForPlayer = input.readVarUhInt();
            if (this.nuggetsForPlayer < 0) {
                throw new Error("Forbidden value (" + this.nuggetsForPlayer + ") on element of RecycleResultMessage.nuggetsForPlayer.");
            }
        }
    }
    class StartExchangeTaxCollectorEquipmentMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.uid = 0;
            this.ID = 3719;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uid = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartExchangeTaxCollectorEquipmentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartExchangeTaxCollectorEquipmentMessage(input);
        }

        serializeAs_StartExchangeTaxCollectorEquipmentMessage(ouput) {
            if (this.uid < 0 || this.uid > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeDouble(this.uid);
        }

        deserializeAs_StartExchangeTaxCollectorEquipmentMessage(input) {
            this.uid = input.readDouble();
            if (this.uid < 0 || this.uid > 9007199254740992) {
                throw new Error("Forbidden value (" + this.uid + ") on element of StartExchangeTaxCollectorEquipmentMessage.uid.");
            }
        }
    }
    class UpdateMountCharacteristicsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.rideId = 0;
            this.boostToUpdateList = [];
            this.ID = 255;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.rideId = 0;
            this.boostToUpdateList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateMountCharacteristicsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateMountCharacteristicsMessage(input);
        }

        serializeAs_UpdateMountCharacteristicsMessage(ouput) {
            output.writeVarInt(this.rideId);
            output.writeShort(this.boostToUpdateList.length);
            for (var _i2 = 0; _i2 < this.boostToUpdateList.length; _i2++) {
                output.writeShort((this.boostToUpdateList[_i2]).getTypeId());
                (this.boostToUpdateList[_i2]).serialize(output);
            }
        }

        deserializeAs_UpdateMountCharacteristicsMessage(input) {
            var _id2 = 0;
            var _item2 = null;
            this.rideId = input.readVarInt();
            var _boostToUpdateListLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _boostToUpdateListLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(UpdateMountCharacteristic, _id2);
                _item2.deserialize(input);
                this.boostToUpdateList.push(_item2);
            }
        }
    }
    class ExchangeKamaModifiedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.quantity = 0;
            this.ID = 1116;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeKamaModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeKamaModifiedMessage(input);
        }

        serializeAs_ExchangeKamaModifiedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.quantity < 0 || this.quantity > 9007199254740992) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarLong(this.quantity);
        }

        deserializeAs_ExchangeKamaModifiedMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.quantity = input.readVarUhLong();
            if (this.quantity < 0 || this.quantity > 9007199254740992) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ExchangeKamaModifiedMessage.quantity.");
            }
        }
    }
    class ExchangeMultiCraftCrafterCanUseHisRessourcesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allowed = false;
            this.ID = 3260;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allowed = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(input);
        }

        serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(ouput) {
            output.writeBoolean(this.allowed);
        }

        deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(input) {
            this.allowed = input.readBoolean();
        }
    }
    class ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.allow = false;
            this.ID = 7719;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.allow = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(input);
        }

        serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(ouput) {
            output.writeBoolean(this.allow);
        }

        deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(input) {
            this.allow = input.readBoolean();
        }
    }
    class ExchangeObjectModifiedInBagMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.ID = 2026;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectModifiedInBagMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectModifiedInBagMessage(input);
        }

        serializeAs_ExchangeObjectModifiedInBagMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        }

        deserializeAs_ExchangeObjectModifiedInBagMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        }
    }
    class ExchangeObjectModifiedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.ID = 8162;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectModifiedMessage(input);
        }

        serializeAs_ExchangeObjectModifiedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        }

        deserializeAs_ExchangeObjectModifiedMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        }
    }
    class ExchangeObjectPutInBagMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.ID = 2491;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectPutInBagMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectPutInBagMessage(input);
        }

        serializeAs_ExchangeObjectPutInBagMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            this.object.serializeAs_ObjectItem(output);
        }

        deserializeAs_ExchangeObjectPutInBagMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.object = new ObjectItem();
            this.object.deserialize(input);
        }
    }
    class ExchangeObjectRemovedFromBagMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.ID = 5167;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectRemovedFromBagMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectRemovedFromBagMessage(input);
        }

        serializeAs_ExchangeObjectRemovedFromBagMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        }

        deserializeAs_ExchangeObjectRemovedFromBagMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedFromBagMessage.objectUID.");
            }
        }
    }
    class ExchangeObjectRemovedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.ID = 5115;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectRemovedMessage(input);
        }

        serializeAs_ExchangeObjectRemovedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        }

        deserializeAs_ExchangeObjectRemovedMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ExchangeObjectRemovedMessage.objectUID.");
            }
        }
    }
    class ExchangeObjectsModifiedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.object = [];
            this.ID = 4538;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectsModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectsModifiedMessage(input);
        }

        serializeAs_ExchangeObjectsModifiedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            output.writeShort(this.object.length);
            for (var _i1 = 0; _i1 < this.object.length; _i1++) {
                (this.object[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ExchangeObjectsModifiedMessage(input) {
            var _item1 = null;
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            var _objectLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.object.push(_item1);
            }
        }
    }
    class ExchangeObjectsRemovedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.objectUID = [];
            this.ID = 4956;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangeObjectsRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangeObjectsRemovedMessage(input);
        }

        serializeAs_ExchangeObjectsRemovedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            output.writeShort(this.objectUID.length);
            for (var _i1 = 0; _i1 < this.objectUID.length; _i1++) {
                if (this.objectUID[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectUID[_i1] + ") on element 1 (starting at 1) of objectUID.");
                }
                output.writeVarInt(this.objectUID[_i1]);
            }
        }

        deserializeAs_ExchangeObjectsRemovedMessage(input) {
            var _val1 = 0;
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            var _objectUIDLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectUIDLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectUID.");
                }
                this.objectUID.push(_val1);
            }
        }
    }
    class ExchangePodsModifiedMessage extends ExchangeObjectMessage {
        constructor(_super) {
            super()
            this.currentWeight = 0;
            this.maxWeight = 0;
            this.ID = 9468;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.currentWeight = 0;
            this.maxWeight = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ExchangePodsModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ExchangePodsModifiedMessage(input);
        }

        serializeAs_ExchangePodsModifiedMessage(ouput) {
            this.serializeAs_ExchangeObjectMessage.call(this, output);
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element currentWeight.");
            }
            output.writeVarInt(this.currentWeight);
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element maxWeight.");
            }
            output.writeVarInt(this.maxWeight);
        }

        deserializeAs_ExchangePodsModifiedMessage(input) {
            this.deserializeAs_ExchangeObjectMessage.call(this, input);
            this.currentWeight = input.readVarUhInt();
            if (this.currentWeight < 0) {
                throw new Error("Forbidden value (" + this.currentWeight + ") on element of ExchangePodsModifiedMessage.currentWeight.");
            }
            this.maxWeight = input.readVarUhInt();
            if (this.maxWeight < 0) {
                throw new Error("Forbidden value (" + this.maxWeight + ") on element of ExchangePodsModifiedMessage.maxWeight.");
            }
        }
    }
    class GoldAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.gold = new GoldItem();
            this.ID = 7533;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.gold = new GoldItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GoldAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GoldAddedMessage(input);
        }

        serializeAs_GoldAddedMessage(ouput) {
            this.gold.serializeAs_GoldItem(output);
        }

        deserializeAs_GoldAddedMessage(input) {
            this.gold = new GoldItem();
            this.gold.deserialize(input);
        }
    }
    class InventoryContentMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objects = [];
            this.kamas = 0;
            this.ID = 2012;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objects = [];
            this.kamas = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InventoryContentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InventoryContentMessage(input);
        }

        serializeAs_InventoryContentMessage(ouput) {
            output.writeShort(this.objects.length);
            for (var _i1 = 0; _i1 < this.objects.length; _i1++) {
                (this.objects[_i1]).serializeAs_ObjectItem(output);
            }
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
        }

        deserializeAs_InventoryContentMessage(input) {
            var _item1 = null;
            var _objectsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objects.push(_item1);
            }
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of InventoryContentMessage.kamas.");
            }
        }
    }
    class InventoryWeightMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.inventoryWeight = 0;
            this.weightMax = 0;
            this.ID = 1907;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.inventoryWeight = 0;
            this.weightMax = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InventoryWeightMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InventoryWeightMessage(input);
        }

        serializeAs_InventoryWeightMessage(ouput) {
            if (this.inventoryWeight < 0) {
                throw new Error("Forbidden value (" + this.inventoryWeight + ") on element inventoryWeight.");
            }
            output.writeVarInt(this.inventoryWeight);
            if (this.weightMax < 0) {
                throw new Error("Forbidden value (" + this.weightMax + ") on element weightMax.");
            }
            output.writeVarInt(this.weightMax);
        }

        deserializeAs_InventoryWeightMessage(input) {
            this.inventoryWeight = input.readVarUhInt();
            if (this.inventoryWeight < 0) {
                throw new Error("Forbidden value (" + this.inventoryWeight + ") on element of InventoryWeightMessage.inventoryWeight.");
            }
            this.weightMax = input.readVarUhInt();
            if (this.weightMax < 0) {
                throw new Error("Forbidden value (" + this.weightMax + ") on element of InventoryWeightMessage.weightMax.");
            }
        }
    }
    class LivingObjectChangeSkinRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.livingUID = 0;
            this.livingPosition = 0;
            this.skinId = 0;
            this.ID = 3485;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.livingUID = 0;
            this.livingPosition = 0;
            this.skinId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LivingObjectChangeSkinRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LivingObjectChangeSkinRequestMessage(input);
        }

        serializeAs_LivingObjectChangeSkinRequestMessage(ouput) {
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element livingUID.");
            }
            output.writeVarInt(this.livingUID);
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
            }
            output.writeByte(this.livingPosition);
            if (this.skinId < 0) {
                throw new Error("Forbidden value (" + this.skinId + ") on element skinId.");
            }
            output.writeVarInt(this.skinId);
        }

        deserializeAs_LivingObjectChangeSkinRequestMessage(input) {
            this.livingUID = input.readVarUhInt();
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element of LivingObjectChangeSkinRequestMessage.livingUID.");
            }
            this.livingPosition = input.readUnsignedByte();
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectChangeSkinRequestMessage.livingPosition.");
            }
            this.skinId = input.readVarUhInt();
            if (this.skinId < 0) {
                throw new Error("Forbidden value (" + this.skinId + ") on element of LivingObjectChangeSkinRequestMessage.skinId.");
            }
        }
    }
    class LivingObjectDissociateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.livingUID = 0;
            this.livingPosition = 0;
            this.ID = 7311;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.livingUID = 0;
            this.livingPosition = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LivingObjectDissociateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LivingObjectDissociateMessage(input);
        }

        serializeAs_LivingObjectDissociateMessage(ouput) {
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element livingUID.");
            }
            output.writeVarInt(this.livingUID);
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element livingPosition.");
            }
            output.writeByte(this.livingPosition);
        }

        deserializeAs_LivingObjectDissociateMessage(input) {
            this.livingUID = input.readVarUhInt();
            if (this.livingUID < 0) {
                throw new Error("Forbidden value (" + this.livingUID + ") on element of LivingObjectDissociateMessage.livingUID.");
            }
            this.livingPosition = input.readUnsignedByte();
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error("Forbidden value (" + this.livingPosition + ") on element of LivingObjectDissociateMessage.livingPosition.");
            }
        }
    }
    class LivingObjectMessageMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.msgId = 0;
            this.timeStamp = 0;
            this.owner = "";
            this.objectGenericId = 0;
            this.ID = 6766;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.msgId = 0;
            this.timeStamp = 0;
            this.owner = "";
            this.objectGenericId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LivingObjectMessageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LivingObjectMessageMessage(input);
        }

        serializeAs_LivingObjectMessageMessage(ouput) {
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            if (this.timeStamp < 0) {
                throw new Error("Forbidden value (" + this.timeStamp + ") on element timeStamp.");
            }
            output.writeInt(this.timeStamp);
            output.writeUTF(this.owner);
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element objectGenericId.");
            }
            output.writeVarInt(this.objectGenericId);
        }

        deserializeAs_LivingObjectMessageMessage(input) {
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageMessage.msgId.");
            }
            this.timeStamp = input.readInt();
            if (this.timeStamp < 0) {
                throw new Error("Forbidden value (" + this.timeStamp + ") on element of LivingObjectMessageMessage.timeStamp.");
            }
            this.owner = input.readUTF();
            this.objectGenericId = input.readVarUhInt();
            if (this.objectGenericId < 0) {
                throw new Error("Forbidden value (" + this.objectGenericId + ") on element of LivingObjectMessageMessage.objectGenericId.");
            }
        }
    }
    class LivingObjectMessageRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.msgId = 0;
            this.parameters = [];
            this.livingObject = 0;
            this.ID = 3879;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.msgId = 0;
            this.parameters = [];
            this.livingObject = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LivingObjectMessageRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LivingObjectMessageRequestMessage(input);
        }

        serializeAs_LivingObjectMessageRequestMessage(ouput) {
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            output.writeShort(this.parameters.length);
            for (var _i2 = 0; _i2 < this.parameters.length; _i2++) {
                output.writeUTF(this.parameters[_i2]);
            }
            if (this.livingObject < 0) {
                throw new Error("Forbidden value (" + this.livingObject + ") on element livingObject.");
            }
            output.writeVarInt(this.livingObject);
        }

        deserializeAs_LivingObjectMessageRequestMessage(input) {
            var _val2 = null;
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of LivingObjectMessageRequestMessage.msgId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _parametersLen; _i2++) {
                _val2 = input.readUTF();
                this.parameters.push(_val2);
            }
            this.livingObject = input.readVarUhInt();
            if (this.livingObject < 0) {
                throw new Error("Forbidden value (" + this.livingObject + ") on element of LivingObjectMessageRequestMessage.livingObject.");
            }
        }
    }
    class SymbioticObjectAssociatedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hostUID = 0;
            this.ID = 8896;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hostUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SymbioticObjectAssociatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SymbioticObjectAssociatedMessage(input);
        }

        serializeAs_SymbioticObjectAssociatedMessage(ouput) {
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
        }

        deserializeAs_SymbioticObjectAssociatedMessage(input) {
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociatedMessage.hostUID.");
            }
        }
    }
    class MimicryObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
        constructor(_super) {
            super()

            this.ID = 3202;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MimicryObjectAssociatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MimicryObjectAssociatedMessage(input);
        }

        serializeAs_MimicryObjectAssociatedMessage(ouput) {
            this.serializeAs_SymbioticObjectAssociatedMessage.call(this, output);
        }

        deserializeAs_MimicryObjectAssociatedMessage(input) {
            this.deserializeAs_SymbioticObjectAssociatedMessage.call(this, input);
        }
    }
    class MimicryObjectEraseRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hostUID = 0;
            this.hostPos = 0;
            this.ID = 2104;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hostUID = 0;
            this.hostPos = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MimicryObjectEraseRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MimicryObjectEraseRequestMessage(input);
        }

        serializeAs_MimicryObjectEraseRequestMessage(ouput) {
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
            }
            output.writeByte(this.hostPos);
        }

        deserializeAs_MimicryObjectEraseRequestMessage(input) {
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of MimicryObjectEraseRequestMessage.hostUID.");
            }
            this.hostPos = input.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element of MimicryObjectEraseRequestMessage.hostPos.");
            }
        }
    }
    class ObjectErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 7056;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectErrorMessage(input);
        }

        serializeAs_ObjectErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_ObjectErrorMessage(input) {
            this.reason = input.readByte();
        }
    }
    class SymbioticObjectErrorMessage extends ObjectErrorMessage {
        constructor(_super) {
            super()
            this.errorCode = 0;
            this.ID = 7722;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.errorCode = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SymbioticObjectErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SymbioticObjectErrorMessage(input);
        }

        serializeAs_SymbioticObjectErrorMessage(ouput) {
            this.serializeAs_ObjectErrorMessage.call(this, output);
            output.writeByte(this.errorCode);
        }

        deserializeAs_SymbioticObjectErrorMessage(input) {
            this.deserializeAs_ObjectErrorMessage.call(this, input);
            this.errorCode = input.readByte();
        }
    }
    class MimicryObjectErrorMessage extends SymbioticObjectErrorMessage {
        constructor(_super) {
            super()
            this.preview = false;
            this.ID = 5728;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.preview = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MimicryObjectErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MimicryObjectErrorMessage(input);
        }

        serializeAs_MimicryObjectErrorMessage(ouput) {
            this.serializeAs_SymbioticObjectErrorMessage.call(this, output);
            output.writeBoolean(this.preview);
        }

        deserializeAs_MimicryObjectErrorMessage(input) {
            this.deserializeAs_SymbioticObjectErrorMessage.call(this, input);
            this.preview = input.readBoolean();
        }
    }
    class SymbioticObjectAssociateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.symbioteUID = 0;
            this.symbiotePos = 0;
            this.hostUID = 0;
            this.hostPos = 0;
            this.ID = 2115;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.symbioteUID = 0;
            this.symbiotePos = 0;
            this.hostUID = 0;
            this.hostPos = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SymbioticObjectAssociateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SymbioticObjectAssociateRequestMessage(input);
        }

        serializeAs_SymbioticObjectAssociateRequestMessage(ouput) {
            if (this.symbioteUID < 0) {
                throw new Error("Forbidden value (" + this.symbioteUID + ") on element symbioteUID.");
            }
            output.writeVarInt(this.symbioteUID);
            if (this.symbiotePos < 0 || this.symbiotePos > 255) {
                throw new Error("Forbidden value (" + this.symbiotePos + ") on element symbiotePos.");
            }
            output.writeByte(this.symbiotePos);
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
            }
            output.writeByte(this.hostPos);
        }

        deserializeAs_SymbioticObjectAssociateRequestMessage(input) {
            this.symbioteUID = input.readVarUhInt();
            if (this.symbioteUID < 0) {
                throw new Error("Forbidden value (" + this.symbioteUID + ") on element of SymbioticObjectAssociateRequestMessage.symbioteUID.");
            }
            this.symbiotePos = input.readUnsignedByte();
            if (this.symbiotePos < 0 || this.symbiotePos > 255) {
                throw new Error("Forbidden value (" + this.symbiotePos + ") on element of SymbioticObjectAssociateRequestMessage.symbiotePos.");
            }
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of SymbioticObjectAssociateRequestMessage.hostUID.");
            }
            this.hostPos = input.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element of SymbioticObjectAssociateRequestMessage.hostPos.");
            }
        }
    }
    class MimicryObjectFeedAndAssociateRequestMessage extends SymbioticObjectAssociateRequestMessage {
        constructor(_super) {
            super()
            this.foodUID = 0;
            this.foodPos = 0;
            this.preview = false;
            this.ID = 6060;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.foodUID = 0;
            this.foodPos = 0;
            this.preview = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MimicryObjectFeedAndAssociateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(input);
        }

        serializeAs_MimicryObjectFeedAndAssociateRequestMessage(ouput) {
            this.serializeAs_SymbioticObjectAssociateRequestMessage.call(this, output);
            if (this.foodUID < 0) {
                throw new Error("Forbidden value (" + this.foodUID + ") on element foodUID.");
            }
            output.writeVarInt(this.foodUID);
            if (this.foodPos < 0 || this.foodPos > 255) {
                throw new Error("Forbidden value (" + this.foodPos + ") on element foodPos.");
            }
            output.writeByte(this.foodPos);
            output.writeBoolean(this.preview);
        }

        deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(input) {
            this.deserializeAs_SymbioticObjectAssociateRequestMessage.call(this, input);
            this.foodUID = input.readVarUhInt();
            if (this.foodUID < 0) {
                throw new Error("Forbidden value (" + this.foodUID + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodUID.");
            }
            this.foodPos = input.readUnsignedByte();
            if (this.foodPos < 0 || this.foodPos > 255) {
                throw new Error("Forbidden value (" + this.foodPos + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodPos.");
            }
            this.preview = input.readBoolean();
        }
    }
    class MimicryObjectPreviewMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.result = new ObjectItem();
            this.ID = 6951;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.result = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MimicryObjectPreviewMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MimicryObjectPreviewMessage(input);
        }

        serializeAs_MimicryObjectPreviewMessage(ouput) {
            this.result.serializeAs_ObjectItem(output);
        }

        deserializeAs_MimicryObjectPreviewMessage(input) {
            this.result = new ObjectItem();
            this.result.deserialize(input);
        }
    }
    class ObjectAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.origin = 0;
            this.ID = 9325;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
            this.origin = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectAddedMessage(input);
        }

        serializeAs_ObjectAddedMessage(ouput) {
            this.object.serializeAs_ObjectItem(output);
            output.writeByte(this.origin);
        }

        deserializeAs_ObjectAddedMessage(input) {
            this.object = new ObjectItem();
            this.object.deserialize(input);
            this.origin = input.readByte();
            if (this.origin < 0) {
                throw new Error("Forbidden value (" + this.origin + ") on element of ObjectAddedMessage.origin.");
            }
        }
    }
    class ObjectDeletedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.ID = 8182;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectDeletedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectDeletedMessage(input);
        }

        serializeAs_ObjectDeletedMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        }

        deserializeAs_ObjectDeletedMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDeletedMessage.objectUID.");
            }
        }
    }
    class ObjectDeleteMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 2859;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectDeleteMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectDeleteMessage(input);
        }

        serializeAs_ObjectDeleteMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectDeleteMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDeleteMessage.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectDeleteMessage.quantity.");
            }
        }
    }
    class ObjectDropMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.ID = 430;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectDropMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectDropMessage(input);
        }

        serializeAs_ObjectDropMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectDropMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectDropMessage.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectDropMessage.quantity.");
            }
        }
    }
    class ObjectJobAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.jobId = 0;
            this.ID = 6036;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.jobId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectJobAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectJobAddedMessage(input);
        }

        serializeAs_ObjectJobAddedMessage(ouput) {
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element jobId.");
            }
            output.writeByte(this.jobId);
        }

        deserializeAs_ObjectJobAddedMessage(input) {
            this.jobId = input.readByte();
            if (this.jobId < 0) {
                throw new Error("Forbidden value (" + this.jobId + ") on element of ObjectJobAddedMessage.jobId.");
            }
        }
    }
    class ObjectModifiedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.ID = 2227;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectModifiedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectModifiedMessage(input);
        }

        serializeAs_ObjectModifiedMessage(ouput) {
            this.object.serializeAs_ObjectItem(output);
        }

        deserializeAs_ObjectModifiedMessage(input) {
            this.object = new ObjectItem();
            this.object.deserialize(input);
        }
    }
    class ObjectMovementMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.position = 63;
            this.ID = 6536;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.position = 63;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectMovementMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectMovementMessage(input);
        }

        serializeAs_ObjectMovementMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeShort(this.position);
        }

        deserializeAs_ObjectMovementMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectMovementMessage.objectUID.");
            }
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ObjectMovementMessage.position.");
            }
        }
    }
    class ObjectQuantityMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.quantity = 0;
            this.origin = 0;
            this.ID = 2962;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.quantity = 0;
            this.origin = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectQuantityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectQuantityMessage(input);
        }

        serializeAs_ObjectQuantityMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
            output.writeByte(this.origin);
        }

        deserializeAs_ObjectQuantityMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectQuantityMessage.objectUID.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectQuantityMessage.quantity.");
            }
            this.origin = input.readByte();
            if (this.origin < 0) {
                throw new Error("Forbidden value (" + this.origin + ") on element of ObjectQuantityMessage.origin.");
            }
        }
    }
    class ObjectsAddedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.object = [];
            this.ID = 365;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectsAddedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectsAddedMessage(input);
        }

        serializeAs_ObjectsAddedMessage(ouput) {
            output.writeShort(this.object.length);
            for (var _i1 = 0; _i1 < this.object.length; _i1++) {
                (this.object[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_ObjectsAddedMessage(input) {
            var _item1 = null;
            var _objectLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.object.push(_item1);
            }
        }
    }
    class ObjectsDeletedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = [];
            this.ID = 6633;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectsDeletedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectsDeletedMessage(input);
        }

        serializeAs_ObjectsDeletedMessage(ouput) {
            output.writeShort(this.objectUID.length);
            for (var _i1 = 0; _i1 < this.objectUID.length; _i1++) {
                if (this.objectUID[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectUID[_i1] + ") on element 1 (starting at 1) of objectUID.");
                }
                output.writeVarInt(this.objectUID[_i1]);
            }
        }

        deserializeAs_ObjectsDeletedMessage(input) {
            var _val1 = 0;
            var _objectUIDLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectUIDLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectUID.");
                }
                this.objectUID.push(_val1);
            }
        }
    }
    class ObjectSetPositionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.position = 63;
            this.quantity = 0;
            this.ID = 5462;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
            this.position = 63;
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectSetPositionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectSetPositionMessage(input);
        }

        serializeAs_ObjectSetPositionMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
            output.writeShort(this.position);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectSetPositionMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectSetPositionMessage.objectUID.");
            }
            this.position = input.readShort();
            if (this.position < 0) {
                throw new Error("Forbidden value (" + this.position + ") on element of ObjectSetPositionMessage.position.");
            }
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectSetPositionMessage.quantity.");
            }
        }
    }
    class ObjectsQuantityMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectsUIDAndQty = [];
            this.ID = 6590;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectsUIDAndQty = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectsQuantityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectsQuantityMessage(input);
        }

        serializeAs_ObjectsQuantityMessage(ouput) {
            output.writeShort(this.objectsUIDAndQty.length);
            for (var _i1 = 0; _i1 < this.objectsUIDAndQty.length; _i1++) {
                (this.objectsUIDAndQty[_i1]).serializeAs_ObjectItemQuantity(output);
            }
        }

        deserializeAs_ObjectsQuantityMessage(input) {
            var _item1 = null;
            var _objectsUIDAndQtyLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectsUIDAndQtyLen; _i1++) {
                _item1 = new ObjectItemQuantity();
                _item1.deserialize(input);
                this.objectsUIDAndQty.push(_item1);
            }
        }
    }
    class ObjectUseMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.ID = 167;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectUseMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectUseMessage(input);
        }

        serializeAs_ObjectUseMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        }

        deserializeAs_ObjectUseMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of ObjectUseMessage.objectUID.");
            }
        }
    }
    class ObjectUseMultipleMessage extends ObjectUseMessage {
        constructor(_super) {
            super()
            this.quantity = 0;
            this.ID = 8520;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.quantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectUseMultipleMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectUseMultipleMessage(input);
        }

        serializeAs_ObjectUseMultipleMessage(ouput) {
            this.serializeAs_ObjectUseMessage.call(this, output);
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element quantity.");
            }
            output.writeVarInt(this.quantity);
        }

        deserializeAs_ObjectUseMultipleMessage(input) {
            this.deserializeAs_ObjectUseMessage.call(this, input);
            this.quantity = input.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error("Forbidden value (" + this.quantity + ") on element of ObjectUseMultipleMessage.quantity.");
            }
        }
    }
    class ObjectUseOnCellMessage extends ObjectUseMessage {
        constructor(_super) {
            super()
            this.cells = 0;
            this.ID = 4749;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cells = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectUseOnCellMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectUseOnCellMessage(input);
        }

        serializeAs_ObjectUseOnCellMessage(ouput) {
            this.serializeAs_ObjectUseMessage.call(this, output);
            if (this.cells < 0 || this.cells > 559) {
                throw new Error("Forbidden value (" + this.cells + ") on element cells.");
            }
            output.writeVarShort(this.cells);
        }

        deserializeAs_ObjectUseOnCellMessage(input) {
            this.deserializeAs_ObjectUseMessage.call(this, input);
            this.cells = input.readVarUhShort();
            if (this.cells < 0 || this.cells > 559) {
                throw new Error("Forbidden value (" + this.cells + ") on element of ObjectUseOnCellMessage.cells.");
            }
        }
    }
    class ObjectUseOnCharacterMessage extends ObjectUseMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.ID = 5850;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectUseOnCharacterMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectUseOnCharacterMessage(input);
        }

        serializeAs_ObjectUseOnCharacterMessage(ouput) {
            this.serializeAs_ObjectUseMessage.call(this, output);
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        }

        deserializeAs_ObjectUseOnCharacterMessage(input) {
            this.deserializeAs_ObjectUseMessage.call(this, input);
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of ObjectUseOnCharacterMessage.characterId.");
            }
        }
    }
    class ObtainedItemMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.genericId = 0;
            this.baseQuantity = 0;
            this.ID = 5780;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.genericId = 0;
            this.baseQuantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObtainedItemMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObtainedItemMessage(input);
        }

        serializeAs_ObtainedItemMessage(ouput) {
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element genericId.");
            }
            output.writeVarInt(this.genericId);
            if (this.baseQuantity < 0) {
                throw new Error("Forbidden value (" + this.baseQuantity + ") on element baseQuantity.");
            }
            output.writeVarInt(this.baseQuantity);
        }

        deserializeAs_ObtainedItemMessage(input) {
            this.genericId = input.readVarUhInt();
            if (this.genericId < 0) {
                throw new Error("Forbidden value (" + this.genericId + ") on element of ObtainedItemMessage.genericId.");
            }
            this.baseQuantity = input.readVarUhInt();
            if (this.baseQuantity < 0) {
                throw new Error("Forbidden value (" + this.baseQuantity + ") on element of ObtainedItemMessage.baseQuantity.");
            }
        }
    }
    class ObtainedItemWithBonusMessage extends ObtainedItemMessage {
        constructor(_super) {
            super()
            this.bonusQuantity = 0;
            this.ID = 3479;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.bonusQuantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObtainedItemWithBonusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObtainedItemWithBonusMessage(input);
        }

        serializeAs_ObtainedItemWithBonusMessage(ouput) {
            this.serializeAs_ObtainedItemMessage.call(this, output);
            if (this.bonusQuantity < 0) {
                throw new Error("Forbidden value (" + this.bonusQuantity + ") on element bonusQuantity.");
            }
            output.writeVarInt(this.bonusQuantity);
        }

        deserializeAs_ObtainedItemWithBonusMessage(input) {
            this.deserializeAs_ObtainedItemMessage.call(this, input);
            this.bonusQuantity = input.readVarUhInt();
            if (this.bonusQuantity < 0) {
                throw new Error("Forbidden value (" + this.bonusQuantity + ") on element of ObtainedItemWithBonusMessage.bonusQuantity.");
            }
        }
    }
    class SetUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.setId = 0;
            this.setObjects = [];
            this.setEffects = [];
            this.ID = 3055;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.setId = 0;
            this.setObjects = [];
            this.setEffects = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SetUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SetUpdateMessage(input);
        }

        serializeAs_SetUpdateMessage(ouput) {
            if (this.setId < 0) {
                throw new Error("Forbidden value (" + this.setId + ") on element setId.");
            }
            output.writeVarShort(this.setId);
            output.writeShort(this.setObjects.length);
            for (var _i2 = 0; _i2 < this.setObjects.length; _i2++) {
                if (this.setObjects[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.setObjects[_i2] + ") on element 2 (starting at 1) of setObjects.");
                }
                output.writeVarInt(this.setObjects[_i2]);
            }
            output.writeShort(this.setEffects.length);
            for (var _i3 = 0; _i3 < this.setEffects.length; _i3++) {
                output.writeShort((this.setEffects[_i3]).getTypeId());
                (this.setEffects[_i3]).serialize(output);
            }
        }

        deserializeAs_SetUpdateMessage(input) {
            var _val2 = 0;
            var _id3 = 0;
            var _item3 = null;
            this.setId = input.readVarUhShort();
            if (this.setId < 0) {
                throw new Error("Forbidden value (" + this.setId + ") on element of SetUpdateMessage.setId.");
            }
            var _setObjectsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _setObjectsLen; _i2++) {
                _val2 = input.readVarUhInt();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of setObjects.");
                }
                this.setObjects.push(_val2);
            }
            var _setEffectsLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _setEffectsLen; _i3++) {
                _id3 = input.readUnsignedShort();
                _item3 = ProtocolTypeManager.getInstance(ObjectEffect, _id3);
                _item3.deserialize(input);
                this.setEffects.push(_item3);
            }
        }
    }
    class WatchInventoryContentMessage extends InventoryContentMessage {
        constructor(_super) {
            super()

            this.ID = 4015;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WatchInventoryContentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WatchInventoryContentMessage(input);
        }

        serializeAs_WatchInventoryContentMessage(ouput) {
            this.serializeAs_InventoryContentMessage.call(this, output);
        }

        deserializeAs_WatchInventoryContentMessage(input) {
            this.deserializeAs_InventoryContentMessage.call(this, input);
        }
    }
    class WrapperObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
        constructor(_super) {
            super()

            this.ID = 7212;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WrapperObjectAssociatedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WrapperObjectAssociatedMessage(input);
        }

        serializeAs_WrapperObjectAssociatedMessage(ouput) {
            this.serializeAs_SymbioticObjectAssociatedMessage.call(this, output);
        }

        deserializeAs_WrapperObjectAssociatedMessage(input) {
            this.deserializeAs_SymbioticObjectAssociatedMessage.call(this, input);
        }
    }
    class WrapperObjectDissociateRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hostUID = 0;
            this.hostPos = 0;
            this.ID = 1058;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hostUID = 0;
            this.hostPos = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WrapperObjectDissociateRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WrapperObjectDissociateRequestMessage(input);
        }

        serializeAs_WrapperObjectDissociateRequestMessage(ouput) {
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element hostUID.");
            }
            output.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element hostPos.");
            }
            output.writeByte(this.hostPos);
        }

        deserializeAs_WrapperObjectDissociateRequestMessage(input) {
            this.hostUID = input.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error("Forbidden value (" + this.hostUID + ") on element of WrapperObjectDissociateRequestMessage.hostUID.");
            }
            this.hostPos = input.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error("Forbidden value (" + this.hostPos + ") on element of WrapperObjectDissociateRequestMessage.hostPos.");
            }
        }
    }
    class WrapperObjectErrorMessage extends SymbioticObjectErrorMessage {
        constructor(_super) {
            super()

            this.ID = 148;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_WrapperObjectErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_WrapperObjectErrorMessage(input);
        }

        serializeAs_WrapperObjectErrorMessage(ouput) {
            this.serializeAs_SymbioticObjectErrorMessage.call(this, output);
        }

        deserializeAs_WrapperObjectErrorMessage(input) {
            this.deserializeAs_SymbioticObjectErrorMessage.call(this, input);
        }
    }
    class KamasUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kamasTotal = 0;
            this.ID = 5667;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kamasTotal = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_KamasUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_KamasUpdateMessage(input);
        }

        serializeAs_KamasUpdateMessage(ouput) {
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element kamasTotal.");
            }
            output.writeVarLong(this.kamasTotal);
        }

        deserializeAs_KamasUpdateMessage(input) {
            this.kamasTotal = input.readVarUhLong();
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element of KamasUpdateMessage.kamasTotal.");
            }
        }
    }
    class MultiTabStorageMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.tabs = [];
            this.ID = 3442;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.tabs = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_MultiTabStorageMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_MultiTabStorageMessage(input);
        }

        serializeAs_MultiTabStorageMessage(ouput) {
            output.writeShort(this.tabs.length);
            for (var _i1 = 0; _i1 < this.tabs.length; _i1++) {
                (this.tabs[_i1]).serializeAs_StorageTabInformation(output);
            }
        }

        deserializeAs_MultiTabStorageMessage(input) {
            var _item1 = null;
            var _tabsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _tabsLen; _i1++) {
                _item1 = new StorageTabInformation();
                _item1.deserialize(input);
                this.tabs.push(_item1);
            }
        }
    }
    class ObjectAveragePricesErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 3885;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectAveragePricesErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectAveragePricesErrorMessage(input);
        }

        serializeAs_ObjectAveragePricesErrorMessage(ouput) {

        }

        deserializeAs_ObjectAveragePricesErrorMessage(input) {

        }
    }
    class ObjectAveragePricesGetMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8285;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectAveragePricesGetMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectAveragePricesGetMessage(input);
        }

        serializeAs_ObjectAveragePricesGetMessage(ouput) {

        }

        deserializeAs_ObjectAveragePricesGetMessage(input) {

        }
    }
    class ObjectAveragePricesMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ids = [];
            this.avgPrices = [];
            this.ID = 9290;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ids = [];
            this.avgPrices = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ObjectAveragePricesMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ObjectAveragePricesMessage(input);
        }

        serializeAs_ObjectAveragePricesMessage(ouput) {
            output.writeShort(this.ids.length);
            for (var _i1 = 0; _i1 < this.ids.length; _i1++) {
                if (this.ids[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.ids[_i1] + ") on element 1 (starting at 1) of ids.");
                }
                output.writeVarInt(this.ids[_i1]);
            }
            output.writeShort(this.avgPrices.length);
            for (var _i2 = 0; _i2 < this.avgPrices.length; _i2++) {
                if (this.avgPrices[_i2] < 0 || this.avgPrices[_i2] > 9007199254740992) {
                    throw new Error("Forbidden value (" + this.avgPrices[_i2] + ") on element 2 (starting at 1) of avgPrices.");
                }
                output.writeVarLong(this.avgPrices[_i2]);
            }
        }

        deserializeAs_ObjectAveragePricesMessage(input) {
            var _val1 = 0;
            var _val2 = NaN;
            var _idsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _idsLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of ids.");
                }
                this.ids.push(_val1);
            }
            var _avgPricesLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _avgPricesLen; _i2++) {
                _val2 = input.readVarUhLong();
                if (_val2 < 0 || _val2 > 9007199254740992) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of avgPrices.");
                }
                this.avgPrices.push(_val2);
            }
        }
    }
    class SpellListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellPrevisualization = false;
            this.spells = [];
            this.ID = 8002;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellPrevisualization = false;
            this.spells = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SpellListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SpellListMessage(input);
        }

        serializeAs_SpellListMessage(ouput) {
            output.writeBoolean(this.spellPrevisualization);
            output.writeShort(this.spells.length);
            for (var _i2 = 0; _i2 < this.spells.length; _i2++) {
                (this.spells[_i2]).serializeAs_SpellItem(output);
            }
        }

        deserializeAs_SpellListMessage(input) {
            var _item2 = null;
            this.spellPrevisualization = input.readBoolean();
            var _spellsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _spellsLen; _i2++) {
                _item2 = new SpellItem();
                _item2.deserialize(input);
                this.spells.push(_item2);
            }
        }
    }
    class StorageInventoryContentMessage extends InventoryContentMessage {
        constructor(_super) {
            super()

            this.ID = 899;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StorageInventoryContentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageInventoryContentMessage(input);
        }

        serializeAs_StorageInventoryContentMessage(ouput) {
            this.serializeAs_InventoryContentMessage.call(this, output);
        }

        deserializeAs_StorageInventoryContentMessage(input) {
            this.deserializeAs_InventoryContentMessage.call(this, input);
        }
    }
    class StorageKamasUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kamasTotal = 0;
            this.ID = 212;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kamasTotal = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StorageKamasUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageKamasUpdateMessage(input);
        }

        serializeAs_StorageKamasUpdateMessage(ouput) {
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element kamasTotal.");
            }
            output.writeVarLong(this.kamasTotal);
        }

        deserializeAs_StorageKamasUpdateMessage(input) {
            this.kamasTotal = input.readVarUhLong();
            if (this.kamasTotal < 0 || this.kamasTotal > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamasTotal + ") on element of StorageKamasUpdateMessage.kamasTotal.");
            }
        }
    }
    class StorageObjectRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUID = 0;
            this.ID = 8692;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUID = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StorageObjectRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageObjectRemoveMessage(input);
        }

        serializeAs_StorageObjectRemoveMessage(ouput) {
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element objectUID.");
            }
            output.writeVarInt(this.objectUID);
        }

        deserializeAs_StorageObjectRemoveMessage(input) {
            this.objectUID = input.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error("Forbidden value (" + this.objectUID + ") on element of StorageObjectRemoveMessage.objectUID.");
            }
        }
    }
    class StorageObjectsRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectUIDList = [];
            this.ID = 1932;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectUIDList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StorageObjectsRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageObjectsRemoveMessage(input);
        }

        serializeAs_StorageObjectsRemoveMessage(ouput) {
            output.writeShort(this.objectUIDList.length);
            for (var _i1 = 0; _i1 < this.objectUIDList.length; _i1++) {
                if (this.objectUIDList[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.objectUIDList[_i1] + ") on element 1 (starting at 1) of objectUIDList.");
                }
                output.writeVarInt(this.objectUIDList[_i1]);
            }
        }

        deserializeAs_StorageObjectsRemoveMessage(input) {
            var _val1 = 0;
            var _objectUIDListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectUIDListLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of objectUIDList.");
                }
                this.objectUIDList.push(_val1);
            }
        }
    }
    class StorageObjectsUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.objectList = [];
            this.ID = 4497;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.objectList = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StorageObjectsUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageObjectsUpdateMessage(input);
        }

        serializeAs_StorageObjectsUpdateMessage(ouput) {
            output.writeShort(this.objectList.length);
            for (var _i1 = 0; _i1 < this.objectList.length; _i1++) {
                (this.objectList[_i1]).serializeAs_ObjectItem(output);
            }
        }

        deserializeAs_StorageObjectsUpdateMessage(input) {
            var _item1 = null;
            var _objectListLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _objectListLen; _i1++) {
                _item1 = new ObjectItem();
                _item1.deserialize(input);
                this.objectList.push(_item1);
            }
        }
    }
    class StorageObjectUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.object = new ObjectItem();
            this.ID = 44;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.object = new ObjectItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StorageObjectUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StorageObjectUpdateMessage(input);
        }

        serializeAs_StorageObjectUpdateMessage(ouput) {
            this.object.serializeAs_ObjectItem(output);
        }

        deserializeAs_StorageObjectUpdateMessage(input) {
            this.object = new ObjectItem();
            this.object.deserialize(input);
        }
    }
    class AccessoryPreviewErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.error = 0;
            this.ID = 5836;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.error = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccessoryPreviewErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccessoryPreviewErrorMessage(input);
        }

        serializeAs_AccessoryPreviewErrorMessage(ouput) {
            output.writeByte(this.error);
        }

        deserializeAs_AccessoryPreviewErrorMessage(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of AccessoryPreviewErrorMessage.error.");
            }
        }
    }
    class AccessoryPreviewMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.look = new EntityLook();
            this.ID = 8720;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.look = new EntityLook();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccessoryPreviewMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccessoryPreviewMessage(input);
        }

        serializeAs_AccessoryPreviewMessage(ouput) {
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_AccessoryPreviewMessage(input) {
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class AccessoryPreviewRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.genericId = [];
            this.ID = 1079;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.genericId = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccessoryPreviewRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccessoryPreviewRequestMessage(input);
        }

        serializeAs_AccessoryPreviewRequestMessage(ouput) {
            output.writeShort(this.genericId.length);
            for (var _i1 = 0; _i1 < this.genericId.length; _i1++) {
                if (this.genericId[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.genericId[_i1] + ") on element 1 (starting at 1) of genericId.");
                }
                output.writeVarInt(this.genericId[_i1]);
            }
        }

        deserializeAs_AccessoryPreviewRequestMessage(input) {
            var _val1 = 0;
            var _genericIdLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _genericIdLen; _i1++) {
                _val1 = input.readVarUhInt();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of genericId.");
                }
                this.genericId.push(_val1);
            }
        }
    }
    class PopupWarningClosedMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7639;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PopupWarningClosedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PopupWarningClosedMessage(input);
        }

        serializeAs_PopupWarningClosedMessage(ouput) {

        }

        deserializeAs_PopupWarningClosedMessage(input) {

        }
    }
    class PopupWarningCloseRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2188;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PopupWarningCloseRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PopupWarningCloseRequestMessage(input);
        }

        serializeAs_PopupWarningCloseRequestMessage(ouput) {

        }

        deserializeAs_PopupWarningCloseRequestMessage(input) {

        }
    }
    class PopupWarningMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.lockDuration = 0;
            this.author = "";
            this.content = "";
            this.ID = 5970;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lockDuration = 0;
            this.author = "";
            this.content = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PopupWarningMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PopupWarningMessage(input);
        }

        serializeAs_PopupWarningMessage(ouput) {
            if (this.lockDuration < 0 || this.lockDuration > 255) {
                throw new Error("Forbidden value (" + this.lockDuration + ") on element lockDuration.");
            }
            output.writeByte(this.lockDuration);
            output.writeUTF(this.author);
            output.writeUTF(this.content);
        }

        deserializeAs_PopupWarningMessage(input) {
            this.lockDuration = input.readUnsignedByte();
            if (this.lockDuration < 0 || this.lockDuration > 255) {
                throw new Error("Forbidden value (" + this.lockDuration + ") on element of PopupWarningMessage.lockDuration.");
            }
            this.author = input.readUTF();
            this.content = input.readUTF();
        }
    }
    class AreaFightModificatorUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.spellPairId = 0;
            this.ID = 3916;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.spellPairId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AreaFightModificatorUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AreaFightModificatorUpdateMessage(input);
        }

        serializeAs_AreaFightModificatorUpdateMessage(ouput) {
            output.writeInt(this.spellPairId);
        }

        deserializeAs_AreaFightModificatorUpdateMessage(input) {
            this.spellPairId = input.readInt();
        }
    }
    class NuggetsDistributionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.beneficiaries = [];
            this.ID = 3737;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.beneficiaries = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NuggetsDistributionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NuggetsDistributionMessage(input);
        }

        serializeAs_NuggetsDistributionMessage(ouput) {
            output.writeShort(this.beneficiaries.length);
            for (var _i1 = 0; _i1 < this.beneficiaries.length; _i1++) {
                (this.beneficiaries[_i1]).serializeAs_NuggetsBeneficiary(output);
            }
        }

        deserializeAs_NuggetsDistributionMessage(input) {
            var _item1 = null;
            var _beneficiariesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _beneficiariesLen; _i1++) {
                _item1 = new NuggetsBeneficiary();
                _item1.deserialize(input);
                this.beneficiaries.push(_item1);
            }
        }
    }
    class NuggetsInformationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.nuggetsQuantity = 0;
            this.ID = 7361;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.nuggetsQuantity = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_NuggetsInformationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_NuggetsInformationMessage(input);
        }

        serializeAs_NuggetsInformationMessage(ouput) {
            output.writeInt(this.nuggetsQuantity);
        }

        deserializeAs_NuggetsInformationMessage(input) {
            this.nuggetsQuantity = input.readInt();
        }
    }
    class StartListenNuggetsMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2836;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StartListenNuggetsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StartListenNuggetsMessage(input);
        }

        serializeAs_StartListenNuggetsMessage(ouput) {

        }

        deserializeAs_StartListenNuggetsMessage(input) {

        }
    }
    class StopListenNuggetsMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1489;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_StopListenNuggetsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_StopListenNuggetsMessage(input);
        }

        serializeAs_StopListenNuggetsMessage(ouput) {

        }

        deserializeAs_StopListenNuggetsMessage(input) {

        }
    }
    class IconPresetSaveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.symbolId = 0;
            this.updateData = false;
            this.ID = 6582;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
            this.symbolId = 0;
            this.updateData = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IconPresetSaveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IconPresetSaveRequestMessage(input);
        }

        serializeAs_IconPresetSaveRequestMessage(ouput) {
            output.writeShort(this.presetId);
            if (this.symbolId < 0) {
                throw new Error("Forbidden value (" + this.symbolId + ") on element symbolId.");
            }
            output.writeByte(this.symbolId);
            output.writeBoolean(this.updateData);
        }

        deserializeAs_IconPresetSaveRequestMessage(input) {
            this.presetId = input.readShort();
            this.symbolId = input.readByte();
            if (this.symbolId < 0) {
                throw new Error("Forbidden value (" + this.symbolId + ") on element of IconPresetSaveRequestMessage.symbolId.");
            }
            this.updateData = input.readBoolean();
        }
    }
    class IconNamedPresetSaveRequestMessage extends IconPresetSaveRequestMessage {
        constructor(_super) {
            super()
            this.name = "";
            this.type = 0;
            this.ID = 1750;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.name = "";
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_IconNamedPresetSaveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_IconNamedPresetSaveRequestMessage(input);
        }

        serializeAs_IconNamedPresetSaveRequestMessage(ouput) {
            this.serializeAs_IconPresetSaveRequestMessage.call(this, output);
            output.writeUTF(this.name);
            output.writeByte(this.type);
        }

        deserializeAs_IconNamedPresetSaveRequestMessage(input) {
            this.deserializeAs_IconPresetSaveRequestMessage.call(this, input);
            this.name = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of IconNamedPresetSaveRequestMessage.type.");
            }
        }
    }
    class InvalidPresetsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetIds = [];
            this.ID = 1460;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_InvalidPresetsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_InvalidPresetsMessage(input);
        }

        serializeAs_InvalidPresetsMessage(ouput) {
            output.writeShort(this.presetIds.length);
            for (var _i1 = 0; _i1 < this.presetIds.length; _i1++) {
                if (this.presetIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.presetIds[_i1] + ") on element 1 (starting at 1) of presetIds.");
                }
                output.writeShort(this.presetIds[_i1]);
            }
        }

        deserializeAs_InvalidPresetsMessage(input) {
            var _val1 = 0;
            var _presetIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetIdsLen; _i1++) {
                _val1 = input.readShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of presetIds.");
                }
                this.presetIds.push(_val1);
            }
        }
    }
    class ItemForPresetUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.presetItem = new ItemForPreset();
            this.ID = 6865;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
            this.presetItem = new ItemForPreset();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ItemForPresetUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ItemForPresetUpdateMessage(input);
        }

        serializeAs_ItemForPresetUpdateMessage(ouput) {
            output.writeShort(this.presetId);
            this.presetItem.serializeAs_ItemForPreset(output);
        }

        deserializeAs_ItemForPresetUpdateMessage(input) {
            this.presetId = input.readShort();
            this.presetItem = new ItemForPreset();
            this.presetItem.deserialize(input);
        }
    }
    class PresetDeleteRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.ID = 5847;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetDeleteRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetDeleteRequestMessage(input);
        }

        serializeAs_PresetDeleteRequestMessage(ouput) {
            output.writeShort(this.presetId);
        }

        deserializeAs_PresetDeleteRequestMessage(input) {
            this.presetId = input.readShort();
        }
    }
    class PresetDeleteResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.code = 2;
            this.ID = 537;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
            this.code = 2;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetDeleteResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetDeleteResultMessage(input);
        }

        serializeAs_PresetDeleteResultMessage(ouput) {
            output.writeShort(this.presetId);
            output.writeByte(this.code);
        }

        deserializeAs_PresetDeleteResultMessage(input) {
            this.presetId = input.readShort();
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of PresetDeleteResultMessage.code.");
            }
        }
    }
    class PresetSavedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.preset = new Preset();
            this.ID = 3815;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
            this.preset = new Preset();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetSavedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetSavedMessage(input);
        }

        serializeAs_PresetSavedMessage(ouput) {
            output.writeShort(this.presetId);
            output.writeShort(this.preset.getTypeId());
            this.preset.serialize(output);
        }

        deserializeAs_PresetSavedMessage(input) {
            this.presetId = input.readShort();
            var _id2 = input.readUnsignedShort();
            this.preset = ProtocolTypeManager.getInstance(Preset, _id2);
            this.preset.deserialize(input);
        }
    }
    class PresetSaveErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.code = 2;
            this.ID = 9161;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
            this.code = 2;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetSaveErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetSaveErrorMessage(input);
        }

        serializeAs_PresetSaveErrorMessage(ouput) {
            output.writeShort(this.presetId);
            output.writeByte(this.code);
        }

        deserializeAs_PresetSaveErrorMessage(input) {
            this.presetId = input.readShort();
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of PresetSaveErrorMessage.code.");
            }
        }
    }
    class PresetsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presets = [];
            this.ID = 9259;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presets = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetsMessage(input);
        }

        serializeAs_PresetsMessage(ouput) {
            output.writeShort(this.presets.length);
            for (var _i1 = 0; _i1 < this.presets.length; _i1++) {
                output.writeShort((this.presets[_i1]).getTypeId());
                (this.presets[_i1]).serialize(output);
            }
        }

        deserializeAs_PresetsMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _presetsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _presetsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(Preset, _id1);
                _item1.deserialize(input);
                this.presets.push(_item1);
            }
        }
    }
    class PresetUseRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.ID = 1536;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetUseRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetUseRequestMessage(input);
        }

        serializeAs_PresetUseRequestMessage(ouput) {
            output.writeShort(this.presetId);
        }

        deserializeAs_PresetUseRequestMessage(input) {
            this.presetId = input.readShort();
        }
    }
    class PresetUseResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.presetId = 0;
            this.code = 3;
            this.ID = 1648;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.presetId = 0;
            this.code = 3;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetUseResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetUseResultMessage(input);
        }

        serializeAs_PresetUseResultMessage(ouput) {
            output.writeShort(this.presetId);
            output.writeByte(this.code);
        }

        deserializeAs_PresetUseResultMessage(input) {
            this.presetId = input.readShort();
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of PresetUseResultMessage.code.");
            }
        }
    }
    class PresetUseResultWithMissingIdsMessage extends PresetUseResultMessage {
        constructor(_super) {
            super()
            this.missingIds = [];
            this.ID = 4950;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.missingIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PresetUseResultWithMissingIdsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PresetUseResultWithMissingIdsMessage(input);
        }

        serializeAs_PresetUseResultWithMissingIdsMessage(ouput) {
            this.serializeAs_PresetUseResultMessage.call(this, output);
            output.writeShort(this.missingIds.length);
            for (var _i1 = 0; _i1 < this.missingIds.length; _i1++) {
                if (this.missingIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.missingIds[_i1] + ") on element 1 (starting at 1) of missingIds.");
                }
                output.writeVarShort(this.missingIds[_i1]);
            }
        }

        deserializeAs_PresetUseResultWithMissingIdsMessage(input) {
            var _val1 = 0;
            this.deserializeAs_PresetUseResultMessage.call(this, input);
            var _missingIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _missingIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of missingIds.");
                }
                this.missingIds.push(_val1);
            }
        }
    }
    class PrismAddOrUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.prism = new PrismGeolocalizedInformation();
            this.ID = 3378;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.prism = new PrismGeolocalizedInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismAddOrUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismAddOrUpdateMessage(input);
        }

        serializeAs_PrismAddOrUpdateMessage(ouput) {
            this.prism.serializeAs_PrismGeolocalizedInformation(output);
        }

        deserializeAs_PrismAddOrUpdateMessage(input) {
            this.prism = new PrismGeolocalizedInformation();
            this.prism.deserialize(input);
        }
    }
    class PrismAttackedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.prism = new PrismGeolocalizedInformation();
            this.ID = 2689;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.prism = new PrismGeolocalizedInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismAttackedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismAttackedMessage(input);
        }

        serializeAs_PrismAttackedMessage(ouput) {
            this.prism.serializeAs_PrismGeolocalizedInformation(output);
        }

        deserializeAs_PrismAttackedMessage(input) {
            this.prism = new PrismGeolocalizedInformation();
            this.prism.deserialize(input);
        }
    }
    class PrismAttackRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 2774;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismAttackRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismAttackRequestMessage(input);
        }

        serializeAs_PrismAttackRequestMessage(ouput) {

        }

        deserializeAs_PrismAttackRequestMessage(input) {

        }
    }
    class PrismAttackResultMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.prism = new PrismGeolocalizedInformation();
            this.result = 0;
            this.ID = 4128;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.prism = new PrismGeolocalizedInformation();
            this.result = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismAttackResultMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismAttackResultMessage(input);
        }

        serializeAs_PrismAttackResultMessage(ouput) {
            this.prism.serializeAs_PrismGeolocalizedInformation(output);
            output.writeByte(this.result);
        }

        deserializeAs_PrismAttackResultMessage(input) {
            this.prism = new PrismGeolocalizedInformation();
            this.prism.deserialize(input);
            this.result = input.readByte();
            if (this.result < 0) {
                throw new Error("Forbidden value (" + this.result + ") on element of PrismAttackResultMessage.result.");
            }
        }
    }
    class PrismExchangeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4630;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismExchangeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismExchangeRequestMessage(input);
        }

        serializeAs_PrismExchangeRequestMessage(ouput) {

        }

        deserializeAs_PrismExchangeRequestMessage(input) {

        }
    }
    class PrismRecycleTradeRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 8103;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismRecycleTradeRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismRecycleTradeRequestMessage(input);
        }

        serializeAs_PrismRecycleTradeRequestMessage(ouput) {

        }

        deserializeAs_PrismRecycleTradeRequestMessage(input) {

        }
    }
    class PrismRemoveMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.prism = new PrismGeolocalizedInformation();
            this.ID = 1921;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.prism = new PrismGeolocalizedInformation();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismRemoveMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismRemoveMessage(input);
        }

        serializeAs_PrismRemoveMessage(ouput) {
            this.prism.serializeAs_PrismGeolocalizedInformation(output);
        }

        deserializeAs_PrismRemoveMessage(input) {
            this.prism = new PrismGeolocalizedInformation();
            this.prism.deserialize(input);
        }
    }
    class PrismsListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.prisms = [];
            this.ID = 3610;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.prisms = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismsListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismsListMessage(input);
        }

        serializeAs_PrismsListMessage(ouput) {
            output.writeShort(this.prisms.length);
            for (var _i1 = 0; _i1 < this.prisms.length; _i1++) {
                output.writeShort((this.prisms[_i1]).getTypeId());
                (this.prisms[_i1]).serialize(output);
            }
        }

        deserializeAs_PrismsListMessage(input) {
            var _id1 = 0;
            var _item1 = null;
            var _prismsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _prismsLen; _i1++) {
                _id1 = input.readUnsignedShort();
                _item1 = ProtocolTypeManager.getInstance(PrismGeolocalizedInformation, _id1);
                _item1.deserialize(input);
                this.prisms.push(_item1);
            }
        }
    }
    class PrismTeleportationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4692;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_PrismTeleportationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_PrismTeleportationRequestMessage(input);
        }

        serializeAs_PrismTeleportationRequestMessage(ouput) {

        }

        deserializeAs_PrismTeleportationRequestMessage(input) {

        }
    }
    class ActivityHideRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.activityId = 0;
            this.ID = 5559;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.activityId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ActivityHideRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ActivityHideRequestMessage(input);
        }

        serializeAs_ActivityHideRequestMessage(ouput) {
            if (this.activityId < 0) {
                throw new Error("Forbidden value (" + this.activityId + ") on element activityId.");
            }
            output.writeVarShort(this.activityId);
        }

        deserializeAs_ActivityHideRequestMessage(input) {
            this.activityId = input.readVarUhShort();
            if (this.activityId < 0) {
                throw new Error("Forbidden value (" + this.activityId + ") on element of ActivityHideRequestMessage.activityId.");
            }
        }
    }
    class ActivityLockRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.activityId = 0;
            this.lock = false;
            this.ID = 5899;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.activityId = 0;
            this.lock = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ActivityLockRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ActivityLockRequestMessage(input);
        }

        serializeAs_ActivityLockRequestMessage(ouput) {
            if (this.activityId < 0) {
                throw new Error("Forbidden value (" + this.activityId + ") on element activityId.");
            }
            output.writeVarShort(this.activityId);
            output.writeBoolean(this.lock);
        }

        deserializeAs_ActivityLockRequestMessage(input) {
            this.activityId = input.readVarUhShort();
            if (this.activityId < 0) {
                throw new Error("Forbidden value (" + this.activityId + ") on element of ActivityLockRequestMessage.activityId.");
            }
            this.lock = input.readBoolean();
        }
    }
    class ActivitySuggestionsMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.lockedActivitiesIds = [];
            this.unlockedActivitiesIds = [];
            this.ID = 6457;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.lockedActivitiesIds = [];
            this.unlockedActivitiesIds = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ActivitySuggestionsMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ActivitySuggestionsMessage(input);
        }

        serializeAs_ActivitySuggestionsMessage(ouput) {
            output.writeShort(this.lockedActivitiesIds.length);
            for (var _i1 = 0; _i1 < this.lockedActivitiesIds.length; _i1++) {
                if (this.lockedActivitiesIds[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.lockedActivitiesIds[_i1] + ") on element 1 (starting at 1) of lockedActivitiesIds.");
                }
                output.writeVarShort(this.lockedActivitiesIds[_i1]);
            }
            output.writeShort(this.unlockedActivitiesIds.length);
            for (var _i2 = 0; _i2 < this.unlockedActivitiesIds.length; _i2++) {
                if (this.unlockedActivitiesIds[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.unlockedActivitiesIds[_i2] + ") on element 2 (starting at 1) of unlockedActivitiesIds.");
                }
                output.writeVarShort(this.unlockedActivitiesIds[_i2]);
            }
        }

        deserializeAs_ActivitySuggestionsMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _lockedActivitiesIdsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _lockedActivitiesIdsLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of lockedActivitiesIds.");
                }
                this.lockedActivitiesIds.push(_val1);
            }
            var _unlockedActivitiesIdsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _unlockedActivitiesIdsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of unlockedActivitiesIds.");
                }
                this.unlockedActivitiesIds.push(_val2);
            }
        }
    }
    class ActivitySuggestionsRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.minLevel = 0;
            this.maxLevel = 0;
            this.areaId = 0;
            this.activityCategoryId = 0;
            this.nbCards = 0;
            this.ID = 1972;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.minLevel = 0;
            this.maxLevel = 0;
            this.areaId = 0;
            this.activityCategoryId = 0;
            this.nbCards = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ActivitySuggestionsRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ActivitySuggestionsRequestMessage(input);
        }

        serializeAs_ActivitySuggestionsRequestMessage(ouput) {
            if (this.minLevel < 0) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element minLevel.");
            }
            output.writeVarShort(this.minLevel);
            if (this.maxLevel < 0) {
                throw new Error("Forbidden value (" + this.maxLevel + ") on element maxLevel.");
            }
            output.writeVarShort(this.maxLevel);
            if (this.areaId < 0) {
                throw new Error("Forbidden value (" + this.areaId + ") on element areaId.");
            }
            output.writeVarShort(this.areaId);
            if (this.activityCategoryId < 0) {
                throw new Error("Forbidden value (" + this.activityCategoryId + ") on element activityCategoryId.");
            }
            output.writeVarShort(this.activityCategoryId);
            if (this.nbCards < 0 || this.nbCards > 65535) {
                throw new Error("Forbidden value (" + this.nbCards + ") on element nbCards.");
            }
            output.writeShort(this.nbCards);
        }

        deserializeAs_ActivitySuggestionsRequestMessage(input) {
            this.minLevel = input.readVarUhShort();
            if (this.minLevel < 0) {
                throw new Error("Forbidden value (" + this.minLevel + ") on element of ActivitySuggestionsRequestMessage.minLevel.");
            }
            this.maxLevel = input.readVarUhShort();
            if (this.maxLevel < 0) {
                throw new Error("Forbidden value (" + this.maxLevel + ") on element of ActivitySuggestionsRequestMessage.maxLevel.");
            }
            this.areaId = input.readVarUhShort();
            if (this.areaId < 0) {
                throw new Error("Forbidden value (" + this.areaId + ") on element of ActivitySuggestionsRequestMessage.areaId.");
            }
            this.activityCategoryId = input.readVarUhShort();
            if (this.activityCategoryId < 0) {
                throw new Error("Forbidden value (" + this.activityCategoryId + ") on element of ActivitySuggestionsRequestMessage.activityCategoryId.");
            }
            this.nbCards = input.readUnsignedShort();
            if (this.nbCards < 0 || this.nbCards > 65535) {
                throw new Error("Forbidden value (" + this.nbCards + ") on element of ActivitySuggestionsRequestMessage.nbCards.");
            }
        }
    }
    class AlignmentRankUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.alignmentRank = 0;
            this.verbose = false;
            this.ID = 2232;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.alignmentRank = 0;
            this.verbose = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AlignmentRankUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AlignmentRankUpdateMessage(input);
        }

        serializeAs_AlignmentRankUpdateMessage(ouput) {
            if (this.alignmentRank < 0) {
                throw new Error("Forbidden value (" + this.alignmentRank + ") on element alignmentRank.");
            }
            output.writeByte(this.alignmentRank);
            output.writeBoolean(this.verbose);
        }

        deserializeAs_AlignmentRankUpdateMessage(input) {
            this.alignmentRank = input.readByte();
            if (this.alignmentRank < 0) {
                throw new Error("Forbidden value (" + this.alignmentRank + ") on element of AlignmentRankUpdateMessage.alignmentRank.");
            }
            this.verbose = input.readBoolean();
        }
    }
    class SetEnableAVARequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 4428;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SetEnableAVARequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SetEnableAVARequestMessage(input);
        }

        serializeAs_SetEnableAVARequestMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_SetEnableAVARequestMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class SetEnablePVPRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.enable = false;
            this.ID = 9540;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.enable = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SetEnablePVPRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SetEnablePVPRequestMessage(input);
        }

        serializeAs_SetEnablePVPRequestMessage(ouput) {
            output.writeBoolean(this.enable);
        }

        deserializeAs_SetEnablePVPRequestMessage(input) {
            this.enable = input.readBoolean();
        }
    }
    class UpdateMapPlayersAgressableStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.playerAvAMessages = [];
            this.ID = 9727;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerAvAMessages = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateMapPlayersAgressableStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateMapPlayersAgressableStatusMessage(input);
        }

        serializeAs_UpdateMapPlayersAgressableStatusMessage(ouput) {
            output.writeShort(this.playerAvAMessages.length);
            for (var _i1 = 0; _i1 < this.playerAvAMessages.length; _i1++) {
                (this.playerAvAMessages[_i1]).serializeAs_AgressableStatusMessage(output);
            }
        }

        deserializeAs_UpdateMapPlayersAgressableStatusMessage(input) {
            var _item1 = null;
            var _playerAvAMessagesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _playerAvAMessagesLen; _i1++) {
                _item1 = new AgressableStatusMessage();
                _item1.deserialize(input);
                this.playerAvAMessages.push(_item1);
            }
        }
    }
    class UpdateSelfAgressableStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.status = 0;
            this.probationTime = 0;
            this.roleAvAId = 0;
            this.pictoScore = 0;
            this.ID = 8145;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.status = 0;
            this.probationTime = 0;
            this.roleAvAId = 0;
            this.pictoScore = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_UpdateSelfAgressableStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_UpdateSelfAgressableStatusMessage(input);
        }

        serializeAs_UpdateSelfAgressableStatusMessage(ouput) {
            output.writeByte(this.status);
            if (this.probationTime < 0 || this.probationTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element probationTime.");
            }
            output.writeDouble(this.probationTime);
            output.writeInt(this.roleAvAId);
            output.writeInt(this.pictoScore);
        }

        deserializeAs_UpdateSelfAgressableStatusMessage(input) {
            this.status = input.readByte();
            if (this.status < 0) {
                throw new Error("Forbidden value (" + this.status + ") on element of UpdateSelfAgressableStatusMessage.status.");
            }
            this.probationTime = input.readDouble();
            if (this.probationTime < 0 || this.probationTime > 9007199254740992) {
                throw new Error("Forbidden value (" + this.probationTime + ") on element of UpdateSelfAgressableStatusMessage.probationTime.");
            }
            this.roleAvAId = input.readInt();
            this.pictoScore = input.readInt();
        }
    }
    class CinematicMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.cinematicId = 0;
            this.ID = 5911;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.cinematicId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CinematicMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CinematicMessage(input);
        }

        serializeAs_CinematicMessage(ouput) {
            if (this.cinematicId < 0) {
                throw new Error("Forbidden value (" + this.cinematicId + ") on element cinematicId.");
            }
            output.writeVarShort(this.cinematicId);
        }

        deserializeAs_CinematicMessage(input) {
            this.cinematicId = input.readVarUhShort();
            if (this.cinematicId < 0) {
                throw new Error("Forbidden value (" + this.cinematicId + ") on element of CinematicMessage.cinematicId.");
            }
        }
    }
    class ShortcutBarAddErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.error = 0;
            this.ID = 1938;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.error = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarAddErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarAddErrorMessage(input);
        }

        serializeAs_ShortcutBarAddErrorMessage(ouput) {
            output.writeByte(this.error);
        }

        deserializeAs_ShortcutBarAddErrorMessage(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarAddErrorMessage.error.");
            }
        }
    }
    class ShortcutBarAddRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.shortcut = new Shortcut();
            this.ID = 1120;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.shortcut = new Shortcut();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarAddRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarAddRequestMessage(input);
        }

        serializeAs_ShortcutBarAddRequestMessage(ouput) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(output);
        }

        deserializeAs_ShortcutBarAddRequestMessage(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarAddRequestMessage.barType.");
            }
            var _id2 = input.readUnsignedShort();
            this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _id2);
            this.shortcut.deserialize(input);
        }
    }
    class ShortcutBarContentMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.shortcuts = [];
            this.ID = 1608;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.shortcuts = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarContentMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarContentMessage(input);
        }

        serializeAs_ShortcutBarContentMessage(ouput) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcuts.length);
            for (var _i2 = 0; _i2 < this.shortcuts.length; _i2++) {
                output.writeShort((this.shortcuts[_i2]).getTypeId());
                (this.shortcuts[_i2]).serialize(output);
            }
        }

        deserializeAs_ShortcutBarContentMessage(input) {
            var _id2 = 0;
            var _item2 = null;
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarContentMessage.barType.");
            }
            var _shortcutsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _shortcutsLen; _i2++) {
                _id2 = input.readUnsignedShort();
                _item2 = ProtocolTypeManager.getInstance(Shortcut, _id2);
                _item2.deserialize(input);
                this.shortcuts.push(_item2);
            }
        }
    }
    class ShortcutBarRefreshMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.shortcut = new Shortcut();
            this.ID = 8442;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.shortcut = new Shortcut();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarRefreshMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarRefreshMessage(input);
        }

        serializeAs_ShortcutBarRefreshMessage(ouput) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(output);
        }

        deserializeAs_ShortcutBarRefreshMessage(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRefreshMessage.barType.");
            }
            var _id2 = input.readUnsignedShort();
            this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _id2);
            this.shortcut.deserialize(input);
        }
    }
    class ShortcutBarRemovedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.slot = 0;
            this.ID = 2881;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.slot = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarRemovedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarRemovedMessage(input);
        }

        serializeAs_ShortcutBarRemovedMessage(ouput) {
            output.writeByte(this.barType);
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        }

        deserializeAs_ShortcutBarRemovedMessage(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemovedMessage.barType.");
            }
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemovedMessage.slot.");
            }
        }
    }
    class ShortcutBarRemoveErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.error = 0;
            this.ID = 2825;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.error = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarRemoveErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarRemoveErrorMessage(input);
        }

        serializeAs_ShortcutBarRemoveErrorMessage(ouput) {
            output.writeByte(this.error);
        }

        deserializeAs_ShortcutBarRemoveErrorMessage(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarRemoveErrorMessage.error.");
            }
        }
    }
    class ShortcutBarRemoveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.slot = 0;
            this.ID = 665;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.slot = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarRemoveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarRemoveRequestMessage(input);
        }

        serializeAs_ShortcutBarRemoveRequestMessage(ouput) {
            output.writeByte(this.barType);
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element slot.");
            }
            output.writeByte(this.slot);
        }

        deserializeAs_ShortcutBarRemoveRequestMessage(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarRemoveRequestMessage.barType.");
            }
            this.slot = input.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error("Forbidden value (" + this.slot + ") on element of ShortcutBarRemoveRequestMessage.slot.");
            }
        }
    }
    class ShortcutBarReplacedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.shortcut = new Shortcut();
            this.ID = 2423;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.shortcut = new Shortcut();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarReplacedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarReplacedMessage(input);
        }

        serializeAs_ShortcutBarReplacedMessage(ouput) {
            output.writeByte(this.barType);
            output.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(output);
        }

        deserializeAs_ShortcutBarReplacedMessage(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarReplacedMessage.barType.");
            }
            var _id2 = input.readUnsignedShort();
            this.shortcut = ProtocolTypeManager.getInstance(Shortcut, _id2);
            this.shortcut.deserialize(input);
        }
    }
    class ShortcutBarSwapErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.error = 0;
            this.ID = 4659;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.error = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarSwapErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarSwapErrorMessage(input);
        }

        serializeAs_ShortcutBarSwapErrorMessage(ouput) {
            output.writeByte(this.error);
        }

        deserializeAs_ShortcutBarSwapErrorMessage(input) {
            this.error = input.readByte();
            if (this.error < 0) {
                throw new Error("Forbidden value (" + this.error + ") on element of ShortcutBarSwapErrorMessage.error.");
            }
        }
    }
    class ShortcutBarSwapRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.barType = 0;
            this.firstSlot = 0;
            this.secondSlot = 0;
            this.ID = 9543;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.barType = 0;
            this.firstSlot = 0;
            this.secondSlot = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ShortcutBarSwapRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ShortcutBarSwapRequestMessage(input);
        }

        serializeAs_ShortcutBarSwapRequestMessage(ouput) {
            output.writeByte(this.barType);
            if (this.firstSlot < 0 || this.firstSlot > 99) {
                throw new Error("Forbidden value (" + this.firstSlot + ") on element firstSlot.");
            }
            output.writeByte(this.firstSlot);
            if (this.secondSlot < 0 || this.secondSlot > 99) {
                throw new Error("Forbidden value (" + this.secondSlot + ") on element secondSlot.");
            }
            output.writeByte(this.secondSlot);
        }

        deserializeAs_ShortcutBarSwapRequestMessage(input) {
            this.barType = input.readByte();
            if (this.barType < 0) {
                throw new Error("Forbidden value (" + this.barType + ") on element of ShortcutBarSwapRequestMessage.barType.");
            }
            this.firstSlot = input.readByte();
            if (this.firstSlot < 0 || this.firstSlot > 99) {
                throw new Error("Forbidden value (" + this.firstSlot + ") on element of ShortcutBarSwapRequestMessage.firstSlot.");
            }
            this.secondSlot = input.readByte();
            if (this.secondSlot < 0 || this.secondSlot > 99) {
                throw new Error("Forbidden value (" + this.secondSlot + ") on element of ShortcutBarSwapRequestMessage.secondSlot.");
            }
        }
    }
    class ContactLookErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.ID = 4487;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ContactLookErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ContactLookErrorMessage(input);
        }

        serializeAs_ContactLookErrorMessage(ouput) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeVarInt(this.requestId);
        }

        deserializeAs_ContactLookErrorMessage(input) {
            this.requestId = input.readVarUhInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookErrorMessage.requestId.");
            }
        }
    }
    class ContactLookMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.look = new EntityLook();
            this.ID = 782;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
            this.playerName = "";
            this.playerId = 0;
            this.look = new EntityLook();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ContactLookMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ContactLookMessage(input);
        }

        serializeAs_ContactLookMessage(ouput) {
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeVarInt(this.requestId);
            output.writeUTF(this.playerName);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
            this.look.serializeAs_EntityLook(output);
        }

        deserializeAs_ContactLookMessage(input) {
            this.requestId = input.readVarUhInt();
            if (this.requestId < 0) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookMessage.requestId.");
            }
            this.playerName = input.readUTF();
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ContactLookMessage.playerId.");
            }
            this.look = new EntityLook();
            this.look.deserialize(input);
        }
    }
    class ContactLookRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.requestId = 0;
            this.contactType = 0;
            this.ID = 8699;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.requestId = 0;
            this.contactType = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ContactLookRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ContactLookRequestMessage(input);
        }

        serializeAs_ContactLookRequestMessage(ouput) {
            if (this.requestId < 0 || this.requestId > 255) {
                throw new Error("Forbidden value (" + this.requestId + ") on element requestId.");
            }
            output.writeByte(this.requestId);
            output.writeByte(this.contactType);
        }

        deserializeAs_ContactLookRequestMessage(input) {
            this.requestId = input.readUnsignedByte();
            if (this.requestId < 0 || this.requestId > 255) {
                throw new Error("Forbidden value (" + this.requestId + ") on element of ContactLookRequestMessage.requestId.");
            }
            this.contactType = input.readByte();
            if (this.contactType < 0) {
                throw new Error("Forbidden value (" + this.contactType + ") on element of ContactLookRequestMessage.contactType.");
            }
        }
    }
    class ContactLookRequestByIdMessage extends ContactLookRequestMessage {
        constructor(_super) {
            super()
            this.playerId = 0;
            this.ID = 3941;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ContactLookRequestByIdMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ContactLookRequestByIdMessage(input);
        }

        serializeAs_ContactLookRequestByIdMessage(ouput) {
            this.serializeAs_ContactLookRequestMessage.call(this, output);
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element playerId.");
            }
            output.writeVarLong(this.playerId);
        }

        deserializeAs_ContactLookRequestByIdMessage(input) {
            this.deserializeAs_ContactLookRequestMessage.call(this, input);
            this.playerId = input.readVarUhLong();
            if (this.playerId < 0 || this.playerId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.playerId + ") on element of ContactLookRequestByIdMessage.playerId.");
            }
        }
    }
    class ContactLookRequestByNameMessage extends ContactLookRequestMessage {
        constructor(_super) {
            super()
            this.playerName = "";
            this.ID = 7171;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.playerName = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ContactLookRequestByNameMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ContactLookRequestByNameMessage(input);
        }

        serializeAs_ContactLookRequestByNameMessage(ouput) {
            this.serializeAs_ContactLookRequestMessage.call(this, output);
            output.writeUTF(this.playerName);
        }

        deserializeAs_ContactLookRequestByNameMessage(input) {
            this.deserializeAs_ContactLookRequestMessage.call(this, input);
            this.playerName = input.readUTF();
        }
    }
    class SocialFightJoinRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.socialFightInfo = new SocialFightInfo();
            this.ID = 5289;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.socialFightInfo = new SocialFightInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SocialFightJoinRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialFightJoinRequestMessage(input);
        }

        serializeAs_SocialFightJoinRequestMessage(ouput) {
            this.socialFightInfo.serializeAs_SocialFightInfo(output);
        }

        deserializeAs_SocialFightJoinRequestMessage(input) {
            this.socialFightInfo = new SocialFightInfo();
            this.socialFightInfo.deserialize(input);
        }
    }
    class SocialFightLeaveRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.socialFightInfo = new SocialFightInfo();
            this.ID = 5697;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.socialFightInfo = new SocialFightInfo();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SocialFightLeaveRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialFightLeaveRequestMessage(input);
        }

        serializeAs_SocialFightLeaveRequestMessage(ouput) {
            this.socialFightInfo.serializeAs_SocialFightInfo(output);
        }

        deserializeAs_SocialFightLeaveRequestMessage(input) {
            this.socialFightInfo = new SocialFightInfo();
            this.socialFightInfo.deserialize(input);
        }
    }
    class SocialFightTakePlaceRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.socialFightInfo = new SocialFightInfo();
            this.replacedCharacterId = 0;
            this.ID = 6499;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.socialFightInfo = new SocialFightInfo();
            this.replacedCharacterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SocialFightTakePlaceRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SocialFightTakePlaceRequestMessage(input);
        }

        serializeAs_SocialFightTakePlaceRequestMessage(ouput) {
            this.socialFightInfo.serializeAs_SocialFightInfo(output);
            if (this.replacedCharacterId < 0 || this.replacedCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.replacedCharacterId + ") on element replacedCharacterId.");
            }
            output.writeVarLong(this.replacedCharacterId);
        }

        deserializeAs_SocialFightTakePlaceRequestMessage(input) {
            this.socialFightInfo = new SocialFightInfo();
            this.socialFightInfo.deserialize(input);
            this.replacedCharacterId = input.readVarUhLong();
            if (this.replacedCharacterId < 0 || this.replacedCharacterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.replacedCharacterId + ") on element of SocialFightTakePlaceRequestMessage.replacedCharacterId.");
            }
        }
    }
    class ConsumeAllGameActionItemMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.characterId = 0;
            this.ID = 1273;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.characterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ConsumeAllGameActionItemMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ConsumeAllGameActionItemMessage(input);
        }

        serializeAs_ConsumeAllGameActionItemMessage(ouput) {
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        }

        deserializeAs_ConsumeAllGameActionItemMessage(input) {
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of ConsumeAllGameActionItemMessage.characterId.");
            }
        }
    }
    class ConsumeGameActionItemMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actionId = 0;
            this.characterId = 0;
            this.ID = 2860;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actionId = 0;
            this.characterId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ConsumeGameActionItemMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ConsumeGameActionItemMessage(input);
        }

        serializeAs_ConsumeGameActionItemMessage(ouput) {
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeInt(this.actionId);
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element characterId.");
            }
            output.writeVarLong(this.characterId);
        }

        deserializeAs_ConsumeGameActionItemMessage(input) {
            this.actionId = input.readInt();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of ConsumeGameActionItemMessage.actionId.");
            }
            this.characterId = input.readVarUhLong();
            if (this.characterId < 0 || this.characterId > 9007199254740992) {
                throw new Error("Forbidden value (" + this.characterId + ") on element of ConsumeGameActionItemMessage.characterId.");
            }
        }
    }
    class GameActionItemAddMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.newAction = new GameActionItem();
            this.ID = 8600;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.newAction = new GameActionItem();
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionItemAddMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionItemAddMessage(input);
        }

        serializeAs_GameActionItemAddMessage(ouput) {
            this.newAction.serializeAs_GameActionItem(output);
        }

        deserializeAs_GameActionItemAddMessage(input) {
            this.newAction = new GameActionItem();
            this.newAction.deserialize(input);
        }
    }
    class GameActionItemConsumedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.success = false;
            this.actionId = 0;
            this.automaticAction = false;
            this.ID = 1257;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.success = false;
            this.actionId = 0;
            this.automaticAction = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionItemConsumedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionItemConsumedMessage(input);
        }

        serializeAs_GameActionItemConsumedMessage(ouput) {
            var _box0 = 0;
            _box0 = BooleanByteWrapper.setFlag(_box0, 0, this.success);
            _box0 = BooleanByteWrapper.setFlag(_box0, 1, this.automaticAction);
            output.writeByte(_box0);
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element actionId.");
            }
            output.writeInt(this.actionId);
        }

        deserializeAs_GameActionItemConsumedMessage(input) {
            var _box0 = input.readByte();
            this.success = BooleanByteWrapper.getFlag(_box0, 0);
            this.automaticAction = BooleanByteWrapper.getFlag(_box0, 1);
            this.actionId = input.readInt();
            if (this.actionId < 0) {
                throw new Error("Forbidden value (" + this.actionId + ") on element of GameActionItemConsumedMessage.actionId.");
            }
        }
    }
    class GameActionItemListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.actions = [];
            this.ID = 1976;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.actions = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_GameActionItemListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_GameActionItemListMessage(input);
        }

        serializeAs_GameActionItemListMessage(ouput) {
            output.writeShort(this.actions.length);
            for (var _i1 = 0; _i1 < this.actions.length; _i1++) {
                (this.actions[_i1]).serializeAs_GameActionItem(output);
            }
        }

        deserializeAs_GameActionItemListMessage(input) {
            var _item1 = null;
            var _actionsLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _actionsLen; _i1++) {
                _item1 = new GameActionItem();
                _item1.deserialize(input);
                this.actions.push(_item1);
            }
        }
    }
    class SubscriptionLimitationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 7943;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SubscriptionLimitationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SubscriptionLimitationMessage(input);
        }

        serializeAs_SubscriptionLimitationMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_SubscriptionLimitationMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of SubscriptionLimitationMessage.reason.");
            }
        }
    }
    class SubscriptionZoneMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.active = false;
            this.ID = 7990;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.active = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SubscriptionZoneMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SubscriptionZoneMessage(input);
        }

        serializeAs_SubscriptionZoneMessage(ouput) {
            output.writeBoolean(this.active);
        }

        deserializeAs_SubscriptionZoneMessage(input) {
            this.active = input.readBoolean();
        }
    }
    class OrnamentGainedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ornamentId = 0;
            this.ID = 2340;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ornamentId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OrnamentGainedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OrnamentGainedMessage(input);
        }

        serializeAs_OrnamentGainedMessage(ouput) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeShort(this.ornamentId);
        }

        deserializeAs_OrnamentGainedMessage(input) {
            this.ornamentId = input.readShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentGainedMessage.ornamentId.");
            }
        }
    }
    class OrnamentLostMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ornamentId = 0;
            this.ID = 9671;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ornamentId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OrnamentLostMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OrnamentLostMessage(input);
        }

        serializeAs_OrnamentLostMessage(ouput) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeShort(this.ornamentId);
        }

        deserializeAs_OrnamentLostMessage(input) {
            this.ornamentId = input.readShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentLostMessage.ornamentId.");
            }
        }
    }
    class OrnamentSelectedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ornamentId = 0;
            this.ID = 439;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ornamentId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OrnamentSelectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OrnamentSelectedMessage(input);
        }

        serializeAs_OrnamentSelectedMessage(ouput) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeVarShort(this.ornamentId);
        }

        deserializeAs_OrnamentSelectedMessage(input) {
            this.ornamentId = input.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectedMessage.ornamentId.");
            }
        }
    }
    class OrnamentSelectErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 5458;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OrnamentSelectErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OrnamentSelectErrorMessage(input);
        }

        serializeAs_OrnamentSelectErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_OrnamentSelectErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of OrnamentSelectErrorMessage.reason.");
            }
        }
    }
    class OrnamentSelectRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.ornamentId = 0;
            this.ID = 3742;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.ornamentId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_OrnamentSelectRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_OrnamentSelectRequestMessage(input);
        }

        serializeAs_OrnamentSelectRequestMessage(ouput) {
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element ornamentId.");
            }
            output.writeVarShort(this.ornamentId);
        }

        deserializeAs_OrnamentSelectRequestMessage(input) {
            this.ornamentId = input.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error("Forbidden value (" + this.ornamentId + ") on element of OrnamentSelectRequestMessage.ornamentId.");
            }
        }
    }
    class TitleGainedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.titleId = 0;
            this.ID = 478;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.titleId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitleGainedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitleGainedMessage(input);
        }

        serializeAs_TitleGainedMessage(ouput) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        }

        deserializeAs_TitleGainedMessage(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleGainedMessage.titleId.");
            }
        }
    }
    class TitleLostMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.titleId = 0;
            this.ID = 541;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.titleId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitleLostMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitleLostMessage(input);
        }

        serializeAs_TitleLostMessage(ouput) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        }

        deserializeAs_TitleLostMessage(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleLostMessage.titleId.");
            }
        }
    }
    class TitlesAndOrnamentsListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.titles = [];
            this.ornaments = [];
            this.activeTitle = 0;
            this.activeOrnament = 0;
            this.ID = 7011;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.titles = [];
            this.ornaments = [];
            this.activeTitle = 0;
            this.activeOrnament = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitlesAndOrnamentsListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitlesAndOrnamentsListMessage(input);
        }

        serializeAs_TitlesAndOrnamentsListMessage(ouput) {
            output.writeShort(this.titles.length);
            for (var _i1 = 0; _i1 < this.titles.length; _i1++) {
                if (this.titles[_i1] < 0) {
                    throw new Error("Forbidden value (" + this.titles[_i1] + ") on element 1 (starting at 1) of titles.");
                }
                output.writeVarShort(this.titles[_i1]);
            }
            output.writeShort(this.ornaments.length);
            for (var _i2 = 0; _i2 < this.ornaments.length; _i2++) {
                if (this.ornaments[_i2] < 0) {
                    throw new Error("Forbidden value (" + this.ornaments[_i2] + ") on element 2 (starting at 1) of ornaments.");
                }
                output.writeVarShort(this.ornaments[_i2]);
            }
            if (this.activeTitle < 0) {
                throw new Error("Forbidden value (" + this.activeTitle + ") on element activeTitle.");
            }
            output.writeVarShort(this.activeTitle);
            if (this.activeOrnament < 0) {
                throw new Error("Forbidden value (" + this.activeOrnament + ") on element activeOrnament.");
            }
            output.writeVarShort(this.activeOrnament);
        }

        deserializeAs_TitlesAndOrnamentsListMessage(input) {
            var _val1 = 0;
            var _val2 = 0;
            var _titlesLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _titlesLen; _i1++) {
                _val1 = input.readVarUhShort();
                if (_val1 < 0) {
                    throw new Error("Forbidden value (" + _val1 + ") on elements of titles.");
                }
                this.titles.push(_val1);
            }
            var _ornamentsLen = input.readUnsignedShort();
            for (var _i2 = 0; _i2 < _ornamentsLen; _i2++) {
                _val2 = input.readVarUhShort();
                if (_val2 < 0) {
                    throw new Error("Forbidden value (" + _val2 + ") on elements of ornaments.");
                }
                this.ornaments.push(_val2);
            }
            this.activeTitle = input.readVarUhShort();
            if (this.activeTitle < 0) {
                throw new Error("Forbidden value (" + this.activeTitle + ") on element of TitlesAndOrnamentsListMessage.activeTitle.");
            }
            this.activeOrnament = input.readVarUhShort();
            if (this.activeOrnament < 0) {
                throw new Error("Forbidden value (" + this.activeOrnament + ") on element of TitlesAndOrnamentsListMessage.activeOrnament.");
            }
        }
    }
    class TitlesAndOrnamentsListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 7199;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitlesAndOrnamentsListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitlesAndOrnamentsListRequestMessage(input);
        }

        serializeAs_TitlesAndOrnamentsListRequestMessage(ouput) {

        }

        deserializeAs_TitlesAndOrnamentsListRequestMessage(input) {

        }
    }
    class TitleSelectedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.titleId = 0;
            this.ID = 5032;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.titleId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitleSelectedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitleSelectedMessage(input);
        }

        serializeAs_TitleSelectedMessage(ouput) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        }

        deserializeAs_TitleSelectedMessage(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleSelectedMessage.titleId.");
            }
        }
    }
    class TitleSelectErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.reason = 0;
            this.ID = 7277;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.reason = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitleSelectErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitleSelectErrorMessage(input);
        }

        serializeAs_TitleSelectErrorMessage(ouput) {
            output.writeByte(this.reason);
        }

        deserializeAs_TitleSelectErrorMessage(input) {
            this.reason = input.readByte();
            if (this.reason < 0) {
                throw new Error("Forbidden value (" + this.reason + ") on element of TitleSelectErrorMessage.reason.");
            }
        }
    }
    class TitleSelectRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.titleId = 0;
            this.ID = 6172;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.titleId = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TitleSelectRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TitleSelectRequestMessage(input);
        }

        serializeAs_TitleSelectRequestMessage(ouput) {
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element titleId.");
            }
            output.writeVarShort(this.titleId);
        }

        deserializeAs_TitleSelectRequestMessage(input) {
            this.titleId = input.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error("Forbidden value (" + this.titleId + ") on element of TitleSelectRequestMessage.titleId.");
            }
        }
    }
    class ClientUIOpenedMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.ID = 2372;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ClientUIOpenedMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ClientUIOpenedMessage(input);
        }

        serializeAs_ClientUIOpenedMessage(ouput) {
            output.writeByte(this.type);
        }

        deserializeAs_ClientUIOpenedMessage(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of ClientUIOpenedMessage.type.");
            }
        }
    }
    class ClientUIOpenedByObjectMessage extends ClientUIOpenedMessage {
        constructor(_super) {
            super()
            this.uid = 0;
            this.ID = 5305;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.uid = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ClientUIOpenedByObjectMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ClientUIOpenedByObjectMessage(input);
        }

        serializeAs_ClientUIOpenedByObjectMessage(ouput) {
            this.serializeAs_ClientUIOpenedMessage.call(this, output);
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element uid.");
            }
            output.writeVarInt(this.uid);
        }

        deserializeAs_ClientUIOpenedByObjectMessage(input) {
            this.deserializeAs_ClientUIOpenedMessage.call(this, input);
            this.uid = input.readVarUhInt();
            if (this.uid < 0) {
                throw new Error("Forbidden value (" + this.uid + ") on element of ClientUIOpenedByObjectMessage.uid.");
            }
        }
    }
    class ProtocolRequired extends NetworkMessage {
        constructor(_super) {
            super()
            this.version = "";
            this.ID = 610;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.version = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ProtocolRequired(output);
        }

        deserialize(input) {
            this.deserializeAs_ProtocolRequired(input);
        }

        serializeAs_ProtocolRequired(ouput) {
            output.writeUTF(this.version);
        }

        deserializeAs_ProtocolRequired(input) {
            this.version = input.readUTF();
        }
    }
    class LoginQueueStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.position = 0;
            this.total = 0;
            this.ID = 5436;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.position = 0;
            this.total = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_LoginQueueStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_LoginQueueStatusMessage(input);
        }

        serializeAs_LoginQueueStatusMessage(ouput) {
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element position.");
            }
            output.writeShort(this.position);
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element total.");
            }
            output.writeShort(this.total);
        }

        deserializeAs_LoginQueueStatusMessage(input) {
            this.position = input.readUnsignedShort();
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element of LoginQueueStatusMessage.position.");
            }
            this.total = input.readUnsignedShort();
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element of LoginQueueStatusMessage.total.");
            }
        }
    }
    class QueueStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.position = 0;
            this.total = 0;
            this.ID = 5491;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.position = 0;
            this.total = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_QueueStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_QueueStatusMessage(input);
        }

        serializeAs_QueueStatusMessage(ouput) {
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element position.");
            }
            output.writeShort(this.position);
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element total.");
            }
            output.writeShort(this.total);
        }

        deserializeAs_QueueStatusMessage(input) {
            this.position = input.readUnsignedShort();
            if (this.position < 0 || this.position > 65535) {
                throw new Error("Forbidden value (" + this.position + ") on element of QueueStatusMessage.position.");
            }
            this.total = input.readUnsignedShort();
            if (this.total < 0 || this.total > 65535) {
                throw new Error("Forbidden value (" + this.total + ") on element of QueueStatusMessage.total.");
            }
        }
    }
    class TrustStatusMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.certified = false;
            this.ID = 9399;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.certified = false;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_TrustStatusMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_TrustStatusMessage(input);
        }

        serializeAs_TrustStatusMessage(ouput) {
            output.writeBoolean(this.certified);
        }

        deserializeAs_TrustStatusMessage(input) {
            this.certified = input.readBoolean();
        }
    }
    class CheckFileMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.filenameHash = "";
            this.type = 0;
            this.value = "";
            this.ID = 1300;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.filenameHash = "";
            this.type = 0;
            this.value = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CheckFileMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CheckFileMessage(input);
        }

        serializeAs_CheckFileMessage(ouput) {
            output.writeUTF(this.filenameHash);
            output.writeByte(this.type);
            output.writeUTF(this.value);
        }

        deserializeAs_CheckFileMessage(input) {
            this.filenameHash = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CheckFileMessage.type.");
            }
            this.value = input.readUTF();
        }
    }
    class CheckFileRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.filename = "";
            this.type = 0;
            this.ID = 2483;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.filename = "";
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CheckFileRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CheckFileRequestMessage(input);
        }

        serializeAs_CheckFileRequestMessage(ouput) {
            output.writeUTF(this.filename);
            output.writeByte(this.type);
        }

        deserializeAs_CheckFileRequestMessage(input) {
            this.filename = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of CheckFileRequestMessage.type.");
            }
        }
    }
    class CheckIntegrityMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.data = [];
            this.ID = 7074;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.data = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_CheckIntegrityMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_CheckIntegrityMessage(input);
        }

        serializeAs_CheckIntegrityMessage(ouput) {
            output.writeVarInt(this.data.length);
            for (var _i1 = 0; _i1 < this.data.length; _i1++) {
                output.writeByte(this.data[_i1]);
            }
        }

        deserializeAs_CheckIntegrityMessage(input) {
            var _val1 = 0;
            var _dataLen = input.readVarInt();
            for (var _i1 = 0; _i1 < _dataLen; _i1++) {
                _val1 = input.readByte();
                this.data.push(_val1);
            }
        }
    }
    class ClientKeyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.key = "";
            this.ID = 3370;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.key = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ClientKeyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ClientKeyMessage(input);
        }

        serializeAs_ClientKeyMessage(ouput) {
            output.writeUTF(this.key);
        }

        deserializeAs_ClientKeyMessage(input) {
            this.key = input.readUTF();
        }
    }
    class RawDataMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.content = new Buffer(32);
            this.ID = 6253;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.content = new Buffer(32);
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_RawDataMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_RawDataMessage(input);
        }

        serializeAs_RawDataMessage(ouput) {
            output.writeVarInt(this.content.length);
            for (var _i1 = 0; _i1 < this.content.length; _i1++) {
                output.writeByte(this.content[_i1]);
            }
        }

        deserializeAs_RawDataMessage(input) {
            var _contentLen = input.readVarInt();
            input.readBytes(this.content, 0, _contentLen);
        }
    }
    class SystemMessageDisplayMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.hangUp = false;
            this.msgId = 0;
            this.parameters = [];
            this.ID = 3970;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.hangUp = false;
            this.msgId = 0;
            this.parameters = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_SystemMessageDisplayMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_SystemMessageDisplayMessage(input);
        }

        serializeAs_SystemMessageDisplayMessage(ouput) {
            output.writeBoolean(this.hangUp);
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element msgId.");
            }
            output.writeVarShort(this.msgId);
            output.writeShort(this.parameters.length);
            for (var _i3 = 0; _i3 < this.parameters.length; _i3++) {
                output.writeUTF(this.parameters[_i3]);
            }
        }

        deserializeAs_SystemMessageDisplayMessage(input) {
            var _val3 = null;
            this.hangUp = input.readBoolean();
            this.msgId = input.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error("Forbidden value (" + this.msgId + ") on element of SystemMessageDisplayMessage.msgId.");
            }
            var _parametersLen = input.readUnsignedShort();
            for (var _i3 = 0; _i3 < _parametersLen; _i3++) {
                _val3 = input.readUTF();
                this.parameters.push(_val3);
            }
        }
    }
    class AccountInformationsUpdateMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subscriptionEndDate = 0;
            this.ID = 9970;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subscriptionEndDate = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccountInformationsUpdateMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountInformationsUpdateMessage(input);
        }

        serializeAs_AccountInformationsUpdateMessage(ouput) {
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element subscriptionEndDate.");
            }
            output.writeDouble(this.subscriptionEndDate);
        }

        deserializeAs_AccountInformationsUpdateMessage(input) {
            this.subscriptionEndDate = input.readDouble();
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9007199254740992) {
                throw new Error("Forbidden value (" + this.subscriptionEndDate + ") on element of AccountInformationsUpdateMessage.subscriptionEndDate.");
            }
        }
    }
    class AccountSubscriptionElapsedDurationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.subscriptionElapsedDuration = 0;
            this.ID = 667;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.subscriptionElapsedDuration = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_AccountSubscriptionElapsedDurationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_AccountSubscriptionElapsedDurationMessage(input);
        }

        serializeAs_AccountSubscriptionElapsedDurationMessage(ouput) {
            if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740992) {
                throw new Error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element subscriptionElapsedDuration.");
            }
            output.writeDouble(this.subscriptionElapsedDuration);
        }

        deserializeAs_AccountSubscriptionElapsedDurationMessage(input) {
            this.subscriptionElapsedDuration = input.readDouble();
            if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9007199254740992) {
                throw new Error("Forbidden value (" + this.subscriptionElapsedDuration + ") on element of AccountSubscriptionElapsedDurationMessage.subscriptionElapsedDuration.");
            }
        }
    }
    class HaapiApiKeyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.token = "";
            this.ID = 4529;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.token = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiApiKeyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiApiKeyMessage(input);
        }

        serializeAs_HaapiApiKeyMessage(ouput) {
            output.writeUTF(this.token);
        }

        deserializeAs_HaapiApiKeyMessage(input) {
            this.token = input.readUTF();
        }
    }
    class HaapiApiKeyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 1598;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiApiKeyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiApiKeyRequestMessage(input);
        }

        serializeAs_HaapiApiKeyRequestMessage(ouput) {

        }

        deserializeAs_HaapiApiKeyRequestMessage(input) {

        }
    }
    class HaapiAuthErrorMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.type = 0;
            this.ID = 8765;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiAuthErrorMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiAuthErrorMessage(input);
        }

        serializeAs_HaapiAuthErrorMessage(ouput) {
            output.writeByte(this.type);
        }

        deserializeAs_HaapiAuthErrorMessage(input) {
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of HaapiAuthErrorMessage.type.");
            }
        }
    }
    class HaapiBufferListMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.buffers = [];
            this.ID = 7406;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.buffers = [];
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiBufferListMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiBufferListMessage(input);
        }

        serializeAs_HaapiBufferListMessage(ouput) {
            output.writeShort(this.buffers.length);
            for (var _i1 = 0; _i1 < this.buffers.length; _i1++) {
                (this.buffers[_i1]).serializeAs_BufferInformation(output);
            }
        }

        deserializeAs_HaapiBufferListMessage(input) {
            var _item1 = null;
            var _buffersLen = input.readUnsignedShort();
            for (var _i1 = 0; _i1 < _buffersLen; _i1++) {
                _item1 = new BufferInformation();
                _item1.deserialize(input);
                this.buffers.push(_item1);
            }
        }
    }
    class HaapiBufferListRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4050;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiBufferListRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiBufferListRequestMessage(input);
        }

        serializeAs_HaapiBufferListRequestMessage(ouput) {

        }

        deserializeAs_HaapiBufferListRequestMessage(input) {

        }
    }
    class HaapiValidationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.action = 0;
            this.code = 0;
            this.ID = 487;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.action = 0;
            this.code = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiValidationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiValidationMessage(input);
        }

        serializeAs_HaapiValidationMessage(ouput) {
            output.writeByte(this.action);
            output.writeByte(this.code);
        }

        deserializeAs_HaapiValidationMessage(input) {
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HaapiValidationMessage.action.");
            }
            this.code = input.readByte();
            if (this.code < 0) {
                throw new Error("Forbidden value (" + this.code + ") on element of HaapiValidationMessage.code.");
            }
        }
    }
    class HaapiBuyValidationMessage extends HaapiValidationMessage {
        constructor(_super) {
            super()
            this.amount = 0;
            this.email = "";
            this.ID = 4967;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.amount = 0;
            this.email = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiBuyValidationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiBuyValidationMessage(input);
        }

        serializeAs_HaapiBuyValidationMessage(ouput) {
            this.serializeAs_HaapiValidationMessage.call(this, output);
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
            output.writeUTF(this.email);
        }

        deserializeAs_HaapiBuyValidationMessage(input) {
            this.deserializeAs_HaapiValidationMessage.call(this, input);
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element of HaapiBuyValidationMessage.amount.");
            }
            this.email = input.readUTF();
        }
    }
    class HaapiCancelBidRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.id = 0;
            this.type = 0;
            this.ID = 3692;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.id = 0;
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiCancelBidRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiCancelBidRequestMessage(input);
        }

        serializeAs_HaapiCancelBidRequestMessage(ouput) {
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element id.");
            }
            output.writeVarLong(this.id);
            output.writeByte(this.type);
        }

        deserializeAs_HaapiCancelBidRequestMessage(input) {
            this.id = input.readVarUhLong();
            if (this.id < 0 || this.id > 9007199254740992) {
                throw new Error("Forbidden value (" + this.id + ") on element of HaapiCancelBidRequestMessage.id.");
            }
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of HaapiCancelBidRequestMessage.type.");
            }
        }
    }
    class HaapiConfirmationMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kamas = 0;
            this.amount = 0;
            this.rate = 0;
            this.action = 0;
            this.transaction = "";
            this.ID = 7136;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kamas = 0;
            this.amount = 0;
            this.rate = 0;
            this.action = 0;
            this.transaction = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiConfirmationMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiConfirmationMessage(input);
        }

        serializeAs_HaapiConfirmationMessage(ouput) {
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element amount.");
            }
            output.writeVarLong(this.amount);
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element rate.");
            }
            output.writeVarShort(this.rate);
            output.writeByte(this.action);
            output.writeUTF(this.transaction);
        }

        deserializeAs_HaapiConfirmationMessage(input) {
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of HaapiConfirmationMessage.kamas.");
            }
            this.amount = input.readVarUhLong();
            if (this.amount < 0 || this.amount > 9007199254740992) {
                throw new Error("Forbidden value (" + this.amount + ") on element of HaapiConfirmationMessage.amount.");
            }
            this.rate = input.readVarUhShort();
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element of HaapiConfirmationMessage.rate.");
            }
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HaapiConfirmationMessage.action.");
            }
            this.transaction = input.readUTF();
        }
    }
    class HaapiConfirmationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.kamas = 0;
            this.ogrines = 0;
            this.rate = 0;
            this.action = 0;
            this.ID = 4525;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.kamas = 0;
            this.ogrines = 0;
            this.rate = 0;
            this.action = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiConfirmationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiConfirmationRequestMessage(input);
        }

        serializeAs_HaapiConfirmationRequestMessage(ouput) {
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element kamas.");
            }
            output.writeVarLong(this.kamas);
            if (this.ogrines < 0 || this.ogrines > 9007199254740992) {
                throw new Error("Forbidden value (" + this.ogrines + ") on element ogrines.");
            }
            output.writeVarLong(this.ogrines);
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element rate.");
            }
            output.writeVarShort(this.rate);
            output.writeByte(this.action);
        }

        deserializeAs_HaapiConfirmationRequestMessage(input) {
            this.kamas = input.readVarUhLong();
            if (this.kamas < 0 || this.kamas > 9007199254740992) {
                throw new Error("Forbidden value (" + this.kamas + ") on element of HaapiConfirmationRequestMessage.kamas.");
            }
            this.ogrines = input.readVarUhLong();
            if (this.ogrines < 0 || this.ogrines > 9007199254740992) {
                throw new Error("Forbidden value (" + this.ogrines + ") on element of HaapiConfirmationRequestMessage.ogrines.");
            }
            this.rate = input.readVarUhShort();
            if (this.rate < 0) {
                throw new Error("Forbidden value (" + this.rate + ") on element of HaapiConfirmationRequestMessage.rate.");
            }
            this.action = input.readByte();
            if (this.action < 0) {
                throw new Error("Forbidden value (" + this.action + ") on element of HaapiConfirmationRequestMessage.action.");
            }
        }
    }
    class HaapiConsumeBufferRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 4843;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiConsumeBufferRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiConsumeBufferRequestMessage(input);
        }

        serializeAs_HaapiConsumeBufferRequestMessage(ouput) {

        }

        deserializeAs_HaapiConsumeBufferRequestMessage(input) {

        }
    }
    class HaapiSessionMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.key = "";
            this.type = 0;
            this.ID = 4839;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.key = "";
            this.type = 0;
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiSessionMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiSessionMessage(input);
        }

        serializeAs_HaapiSessionMessage(ouput) {
            output.writeUTF(this.key);
            output.writeByte(this.type);
        }

        deserializeAs_HaapiSessionMessage(input) {
            this.key = input.readUTF();
            this.type = input.readByte();
            if (this.type < 0) {
                throw new Error("Forbidden value (" + this.type + ") on element of HaapiSessionMessage.type.");
            }
        }
    }
    class HaapiShopApiKeyMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.token = "";
            this.ID = 7531;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.token = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiShopApiKeyMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiShopApiKeyMessage(input);
        }

        serializeAs_HaapiShopApiKeyMessage(ouput) {
            output.writeUTF(this.token);
        }

        deserializeAs_HaapiShopApiKeyMessage(input) {
            this.token = input.readUTF();
        }
    }
    class HaapiShopApiKeyRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 9680;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiShopApiKeyRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiShopApiKeyRequestMessage(input);
        }

        serializeAs_HaapiShopApiKeyRequestMessage(ouput) {

        }

        deserializeAs_HaapiShopApiKeyRequestMessage(input) {

        }
    }
    class HaapiTokenMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.token = "";
            this.ID = 4755;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.token = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiTokenMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiTokenMessage(input);
        }

        serializeAs_HaapiTokenMessage(ouput) {
            output.writeUTF(this.token);
        }

        deserializeAs_HaapiTokenMessage(input) {
            this.token = input.readUTF();
        }
    }
    class HaapiTokenRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()

            this.ID = 6608;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiTokenRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiTokenRequestMessage(input);
        }

        serializeAs_HaapiTokenRequestMessage(ouput) {

        }

        deserializeAs_HaapiTokenRequestMessage(input) {

        }
    }
    class HaapiValidationRequestMessage extends NetworkMessage {
        constructor(_super) {
            super()
            this.transaction = "";
            this.ID = 4480;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {
            this.transaction = "";
        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_HaapiValidationRequestMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_HaapiValidationRequestMessage(input);
        }

        serializeAs_HaapiValidationRequestMessage(ouput) {
            output.writeUTF(this.transaction);
        }

        deserializeAs_HaapiValidationRequestMessage(input) {
            this.transaction = input.readUTF();
        }
    }
    class ClientYouAreDrunkMessage extends DebugInClientMessage {
        constructor(_super) {
            super()

            this.ID = 2273;
        }

        getMessageId() {
            return this.ID;
        }

        reset() {

        }

        unpack(param1, param2) {
            this.deserialize(param1);
        }

        pack(param) {
            var loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param, this.getMessageId(), loc2);
        }

        serialize(output) {
            this.serializeAs_ClientYouAreDrunkMessage(output);
        }

        deserialize(input) {
            this.deserializeAs_ClientYouAreDrunkMessage(input);
        }

        serializeAs_ClientYouAreDrunkMessage(ouput) {
            this.serializeAs_DebugInClientMessage.call(this, output);
        }

        deserializeAs_ClientYouAreDrunkMessage(input) {
            this.deserializeAs_DebugInClientMessage.call(this, input);
        }
    }
})(Protocol || (Protocol = {}));
module.exports = Protocol